@using Kore.Plugins.Ecommerce.Simple
@using Kore.Web.Mvc

@model StoreSettings

<div id="settings-content">
    <div class="form-group">
        @Html.LabelFor(m => m.PageTitle, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.PageTitle, new { @class = "form-control", data_bind = "value: pageTitle" })
        @Html.ValidationMessageFor(m => m.PageTitle)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Currency, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.Currency, new { @class = "form-control", data_bind = "value: currency" })
        @Html.ValidationMessageFor(m => m.Currency)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ShippingFlatRate, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.ShippingFlatRate, new { @class = "form-control", data_bind = "value: shippingFlatRate" })
        @Html.ValidationMessageFor(m => m.ShippingFlatRate)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.CategoriesPerPage, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.CategoriesPerPage, new { @class = "form-control", data_bind = "value: categoriesPerPage" })
        @Html.ValidationMessageFor(m => m.CategoriesPerPage)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ProductsPerPage, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.ProductsPerPage, new { @class = "form-control", data_bind = "value: productsPerPage" })
        @Html.ValidationMessageFor(m => m.ProductsPerPage)
    </div>
    <div class="form-group">
        <div class="checkbox">
            <label>
                @Html.CheckBoxFor(m => m.ShowOnMenus, new { data_bind = "checked: showOnMenus" }) @T(LocalizableStrings.Settings.Store.ShowOnMenus)
            </label>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.MenuPosition, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.MenuPosition, new { @class = "form-control", data_bind = "value: menuPosition" })
        @Html.ValidationMessageFor(m => m.MenuPosition)
    </div>
    @*<div class="form-group">
        <div class="checkbox">
            <label>
                @Html.CheckBoxFor(m => m.UseAjax, new { data_bind = "checked: useAjax" }) @T(LocalizableStrings.Settings.Store.UseAjax)
            </label>
        </div>
    </div>*@
    <div class="form-group">
        @Html.LabelFor(m => m.LayoutPathOverride, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.LayoutPathOverride, new { @class = "form-control", data_bind = "value: layoutPathOverride" })
        @Html.ValidationMessageFor(m => m.LayoutPathOverride)
    </div>
</div>

<script type="text/javascript">
    function updateModel(data) {
        viewModel.pageTitle = ko.observable("Store");
        viewModel.currency = ko.observable("USD $");
        viewModel.shippingFlatRate = ko.observable(0);
        viewModel.categoriesPerPage = ko.observable(10);
        viewModel.productsPerPage = ko.observable(25);
        viewModel.showOnMenus = ko.observable(true);
        viewModel.menuPosition = ko.observable(0);
        viewModel.useAjax = ko.observable(false);
        viewModel.layoutPathOverride = ko.observable(null);

        if (data) {
            if (data.PageTitle) {
                viewModel.pageTitle(data.PageTitle);
            }
            if (data.Currency) {
                viewModel.currency(data.Currency);
            }
            if (data.ShippingFlatRate) {
                viewModel.shippingFlatRate(data.ShippingFlatRate);
            }
            if (data.CategoriesPerPage) {
                viewModel.categoriesPerPage(data.CategoriesPerPage);
            }
            if (data.ProductsPerPage) {
                viewModel.productsPerPage(data.ProductsPerPage);
            }
            if (data.ShowOnMenus && typeof data.ShowOnMenus === 'boolean') {
                viewModel.showOnMenus(data.ShowOnMenus);
            }
            if (data.MenuPosition) {
                viewModel.menuPosition(data.MenuPosition);
            }
            if (data.UseAjax && typeof data.UseAjax === 'boolean') {
                viewModel.useAjax(data.UseAjax);
            }
            if (data.LayoutPathOverride) {
                viewModel.layoutPathOverride(data.LayoutPathOverride);
            }
        }
    };

    function cleanUp() {
        delete viewModel.pageTitle;
        delete viewModel.currency;
        delete viewModel.shippingFlatRate;
        delete viewModel.categoriesPerPage;
        delete viewModel.productsPerPage;
        delete viewModel.showOnMenus;
        delete viewModel.menuPosition;
        delete viewModel.useAjax;
        delete viewModel.layoutPathOverride;
    }

    function onBeforeSave() {
        var data = {
            PageTitle: viewModel.pageTitle(),
            Currency: viewModel.currency(),
            ShippingFlatRate: viewModel.shippingFlatRate(),
            CategoriesPerPage: viewModel.categoriesPerPage(),
            ProductsPerPage: viewModel.productsPerPage(),
            ShowOnMenus: viewModel.showOnMenus(),
            MenuPosition: viewModel.menuPosition(),
            UseAjax: viewModel.useAjax(),
            LayoutPathOverride: viewModel.layoutPathOverride()
        };

        viewModel.value(ko.mapping.toJSON(data));
    };
</script>