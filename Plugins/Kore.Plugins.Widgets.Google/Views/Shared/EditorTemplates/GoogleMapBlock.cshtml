@using Kore.Web.ContentManagement

@model Kore.Plugins.Widgets.Google.ContentBlocks.GoogleMapBlock

<div id="block-content">
    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.Latitude, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                @Html.TextBoxFor(m => m.Latitude, new { @class = "form-control", data_bind = "value: blockModel.latitude" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Longitude, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                @Html.TextBoxFor(m => m.Longitude, new { @class = "form-control", data_bind = "value: blockModel.longitude" })
            </div>
        </div>
    </div>
    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.Zoom, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                @Html.TextBoxFor(m => m.Zoom, new { type = "number", @class = "form-control", data_bind = "value: blockModel.zoom" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Height, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                @Html.TextBoxFor(m => m.Height, new { type = "number", @class = "form-control", data_bind = "value: blockModel.height" })
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function (blockModel) {
            blockModel.latitude = ko.observable(0);
            blockModel.longitude = ko.observable(0);
            blockModel.zoom = ko.observable(0);
            blockModel.height = ko.observable(0);

            var data = ko.mapping.fromJSON(blockModel.blockValues());

            if ((isFunction(data) && data()) || data) {
                if (data.Latitude == undefined) {
                    // If this is not set, it means the contentBlock is new and we have nothing in blockValues
                    return;
                }
                if (data.Latitude) {
                    blockModel.latitude(data.Latitude());
                }
                if (data.Longitude) {
                    blockModel.longitude(data.Longitude());
                }
                if (data.Zoom) {
                    blockModel.zoom(data.Zoom());
                }
                if (data.Height) {
                    blockModel.height(data.Height());
                }
            }
        };
        f.cleanUp = function (blockModel) {
            delete blockModel.latitude;
            delete blockModel.longitude;
            delete blockModel.zoom;
            delete blockModel.height;
        };
        f.onBeforeSave = function (blockModel) {
            var data = {
                Latitude: blockModel.latitude(),
                Longitude: blockModel.longitude(),
                Zoom: blockModel.zoom(),
                Height: blockModel.height()
            };

            blockModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>