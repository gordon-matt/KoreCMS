<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PhpNetMbstring</name>
    </assembly>
    <members>
        <member name="T:PHP.Library.Strings.MbstringLocalConfig">
            <summary>
            Script independent mbstring configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Strings.MbstringLocalConfig.DeepCopy">
            <summary>
            Creates a deep copy of the configuration record.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="M:PHP.Library.Strings.MbstringLocalConfig.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML.
            </summary>
        </member>
        <member name="T:PHP.Library.Strings.MbstringGlobalConfig">
            <summary>
            Script dependent MSSQL configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Strings.MbstringGlobalConfig.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Strings.MbstringGlobalConfig.DeepCopy">
            <summary>
            Creates a deep copy of the configuration record.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="T:PHP.Library.Strings.MbstringConfiguration">
            <summary>
            mbstring extension configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Strings.MbstringConfiguration.GetSetRestore(PHP.Core.LocalConfiguration,System.String,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets, or restores a value of a legacy configuration option.
            </summary>
        </member>
        <member name="M:PHP.Library.Strings.MbstringConfiguration.LegacyOptionsToXml(System.Xml.XmlTextWriter,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Writes MySql legacy options and their values to XML text stream.
            Skips options whose values are the same as default values of Phalanger.
            </summary>
            <param name="writer">XML writer.</param>
            <param name="options">A hashtable containing PHP names and option values. Consumed options are removed from the table.</param>
            <param name="writePhpNames">Whether to add "phpName" attribute to option nodes.</param>
        </member>
        <member name="M:PHP.Library.Strings.MbstringConfiguration.RegisterLegacyOptions">
            <summary>
            Registers legacy ini-options.
            </summary>
        </member>
        <member name="M:PHP.Library.Strings.MbstringConfiguration.GetLocal(PHP.Core.ScriptContext)">
            <summary>
            Gets local configuration associated with a specified script context.
            </summary>
            <param name="context">Scritp context.</param>
            <returns>Local library configuration.</returns>
        </member>
        <member name="P:PHP.Library.Strings.MbstringConfiguration.Local">
            <summary>
            Gets the library configuration associated with the current script context.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.MbstringConfiguration.DefaultLocal">
            <summary>
            Gets the default library configuration.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.MbstringConfiguration.Global">
            <summary>
            Gets the global library configuration.
            </summary>
        </member>
        <member name="T:PHP.Library.Strings.MbstringLibraryDescriptor">
            <summary>
            Describes the class library assembly content and configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Strings.MbstringLibraryDescriptor.Loaded(PHP.Core.PhpLibraryAttribute,PHP.Core.LibraryConfigStore)">
            <summary>
            Called by the Core after the library is loaded.
            </summary>
        </member>
        <member name="M:PHP.Library.Strings.MbstringLibraryDescriptor.ParseConfig(PHP.Core.ConfigContextBase,PHP.Core.PhpConfigurationContext,System.Xml.XmlNode)">
            <summary>
            Parses a configuration section belonging to the MSSQL library. 
            </summary>
            <param name="result">A configuration context.</param>
            <param name="context">The context of the configuration created by Phalanger Core.</param>
            <param name="section">A XML node containing the configuration or its part.</param>
            <returns>Updated configuration context.</returns>
        </member>
        <member name="M:PHP.Library.Strings.MbstringLibraryDescriptor.CreateConfigContext">
            <summary>
            Creates empty library configuration context.
            </summary>
            <returns>An initialized configuration context. Should not be a <B>null</B> reference.</returns>
        </member>
        <member name="P:PHP.Library.Strings.MbstringLibraryDescriptor.Singleton">
            <summary>
            Stores one and only instance of the class that is created when the assembly is loaded.
            </summary>
        </member>
        <member name="T:PHP.Library.Strings.MultiByteString">
            <summary>
            Implements PHP functions provided by multi-byte-string extension.
            </summary>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.GetEncoding(System.String)">
            <summary>
            Get encoding based on the PHP name. Can return null is such encoding is not defined.
            </summary>
            <param name="encodingName"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.ObjectToString(System.Object,PHP.Library.Strings.MultiByteString.getEncoding)">
            <summary>
            Converts PhpBytes using specified encoding. If any other object is provided, encoding is not performed.
            </summary>
            <param name="str"></param>
            <param name="encodingGetter"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.GetInternalEncoding">
            <summary>
            Get encoding used by default in the extension.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.SetInternalEncoding(System.String)">
            <summary>
            Set the encoding used by the extension.
            </summary>
            <param name="encodingName"></param>
            <returns>True is encoding was set, otherwise false.</returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.GetPreferredMimeName(System.String)">
            <summary>
            Get a MIME charset string for a specific encoding. 
            </summary>
            <param name="encoding_name">The encoding being checked. Its WebName or PHP/Phalanger name.</param>
            <returns>The MIME charset string for given character encoding.</returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.GetRegexEncoding">
            <summary>
            Get encoding used by regex in the extension.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.SetRegexEncoding(System.String)">
            <summary>
            Set the encoding used by the extension in regex functions.
            </summary>
            <param name="encodingName"></param>
            <returns>True is encoding was set, otherwise false.</returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.OptionEnabled(PHP.Library.Strings.MultiByteString.RegexOptions)">
            <summary>
            Determines if given combination of options is enabled.
            </summary>
            <param name="opt">Option or mask of options to test.</param>
            <returns>True if given option mask is enabled.</returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.OptionEnabled(PHP.Library.Strings.MultiByteString.RegexSyntaxModes)">
            <summary>
            Determines if given syntax mode is set.
            </summary>
            <param name="opt">Syntax mode to test.</param>
            <returns>True if given syntax mode is enabled.</returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.GetRegexOptions">
            <summary>
            Get currently set regex options.
            </summary>
            <returns>Option string.</returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.SetRegexOptions(System.String)">
            <summary>
            Set new regex options.
            </summary>
            <param name="options">Option string.</param>
            <returns>New option string.</returns>
            <remarks>
            Regex options:
            Option  Meaning
            i 	    Ambiguity match on
            x 	    Enables extended pattern form
            m 	    '.' matches with newlines
            s 	    '^' -> '\A', '$' -> '\Z'
            p 	    Same as both the m and s options
            l 	    Finds longest matches
            n 	    Ignores empty matches
            e 	    eval() resulting code
            
            Regex syntax modes:
            Mode 	Meaning
            j 	    (not supported) Java (Sun java.util.regex)
            u 	    (not supported) GNU regex
            g 	    (not supported) grep
            c 	    (not supported) Emacs
            r 	    (not supported) Ruby
            z 	    (not supported) Perl
            b 	    (not supported) POSIX Basic regex
            d 	    POSIX Extended regex
            </remarks>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.CharWidth(System.Char)">
            <summary>
            Determines the char width.
            </summary>
            <param name="c">Character.</param>
            <returns>The width of the character.</returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.StringTrimByWidth(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="width">Characters remaining.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.StringWidth(System.Object,System.String)">
            <summary>
            The string width. Not the string length.
             Multi-byte characters are usually twice the width of single byte characters.
            </summary>
            <param name="str">The string being decoded. </param>
            <param name="encoding">The encoding parameter is the character encoding in case of PhpBytes is used. If it is omitted, the internal character encoding value will be used.</param>
            <returns>The width of string str.</returns>
            <remarks>
            Chars 	            Width
            U+0000 - U+0019 	0
            U+0020 - U+1FFF 	1
            U+2000 - U+FF60 	2
            U+FF61 - U+FF9F 	1
            U+FFA0 - 	        2
            </remarks>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.StrStr(System.Object,System.Object,System.Boolean,PHP.Library.Strings.MultiByteString.getEncoding,System.Boolean)">
            <summary>
            mb_strstr() finds the first occurrence of needle in haystack  and returns the portion of haystack. If needle is not found, it returns FALSE. 
            </summary>
            <param name="haystack">The string from which to get the first occurrence of needle</param>
            <param name="needle">The string to find in haystack</param>
            <param name="part">Determines which portion of haystack  this function returns. If set to TRUE, it returns all of haystack  from the beginning to the first occurrence of needle. If set to FALSE, it returns all of haystack  from the first occurrence of needle to the end.</param>
            <param name="encodingGetter">Character encoding name to use. If it is omitted, internal character encoding is used. </param>
            <param name="ignoreCase">Case insensitive.</param>
            <returns>Returns the portion of haystack, or FALSE (-1) if needle is not found.</returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.Strpos(System.Object,System.Object,System.Int32,PHP.Library.Strings.MultiByteString.getEncoding,System.Boolean)">
            <summary>
            Implementation of <c>mb_str[i]pos</c> functions.
            </summary>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.Strrpos(System.Object,System.Object,System.Int32,PHP.Library.Strings.MultiByteString.getEncoding,System.Boolean)">
            <summary>
            Implementation of <c>mb_strr[i]pos</c> functions.
            </summary>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.StrLen(System.Object,PHP.Library.Strings.MultiByteString.getEncoding)">
            <summary>
            Counts characters in a Unicode string or multi-byte string in PhpBytes.
            </summary>
            <param name="str">String or PhpBytes to use.</param>
            <param name="encodingGetter">Encoding used to encode PhpBytes</param>
            <returns>Number of unicode characters in given object.</returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.GetMailLanguage">
            <summary>
            Get language used by mail functions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.SetMailLanguage(System.String)">
            <summary>
            Set the language used by mail functions.
            </summary>
            <param name="language"></param>
            <returns>True if language was set, otherwise false.</returns>
        </member>
        <member name="M:PHP.Library.Strings.MultiByteString.ParseUrlEncodedGetParameters(System.String)">
            <summary>
            Decodes URL encoded string and parses GET parameters.
            </summary>
            <param name="getParams">URL encoded GET parameters string.</param>
            <returns>Enumerator of decoded and parsed GET parameters as pairs of (name, value).</returns>
        </member>
        <member name="P:PHP.Library.Strings.MultiByteString.InternalEncoding">
            <summary>
            Multi Byte String Internal Encoding.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.MultiByteString.InternalEncodingName">
            <summary>
            Multi Byte String Internal Encoding IANA name.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.MultiByteString.RegexEncoding">
            <summary>
            Multi Byte String Internal Encoding.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.MultiByteString.RegexEncodingName">
            <summary>
            Multi Byte String regex Encoding IANA name.
            </summary>
        </member>
        <member name="F:PHP.Library.Strings.MultiByteString.RegexOptions.AmbiguityMatch">
            <summary>
            i
            </summary>
        </member>
        <member name="F:PHP.Library.Strings.MultiByteString.RegexOptions.ExtendedPatternForm">
            <summary>
            x
            </summary>
        </member>
        <member name="F:PHP.Library.Strings.MultiByteString.RegexOptions.DotMatchesNewLine">
            <summary>
            m
            </summary>
        </member>
        <member name="F:PHP.Library.Strings.MultiByteString.RegexOptions.ConvertMatchBeginEnd">
            <summary>
            s
            </summary>
        </member>
        <member name="F:PHP.Library.Strings.MultiByteString.RegexOptions.FindLongestMatch">
            <summary>
            l
            </summary>
        </member>
        <member name="F:PHP.Library.Strings.MultiByteString.RegexOptions.IgnoreEmptyMatch">
            <summary>
            n
            </summary>
        </member>
        <member name="F:PHP.Library.Strings.MultiByteString.RegexOptions.EvalResultingCode">
            <summary>
            e
            </summary>
        </member>
        <member name="F:PHP.Library.Strings.MultiByteString.RegexSyntaxModes.POSIXExtendedRegex">
            <summary>
            d
            </summary>
        </member>
    </members>
</doc>
