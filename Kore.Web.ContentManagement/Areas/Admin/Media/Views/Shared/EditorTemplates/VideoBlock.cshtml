@model Kore.Web.ContentManagement.Areas.Admin.Media.ContentBlocks.VideoBlock

<div id="block-content">
    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.Type, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                @Html.EnumDropDownListFor(m => m.Type, new { @class = "form-control", data_bind = "value: blockModel.type" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ControlId, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                @Html.TextBoxFor(m => m.ControlId, new { @class = "form-control", data_bind = "value: blockModel.controlId" })
            </div>
        </div>
    </div>
    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.Source, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                <div class="input-group">
                    @Html.TextBoxFor(m => m.Source, new { @class = "form-control", data_bind = "value: blockModel.source" })
                    <span class="input-group-addon">
                        <a data-toggle="modal" href="javascript:void(0);" data-target="#myModal">
                            <i class="kore-icon kore-icon-search"></i>
                        </a>
                    </span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m.ShowControls, new { data_bind = "checked: blockModel.showControls" }) @T(KoreCmsLocalizableStrings.ContentBlocks.VideoBlock.ShowControls)
                    </label>
                </div>
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m.AutoPlay, new { data_bind = "checked: blockModel.autoPlay" }) @T(KoreCmsLocalizableStrings.ContentBlocks.VideoBlock.AutoPlay)
                    </label>
                </div>
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m.Loop, new { data_bind = "checked: blockModel.loop" }) @T(KoreCmsLocalizableStrings.ContentBlocks.VideoBlock.Loop)
                    </label>
                </div>
            </div>
        </div>
    </div>

    <style type="text/css">
        .modal-dialog {
            width: 80% !important;
        }
    </style>

    <div class="modal fade" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" onclick="dismissModal();" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Select Video</h4>
                </div>
                <div class="modal-body">
                    <iframe src="/filemanager/dialog.php?type=3&relative_url=1&fldr=&field_id=Source&ignore_last_position=1" frameborder="0" style="overflow:hidden;min-height:600px; height:100%;width:100%" height="100%" width="100%"></iframe>
                </div>
            </div>
        </div>
    </div>

</div>

<script type="text/javascript">
    var modalDismissed = false;

    function dismissModal() {
        modalDismissed = true;
        $('#myModal').modal('hide');
    };

    $('#myModal').on('hidden.bs.modal', function () {
        if (!modalDismissed) {
            var url = $('#Source').val();
            url = "/Media/Uploads/" + url;
            viewModel.blockModel.source(url);
        }
        modalDismissed = false;
    });
    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function () {
            viewModel.blockModel.controlId = ko.observable(null);
            viewModel.blockModel.type = ko.observable(0);
            viewModel.blockModel.source = ko.observable(null);
            viewModel.blockModel.showControls = ko.observable(true);
            viewModel.blockModel.autoPlay = ko.observable(false);
            viewModel.blockModel.loop = ko.observable(false);

            var data = ko.mapping.fromJSON(viewModel.blockModel.blockValues());

            if (data) {
                if (data.ControlId) {
                    viewModel.blockModel.controlId(data.ControlId());
                }
                if (data.Type) {
                    viewModel.blockModel.type(data.Type());
                }
                if (data.Source) {
                    viewModel.blockModel.source(data.Source());
                }
                if (data.ShowControls && typeof data.ShowControls() === 'boolean') {
                    viewModel.blockModel.showControls(data.ShowControls());
                }
                if (data.AutoPlay && typeof data.AutoPlay() === 'boolean') {
                    viewModel.blockModel.autoPlay(data.AutoPlay());
                }
                if (data.Loop && typeof data.Loop() === 'boolean') {
                    viewModel.blockModel.loop(data.Loop());
                }
            }
        };
        f.cleanUp = function () {
            delete viewModel.blockModel.controlId;
            delete viewModel.blockModel.type;
            delete viewModel.blockModel.source;
            delete viewModel.blockModel.showControls;
            delete viewModel.blockModel.autoPlay;
            delete viewModel.blockModel.loop;
        };
        f.onBeforeSave = function () {
            var data = {
                ControlId: viewModel.blockModel.controlId(),
                Type: viewModel.blockModel.type(),
                Source: viewModel.blockModel.source(),
                ShowControls: viewModel.blockModel.showControls(),
                AutoPlay: viewModel.blockModel.autoPlay(),
                Loop: viewModel.blockModel.loop()
            };

            viewModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>