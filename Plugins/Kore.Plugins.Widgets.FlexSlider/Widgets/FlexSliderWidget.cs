using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Web.Mvc;
using Kore.Web.ContentManagement.Areas.Admin.Widgets;

namespace Kore.Plugins.Widgets.FlexSlider.Widgets
{
    public class FlexSliderWidget : WidgetBase
    {
        public FlexSliderWidget()
        {
            Animation = AnimationType.Fade;
            Easing = EasingMethod.swing;
            Direction = SlideDirection.Horizontal;
            AnimationLoop = true;
            Slideshow = true;
            SlideshowSpeed = 7000;
            AnimationSpeed = 600;
            PauseOnAction = true;
            UseCSS = true;
            Touch = true;
            ControlNav = ControlNavOption.True;
            DirectionNav = true;
            PrevText = "Previous";
            NextText = "Next";
            Keyboard = true;
            PauseText = "Pause";
            PlayText = "Play";
        }

        #region General

        [Display(Name = "Media Folder")]
        public string MediaFolder { get; set; }

        [Display(Name = "Control ID")]
        public string ControlId { get; set; }

        /// <summary>
        /// Prefix string attached to the classes of all elements generated by the plugin.
        /// </summary>
        public string Namespace { get; set; }

        /// <summary>
        /// Selector Must match a simple pattern. '{container} > {slide}'
        /// </summary>
        public string Selector { get; set; }

        /// <summary>
        /// The starting slide for the slider, in array notation.
        /// </summary>
        public short StartAt { get; set; }

        /// <summary>
        /// Setup a slideshow for the slider to animate automatically.
        /// </summary>
        public bool Slideshow { get; set; }

        /// <summary>
        /// Set the speed of the slideshow cycling, in milliseconds.
        /// </summary>
        [Display(Name = "Slideshow Speed")]
        public int SlideshowSpeed { get; set; }

        /// <summary>
        /// Set an initialization delay, in milliseconds.
        /// </summary>
        [Display(Name = "Initialization Delay")]
        public int InitDelay { get; set; }

        /// <summary>
        /// Randomize slide order, on load.
        /// </summary>
        public bool Randomize { get; set; }

        /// <summary>
        /// Pause the slideshow when interacting with control elements.
        /// </summary>
        [Display(Name = "Pause On Action")]
        public bool PauseOnAction { get; set; }

        /// <summary>
        /// Pause the slideshow when hovering over slider, then resume when no longer hovering.
        /// </summary>
        [Display(Name = "Pause On Hover")]
        public bool PauseOnHover { get; set; }

        /// <summary>
        /// Allow touch swipe navigation of the slider on enabled devices.
        /// </summary>
        public bool Touch { get; set; }

        /// <summary>
        /// Will prevent use of CSS3 3D Transforms, avoiding graphical glitches.
        /// </summary>
        public bool Video { get; set; }

        /// <summary>
        /// Mirror the actions performed on this slider with another slider.
        /// </summary>
        public string Sync { get; set; }

        /// <summary>
        /// Turn the slider into a thumbnail navigation for another slider.
        /// </summary>
        public string AsNavFor { get; set; }

        /// <summary>
        /// Box-model width of individual carousel items, including horizontal borders and padding.
        /// </summary>
        public int ItemWidth { get; set; }

        /// <summary>
        /// Margin between carousel items.
        /// </summary>
        public int ItemMargin { get; set; }

        /// <summary>
        /// Minimum number of carousel items that should be visible.
        /// </summary>
        public int MinItems { get; set; }

        /// <summary>
        /// Maximum number of carousel items that should be visible.
        /// </summary>
        public int MaxItems { get; set; }

        #endregion General

        #region Animation

        /// <summary>
        /// Controls the animation type, "fade" or "slide".
        /// </summary>
        public AnimationType Animation { get; set; }

        /// <summary>
        /// Set the speed of animations, in milliseconds.
        /// </summary>
        [Display(Name = "Animation Speed")]
        public int AnimationSpeed { get; set; }

        /// <summary>
        /// Controls the animation direction, "horizontal" or "vertical"
        /// </summary>
        public SlideDirection Direction { get; set; }

        /// <summary>
        /// Reverse the animation direction.
        /// </summary>
        public bool Reverse { get; set; }

        /// <summary>
        /// Number of carousel items that should move on animation.
        /// </summary>
        public byte Move { get; set; }

        /// <summary>
        /// Gives the slider a seamless infinite loop
        /// </summary>
        [Display(Name = "Animation Loop")]
        public bool AnimationLoop { get; set; }

        /// <summary>
        /// Animate the height of the slider smoothly for slides of varying height.
        /// </summary>
        [Display(Name = "Smooth Height")]
        public bool SmoothHeight { get; set; }

        /// <summary>
        /// Determines the easing method used in jQuery transitions.
        /// </summary>
        public EasingMethod Easing { get; set; }

        /// <summary>
        /// Slider will use CSS3 transitions, if available.
        /// </summary>
        [Display(Name = "Use CSS3 Transitions")]
        public bool UseCSS { get; set; }

        #endregion Animation

        #region Navigation

        /// <summary>
        /// Create navigation for paging control of each slide.
        /// </summary>
        [Display(Name = "Control Nav")]
        public ControlNavOption ControlNav { get; set; }

        /// <summary>
        /// Create previous/next arrow navigation.
        /// </summary>
        public bool DirectionNav { get; set; }

        /// <summary>
        /// Set the text for the "previous" directionNav item.
        /// </summary>
        [Display(Name = "Previous Text")]
        public string PrevText { get; set; }

        /// <summary>
        /// Set the text for the "next" directionNav item.
        /// </summary>
        [Display(Name = "Next Text")]
        public string NextText { get; set; }

        /// <summary>
        /// Create pause/play element to control slider slideshow.
        /// </summary>
        [Display(Name = "Pause/Play")]
        public bool PausePlay { get; set; }

        /// <summary>
        /// Set the text for the "pause" pausePlay item.
        /// </summary>
        [Display(Name = "Pause Text")]
        public string PauseText { get; set; }

        /// <summary>
        /// Set the text for the "play" pausePlay item.
        /// </summary>
        [Display(Name = "Play Text")]
        public string PlayText { get; set; }

        /// <summary>
        /// Container the navigation elements should be appended to.
        /// </summary>
        [Display(Name = "Controls Container")]
        public string ControlsContainer { get; set; }

        /// <summary>
        /// Define element to be used in lieu of dynamic controlNav.
        /// </summary>
        [Display(Name = "Manual Controls")]
        public string ManualControls { get; set; }

        /// <summary>
        /// Allow slider navigating via keyboard left/right keys.
        /// </summary>
        public bool Keyboard { get; set; }

        /// <summary>
        /// Allow keyboard navigation to affect multiple sliders.
        /// </summary>
        [Display(Name = "Multiple Keyboard")]
        public bool MultipleKeyboard { get; set; }

        /// <summary>
        /// (Dependency) Allows slider navigating via mousewheel.
        /// </summary>
        public bool Mousewheel { get; set; }

        #endregion Navigation

        #region Events

        /// <summary>
        /// Fires when the slider loads the first slide.
        /// </summary>
        public string OnStart { get; set; }

        /// <summary>
        /// Fires when the slider reaches the last slide (asynchronous).
        /// </summary>
        public string OnEnd { get; set; }

        /// <summary>
        /// Fires asynchronously with each slider animation.
        /// </summary>
        public string OnBefore { get; set; }

        /// <summary>
        /// Fires after each slider animation completes.
        /// </summary>
        public string OnAfter { get; set; }

        /// <summary>
        /// Fires after a slide is added.
        /// </summary>
        public string OnAdded { get; set; }

        /// <summary>
        /// Fires after a slide is removed.
        /// </summary>
        public string OnRemoved { get; set; }

        #endregion Events

        public MvcHtmlString ToHtmlString()
        {
            var sb = new StringBuilder(512);

            sb.AppendFormat(@"$('#{0}').flexslider({{", ControlId);

            if (!string.IsNullOrWhiteSpace(Namespace))
            {
                sb.AppendFormat("namespace: '{0}',", Namespace);
            }
            if (!string.IsNullOrWhiteSpace(Selector))
            {
                sb.AppendFormat("selector: '{0}',", Selector);
            }
            if (StartAt > 0)
            {
                sb.AppendFormat("startAt: {0},", StartAt);
            }
            if (!Slideshow)
            {
                sb.Append("slideshow: false,");
            }
            if (SlideshowSpeed != 7000)
            {
                sb.AppendFormat("slideshowSpeed: {0},", SlideshowSpeed);
            }
            if (InitDelay > 0)
            {
                sb.AppendFormat("initDelay: {0},", InitDelay);
            }
            if (Randomize)
            {
                sb.Append("randomize: true,");
            }
            if (!PauseOnAction)
            {
                sb.Append("pauseOnAction: false,");
            }
            if (PauseOnHover)
            {
                sb.Append("pauseOnHover: true,");
            }
            if (!Touch)
            {
                sb.Append("touch: false,");
            }
            if (Video)
            {
                sb.Append("video: true,");
            }
            if (!string.IsNullOrWhiteSpace(Sync))
            {
                sb.AppendFormat("sync: '{0}',", Sync);
            }
            if (!string.IsNullOrWhiteSpace(AsNavFor))
            {
                sb.AppendFormat("asNavFor: '{0}',", AsNavFor);
            }
            if (ItemWidth > 0)
            {
                sb.AppendFormat("itemWidth: {0},", ItemWidth);
            }
            if (ItemMargin > 0)
            {
                sb.AppendFormat("itemMargin: {0},", ItemMargin);
            }
            if (MinItems > 0)
            {
                sb.AppendFormat("minItems: {0},", MinItems);
            }
            if (MaxItems > 0)
            {
                sb.AppendFormat("maxItems: {0},", MaxItems);
            }
            if (Animation != AnimationType.Fade)
            {
                sb.AppendFormat("animation: '{0}',", Animation.ToString().ToLowerInvariant());
            }
            if (AnimationSpeed != 600)
            {
                sb.AppendFormat("animationSpeed: {0},", AnimationSpeed);
            }
            if (Direction != SlideDirection.Horizontal)
            {
                sb.Append("direction: 'vertical',");
            }
            if (Reverse)
            {
                sb.Append("reverse: true,");
            }
            if (Move > 0)
            {
                sb.AppendFormat("move: {0},", Move);
            }
            if (!AnimationLoop)
            {
                sb.Append("animationLoop: false,");
            }
            if (SmoothHeight)
            {
                sb.Append("smoothHeight: true,");
            }
            if (Easing != EasingMethod.swing)
            {
                sb.AppendFormat("easing: '{0}',", Easing.ToString());
            }
            if (!UseCSS)
            {
                sb.Append("useCSS: false,");
            }
            if (ControlNav != ControlNavOption.True)
            {
                sb.AppendFormat("controlNav: '{0}',", ControlNav.ToString().ToLowerInvariant());
            }
            if (!DirectionNav)
            {
                sb.Append("directionNav: false,");
            }
            if (!string.IsNullOrWhiteSpace(PrevText))
            {
                sb.AppendFormat("prevText: '{0}',", PrevText);
            }
            if (!string.IsNullOrWhiteSpace(NextText))
            {
                sb.AppendFormat("nextText: '{0}',", NextText);
            }
            if (PausePlay)
            {
                sb.Append("pausePlay: true,");
            }
            if (!string.IsNullOrWhiteSpace(PauseText))
            {
                sb.AppendFormat("pauseText: '{0}',", PauseText);
            }
            if (!string.IsNullOrWhiteSpace(PlayText))
            {
                sb.AppendFormat("playText: '{0}',", PlayText);
            }
            if (!string.IsNullOrWhiteSpace(ControlsContainer))
            {
                sb.AppendFormat("controlsContainer: '{0}',", ControlsContainer);
            }
            if (!string.IsNullOrWhiteSpace(ManualControls))
            {
                sb.AppendFormat("manualControls: '{0}',", ManualControls);
            }
            if (!Keyboard)
            {
                sb.Append("keyboard: false,");
            }
            if (MultipleKeyboard)
            {
                sb.Append("multipleKeyboard: true,");
            }
            if (Mousewheel)
            {
                sb.Append("mousewheel: true,");
            }
            if (!string.IsNullOrWhiteSpace(OnStart))
            {
                sb.AppendFormat(@"start: function(slider){{'{0}'}},", OnStart);
            }
            if (!string.IsNullOrWhiteSpace(OnEnd))
            {
                sb.AppendFormat(@"end: function(slider){{'{0}'}},", OnEnd);
            }
            if (!string.IsNullOrWhiteSpace(OnBefore))
            {
                sb.AppendFormat(@"before: function(slider){{'{0}'}},", OnBefore);
            }
            if (!string.IsNullOrWhiteSpace(OnAfter))
            {
                sb.AppendFormat(@"after: function(slider){{'{0}'}},", OnAfter);
            }
            if (!string.IsNullOrWhiteSpace(OnAdded))
            {
                sb.AppendFormat(@"added: function(slider){{'{0}'}},", OnAdded);
            }
            if (!string.IsNullOrWhiteSpace(OnRemoved))
            {
                sb.AppendFormat(@"removed: function(slider){{'{0}'}},", OnRemoved);
            }

            sb.Remove(sb.Length - 1, 1); // Remove last comma

            sb.Append("});");

            return new MvcHtmlString(sb.ToString());
        }

        #region WidgetBase Overrides

        public override string Name
        {
            get { return "Flex Slider"; }
        }

        public override string DisplayTemplatePath
        {
            get { return "/Plugins/Plugins.Widgets.FlexSlider/Views/Shared/DisplayTemplates/FlexSliderWidget.cshtml"; }
        }

        public override string EditorTemplatePath
        {
            get { return "/Plugins/Plugins.Widgets.FlexSlider/Views/Shared/EditorTemplates/FlexSliderWidget.cshtml"; }
        }

        #endregion WidgetBase Overrides
    }
}