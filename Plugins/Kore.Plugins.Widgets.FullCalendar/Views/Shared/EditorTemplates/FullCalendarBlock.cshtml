@using Kore.Plugins.Widgets.FullCalendar
@using Kore.Plugins.Widgets.FullCalendar.ContentBlocks
@using Kore.Web.Mvc
@using Kore.Web.Mvc.KoreUI

@model FullCalendarBlock

<div id="block-content">
    @using (var tabs = Html.KoreUI().Begin(new Tabs()))
    {
        tabs.Tab(T(LocalizableStrings.ContentBlocks.FullCalendarBlock.EditorTabs.General), "General");
        tabs.Tab(T(LocalizableStrings.ContentBlocks.FullCalendarBlock.EditorTabs.AgendaOptions), "AgendaOptions");
        tabs.Tab(T(LocalizableStrings.ContentBlocks.FullCalendarBlock.EditorTabs.Selection), "Selection");
        tabs.Tab(T(LocalizableStrings.ContentBlocks.FullCalendarBlock.EditorTabs.EventRendering), "EventRendering");

        using (var panel = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.CalendarId, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.FullCalendar().CalendarDropDownListFor(m => m.CalendarId, new { @class = "form-control", data_bind = "value: blockModel.calendarId" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.FirstDay, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.FirstDay, new { @class = "form-control", data_bind = "value: blockModel.firstDay" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AspectRatio, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.AspectRatio, new { @class = "form-control", data_bind = "value: blockModel.aspectRatio" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("Theme", new { data_bind = "checked: blockModel.theme" }) @T(LocalizableStrings.ContentBlocks.FullCalendarBlock.Theme)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("Weekends", new { data_bind = "checked: blockModel.weekends" }) @T(LocalizableStrings.ContentBlocks.FullCalendarBlock.Weekends)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("FixedWeekCount", new { data_bind = "checked: blockModel.fixedWeekCount" }) @T(LocalizableStrings.ContentBlocks.FullCalendarBlock.FixedWeekCount)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("WeekNumbers", new { data_bind = "checked: blockModel.weekNumbers" }) @T(LocalizableStrings.ContentBlocks.FullCalendarBlock.WeekNumbers)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("HandleWindowResize", new { data_bind = "checked: blockModel.handleWindowResize" }) @T(LocalizableStrings.ContentBlocks.FullCalendarBlock.HandleWindowResize)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }
        using (var panel = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("SlotEventOverlap", new { data_bind = "checked: blockModel.slotEventOverlap" }) @T(LocalizableStrings.ContentBlocks.FullCalendarBlock.SlotEventOverlap)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("AllDaySlot", new { data_bind = "checked: blockModel.allDaySlot" }) @T(LocalizableStrings.ContentBlocks.FullCalendarBlock.AllDaySlot)
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AllDayText, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.AllDayText, new { @class = "form-control", data_bind = "value: blockModel.allDayText" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SlotDuration, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SlotDuration, new { @class = "form-control", data_bind = "value: blockModel.slotDuration" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.ScrollTime, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ScrollTime, new { @class = "form-control", data_bind = "value: blockModel.scrollTime" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.MinTime, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.MinTime, new { @class = "form-control", data_bind = "value: blockModel.minTime" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.MaxTime, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.MaxTime, new { @class = "form-control", data_bind = "value: blockModel.maxTime" })
                    </div>
                </div>
            </div>
        }
        using (var panel = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("Selectable", new { data_bind = "checked: blockModel.selectable" }) @T(LocalizableStrings.ContentBlocks.FullCalendarBlock.Selectable)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("UnselectAuto", new { data_bind = "checked: blockModel.unselectAuto" }) @T(LocalizableStrings.ContentBlocks.FullCalendarBlock.UnselectAuto)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("SelectOverlap", new { data_bind = "checked: blockModel.selectOverlap" }) @T(LocalizableStrings.ContentBlocks.FullCalendarBlock.SelectOverlap)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }
        using (var panel = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.EventColor, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.EventColor, new { @class = "form-control", data_bind = "value: blockModel.eventColor" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.EventBackgroundColor, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.EventBackgroundColor, new { @class = "form-control", data_bind = "value: blockModel.eventBackgroundColor" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.EventBorderColor, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.EventBorderColor, new { @class = "form-control", data_bind = "value: blockModel.eventBorderColor" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.EventTextColor, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.EventTextColor, new { @class = "form-control", data_bind = "value: blockModel.eventTextColor" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NextDayThreshold, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.NextDayThreshold, new { @class = "form-control", data_bind = "value: blockModel.nextDayThreshold" })
                    </div>
                </div>
            </div>
        }
    }
</div>

<script type="text/javascript">
    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function () {
            viewModel.blockModel.calendarId = ko.observable(0);
            viewModel.blockModel.firstDay = ko.observable(0);
            viewModel.blockModel.theme = ko.observable(false);
            viewModel.blockModel.weekends = ko.observable(true);
            viewModel.blockModel.fixedWeekCount = ko.observable(true);
            viewModel.blockModel.weekNumbers = ko.observable(false);
            viewModel.blockModel.aspectRatio = ko.observable(1.35);
            viewModel.blockModel.handleWindowResize = ko.observable(true);

            viewModel.blockModel.allDaySlot = ko.observable(true);
            viewModel.blockModel.allDayText = ko.observable(null);
            viewModel.blockModel.slotDuration = ko.observable('00:30:00');
            viewModel.blockModel.scrollTime = ko.observable('06:00:00');
            viewModel.blockModel.minTime = ko.observable('00:00:00');
            viewModel.blockModel.maxTime = ko.observable('24:00:00');
            viewModel.blockModel.slotEventOverlap = ko.observable(true);

            viewModel.blockModel.selectable = ko.observable(false);
            viewModel.blockModel.unselectAuto = ko.observable(true);
            viewModel.blockModel.selectOverlap = ko.observable(true);

            viewModel.blockModel.eventColor = ko.observable(null);
            viewModel.blockModel.eventBackgroundColor = ko.observable(null);
            viewModel.blockModel.eventBorderColor = ko.observable(null);
            viewModel.blockModel.eventTextColor = ko.observable(null);
            viewModel.blockModel.nextDayThreshold = ko.observable('09:00:00');

            var data = ko.mapping.fromJSON(viewModel.blockModel.blockValues());

            if (data) {
                if (data.CalendarId) {
                    viewModel.blockModel.calendarId(data.CalendarId());
                }
                if (data.FirstDay) {
                    viewModel.blockModel.firstDay(data.FirstDay());
                }
                if (data.Theme) {
                    viewModel.blockModel.theme(data.Theme());
                }
                if (data.Weekends) {
                    viewModel.blockModel.weekends(data.Weekends());
                }
                if (data.FixedWeekCount) {
                    viewModel.blockModel.fixedWeekCount(data.FixedWeekCount());
                }
                if (data.WeekNumbers) {
                    viewModel.blockModel.weekNumbers(data.WeekNumbers());
                }
                if (data.AspectRatio) {
                    viewModel.blockModel.aspectRatio(data.AspectRatio());
                }
                if (data.HandleWindowResize) {
                    viewModel.blockModel.handleWindowResize(data.HandleWindowResize());
                }

                if (data.AllDaySlot) {
                    viewModel.blockModel.allDaySlot(data.AllDaySlot());
                }
                if (data.AllDayText) {
                    viewModel.blockModel.allDayText(data.AllDayText());
                }
                if (data.SlotDuration) {
                    viewModel.blockModel.slotDuration(data.SlotDuration());
                }
                if (data.ScrollTime) {
                    viewModel.blockModel.scrollTime(data.ScrollTime());
                }
                if (data.MinTime) {
                    viewModel.blockModel.minTime(data.MinTime());
                }
                if (data.MaxTime) {
                    viewModel.blockModel.maxTime(data.MaxTime());
                }
                if (data.SlotEventOverlap) {
                    viewModel.blockModel.slotEventOverlap(data.SlotEventOverlap());
                }

                if (data.Selectable) {
                    viewModel.blockModel.selectable(data.Selectable());
                }
                if (data.UnselectAuto) {
                    viewModel.blockModel.unselectAuto(data.UnselectAuto());
                }
                if (data.SelectOverlap) {
                    viewModel.blockModel.selectOverlap(data.SelectOverlap());
                }

                if (data.EventColor) {
                    viewModel.blockModel.eventColor(data.EventColor());
                }
                if (data.EventBackgroundColor) {
                    viewModel.blockModel.eventBackgroundColor(data.EventBackgroundColor());
                }
                if (data.EventBorderColor) {
                    viewModel.blockModel.eventBorderColor(data.EventBorderColor());
                }
                if (data.EventTextColor) {
                    viewModel.blockModel.eventTextColor(data.EventTextColor());
                }
                if (data.NextDayThreshold) {
                    viewModel.blockModel.nextDayThreshold(data.NextDayThreshold());
                }
            }
        };
        f.cleanUp = function () {
            delete viewModel.blockModel.calendarId;
            delete viewModel.blockModel.firstDay;
            delete viewModel.blockModel.theme;
            delete viewModel.blockModel.weekends;
            delete viewModel.blockModel.fixedWeekCount;
            delete viewModel.blockModel.weekNumbers;
            delete viewModel.blockModel.aspectRatio;
            delete viewModel.blockModel.handleWindowResize;
            delete viewModel.blockModel.allDaySlot;
            delete viewModel.blockModel.allDayText;
            delete viewModel.blockModel.slotDuration;
            delete viewModel.blockModel.scrollTime;
            delete viewModel.blockModel.minTime;
            delete viewModel.blockModel.maxTime;
            delete viewModel.blockModel.slotEventOverlap;
            delete viewModel.blockModel.selectable;
            delete viewModel.blockModel.unselectAuto;
            delete viewModel.blockModel.selectOverlap;
            delete viewModel.blockModel.eventColor;
            delete viewModel.blockModel.eventBackgroundColor;
            delete viewModel.blockModel.eventBorderColor;
            delete viewModel.blockModel.eventTextColor;
            delete viewModel.blockModel.nextDayThreshold;
        };
        f.onBeforeSave = function () {
            var data = {
                CalendarId: viewModel.blockModel.calendarId(),
                FirstDay: viewModel.blockModel.firstDay(),
                Theme: viewModel.blockModel.theme(),
                Weekends: viewModel.blockModel.weekends(),
                FixedWeekCount: viewModel.blockModel.fixedWeekCount(),
                WeekNumbers: viewModel.blockModel.weekNumbers(),
                AspectRatio: viewModel.blockModel.aspectRatio(),
                HandleWindowResize: viewModel.blockModel.handleWindowResize(),
                AllDaySlot: viewModel.blockModel.allDaySlot(),
                AllDayText: viewModel.blockModel.allDayText(),
                SlotDuration: viewModel.blockModel.slotDuration(),
                ScrollTime: viewModel.blockModel.scrollTime(),
                MinTime: viewModel.blockModel.minTime(),
                MaxTime: viewModel.blockModel.maxTime(),
                SlotEventOverlap: viewModel.blockModel.slotEventOverlap(),
                Selectable: viewModel.blockModel.selectable(),
                UnselectAuto: viewModel.blockModel.unselectAuto(),
                SelectOverlap: viewModel.blockModel.selectOverlap(),
                EventColor: viewModel.blockModel.eventColor(),
                EventBackgroundColor: viewModel.blockModel.eventBackgroundColor(),
                EventBorderColor: viewModel.blockModel.eventBorderColor(),
                EventTextColor: viewModel.blockModel.eventTextColor(),
                NextDayThreshold: viewModel.blockModel.nextDayThreshold()
            };

            viewModel.blockModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>