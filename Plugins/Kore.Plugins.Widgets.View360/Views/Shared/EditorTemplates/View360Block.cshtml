@using Kore.Plugins.Widgets.View360
@using Kore.Web.Mvc.KoreUI

@model View360Block

<div id="block-content">
    @using (var tabs = Html.KoreUI().Begin(new Kore.Web.Mvc.KoreUI.Tabs()))
    {
        tabs.Tab(T(LocalizableStrings.EditorTabs.General), "tab-general");
        tabs.Tab(T(LocalizableStrings.EditorTabs.MainConfiguration), "tab-main");
        tabs.Tab(T(LocalizableStrings.EditorTabs.Navigation), "tab-navigation");
        tabs.Tab(T(LocalizableStrings.EditorTabs.LoaderInfoConfig), "tab-loader-info");

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.Mode, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.Mode, new { @class = "form-control", data_bind = "value: blockModel.mode" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ImagesPattern, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ImagesPattern, new { @class = "form-control", data_bind = "value: blockModel.imagesPattern" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.ImagesDirectory, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.ImagesDirectory, new { @class = "form-control", data_bind = "value: blockModel.imagesDirectory" })
                            <span class="input-group-addon">
                                <a data-toggle="modal" href="javascript:void(0);" data-target="#imagesDirectoryModal">
                                    <i class="kore-icon kore-icon-search"></i>
                                </a>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.FullSizeImagesDirectory, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.FullSizeImagesDirectory, new { @class = "form-control", data_bind = "value: blockModel.fullSizeImagesDirectory" })
                            <span class="input-group-addon">
                                <a data-toggle="modal" href="javascript:void(0);" data-target="#fullSizeImagesDirectoryModal">
                                    <i class="kore-icon kore-icon-search"></i>
                                </a>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.AutoRotate, new { data_bind = "checked: blockModel.autoRotate" }) @T(LocalizableStrings.AutoRotate)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.AutoRotateStopOnMove, new { data_bind = "checked: blockModel.autoRotateStopOnMove" }) @T(LocalizableStrings.AutoRotateStopOnMove)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.LoadFullSizeImagesOnZoom, new { data_bind = "checked: blockModel.loadFullSizeImagesOnZoom" }) @T(LocalizableStrings.LoadFullSizeImagesOnZoom)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.LoadFullSizeImagesOnFullscreen, new { data_bind = "checked: blockModel.loadFullSizeImagesOnFullscreen" }) @T(LocalizableStrings.LoadFullSizeImagesOnFullscreen)
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AutoRotateDirection, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.AutoRotateDirection, new { @class = "form-control", data_bind = "value: blockModel.autoRotateDirection" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AutoRotateSpeed, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.AutoRotateSpeed, new { @class = "form-control", data_bind = "value: blockModel.autoRotateSpeed" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Width, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.Width, new { @class = "form-control", data_bind = "value: blockModel.width" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Height, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.Height, new { @class = "form-control", data_bind = "value: blockModel.height" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.Rows, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.Rows, new { @class = "form-control", data_bind = "value: blockModel.rows" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Columns, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.Columns, new { @class = "form-control", data_bind = "value: blockModel.columns" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.XAxisSensitivity, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.XAxisSensitivity, new { @class = "form-control", data_bind = "value: blockModel.xAxisSensitivity" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.YAxisSensitivity, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.YAxisSensitivity, new { @class = "form-control", data_bind = "value: blockModel.yAxisSensitivity" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.InertiaConstant, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.InertiaConstant, new { @class = "form-control", data_bind = "value: blockModel.inertiaConstant" })
                    </div>
                </div>

            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.ButtonWidth, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ButtonWidth, new { @class = "form-control", data_bind = "value: blockModel.buttonWidth" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ButtonHeight, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ButtonHeight, new { @class = "form-control", data_bind = "value: blockModel.buttonHeight" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ButtonMargin, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ButtonMargin, new { @class = "form-control", data_bind = "value: blockModel.buttonMargin" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.TurnSpeed, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.TurnSpeed, new { @class = "form-control", data_bind = "value: blockModel.turnSpeed" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ShowButtons, new { data_bind = "checked: blockModel.showButtons" }) @T(LocalizableStrings.ShowButtons)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ShowTool, new { data_bind = "checked: blockModel.showTool" }) @T(LocalizableStrings.ShowTool)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ShowPlay, new { data_bind = "checked: blockModel.showPlay" }) @T(LocalizableStrings.ShowPlay)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ShowPause, new { data_bind = "checked: blockModel.showPause" }) @T(LocalizableStrings.ShowPause)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ShowZoom, new { data_bind = "checked: blockModel.showZoom" }) @T(LocalizableStrings.ShowZoom)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ShowTurn, new { data_bind = "checked: blockModel.showTurn" }) @T(LocalizableStrings.ShowTurn)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ShowFullscreen, new { data_bind = "checked: blockModel.showFullscreen" }) @T(LocalizableStrings.ShowFullscreen)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.DisplayLoader, new { data_bind = "checked: blockModel.displayLoader" }) @T(LocalizableStrings.DisplayLoader)
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.LoaderHolderClassName, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.LoaderHolderClassName, new { @class = "form-control", data_bind = "value: blockModel.loaderHolderClassName" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.LoadingTitle, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.LoadingTitle, new { @class = "form-control", data_bind = "value: blockModel.loadingTitle" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.LoadingSubtitle, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.LoadingSubtitle, new { @class = "form-control", data_bind = "value: blockModel.loadingSubtitle" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.LoadingMessage, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.LoadingMessage, new { @class = "form-control", data_bind = "value: blockModel.loadingMessage" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.LoaderModalBackground, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.LoaderModalBackground, new { @class = "form-control", data_bind = "value: blockModel.loaderModalBackground" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.LoaderModalOpacity, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.LoaderModalOpacity, new { @class = "form-control", data_bind = "value: blockModel.loaderModalOpacity" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.LoaderCircleWidth, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.LoaderCircleWidth, new { @class = "form-control", data_bind = "value: blockModel.loaderCircleWidth" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.LoaderCircleLineWidth, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.LoaderCircleLineWidth, new { @class = "form-control", data_bind = "value: blockModel.loaderCircleLineWidth" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.LoaderCircleLineColor, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.LoaderCircleLineColor, new { @class = "form-control", data_bind = "value: blockModel.loaderCircleLineColor" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.LoaderCircleBackgroundColor, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.LoaderCircleBackgroundColor, new { @class = "form-control", data_bind = "value: blockModel.loaderCircleBackgroundColor" })
                    </div>
                </div>
            </div>
        }
    }

    <style type="text/css">
        .modal-dialog {
            width: 80% !important;
        }
    </style>

    <div class="modal fade" id="imagesDirectoryModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" onclick="dismissModal('imagesDirectoryModal');" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Select Image</h4>
                </div>
                <div class="modal-body">
                    <iframe src="/filemanager/dialog.php?type=1&relative_url=1&fldr=&field_id=ImagesDirectory&ignore_last_position=1" frameborder="0" style="overflow:hidden;min-height:600px; height:100%;width:100%" height="100%" width="100%"></iframe>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="fullSizeImagesDirectoryModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" onclick="dismissModal('fullSizeImagesDirectoryModal');" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Select Image</h4>
                </div>
                <div class="modal-body">
                    <iframe src="/filemanager/dialog.php?type=1&relative_url=1&fldr=&field_id=FullSizeImagesDirectory&ignore_last_position=1" frameborder="0" style="overflow:hidden;min-height:600px; height:100%;width:100%" height="100%" width="100%"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var modalDismissed = false;

    function dismissModal(modalId) {
        modalDismissed = true;
        $('#' + modalId).modal('hide');
    };

    $(document).ready(function () {
        $('#imagesDirectoryModal').on('hidden.bs.modal', function () {
            if (!modalDismissed) {
                var url = $('#ImagesDirectory').val();
                var idx = url.indexOf("/Media");
                url = url.substring(idx);
                viewModel.blockModel.imagesDirectory(url);
            }
            modalDismissed = false;
        })
        $('#fullSizeImagesDirectoryModal').on('hidden.bs.modal', function () {
            if (!modalDismissed) {
                var url = $('#FullSizeImagesDirectory').val();
                var idx = url.indexOf("/Media");
                url = url.substring(idx);
                viewModel.blockModel.fullSizeImagesDirectory(url);
            }
            modalDismissed = false;
        })
    });

    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function () {
            viewModel.blockModel.mode = ko.observable(0);
            viewModel.blockModel.imagesPattern = ko.observable("image-%COL-%ROW.jpg");
            viewModel.blockModel.imagesDirectory = ko.observable("");
            viewModel.blockModel.fullSizeImagesDirectory = ko.observable("");
            viewModel.blockModel.autoRotate = ko.observable(false);
            viewModel.blockModel.autoRotateDirection = ko.observable(1);
            viewModel.blockModel.autoRotateSpeed = ko.observable(50);
            viewModel.blockModel.autoRotateStopOnMove = ko.observable(true);
            viewModel.blockModel.loadFullSizeImagesOnZoom = ko.observable(true);
            viewModel.blockModel.loadFullSizeImagesOnFullscreen = ko.observable(true);
            viewModel.blockModel.width = ko.observable(620);
            viewModel.blockModel.height = ko.observable(350);
            viewModel.blockModel.rows = ko.observable(1);
            viewModel.blockModel.columns = ko.observable(36);
            viewModel.blockModel.xAxisSensitivity = ko.observable(10);
            viewModel.blockModel.yAxisSensitivity = ko.observable(40);
            viewModel.blockModel.inertiaConstant = ko.observable(10);
            viewModel.blockModel.buttonWidth = ko.observable(40);
            viewModel.blockModel.buttonHeight = ko.observable(40);
            viewModel.blockModel.buttonMargin = ko.observable(5);
            viewModel.blockModel.turnSpeed = ko.observable(40);
            viewModel.blockModel.showButtons = ko.observable(true);
            viewModel.blockModel.showTool = ko.observable(true);
            viewModel.blockModel.showPlay = ko.observable(true);
            viewModel.blockModel.showPause = ko.observable(true);
            viewModel.blockModel.showZoom = ko.observable(true);
            viewModel.blockModel.showTurn = ko.observable(true);
            viewModel.blockModel.showFullscreen = ko.observable(true);
            viewModel.blockModel.displayLoader = ko.observable(true);
            viewModel.blockModel.loaderHolderClassName = ko.observable("");
            viewModel.blockModel.loadingTitle = ko.observable("");
            viewModel.blockModel.loadingSubtitle = ko.observable("");
            viewModel.blockModel.loadingMessage = ko.observable("");
            viewModel.blockModel.loaderModalBackground = ko.observable("#FFF");
            viewModel.blockModel.loaderModalOpacity = ko.observable(0.5);
            viewModel.blockModel.loaderCircleWidth = ko.observable(70);
            viewModel.blockModel.loaderCircleLineWidth = ko.observable(10);
            viewModel.blockModel.loaderCircleLineColor = ko.observable("#555");
            viewModel.blockModel.loaderCircleBackgroundColor = ko.observable("#FFF");

            var data = ko.mapping.fromJSON(viewModel.blockModel.blockValues());

            if ((isFunction(data) && data()) || data) {
                if (data.Mode == undefined) {
                    // If this is not set, it means the contentBlock is new and we have nothing in blockValues
                    return;
                }
                viewModel.blockModel.mode(data.Mode());
                viewModel.blockModel.imagesPattern(data.ImagesPattern());
                viewModel.blockModel.imagesDirectory(data.ImagesDirectory());
                viewModel.blockModel.fullSizeImagesDirectory(data.FullSizeImagesDirectory());
                viewModel.blockModel.autoRotate(data.AutoRotate());
                viewModel.blockModel.autoRotateDirection(data.AutoRotateDirection());
                viewModel.blockModel.autoRotateSpeed(data.AutoRotateSpeed());
                viewModel.blockModel.autoRotateStopOnMove(data.AutoRotateStopOnMove());
                viewModel.blockModel.loadFullSizeImagesOnZoom(data.LoadFullSizeImagesOnZoom());
                viewModel.blockModel.loadFullSizeImagesOnFullscreen(data.LoadFullSizeImagesOnFullscreen());
                viewModel.blockModel.width(data.Width());
                viewModel.blockModel.height(data.Height());
                viewModel.blockModel.rows(data.Rows());
                viewModel.blockModel.columns(data.Columns());
                viewModel.blockModel.xAxisSensitivity(data.XAxisSensitivity());
                viewModel.blockModel.yAxisSensitivity(data.YAxisSensitivity());
                viewModel.blockModel.inertiaConstant(data.InertiaConstant());
                viewModel.blockModel.buttonWidth(data.ButtonWidth());
                viewModel.blockModel.buttonHeight(data.ButtonHeight());
                viewModel.blockModel.buttonMargin(data.ButtonMargin());
                viewModel.blockModel.turnSpeed(data.TurnSpeed());
                viewModel.blockModel.showButtons(data.ShowButtons());
                viewModel.blockModel.showTool(data.ShowTool());
                viewModel.blockModel.showPlay(data.ShowPlay());
                viewModel.blockModel.showPause(data.ShowPause());
                viewModel.blockModel.showZoom(data.ShowZoom());
                viewModel.blockModel.showTurn(data.ShowTurn());
                viewModel.blockModel.showFullscreen(data.ShowFullscreen());
                viewModel.blockModel.displayLoader(data.DisplayLoader());
                viewModel.blockModel.loaderHolderClassName(data.LoaderHolderClassName());
                viewModel.blockModel.loadingTitle(data.LoadingTitle());
                viewModel.blockModel.loadingSubtitle(data.LoadingSubtitle());
                viewModel.blockModel.loadingMessage(data.LoadingMessage());
                viewModel.blockModel.loaderModalBackground(data.LoaderModalBackground());
                viewModel.blockModel.loaderModalOpacity(data.LoaderModalOpacity());
                viewModel.blockModel.loaderCircleWidth(data.LoaderCircleWidth());
                viewModel.blockModel.loaderCircleLineWidth(data.LoaderCircleLineWidth());
                viewModel.blockModel.loaderCircleLineColor(data.LoaderCircleLineColor());
                viewModel.blockModel.loaderCircleBackgroundColor(data.LoaderCircleBackgroundColor());
            }
        };
        f.cleanUp = function () {
            delete viewModel.blockModel.mode;
            delete viewModel.blockModel.imagesPattern;
            delete viewModel.blockModel.imagesDirectory;
            delete viewModel.blockModel.fullSizeImagesDirectory;
            delete viewModel.blockModel.autoRotate;
            delete viewModel.blockModel.autoRotateDirection;
            delete viewModel.blockModel.autoRotateSpeed;
            delete viewModel.blockModel.autoRotateStopOnMove;
            delete viewModel.blockModel.loadFullSizeImagesOnZoom;
            delete viewModel.blockModel.loadFullSizeImagesOnFullscreen;
            delete viewModel.blockModel.width;
            delete viewModel.blockModel.height;
            delete viewModel.blockModel.rows;
            delete viewModel.blockModel.columns;
            delete viewModel.blockModel.xAxisSensitivity;
            delete viewModel.blockModel.yAxisSensitivity;
            delete viewModel.blockModel.inertiaConstant;
            delete viewModel.blockModel.buttonWidth;
            delete viewModel.blockModel.buttonHeight;
            delete viewModel.blockModel.buttonMargin;
            delete viewModel.blockModel.turnSpeed;
            delete viewModel.blockModel.showButtons;
            delete viewModel.blockModel.showTool;
            delete viewModel.blockModel.showPlay;
            delete viewModel.blockModel.showPause;
            delete viewModel.blockModel.showZoom;
            delete viewModel.blockModel.showTurn;
            delete viewModel.blockModel.showFullscreen;
            delete viewModel.blockModel.displayLoader;
            delete viewModel.blockModel.loaderHolderClassName;
            delete viewModel.blockModel.loadingTitle;
            delete viewModel.blockModel.loadingSubtitle;
            delete viewModel.blockModel.loadingMessage;
            delete viewModel.blockModel.loaderModalBackground;
            delete viewModel.blockModel.loaderModalOpacity;
            delete viewModel.blockModel.loaderCircleWidth;
            delete viewModel.blockModel.loaderCircleLineWidth;
            delete viewModel.blockModel.loaderCircleLineColor;
            delete viewModel.blockModel.loaderCircleBackgroundColor;
        };
        f.onBeforeSave = function () {
            var data = {
                Mode: viewModel.blockModel.mode(),
                ImagesPattern: viewModel.blockModel.imagesPattern(),
                ImagesDirectory: viewModel.blockModel.imagesDirectory(),
                FullSizeImagesDirectory: viewModel.blockModel.fullSizeImagesDirectory(),
                AutoRotate: viewModel.blockModel.autoRotate(),
                AutoRotateDirection: viewModel.blockModel.autoRotateDirection(),
                AutoRotateSpeed: viewModel.blockModel.autoRotateSpeed(),
                AutoRotateStopOnMove: viewModel.blockModel.autoRotateStopOnMove(),
                LoadFullSizeImagesOnZoom: viewModel.blockModel.loadFullSizeImagesOnZoom(),
                LoadFullSizeImagesOnFullscreen: viewModel.blockModel.loadFullSizeImagesOnFullscreen(),
                Width: viewModel.blockModel.width(),
                Height: viewModel.blockModel.height(),
                Rows: viewModel.blockModel.rows(),
                Columns: viewModel.blockModel.columns(),
                XAxisSensitivity: viewModel.blockModel.xAxisSensitivity(),
                YAxisSensitivity: viewModel.blockModel.yAxisSensitivity(),
                InertiaConstant: viewModel.blockModel.inertiaConstant(),
                ButtonWidth: viewModel.blockModel.buttonWidth(),
                ButtonHeight: viewModel.blockModel.buttonHeight(),
                ButtonMargin: viewModel.blockModel.buttonMargin(),
                TurnSpeed: viewModel.blockModel.turnSpeed(),
                ShowButtons: viewModel.blockModel.showButtons(),
                ShowTool: viewModel.blockModel.showTool(),
                ShowPlay: viewModel.blockModel.showPlay(),
                ShowPause: viewModel.blockModel.showPause(),
                ShowZoom: viewModel.blockModel.showZoom(),
                ShowTurn: viewModel.blockModel.showTurn(),
                ShowFullscreen: viewModel.blockModel.showFullscreen(),
                DisplayLoader: viewModel.blockModel.displayLoader(),
                LoaderHolderClassName: viewModel.blockModel.loaderHolderClassName(),
                LoadingTitle: viewModel.blockModel.loadingTitle(),
                LoadingSubtitle: viewModel.blockModel.loadingSubtitle(),
                LoadingMessage: viewModel.blockModel.loadingMessage(),
                LoaderModalBackground: viewModel.blockModel.loaderModalBackground(),
                LoaderModalOpacity: viewModel.blockModel.loaderModalOpacity(),
                LoaderCircleWidth: viewModel.blockModel.loaderCircleWidth(),
                LoaderCircleLineWidth: viewModel.blockModel.loaderCircleLineWidth(),
                LoaderCircleLineColor: viewModel.blockModel.loaderCircleLineColor(),
                LoaderCircleBackgroundColor: viewModel.blockModel.loaderCircleBackgroundColor()
            };

            viewModel.blockModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>