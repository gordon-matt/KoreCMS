@using Kore.Web
@using Kore.Net.Mail

@model SmtpSettings

<div id="settings-content">
    <div class="form-group">
        @Html.LabelFor(m => m.DisplayName)
        @Html.TextBoxFor(m => m.DisplayName, new { @class = "form-control", data_bind = "value: displayName" })
        @Html.ValidationMessageFor(m => m.DisplayName)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Host)
        @Html.TextBoxFor(m => m.Host, new { @class = "form-control", data_bind = "value: host" })
        @Html.ValidationMessageFor(m => m.Host)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Port)
        @Html.TextBoxFor(m => m.Host, new { @class = "form-control", data_bind = "value: port" })
        @Html.ValidationMessageFor(m => m.Port)
    </div>
    <div class="checkbox">
        <label>
            @Html.CheckBoxFor(m => m.EnableSsl, new { data_bind = "checked: enableSsl" }) @T(KoreWebLocalizableStrings.Settings.Smtp.EnableSsl)
        </label>
    </div>
    <div class="checkbox">
        <label>
            @Html.CheckBoxFor(m => m.UseDefaultCredentials, new { data_bind = "checked: useDefaultCredentials" }) @T(KoreWebLocalizableStrings.Settings.Smtp.UseDefaultCredentials)
        </label>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Username)
        @Html.TextBoxFor(m => m.Username, new { @class = "form-control", data_bind = "value: username", data_val_requiredif = "UseDefaultCredentials:unchecked" })
        @Html.ValidationMessageFor(m => m.Username)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Password)
        @Html.PasswordFor(m => m.Password, new { @class = "form-control", data_bind = "value: password", data_val_requiredif = "UseDefaultCredentials:unchecked" })
        @Html.ValidationMessageFor(m => m.Password)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.MaxTries)
        @Html.TextBoxFor(m => m.MaxTries, new { @class = "form-control", data_bind = "value: maxTries" })
        @Html.ValidationMessageFor(m => m.MaxTries)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.MessagesPerBatch)
        @Html.TextBoxFor(m => m.MessagesPerBatch, new { @class = "form-control", data_bind = "value: messagesPerBatch" })
        @Html.ValidationMessageFor(m => m.MessagesPerBatch)
    </div>
</div>

<script type="text/javascript">
    function updateModel(data) {
        viewModel.displayName = ko.observable("");
        viewModel.host = ko.observable("");
        viewModel.port = ko.observable(0);
        viewModel.enableSsl = ko.observable(false);
        viewModel.useDefaultCredentials = ko.observable(false);
        viewModel.username = ko.observable("");
        viewModel.password = ko.observable("");
        viewModel.maxTries = ko.observable(0);
        viewModel.messagesPerBatch = ko.observable(0);

        if (data) {
            if (data.DisplayName) {
                viewModel.displayName(data.DisplayName);
            }
            if (data.Host) {
                viewModel.host(data.Host);
            }
            if (data.Port) {
                viewModel.port(data.Port);
            }
            if (typeof data.EnableSsl === 'boolean') {
                viewModel.enableSsl(data.EnableSsl);
            }
            if (typeof data.UseDefaultCredentials === 'boolean') {
                viewModel.useDefaultCredentials(data.UseDefaultCredentials);
            }
            if (data.Username) {
                viewModel.username(data.Username);
            }
            if (data.Password) {
                viewModel.password(data.Password);
            }
            if (data.MaxTries) {
                viewModel.maxTries(data.MaxTries);
            }
            if (data.MessagesPerBatch) {
                viewModel.messagesPerBatch(data.MessagesPerBatch);
            }
        }
    };

    function cleanUp() {
        delete viewModel.displayName;
        delete viewModel.host;
        delete viewModel.port;
        delete viewModel.enableSsl;
        delete viewModel.useDefaultCredentials;
        delete viewModel.username;
        delete viewModel.password;
        delete viewModel.maxTries;
        delete viewModel.messagesPerBatch;
    }

    function onBeforeSave() {
        var data = {
            DisplayName: viewModel.displayName(),
            Host: viewModel.host(),
            Port: viewModel.port(),
            UseDefaultCredentials: viewModel.useDefaultCredentials(),
            Username: viewModel.username(),
            Password: viewModel.password(),
            MaxTries: viewModel.maxTries(),
            MessagesPerBatch: viewModel.messagesPerBatch()
        };

        viewModel.value(ko.mapping.toJSON(data));
    };
</script>