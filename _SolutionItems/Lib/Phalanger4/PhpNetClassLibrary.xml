<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PhpNetClassLibrary</name>
    </assembly>
    <members>
        <member name="T:PHP.Library.ComparisonMethod">
            <summary>
            Type of sorting.
            </summary>
        </member>
        <member name="F:PHP.Library.ComparisonMethod.Regular">
            <summary>Regular comparison.</summary>
        </member>
        <member name="F:PHP.Library.ComparisonMethod.Numeric">
            <summary>Numeric comparison.</summary>
        </member>
        <member name="F:PHP.Library.ComparisonMethod.String">
            <summary>String comparison.</summary>
        </member>
        <member name="F:PHP.Library.ComparisonMethod.LocaleString">
            <summary>String comparison respecting to locale.</summary>
        </member>
        <member name="F:PHP.Library.ComparisonMethod.Undefined">
            <summary>Undefined comparison.</summary>
        </member>
        <member name="T:PHP.Library.SortingOrder">
            <summary>
            Sort order.
            </summary>
        </member>
        <member name="F:PHP.Library.SortingOrder.Descending">
            <summary>Descending</summary>
        </member>
        <member name="F:PHP.Library.SortingOrder.Ascending">
            <summary>Ascending</summary>
        </member>
        <member name="F:PHP.Library.SortingOrder.Undefined">
            <summary>Undefined</summary>
        </member>
        <member name="T:PHP.Library.LetterCase">
            <summary>
            Whether or not the sort is case-sensitive.
            </summary>
        </member>
        <member name="F:PHP.Library.LetterCase.Lower">
            <summary>Lower case.</summary>
        </member>
        <member name="F:PHP.Library.LetterCase.Upper">
            <summary>Upper case.</summary>
        </member>
        <member name="T:PHP.Library.PhpArrays">
            <summary>
            Manipulates arrays and collections. 
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="F:PHP.Library.PhpArrays.EmptyArray">
            <summary>
            Array which is always empty. Nobody should add any item to it.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.Current(PHP.Core.IPhpEnumerable)">
            <summary>
            Retrieves a value being pointed by an array intrinsic enumerator.
            </summary>
            <param name="array">The array which current value to return.</param>
            <returns><b>False</b>, if the intrinsic enumerator is behind the last item of <paramref name="array"/>, 
            otherwise the value being pointed by the enumerator (beware of values which are <b>false</b>!).</returns>
            <remarks>The value returned is dereferenced.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Pos(PHP.Core.IPhpEnumerable)">
            <summary>
            Retrieves a value being pointed by an array intrinsic enumerator.
            </summary>
            <param name="array">The array which current value to return.</param>
            <returns>
            <b>False</b> if the intrinsic enumerator is behind the last item of <paramref name="array"/>, 
            otherwise the value being pointed by the enumerator (beware of values which are <b>false</b>!).
            </returns>
            <remarks>
            Alias of <see cref="M:PHP.Library.PhpArrays.Current(PHP.Core.IPhpEnumerable)"/>. The value returned is dereferenced.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Key(PHP.Core.IPhpEnumerable)">
            <summary>
            Retrieves a key being pointed by an array intrinsic enumerator.
            </summary>
            <param name="array">The array which current key to return.</param>
            <returns>
            <b>Null</b>, if the intrinsic enumerator is behind the last item of <paramref name="array"/>, 
            otherwise the key being pointed by the enumerator.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.Next(PHP.Core.IPhpEnumerable)">
            <summary>
            Advances array intrinsic enumerator one item forward.
            </summary>
            <param name="array">The array which intrinsic enumerator to advance.</param>
            <returns>
            The value being pointed by the enumerator after it has been advanced
            or <b>false</b> if the enumerator has moved behind the last item of <paramref name="array"/>.
            </returns>
            <remarks>The value returned is dereferenced.</remarks>
            <remarks>
      If the enumerator has been moved behind the last (or before the first) 
      item of array it is blocked until <see cref="M:PHP.Library.PhpArrays.Reset(PHP.Core.IPhpEnumerable)"/>
      or <see cref="M:PHP.Library.PhpArrays.End(PHP.Core.IPhpEnumerable)"/> is called or a new item is added to the array.
    </remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Prev(PHP.Core.IPhpEnumerable)">
            <summary>
            Moves array intrinsic enumerator one item backward.
            </summary>
            <param name="array">The array which intrinsic enumerator to move.</param>
            <returns>
            The value being pointed by the enumerator after it has been moved
            or <b>false</b> if the enumerator has moved before the first item of <paramref name="array"/>.
            </returns>
            <remarks>The value returned is dereferenced.</remarks>
            <remarks>
      If the enumerator has been moved behind the last (or before the first) 
      item of array it is blocked until <see cref="M:PHP.Library.PhpArrays.Reset(PHP.Core.IPhpEnumerable)"/>
      or <see cref="M:PHP.Library.PhpArrays.End(PHP.Core.IPhpEnumerable)"/> is called or a new item is added to the array.
    </remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.End(PHP.Core.IPhpEnumerable)">
            <summary>
            Moves array intrinsic enumerator so it will point to the last item of the array.
            </summary>
            <param name="array">The array which intrinsic enumerator to move.</param>
            <returns>The last value in the <paramref name="array"/> or <b>false</b> if <paramref name="array"/> 
            is empty.</returns>
            <remarks>The value returned is dereferenced.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Reset(PHP.Core.IPhpEnumerable)">
            <summary>
            Moves array intrinsic enumerator so it will point to the first item of the array.
            </summary>
            <param name="array">The array which intrinsic enumerator to move.</param>
            <returns>The first value in the <paramref name="array"/> or <b>false</b> if <paramref name="array"/> 
            is empty.</returns>
            <remarks>The value returned is dereferenced.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Each(PHP.Core.IPhpEnumerable)">
            <summary>
            Retrieves the current entry and advances array intrinsic enumerator one item forward.
            </summary>
            <param name="array">The array which entry get and which intrinsic enumerator to advance.</param>
            <returns>
            The instance of <see cref="T:PHP.Core.PhpArray"/>(0 =&gt; key, 1 =&gt; value, "key" =&gt; key, "value" =&gt; value)
            where key and value are pointed by the enumerator before it is advanced
            or <b>false</b> if the enumerator has been behind the last item of <paramref name="array"/>
            before the call.
            </returns>
            <remarks>
      If the enumerator has been moved behind the last (or before the first) 
      item of array it is blocked until <see cref="M:PHP.Library.PhpArrays.Reset(PHP.Core.IPhpEnumerable)"/>
      or <see cref="M:PHP.Library.PhpArrays.End(PHP.Core.IPhpEnumerable)"/> is called or a new item is added to the array.
    </remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Pop(PHP.Core.PhpArray)">
            <summary>
            Removes the last item from an array and returns it.
            </summary>
            <param name="array">The array whcih item to pop.</param>
            <returns>The last item of <paramref name="array"/> or a <b>null</b> reference if it is empty.</returns>
            <remarks>Resets intrinsic enumerator.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Push(PHP.Core.PhpArray,System.Object[])">
            <summary>
            Adds multiple items into an array.
            </summary>
            <param name="array">The array where to add values.</param>
            <param name="vars">The array of values to add.</param>
            <returns>The number of items in array after all items was added.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.Shift(PHP.Core.PhpArray)">
            <summary>
            Removes the first item of an array and reindex integer keys starting from zero.
            </summary>
            <param name="array">The array to be shifted.</param>
            <returns>The removed object.</returns>
            <remarks>Resets intrinsic enumerator.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Unshift(PHP.Core.PhpArray,System.Object[])">
            <summary>
            Inserts specified items before the first item of an array and reindex integer keys starting from zero.
            </summary>
            <param name="array">The array to be unshifted.</param>
            <param name="vars">Variables to be inserted.</param>
            <returns>The number of items in resulting array.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.Reverse(PHP.Core.PhpArray)">
            <summary>
            Returns array which elements are taken from a specified one in reversed order.
            Integer keys are reindexed starting from zero.
            </summary>
            <param name="array">The array to be reversed.</param>
            <returns>The array <paramref name="array"/> with items in reversed order.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.Reverse(PHP.Core.PhpArray,System.Boolean)">
            <summary>
            Returns array which elements are taken from a specified one in reversed order.
            </summary>
            <param name="array">The array to be reversed.</param>
            <param name="preserveKeys">Whether keys should be left untouched. 
            If set to <b>false</b> then integer keys are reindexed starting from zero.</param>
            <returns>The array <paramref name="array"/> with items in reversed order.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.Slice(PHP.Core.PhpArray,System.Int32)">
            <summary>
            Retrieves a slice of specified array.
            </summary>
            <param name="array">The array which slice to get.</param>
            <param name="offset">The ordinal number of a first item of the slice.</param>
            <returns>The slice of <paramref name="array"/>.</returns>
            <remarks>
            The same as <see cref="M:PHP.Library.PhpArrays.Slice(PHP.Core.PhpArray,System.Int32,System.Int32)"/> where <c>length</c> is infinity. 
            <seealso cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/>. Resets integer keys.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Slice(PHP.Core.PhpArray,System.Int32,System.Int32)">
            <summary>
            Retrieves a slice of specified array.
            </summary>
            <param name="array">The array which slice to get.</param>
            <param name="offset">The relativized offset of the first item of the slice.</param>
            <param name="length">The relativized length of the slice.</param>
            <returns>The slice of <paramref name="array"/>.</returns>
            <remarks>
            See <see cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/> for details about <paramref name="offset"/> and 
            <paramref name="length"/>. Resets integer keys.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Slice(PHP.Core.PhpArray,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Retrieves a slice of specified array.
            </summary>
            <param name="array">The array which slice to get.</param>
            <param name="offset">The relativized offset of the first item of the slice.</param>
            <param name="length">The relativized length of the slice.</param>
            <param name="preserveKeys">Whether to preserve integer keys. If <B>false</B>, the integer keys are reset.</param>
            <returns>The slice of <paramref name="array"/>.</returns>
            <remarks>
            See <see cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/> for details about <paramref name="offset"/> and <paramref name="length"/>.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Splice(PHP.Core.PhpArray,System.Int32)">
            <summary>
            Removes a slice of an array.
            </summary>
            <param name="array">The array which slice to remove.</param>
            <param name="offset">The relativized offset of a first item of the slice.</param>
            <remarks>
            <para>Items from <paramref name="offset"/>-th to the last one are removed from <paramref name="array"/>.</para>
            </remarks>
            <para>See <see cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/> for details about <paramref name="offset"/>.</para>
        </member>
        <member name="M:PHP.Library.PhpArrays.Splice(PHP.Core.PhpArray,System.Int32,System.Int32)">
            <summary>
            Removes a slice of an array.
            </summary>
            <param name="array">The array which slice to remove.</param>
            <param name="offset">The relativized offset of a first item of the slice.</param>
            <param name="length">The relativized length of the slice.</param>
            <remarks>
            <para><paramref name="length"/> items are removed from <paramref name="array"/> 
            starting with the <paramref name="offset"/>-th one.</para>
            </remarks>
            <para>See <see cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/> for details about <paramref name="offset"/>.</para>
        </member>
        <member name="M:PHP.Library.PhpArrays.SpliceDc(PHP.Core.PhpArray,System.Int32,System.Int32,System.Object)">
            <summary>
            Replaces a slice of an array with specified item(s).
            </summary>
            <remarks>
            <para>The same as <see cref="M:PHP.Library.PhpArrays.Splice(PHP.Core.PhpArray,System.Int32,System.Int32,System.Object)"/> except for that
            replacement items are deeply copied to the <paramref name="array"/>.</para>
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Splice(PHP.Core.PhpArray,System.Int32,System.Int32,System.Object)">
            <summary>
            Replaces a slice of an array with specified item(s).
            </summary>
            <param name="array">The array which slice to replace.</param>
            <param name="offset">The relativized offset of a first item of the slice.</param>
            <param name="length">The relativized length of the slice.</param>
            <param name="replacement"><see cref="T:PHP.Core.PhpArray"/> of items to replace the splice or a single item.</param>
            <returns>The <see cref="T:PHP.Core.PhpArray"/> of replaced items indexed by integers starting from zero.</returns>
            <remarks>
            <para>See <see cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/> for details about <paramref name="offset"/> and <paramref name="length"/>.</para>
            <para>Reindexes all integer keys in resulting array.</para>
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.SpliceInternal(PHP.Core.PhpArray,System.Int32,System.Int32,System.Object,System.Boolean)">
            <summary>
            Implementation of <see cref="M:PHP.Library.PhpArrays.Splice(PHP.Core.PhpArray,System.Int32,System.Int32,System.Object)"/> and <see cref="M:PHP.Library.PhpArrays.SpliceDc(PHP.Core.PhpArray,System.Int32,System.Int32,System.Object)"/>.
            </summary>
            <remarks>Whether to make a deep-copy of items in the replacement.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Shuffle(PHP.Core.PhpArray)">
            <summary>
            Randomizes the order of elements in the array using PhpMath random numbers generator.
            </summary>
            <exception cref="T:PHP.Core.PhpException">Thrown if the <paramref name="array"/> argument is null.</exception>
            <remarks>Reindexes all keys in the resulting array.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.RandomKeys(PHP.Core.PhpArray)">
            <summary>
            Returns a key of an entry chosen at random using PhpMath random numbers generator.
            </summary>
            <param name="array">The array which to choose from.</param>
            <returns>The chosen key.</returns>
            <exception cref="T:System.NullReferenceException"><paramref name="array"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.RandomKeys(PHP.Core.PhpArray,System.Int32)">
            <summary>
            Chooses specified number of keys from an array at random.
            </summary>
            <param name="array">The <see cref="T:PHP.Core.PhpArray"/> from which to choose.</param>
            <param name="count">The number of items to choose.</param>
            <returns>Either <see cref="T:PHP.Core.PhpArray"/> of chosen keys (<paramref name="count"/> &gt; 1) or a single key.</returns>
            <remarks>
            Items are chosen uniformly in time <I>O(n)</I>, where <I>n</I> is the number of items in the 
            <paramref name="array"/> using conveyor belt sampling. 
            </remarks>
            <exception cref="T:System.NullReferenceException"><paramref name="array"/>  is a <B>null</B> reference.</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="count"/> is not positive and less 
            than the number of items in <paramref name="array"/>. (Warning)</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.RandomSubset(System.Collections.ICollection,System.Collections.IList,System.Int32,System.Random)">
            <summary>
            Chooses specified number of items from a collection at random.
            </summary>
            <param name="source">The <see cref="T:System.Collections.ICollection"/> from which to choose.</param>
            <param name="result">The <see cref="T:System.Collections.IList"/> where to add chosen items.</param>
            <param name="count">The number of items to choose.</param>
            <param name="generator">The initialized random numbers generator.</param>
            <remarks>
            Items are chosen uniformly in time <I>O(n)</I>, where <I>n</I> is the number of items in the collection
            using conveyor belt sampling. 
            </remarks>
            <returns><B>false</B> on failure.</returns>
            <exception cref="T:PHP.Core.PhpException">Either <paramref name="source"/> or <paramref name="result"/> or 
            <paramref name="generator"/> is a <B>null</B> reference (Warning)</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="count"/> is not positive and less 
            than the number of items in <paramref name="source"/>. (Warning)</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.KeyExists(System.Object,PHP.Core.PhpArray)">
            <summary>
            Checks if a key exists in the array.
            </summary>
            <param name="key">The key to be searched for.</param>
            <param name="array">The array where to search for the key.</param>
            <returns>Whether the <paramref name="key"/> exists in the <paramref name="array"/>.</returns>
            <remarks><paramref name="key"/> is converted by <see cref="M:PHP.Core.Convert.ObjectToArrayKey(System.Object,PHP.Core.IntStringKey@)"/> before the search.</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="array"/> argument is a <B>null</B> reference (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="key"/> has type which is illegal for array key.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.KeyExistsObsolete(System.Object,PHP.Core.PhpArray)">
            <summary>
            Alias of <see cref="M:PHP.Library.PhpArrays.KeyExists(System.Object,PHP.Core.PhpArray)"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.InArray(System.Object,PHP.Core.PhpArray)">
            <summary>
            Checks if a value exists in an array.
            </summary>
            <param name="needle">The value to search for.</param>
            <param name="haystack">The <see cref="T:PHP.Core.PhpArray"/> where to search.</param>
            <returns>Whether there is the <paramref name="needle"/> value in the <see cref="T:PHP.Core.PhpArray"/>.</returns>
            <remarks>Regular comparison (<see cref="M:PHP.Core.PhpComparer.CompareEq(System.Object,System.Object)"/>) is used for comparing values.</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="haystack"/> is a <B>null</B> reference (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.InArray(System.Object,PHP.Core.PhpArray,System.Boolean)">
            <summary>
            Checks if a value exists in an array.
            </summary>
            <param name="needle">The value to search for.</param>
            <param name="haystack">The <see cref="T:PHP.Core.PhpArray"/> where to search.</param>
            <param name="strict">Whether strict comparison method (operator ===) is used for comparing values.</param>
            <returns>Whether there is the <paramref name="needle"/> value in the <see cref="T:PHP.Core.PhpArray"/>.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="haystack"/> is a <B>null</B> reference (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.Search(System.Object,PHP.Core.PhpArray)">
            <summary>
            Searches the array for a given value and returns the corresponding key if successful.
            </summary>
            <param name="needle">The value to search for.</param>
            <param name="haystack">The <see cref="T:PHP.Core.PhpArray"/> where to search.</param>
            <returns>The key associated with the <paramref name="needle"/> or <B>false</B> if there is no such key.</returns>
            <remarks>Regular comparison (<see cref="M:PHP.Core.PhpComparer.CompareEq(System.Object,System.Object)"/>) is used for comparing values.</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="haystack"/> is a <B>null</B> reference (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.Search(System.Object,PHP.Core.PhpArray,System.Boolean)">
            <summary>
            Searches the array for a given value and returns the corresponding key if successful.
            </summary>
            <param name="needle">The value to search for.</param>
            <param name="haystack">The <see cref="T:PHP.Core.PhpArray"/> where to search.</param>
            <param name="strict">Whether strict comparison method (operator ===) is used for comparing values.</param>
            <returns>The key associated with the <paramref name="needle"/> or <B>false</B> if there is no such key.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="haystack"/> is a <B>null</B> reference (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.Fill(System.Int32,System.Int32,System.Object)">
            <summary>
            Creates a new array filled with a specified value.
            </summary>
            <param name="startIndex">The value of the key of the first item in the array.</param>
            <param name="count">The number of items in the array.</param>
            <param name="value">The value copied to all items in the array.</param>
            <returns>The array.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="count"/> is not positive.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.Pad(PHP.Core.PhpArray,System.Int32,System.Object)">
            <summary>
            Pads array to the specified length with a value.
            If the length is negative adds |length| elements at beginning otherwise adds elements at the end.
            Values with integer keys that are contained in the source array are inserted to the resulting one with new 
            integer keys counted from zero (or from |length| if length negative).
            </summary>
            <param name="array">The source array.</param>
            <param name="length">The length of the resulting array.</param>
            <param name="value">The value to add in array.</param>
            <returns>Padded array.</returns>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="array"/> argument is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.RangeOfInts(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an array containing range of integers from the [low;high] interval with arbitrary step.
            </summary>
            <param name="low">Lower bound of the interval.</param>
            <param name="high">Upper bound of the interval.</param>
            <param name="step">The step. An absolute value is taken if step is zero.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.RangeOfLongInts(System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates an array containing range of long integers from the [low;high] interval with arbitrary step.
            </summary>
            <param name="low">Lower bound of the interval.</param>
            <param name="high">Upper bound of the interval.</param>
            <param name="step">The step. An absolute value is taken if step is zero.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.RangeOfDoubles(System.Double,System.Double,System.Double)">
            <summary>
            Creates an array containing range of doubles from the [low;high] interval with arbitrary step.
            </summary>
            <param name="low">Lower bound of the interval.</param>
            <param name="high">Upper bound of the interval.</param>
            <param name="step">The step. An absolute value is taken if step is less than zero.</param>
            <returns>The array.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown if the <paramref name="step"/> argument is zero.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.RangeOfChars(System.Char,System.Char,System.Int32)">
            <summary>
            Creates an array containing range of characters from the [low;high] interval with arbitrary step.
            </summary>
            <param name="low">Lower bound of the interval.</param>
            <param name="high">Upper bound of the interval.</param>
            <param name="step">The step.</param>
            <returns>The array.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown if the <paramref name="step"/> argument is zero.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.Range(System.Object,System.Object)">
            <summary>
            Creates an array containing range of elements with step 1.
            </summary>
            <param name="low">Lower bound of the interval.</param>
            <param name="high">Upper bound of the interval.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.Range(System.Object,System.Object,System.Object)">
            <summary>
            Creates an array containing range of elements with arbitrary step.
            </summary>
            <param name="low">Lower bound of the interval.</param>
            <param name="high">Upper bound of the interval.</param>
            <param name="step">The step.</param>
            <returns>The array.</returns>
            <remarks>
            Implements PHP awful range function. The result depends on types and 
            content of parameters under the following rules:
            <list type="number">
            <item>
              <description>
              If at least one parameter (low, high or step) is of type double or is a string wholly representing 
                  double value (i.e. whole string is converted to a number and no chars remains, 
                  e.g. "1.5" is wholly representing but the value "1.5x" is not)
               than
                  range of double values is generated with a step treated as a double value
                  (e.g. <c>range("1x","2.5x","0.5") = array(1.0, 1.5, 2.0, 2.5)</c> etc.)
               otherwise 
              </description>
            </item>
            <item>
              <description>
               if at least one bound (i.e. low or high parameter) is of type int or is a string wholly representing
                  integer value 
               than 
                  range of integer values is generated with a step treated as integer value
                  (e.g. <c>range("1x","2","1.5") = array(1, 2, 3, 4)</c> etc.)
               otherwise
              </description>
            </item>
            <item>
              <description>
               low and high are both non-empty strings (otherwise one of the two previous conditions would be true),
               so the first characters of these strings are taken and a sequence of characters is generated.
              </description>     
            </item>
            </list>
            Moreover, if <paramref name="low"/> is greater than <paramref name="high"/> then descending sequence is generated 
            and ascending one otherwise. If <paramref name="step"/> is less than zero than an absolute value is used.
            </remarks>
            <exception cref="T:PHP.Core.PhpException">Thrown if the <paramref name="step"/> argument is zero (or its absolute value less than 1 in the case 2).</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.GetComparer(PHP.Library.ComparisonMethod,PHP.Library.SortingOrder,System.Boolean)">
            <summary>
            Gets an instance of PHP comparer parametrized by specified method, order, and compared item type.
            </summary>
            <param name="method">The <see cref="T:PHP.Library.ComparisonMethod"/>.</param>
            <param name="order">The <see cref="T:PHP.Library.SortingOrder"/>.</param>
            <param name="keyComparer">Whether to compare keys (<B>false</B> for value comparer).</param>
            <returns>A comparer (either a new instance or existing singleton instance).</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.Sort(PHP.Core.PhpArray)">
            <summary>
            Sorts an array using regular comparison method for comparing values.
            </summary>
            <param name="array">The array to be sorted.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.Sort(PHP.Core.PhpArray,PHP.Library.ComparisonMethod)">
            <summary>
            Sorts an array using specified comparison method for comparing values.
            </summary>
            <param name="array">The array to be sorted.</param>
            <param name="comparisonMethod">The method to be used for comparison of values.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.AssocSort(PHP.Core.PhpArray)">
            <summary>
            Sorts an array using regular comparison method for comparing values preserving key-value associations.
            </summary>
            <param name="array">The array to be sorted.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.AssocSort(PHP.Core.PhpArray,PHP.Library.ComparisonMethod)">
            <summary>
            Sorts an array using specified comparison method for comparing values preserving key-value associations.
            </summary>
            <param name="array">The array to be sorted.</param>
            <param name="comparisonMethod">The method to be used for comparison of values.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.KeySort(PHP.Core.PhpArray)">
            <summary>
            Sorts an array using regular comparison method for comparing keys.
            </summary>
            <param name="array">The array to be sorted.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.KeySort(PHP.Core.PhpArray,PHP.Library.ComparisonMethod)">
            <summary>
            Sorts an array using specified comparison method for comparing keys.
            </summary>
            <param name="array">The array to be sorted.</param>
            <param name="comparisonMethod">The method to be used for comparison of keys.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.ReverseSort(PHP.Core.PhpArray)">
            <summary>
            Sorts an array using regular comparison method for comparing values in reverse order.
            </summary>
            <param name="array">The array to be sorted.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.ReverseSort(PHP.Core.PhpArray,PHP.Library.ComparisonMethod)">
            <summary>
            Sorts an array using specified comparison method for comparing values in reverse order.
            </summary>
            <param name="array">The array to be sorted.</param>
            <param name="comparisonMethod">The method to be used for comparison of keys.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.AssocReverseSort(PHP.Core.PhpArray)">
            <summary>
            Sorts an array using regular comparison method for comparing values in reverse order 
            preserving key-value associations.
            </summary>
            <param name="array">The array to be sorted.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.AssocReverseSort(PHP.Core.PhpArray,PHP.Library.ComparisonMethod)">
            <summary>
            Sorts an array using specified comparison method for comparing values in reverse order
            preserving key-value associations.
            </summary>
            <param name="array">The array to be sorted.</param>
            <param name="comparisonMethod">The method to be used for comparison of values.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.KeyReverseSort(PHP.Core.PhpArray)">
            <summary>
            Sorts an array using regular comparison method for comparing keys in reverse order.
            </summary>
            <param name="array">The array to be sorted.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.KeyReverseSort(PHP.Core.PhpArray,PHP.Library.ComparisonMethod)">
            <summary>
            Sorts an array using specified comparison method for comparing keys in reverse order.
            </summary>
            <param name="array">The array to be sorted.</param>
            <param name="comparisonMethod">The method to be used for comparison of keys.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.UserSort(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpArray,PHP.Core.PhpCallback)">
            <summary>
            Sorts an array using user comparison callback for comparing values.
            </summary>
            <param name="caller">The class context used to bind the callback.</param>
            <param name="array">The array to be sorted.</param>
            <param name="compare">The user callback to be used for comparison of values.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.UserAssocSort(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpArray,PHP.Core.PhpCallback)">
            <summary>
            Sorts an array user comparison callback method for comparing values preserving key-value associations.
            </summary>
            <param name="caller">The class context used to bind the callback.</param>
            <param name="array">The array to be sorted.</param>
            <param name="compare">The user callback to be used for comparison of values.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.UserKeySort(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpArray,PHP.Core.PhpCallback)">
            <summary>
            Sorts an array using user comparison callback for comparing keys.
            </summary>
            <param name="caller">The class context used to bind the callback.</param>
            <param name="array">The array to be sorted.</param>
            <param name="compare">The user callback to be used for comparison of values.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.NaturalSort(PHP.Core.PhpArray)">
            <summary>
            Sorts an array using case sensitive natural comparison method for comparing 
            values preserving key-value association.
            </summary>
            <param name="array">The array to be sorted.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.NaturalCaseInsensitiveSort(PHP.Core.PhpArray)">
            <summary>
            Sorts an array using case insensitive natural comparison method for 
            comparing values preserving key-value association.
            </summary>
            <param name="array">The array to be sorted.</param>
            <remarks>Resets <paramref name="array"/>'s intrinsic enumerator.</remarks>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.MultiSortResolveArgs(PHP.Core.PhpArray,System.Object[],PHP.Core.PhpArray[],System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{PHP.Core.IntStringKey,System.Object}}[])">
            <summary>
            Resolves arguments passed to <see cref="M:PHP.Library.PhpArrays.MultiSort(PHP.Core.PhpArray,System.Object[])"/> method according to PHP manual for <c>array_multisort</c> function.
            </summary>
            <param name="first">The first argument of <see cref="M:PHP.Library.PhpArrays.MultiSort(PHP.Core.PhpArray,System.Object[])"/>.</param>
            <param name="args">The rest of arguments of <see cref="M:PHP.Library.PhpArrays.MultiSort(PHP.Core.PhpArray,System.Object[])"/>.</param>
            <param name="arrays">An array to be filled with arrays passed in all arguments.</param>
            <param name="comparers">An array to be filled with comparers defined by arguments.</param>
            <remarks>
            Arrays and comparers can be a <B>null</B> reference. In such a case only number of arrays to be sorted
            is returned. Otherwise, <paramref name="arrays"/> is filled with these arrays and <paramref name="comparers"/>
            with comparers defined by appropriate arguments.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.MultiSort(PHP.Core.PhpArray,System.Object[])">
            <summary>
            Sort multiple arrays.
            </summary>
            <param name="first">The first array to be sorted.</param>
            <param name="args">Arrays to be sorted along with flags affecting sort order and 
            comparison methods to be used. See PHP manual for more details.</param>
            <returns>Whether arrays were sorted successfully.</returns>
            <remarks>Reindexes integer keys in the sorted arrays and restarts their intrinsic enumerators.</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="first"/> is a <B>null</B> reference (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Arrays has different lengths (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Invalid sorting flags (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Multiple sorting flags applied on single array (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.SetOperation(PHP.Core.SetOperations,PHP.Core.PhpArray,PHP.Core.PhpArray[],System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{PHP.Core.IntStringKey,System.Object}})">
            <summary>
            Internal method common for all functions.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.SplitArraysAndComparers(System.Int32,PHP.Core.PhpArray,System.Object[],PHP.Core.PhpArray[]@,PHP.Core.PhpCallback@,PHP.Core.PhpCallback@)">
            <summary>
            There have to be at least 1 value in <paramref name="vars"/>.
            The last is converted to callback, the rest to arrays.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.Diff(PHP.Core.PhpArray,PHP.Core.PhpArray[])">
            <summary>
            Computes the difference of arrays.
            </summary>
            <param name="array">The array from which to take items away.</param>
            <param name="arrays">The arrays to be differentiated.</param>
            <returns>The array containing all the entries of <paramref name="array"/> that are not present 
            in any of the <paramref name="arrays"/>.</returns>
            <remarks>Keys are preserved. Entries are considered to be equal iff values compared by  
            by string comparison method are the same (see <see cref="F:PHP.Core.ValueComparer.String"/>).</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="array"/> is a <B>null</B> reference.</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="arrays"/> is a <B>null</B> reference or an empty array.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.Intersect(PHP.Core.PhpArray,PHP.Core.PhpArray[])">
            <summary>
            Computes the intersection of arrays.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.DiffAssoc(PHP.Core.PhpArray,PHP.Core.PhpArray[])">
            <summary>
            Computes the difference of arrays.
            </summary>
            <param name="array">The array from which to take items away.</param>
            <param name="arrays">The arrays to be differentiated.</param>
            <returns>The array containing all the entries of <paramref name="array"/> that are not present 
            in any of the <paramref name="arrays"/>.</returns>
            <remarks>Keys are preserved. Entries are considered to be equal iff they has the same keys and values
            according to string method comparison (see <see cref="T:PHP.Core.EntryComparer"/> and <see cref="T:PHP.Core.PhpStringComparer"/>).</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="array"/> is a <B>null</B> reference.</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="arrays"/> is a <B>null</B> reference or an empty array.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.IntersectAssoc(PHP.Core.PhpArray,PHP.Core.PhpArray[])">
            <summary>
            Computes the intersection of arrays.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.DiffKey(PHP.Core.PhpArray,PHP.Core.PhpArray[])">
            <summary>
            Computes the difference of arrays.
            </summary>
            <param name="array">The array from which to take items away.</param>
            <param name="arrays">The arrays to be differentiated.</param>
            <returns>The array containing all the entries of <paramref name="array"/> that are not present 
            in any of the <paramref name="arrays"/>.</returns>
            <remarks>Entries are considered to be equal iff keys compared by  
            by string comparison method are the same (see <see cref="F:PHP.Core.KeyComparer.String"/>).</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="array"/> is a <B>null</B> reference.</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="arrays"/> is a <B>null</B> reference or an empty array.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.IntersectKey(PHP.Core.PhpArray,PHP.Core.PhpArray[])">
            <summary>
            Computes the intersection of arrays.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.DiffDiffUser(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Object[])">
            <summary>
            Computes the difference of arrays using a specified key comparer.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.IntersectUserKey(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Object[])">
            <summary>
            Computes the intersection of arrays using a specified key comparer.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.UserDiff(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Object[])">
            <summary>
            Computes the difference of arrays using a specified comparer.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.UserIntersect(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Object[])">
            <summary>
            Computes the intersection of arrays using a specified comparer.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.UserDiffAssoc(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Object[])">
            <summary>
            Computes the difference of arrays using a specified comparer.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.UserIntersectAssoc(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Object[])">
            <summary>
            Computes the intersection of arrays using a specified comparer.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.DiffUserAssoc(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Object[])">
            <summary>
            Computes the difference of arrays using a specified comparer.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.IntersectUserAssoc(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Object[])">
            <summary>
            Computes the intersection of arrays using a specified comparer.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.UserDiffUserAssoc(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Object[])">
            <summary>
            Computes the difference of arrays using specified comparers.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.UserIntersectUserAssoc(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Object[])">
            <summary>
            Computes the intersection of arrays using specified comparers.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.Merge(PHP.Core.PhpArray[])">
            <summary>
            Merges one or more arrays. Integer keys are changed to new ones, string keys are preserved.
            Values associated with existing string keys are be overwritten.
            </summary>
            <param name="arrays">Arrays to be merged.</param>
            <returns>The <see cref="T:PHP.Core.PhpArray"/> containing items from all <paramref name="arrays"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.MergeRecursiveDc(PHP.Core.PhpArray,PHP.Core.PhpArray[])">
            <summary>
            Merges arrays recursively.
            </summary>
            <param name="array">The first array to merge.</param>
            <param name="arrays">The next arrays to merge.</param>
            <returns>An array containing items of all specified arrays.</returns>
            <remarks>
            Integer keys are reset so there cannot be a conflict among them. 
            Conflicts among string keys are resolved by merging associated values into arrays. 
            Merging is propagated recursively. Merged values are dereferenced. References are 
            preserved in non-merged values.
            </remarks>
            <exception cref="T:PHP.Core.PhpException">Some array is a <B>null</B> reference (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.MergeRecursive(PHP.Core.PhpArray,System.Boolean,PHP.Core.PhpArray[])">
            <summary>
            Merges arrays recursively.
            </summary>
            <param name="array">The first array to merge.</param>
            <param name="arrays">The next arrays to merge.</param>
            <param name="deepCopy">Whether to deep copy merged items.</param>
            <returns>An array containing items of all specified arrays.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.MergeRecursiveInternal(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Boolean)">
            <summary>
            Adds items of "array" to "result" merging those whose string keys are the same.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.StringKeysToLower(PHP.Core.PhpArray)">
            <summary>
            Converts string keys in <see cref="T:PHP.Core.PhpArray"/> to lower case.
            </summary>
            <param name="array">The <see cref="T:PHP.Core.PhpArray"/> to be converted.</param>
            <returns>The copy of <paramref name="array"/> with all string keys lower cased.</returns>
            <remarks>Integer keys as well as all values remain unchanged.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.StringKeysToUpper(PHP.Core.PhpArray)">
            <summary>
            Converts string keys in <see cref="T:PHP.Core.PhpArray"/> to upper case.
            </summary>
            <param name="array">The <see cref="T:PHP.Core.PhpArray"/> to be converted.</param>
            <returns>The copy of <paramref name="array"/> with all string keys upper cased.</returns>
            <remarks>Integer keys as well as all values remain unchanged.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.ChangeKeyCase(PHP.Core.PhpArray)">
            <summary>
            Converts string keys in <see cref="T:PHP.Core.PhpArray"/> to lower case.
            </summary>
            <param name="array">The <see cref="T:PHP.Core.PhpArray"/> to be converted.</param>
            <returns>The copy of <paramref name="array"/> with all string keys lower cased.</returns>
            <remarks>Integer keys as well as all values remain unchanged.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.ChangeKeyCase(PHP.Core.PhpArray,PHP.Library.LetterCase)">
            <summary>
            Converts string keys in <see cref="T:PHP.Core.PhpArray"/> to specified case.
            </summary>
            <param name="array">The <see cref="T:PHP.Core.PhpArray"/> to be converted.</param>
            <param name="keyCase">The <see cref="T:PHP.Library.LetterCase"/> to convert keys to.</param>
            <returns>The copy of <paramref name="array"/> with all string keys lower cased.</returns>
            <remarks>Integer keys as well as all values remain unchanged.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.ChunkDc(PHP.Core.PhpArray,System.Int32)">
            <summary>
            Splits an array into chunks.
            </summary>
            <param name="array">The array to be split.</param>
            <param name="size">The number of items in each chunk (except for the last one where can be lesser items).</param>
            <returns>The array containing chunks indexed by integers starting from zero, 
            all keys in chunks are reindexed starting from zero.</returns>
            <remarks>Chunks will contain deep copies of <paramref name="array"/> items.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.ChunkDc(PHP.Core.PhpArray,System.Int32,System.Boolean)">
            <summary>
            Splits an array into chunks.
            </summary>
            <param name="array">The array to be split.</param>
            <param name="size">The number of items in each chunk (except for the last one where can be lesser items).</param>
            <param name="preserveKeys">Whether to preserve keys in chunks.</param>
            <returns>The array containing chunks indexed by integers starting from zero.</returns>
            <remarks>Chunks will contain deep copies of <paramref name="array"/> items.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Chunk(PHP.Core.PhpArray,System.Int32)">
            <summary>
            Splits an array into chunks.
            </summary>
            <param name="array">The array to be split.</param>
            <param name="size">The number of items in each chunk (except for the last one where can be lesser items).</param>
            <returns>The array containing chunks indexed by integers starting from zero, 
            all keys in chunks are reindexed starting from zero.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.Chunk(PHP.Core.PhpArray,System.Int32,System.Boolean)">
            <summary>
            Splits an array into chunks.
            </summary>
            <param name="array">The array to be split.</param>
            <param name="size">The number of items in each chunk (except for the last one where can be lesser items).</param>
            <param name="preserveKeys">Whether to preserve keys in chunks.</param>
            <returns>The array containing chunks indexed by integers starting from zero.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.ChunkInternal(PHP.Core.PhpArray,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Internal version of <see cref="M:PHP.Library.PhpArrays.Chunk(PHP.Core.PhpArray,System.Int32)"/> with deep-copy option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.CountValues(PHP.Core.PhpArray)">
            <summary>
            Counts frequency of each value in an array.
            </summary>
            <param name="array">The array which values to count.</param>
            <returns>The array which keys are values of <paramref name="array"/> and values are their frequency.</returns>
            <remarks>
            Only <see cref="T:System.String"/> and <see cref="T:System.Int32"/> values are counted.
            Note, string numbers (e.g. "10") and their integer equivalents (e.g. 10) are counted separately.
            </remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="array"/> is a <B>null</B> reference.</exception>
            <exception cref="T:PHP.Core.PhpException">A value is neither <see cref="T:System.String"/> nor <see cref="T:System.Int32"/>.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.Unique(PHP.Core.PhpArray)">
            <summary>
            Removes duplicate values from an array.
            </summary>
            <param name="array">The array which duplicate values to remove.</param>
            <returns>A copy of <paramref name="array"/> without duplicated values.</returns>
            <remarks>
            Values are compared using string comparison method (<see cref="F:PHP.Core.ValueComparer.String"/>).  
            </remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="array"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.Unique(PHP.Core.PhpArray,PHP.Library.PhpArrays.ArrayUniqueSortFlags)">
            <summary>
            Removes duplicate values from an array.
            </summary>
            <param name="array">The array which duplicate values to remove.</param>
            <param name="sortFlags">Specifies how the values are compared to be identical.</param>
            <returns>A copy of <paramref name="array"/> without duplicated values.</returns>
            <remarks>
            Values are compared using string comparison method (<see cref="F:PHP.Core.ValueComparer.String"/>).  
            </remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="array"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.Flip(PHP.Core.PhpArray)">
            <summary>
            Swaps all keys and their associated values in an array.
            </summary>
            <param name="array">The array.</param>
            <returns>An array containing entries which keys are values from the <paramref name="array"/>
            and which values are the corresponding keys.</returns>
            <remarks>
            <para>
            Values which are not of type <see cref="T:System.String"/> nor <see cref="T:System.Int32"/> are skipped 
            and for each such value a warning is reported. If there are more entries with the same 
            value in the <paramref name="array"/> the last key is considered others are ignored.
            String keys are converted using <see cref="M:PHP.Core.Convert.StringToArrayKey(System.String)"/>.
            </para>
            <para>
            Unlike PHP this method doesn't return <B>false</B> on failure but a <B>null</B> reference.
            This is because it fails only if <paramref name="array"/> is a <B>null</B> reference.
            </para>
            </remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="array"/> is a <B>null</B> reference (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">A value is neither <see cref="T:System.String"/> nor <see cref="T:System.Int32"/> (Warning).</exception>     
        </member>
        <member name="M:PHP.Library.PhpArrays.Keys(PHP.Core.PhpArray)">
            <summary>
            Retrieves an array of keys contained in a given array.
            </summary>
            <param name="array">An array which keys to get.</param>
            <returns><see cref="T:PHP.Core.PhpArray"/> of <paramref name="array"/>'s keys.
            Keys in returned array are successive integers starting from zero.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="array"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.Keys(PHP.Core.PhpArray,System.Object)">
            <summary>
            Retrieves an array of some keys contained in a given array.
            </summary>
            <param name="array">An array which keys to get.</param>
            <param name="searchValue">Only the keys for this value are returned. 
            Values are compared using regular comparison method (<see cref="M:PHP.Core.PhpComparer.CompareEq(System.Object,System.Object)"/>).</param>
            <returns>An array of keys being associated with specified value. 
            Keys in returned array are successive integers starting from zero.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="array"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.Keys(PHP.Core.PhpArray,System.Object,System.Boolean)">
            <summary>
            Retrieves an array of some keys contained in a given array.
            </summary>
            <param name="array">An array which keys to get.</param>
            <param name="searchValue">Only the keys for this value are returned. 
            Values are compared using regular comparison method (<see cref="M:PHP.Core.PhpComparer.CompareEq(System.Object,System.Object)"/>).</param>
            <param name="strict">If true, uses strict comparison method (operator "===").</param>
            <returns>An array of keys being associated with specified value. 
            Keys in returned array are successive integers starting from zero.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="array"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.Values(PHP.Core.PhpArray)">
            <summary>
            Retrieves an array of values contained in a given array.
            </summary>
            <param name="array">An array which values to get.</param>
            <returns>A copy of <paramref name="array"/> with all keys indexed starting from zero.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="array"/> is a <B>null</B> reference.</exception>
            <remarks>Doesn't dereference PHP references.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Combine(PHP.Core.PhpArray,PHP.Core.PhpArray)">
            <summary>
            Creates an array using one array for its keys and the second for its values.
            </summary>
            <param name="keys">The keys of resulting array.</param>
            <param name="values">The values of resulting array.</param>
            <returns>An array with keys from <paramref name="keys"/> values and values 
            from <paramref name="values"/> values.</returns>
            <remarks>
            <paramref name="keys"/> and <paramref name="values"/> should have the same length (zero is 
            adminssible - an empty array is returned).
            Keys are converted using <see cref="M:PHP.Core.Convert.ObjectToArrayKey(System.Object,PHP.Core.IntStringKey@)"/> before hashed to resulting array.
            If more keys has the same value after conversion the last one is used.
            If a key is not a legal array key it is skipped.
            </remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="keys"/> or <paramref name="values"/> is a <B>null</B> reference.</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="keys"/> and <paramref name="values"/> has different length.</exception>
            <remarks>Doesn't dereference PHP references.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Sum(PHP.Core.PhpArray)">
            <summary>
            Sums all values in an array. Each value is converted to a number in the same way it is done by PHP.
            </summary>
            <exception cref="T:PHP.Core.PhpException">Thrown if the <paramref name="array"/> argument is null.</exception>
            <returns>
            An integer, if all items are integers or strings converted to integers and the result is in integer range.
            A double, otherwise.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.Product(PHP.Core.PhpArray)">
            <summary>
            Computes a product of all values in an array. 
            Each value is converted to a number in the same way it is done by PHP.
            </summary>
            <exception cref="T:PHP.Core.PhpException">Thrown if the <paramref name="array"/> argument is null.</exception>
            <returns>
            An integer, if all items are integers or strings converted to integers and the result is in integer range.
            A double, otherwise.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.Walk(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpHashtable,PHP.Core.PhpCallback)">
            <summary>
            Applies a user function or method on each element of a specified array or dictionary.
            </summary>
            <returns><B>true</B>.</returns>
            <remarks>See <see cref="M:PHP.Library.PhpArrays.Walk(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpHashtable,PHP.Core.PhpCallback,System.Object)"/> for details.</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="function"/> or <paramref name="array"/> are <B>null</B> references.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.Walk(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpHashtable,PHP.Core.PhpCallback,System.Object)">
            <summary>
            Applies a user function or method on each element (value) of a specified dictionary.
            </summary>
            <param name="caller">Current class context.</param>
            <param name="array">The array (or generic dictionary) to walk through.</param>
            <param name="callback">
            The callback called for each element of <paramref name="array"/>.
            The callback is assumed to have two or three parameters:
            <list type="number">
              <item>
                <term>
                  A value of dictionary entry. Can be specified with &amp; modifier which propagates any changes
                  make to the argument back to the entry. The dictionary can be changed in this way.
                </term>
              </item>
              <item>A key of dictionary entry.</item>
              <item>
                Value of <paramref name="data"/> parameter if it is not a <B>null</B> reference.
                Otherwise, the callback is assumed to have two parameters only.
              </item>
            </list>
            </param>
            <param name="data">An additional parameter passed to <paramref name="callback"/> as its third parameter.</param>
            <returns><B>true</B>.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="callback"/> or <paramref name="array"/> are <B>null</B> references.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.WalkRecursive(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpHashtable,PHP.Core.PhpCallback)">
            <summary>
            Applies a user function or method on each element of a specified array recursively.
            </summary>
            <returns><B>true</B>.</returns>
            <remarks>See <see cref="M:PHP.Library.PhpArrays.Walk(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpHashtable,PHP.Core.PhpCallback,System.Object)"/> for details.</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="callback"/> or <paramref name="array"/> are <B>null</B> references.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.WalkRecursive(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpHashtable,PHP.Core.PhpCallback,System.Object)">
            <summary>
            Applies a user function or method on each element (value) of a specified dictionary recursively.
            </summary>
            <param name="caller">Current class context.</param>
            <param name="array">The array to walk through.</param>
            <param name="callback">The callback called for each element of <paramref name="array"/>.</param>
            <param name="data">An additional parameter passed to <paramref name="callback"/> as its third parameter.</param>
            <exception cref="T:PHP.Core.PhpException"><paramref name="callback"/> or <paramref name="array"/> are <B>null</B> references.</exception>
            <remarks><seealso cref="M:PHP.Library.PhpArrays.Walk(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpHashtable,PHP.Core.PhpCallback)"/>.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.PrepareWalk(System.Collections.IDictionary,PHP.Core.PhpCallback,System.Object)">
            <summary>
            Prepares a walk for <see cref="M:PHP.Library.PhpArrays.Walk(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpHashtable,PHP.Core.PhpCallback)"/> and <see cref="M:PHP.Library.PhpArrays.WalkRecursive(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpHashtable,PHP.Core.PhpCallback)"/> methods.
            </summary>
            <exception cref="T:PHP.Core.PhpException"><paramref name="callback"/> or <paramref name="array"/> are <B>null</B> references.</exception>
        </member>
        <member name="M:PHP.Library.PhpArrays.VisitEntryOnWalk(PHP.Core.Reflection.DTypeDesc,System.Collections.Generic.KeyValuePair{PHP.Core.IntStringKey,System.Object},System.Collections.Generic.IDictionary{PHP.Core.IntStringKey,System.Object},PHP.Core.PhpCallback,System.Object[])">
            <summary>
            Visits an entyr of array which <see cref="M:PHP.Library.PhpArrays.Walk(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpHashtable,PHP.Core.PhpCallback)"/> or <see cref="M:PHP.Library.PhpArrays.WalkRecursive(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpHashtable,PHP.Core.PhpCallback)"/> is walking through.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpArrays.Filter(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpArray)">
            <summary>
            Retuns the specified array.
            see http://php.net/manual/en/function.array-filter.php
            </summary>
            <remarks>The caller argument is here just because of the second Filter() method. Phalanger shares the function properties over the overloads.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.Filter(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpArray,PHP.Core.PhpCallback)">
            <summary>
            Filters an array using a specified callback.
            </summary>
            <param name="caller">Current class context.</param>
            <param name="array">The array to be filtered.</param>
            <param name="callback">
            The callback called on each value in the <paramref name="array"/>. 
            If the callback returns value convertible to <B>true</B> the value is copied to the resulting array.
            Otherwise, it is ignored.
            </param>
            <returns>An array of unfiltered items.</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.MapIdentity(System.Object,PHP.Core.PhpStack)">
            <summary>
            Default callback for <see cref="M:PHP.Library.PhpArrays.Map(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpCallback,PHP.Core.PhpArray[])"/>.
            </summary>
            <param name="instance">Unused.</param>
            <param name="stack">A PHP stack.</param>
            <returns>A <see cref="T:PHP.Core.PhpArray"/> containing items on the stack (passed as arguments).</returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.Map(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpCallback,PHP.Core.PhpArray[])">
            <summary>
            Applies a callback function on specified tuples one by one storing its results to an array.
            </summary>
            <param name="caller">The class context used to resolve given callback.</param>
            <param name="map">
            A callback to be called on tuples. The number of arguments should be the same as
            the number of arrays specified by <pramref name="arrays"/>.
            Arguments passed by reference modifies elements of <pramref name="arrays"/>.
            A <B>null</B> means default callback which makes integer indexed arrays from the tuples is used. 
            </param>
            <param name="arrays">Arrays where to load tuples from. </param>
            <returns>An array of return values of the callback
            keyed by keys of the <paramref name="arrays"/> if it
            is a single array or by integer keys starting from 0.</returns>
            <remarks>
            <para>
            In the <I>i</I>-th call the <I>j</I>-th parameter of the callback will be 
            the <I>i</I>-th value of the <I>j</I>-the array or a <B>null</B> if that array 
            has less then <I>i</I> entries.
            </para>
            <para>
            If the callback assigns a value to a parameter passed by reference in the <I>i</I>-the call 
            and the respective array contains at least <I>i</I> elements the assigned value is propagated 
            to the array.
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.ArrayReplace(PHP.Core.PhpArray,PHP.Core.PhpArray[])">
            <summary>
            array_replace() replaces the values of the first array with the same values from
            all the following arrays. If a key from the first array exists in the second array,
            its value will be replaced by the value from the second array. If the key exists in
            the second array, and not the first, it will be created in the first array. If a key
            only exists in the first array, it will be left as is. If several arrays are passed
            for replacement, they will be processed in order, the later arrays overwriting the
            previous values.
             
            array_replace() is not recursive : it will replace values in the first array by
            whatever type is in the second array. 
            </summary>
            <param name="array">The array in which elements are replaced. </param>
            <param name="arrays">The arrays from which elements will be extracted. </param>
            <returns>Deep copy of array with replacements. Returns an array, or NULL if an error occurs. </returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.ArrayReplaceRecursive(PHP.Core.PhpArray,PHP.Core.PhpArray[])">
            <summary>
             array_replace_recursive() replaces the values of the first array with the same values
             from all the following arrays. If a key from the first array exists in the second array,
             its value will be replaced by the value from the second array. If the key exists in the
             second array, and not the first, it will be created in the first array. If a key only
             exists in the first array, it will be left as is. If several arrays are passed for
             replacement, they will be processed in order, the later array overwriting the previous
             values.
             
            array_replace_recursive() is recursive : it will recurse into arrays and apply the same
            process to the inner value.
            
            When the value in array is scalar, it will be replaced by the value in array1, may it be
            scalar or array. When the value in array and array1 are both arrays, array_replace_recursive()
            will replace their respective value recursively. 
            </summary>
            <param name="array">The array in which elements are replaced. </param>
            <param name="arrays">The arrays from which elements will be extracted.</param>
            <returns>Deep copy of array with replacements. Returns an array, or NULL if an error occurs. </returns>
        </member>
        <member name="M:PHP.Library.PhpArrays.ArrayReplaceImpl(PHP.Core.PhpArray,PHP.Core.PhpArray[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrays"></param>
            <param name="recursive"></param>
            <returns></returns>
            <remarks>Performs deep copy of array, return array with replacements.</remarks>
        </member>
        <member name="M:PHP.Library.PhpArrays.ArrayReplaceImpl(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Boolean)">
            <summary>
            Performs replacements on deeply-copied array. Performs deep copies of replace values.
            </summary>
            <param name="array"></param>
            <param name="replaceWith"></param>
            <param name="recursive"></param>
        </member>
        <member name="F:PHP.Library.PhpArrays.ArrayUniqueSortFlags.Regular">
            <summary>
            compare items normally (don't change types)
            </summary>
        </member>
        <member name="F:PHP.Library.PhpArrays.ArrayUniqueSortFlags.Numeric">
            <summary>
            compare items numerically
            </summary>
        </member>
        <member name="F:PHP.Library.PhpArrays.ArrayUniqueSortFlags.String">
            <summary>
            compare items as strings, default
            </summary>
        </member>
        <member name="F:PHP.Library.PhpArrays.ArrayUniqueSortFlags.LocaleString">
            <summary>
            compare items as strings, based on the current locale.
            Added in PHP 4.4.0 and 5.0.2. Before PHP 6, it uses the system locale,
            which can be changed using setlocale(). Since PHP 6, you must use the i18n_loc_set_default() function.
            </summary>
        </member>
        <member name="T:PHP.Library.LibResources">
            <summary>
            Manages resources of the Class Library.
            </summary>
        </member>
        <member name="F:PHP.Library.LibResources.strings">
            <summary>
            Resource manager of strings.
            </summary>
        </member>
        <member name="M:PHP.Library.LibResources.#cctor">
            <summary>
            Initializes the resource manager.
            </summary>
        </member>
        <member name="M:PHP.Library.LibResources.GetString(System.String)">
            <summary>
            Retrieves a string resource.
            </summary>
            <param name="id">The string identifier.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:PHP.Library.LibResources.GetString(System.String,System.Object[])">
            <summary>
            Retrieves formatted string resource.
            </summary>
            <param name="id">The string identifier.</param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
            <returns>The formatted string resource.</returns>
            <exception cref="T:System.ArgumentNullException">The string resource with <paramref name="id"/> doesn't exist.</exception>
            <exception cref="T:System.FormatException">The string resource is not valid formatting string for specified arguments.</exception>
        </member>
        <member name="M:PHP.Library.LibResources.GetString(System.String,System.Object)">
            <summary>
            Retrieves formatted string resource.
            </summary>
            <param name="id">The string identifier.</param>
            <param name="arg">An <see cref="T:System.Object"/> to format.</param>
            <returns>The formatted string resource.</returns>
            <exception cref="T:System.ArgumentNullException">The string resource with <paramref name="id"/> doesn't exist.</exception>
            <exception cref="T:System.FormatException">The string resource is not valid formatting string for specified arguments.</exception>
        </member>
        <member name="M:PHP.Library.LibResources.GetString(System.String,System.Object,System.Object)">
            <summary>
            Retrieves formatted string resource.
            </summary>
            <param name="id">The string identifier.</param>
            <param name="arg1">An <see cref="T:System.Object"/> to format.</param>
            <param name="arg2">An <see cref="T:System.Object"/> to format.</param>
            <returns>The formatted string resource.</returns>
            <exception cref="T:System.ArgumentNullException">The string resource with <paramref name="id"/> doesn't exist.</exception>
            <exception cref="T:System.FormatException">The string resource is not valid formatting string for specified arguments.</exception>
        </member>
        <member name="M:PHP.Library.LibResources.GetString(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Retrieves formatted string resource.
            </summary>
            <param name="id">The string identifier.</param>
            <param name="arg1">An <see cref="T:System.Object"/> to format.</param>
            <param name="arg2">An <see cref="T:System.Object"/> to format.</param>
            <param name="arg3">An <see cref="T:System.Object"/> to format.</param>
            <returns>The formatted string resource.</returns>
            <exception cref="T:System.ArgumentNullException">The string resource with <paramref name="id"/> doesn't exist.</exception>
            <exception cref="T:System.FormatException">The string resource is not valid formatting string for specified arguments.</exception>
        </member>
        <member name="T:PHP.Library.PhpBitConverter">
            <summary>
            Binary data converter (implements pack/unpack PHP functions).
            </summary>
            <remarks>
            <list>
              <term>a</term><description>0x00-padded string</description>
              <term>A</term><description>0x20-padded string</description>
              <term>h</term><description>Hex string, low nibble first</description>
              <term>H</term><description>Hex string, high nibble first</description>
              <term>c</term><description>signed char</description>
              <term>C</term><description>unsigned char</description>
              <term>s</term><description>signed short - 16 bit, machine byte order</description>
              <term>S</term><description>unsigned short - 16 bit, machine byte order</description>
              <term>n</term><description>unsigned short - 16 bit, big endian byte order</description>
              <term>v</term><description>unsigned short - 16 bit, little endian byte order</description>
              <term>i</term><description>signed integer - 32 bit and byte order (PHP: machine dependent size)</description>
              <term>I</term><description>unsigned integer - 32 bit and byte order (PHP: machine dependent size)</description>
              <term>l</term><description>signed long - 32 bit, machine byte order</description>
              <term>L</term><description>unsigned long - 32 bit, machine byte order</description>
              <term>N</term><description>unsigned long - 32 bit, big endian byte order</description>
              <term>V</term><description>unsigned long - 32 bit, little endian byte order</description>
              <term>f</term><description>float - machine dependent size and representation</description>
              <term>d</term><description>double - machine dependent size and representation</description>
              <term>x</term><description>0x00 byte</description>
              <term>X</term><description>Back up one byte</description>
              <term>@</term><description>0x00-fill to absolute position</description>
            </list>
            </remarks>
        </member>
        <member name="F:PHP.Library.PhpBitConverter.InfiniteRepeater">
            <summary>
            Integer representing '*' repeater.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpBitConverter.Pack(System.String,System.Object[])">
            <summary>
            Formats given integers to a string of bytes according to specified format string.
            </summary>
            <param name="format">The string defining the format of the result. See PHP manual for details.</param>
            <param name="args">Integers to be formatted to binary data according to <paramref name="format"/>.</param>
            <returns>Binary data.</returns>
        </member>
        <member name="M:PHP.Library.PhpBitConverter.ParseFormat(System.String,System.Object[],System.Char[],System.Int32[])">
            <summary>
            Parses pack format. Stores specifiers and repeaters into the respective arrays.
            Repeaters are ensured to be finite and non-negative (infinite repeaters are converted to finite).
            Some arguments are also converted to another form (e.g. to string) because we will need that form later.
            </summary>
            <returns>Returns the number of parsed specifiers or 0 on error.</returns>
        </member>
        <member name="M:PHP.Library.PhpBitConverter.ParseRepeater(System.String,System.Int32@)">
            <summary>
            Parses repeater.
            </summary>
            <param name="format">The format string.</param>
            <param name="i">The current position in the format string.</param>
            <returns>
            The value of repeater. Either non-negative integer or <see cref="F:PHP.Library.PhpBitConverter.InfiniteRepeater"/> (asterisk).
            </returns>
        </member>
        <member name="M:PHP.Library.PhpBitConverter.GetPackedDataSize(System.Char[],System.Int32[],System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Computes the total size of binary data according to given specifiers and repeaters.
            Only <c>count</c> of them are valid.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpBitConverter.PackInternal(System.Byte[],System.Object[],System.Char[],System.Int32[],System.Int32)">
            <summary>
            Packs arguments into the buffer according to given specifiers and repeaters.
            Count specifies the number of valid specifiers/repeaters.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpBitConverter.PackNumber(System.Byte[],System.Boolean,System.Byte[],System.Int32@)">
            <summary>
            Packs a number (integer or double) into the buffer.
            </summary>
            <param name="bytes">The number converted to bytes by <see cref="T:System.BitConverter"/>.</param>
            <param name="toLittleEndian">Whether the result should be in little endian encoding.</param>
            <param name="buffer">The buffer where to copy the covnerted number.</param>
            <param name="pos">The position where to start in the buffer. Advanced by the length of bytes.</param>
        </member>
        <member name="M:PHP.Library.PhpBitConverter.Unpack(System.String,PHP.Core.PhpBytes)">
            <summary>
            Unpacks data from a string of bytes into <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
            <param name="format">The string defining the items of the result. See PHP manual for details.</param>
            <param name="data">The string of bytes to be unpacked.</param>
            <returns>The <see cref="T:PHP.Core.PhpArray"/> containing unpacked data.</returns>
        </member>
        <member name="M:PHP.Library.PhpBitConverter.GetSizeToUnpack(System.Char,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets a size of data to be unpacked according to the specifier.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpBitConverter.ParseFormatToken(System.String,System.Int32@,System.Char@,System.Int32@,System.String@)">
            <summary>
            Parses format token "{specifier}{repeater}?{name}?/?"
            </summary>
        </member>
        <member name="M:PHP.Library.PhpBitConverter.AddValue(PHP.Core.PhpArray,System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            Adds unpacked value to the resulting array.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpBitConverter.LoadReverseBuffer(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Loads reversed bytes from buffer to an array.
            </summary>
        </member>
        <member name="T:PHP.Library.CharMap">
            <summary>
            Bitmap representig a set of Unicode characters.
            </summary>
        </member>
        <member name="F:PHP.Library.CharMap.flags">
            <summary>
            The bitmap.
            </summary>
        </member>
        <member name="F:PHP.Library.CharMap.lastDirty">
            <summary>
            The index of the last integer in <see cref="F:PHP.Library.CharMap.flags"/> which has at least one bit ever set.
            </summary>
        </member>
        <member name="M:PHP.Library.CharMap.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:PHP.Library.CharMap"/>.
            </summary>
            <param name="size">The number of characters to be mapped.</param>
        </member>
        <member name="M:PHP.Library.CharMap.#ctor(System.UInt32[])">
            <summary>
            Creates a new instance of <see cref="T:PHP.Library.CharMap"/> based on specified map.
            </summary>
            <param name="map">The bits used for character map.</param>
        </member>
        <member name="M:PHP.Library.CharMap.Contains(System.Char)">
            <summary>
            Retrieves whether a character belongs to the set.
            </summary>
            <param name="c">The character to be tested.</param>
            <returns>Whether <paramref name="c"/> is element of the set.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="c"/> is not mapped by this instance.</exception>
        </member>
        <member name="M:PHP.Library.CharMap.Add(System.Char)">
            <summary>
            Adds character to the set.
            </summary>
            <param name="c">The character to be added.</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="c"/> is not mapped by this instance.</exception>
        </member>
        <member name="M:PHP.Library.CharMap.Add(System.String)">
            <summary>
            Adds all characters contained in a specified string.
            </summary>
            <param name="str">The string which characters to add. Can be a <B>null</B> reference.</param>
            <exception cref="T:System.IndexOutOfRangeException">Some character within <paramref name="str"/> is not mapped by this instance.</exception>
        </member>
        <member name="M:PHP.Library.CharMap.Remove(System.Char)">
            <summary>
            Removes character from the set.
            </summary>
            <param name="c">The character to be removed.</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="c"/> is not mapped by this instance.</exception>
        </member>
        <member name="M:PHP.Library.CharMap.AddRange(System.Char,System.Char)">
            <summary>
            Adds a range of characters to the set.
            </summary>
            <param name="first">The lower bound of the range.</param>
            <param name="last">The upper bound of the range.</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="first"/> or <paramref name="last"/> are not mapped by this instance.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="first"/> is less than the <paramref name="last"/>.</exception>
        </member>
        <member name="M:PHP.Library.CharMap.RemoveRange(System.Char,System.Char)">
            <summary>
            Removes a range of characters from the set.
            </summary>
            <param name="first">The lower bound of the range.</param>
            <param name="last">The upper bound of the range.</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="first"/> or <paramref name="last"/> are not mapped by this instance.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="first"/> is less than the <paramref name="last"/>.</exception>
        </member>
        <member name="M:PHP.Library.CharMap.ClearAll">
            <summary>
            Clears all bits in the map.
            </summary>
            <remarks>
            Doesn't necessarily lead to clearing the whole map. Clears the map up to the last bit ever set.
            </remarks>
        </member>
        <member name="M:PHP.Library.CharMap.AddUsingMask(System.String)">
            <summary>
            Adds characters matching given mask. 
            </summary>
            <param name="mask">The mask of characters to be added. Any collection with items convertible to the <see cref="T:System.Char"/> type.</param>
            <remarks>
            <para>The <paramref name="mask"/> may contain single characters as well as intervals "a..b",
            where <I>a</I>, <I>b</I> are characters and <I>a</I> is less than or equal to <I>b</I>.</para>
            <para>There are no characters delimiting elements of the mask.</para>
            <para>If the mask is not valid as a whole its valid parts are processed.</para>
            </remarks>
            <example><c>"a..bA..Z0..9"</c> means alphanumeric characters, <c>"a.b..d"</c> means {'a', 'b', 'c', 'd', '.'} etc.</example>
            <exception cref="T:PHP.Core.PhpException"><paramref name="mask"/> is not valid mask.</exception>
            <exception cref="T:System.InvalidCastException">An item of <paramref name="mask"/> is not convertible to character.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Any character of <paramref name="mask"/> is not mapped by this instance.</exception>
        </member>
        <member name="M:PHP.Library.CharMap.AddUsingMask(System.String,System.String)">
            <summary>
            Adds characters using a mask with specified interval bounds separator.
            </summary>
            <param name="mask">The mask.</param>
            <param name="separator">The separator.</param>
        </member>
        <member name="M:PHP.Library.CharMap.AddUsingRegularMask(System.String,System.Int32,System.Int32,System.Char)">
            <summary>
            Adds character range given a regular-expression like mask. E.g. [a-zA-Z].
            </summary>
            <param name="mask">The mask.</param>
            <param name="start">An index of '[' character in the mask where the range starts.</param>
            <param name="end">An index of the last character of the range. Usually the index of ']' character.</param>
            <param name="separator">The separator character. Usually '-'.</param>
        </member>
        <member name="M:PHP.Library.CharMap.ToString(System.Char,System.Char,System.Boolean)">
            <summary>
            Accumulates all characters contained or not contained in the set to the string in ascending order.
            </summary>
            <param name="first">The lower bound.</param>
            <param name="last">The upper bound.</param>
            <param name="complement">Whether to return characters not contained in the string.</param>
            <returns>
            Depending on the value of the <paramref name="complement"/> the method returns the string of characters in
            this instance and a complement of this instance, respectively, intersected with the 
            [<paramref name="first"/>; <paramref name="last"/>] interval.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="first"/> or <paramref name="last"/> are not mapped by this instance.</exception>
        </member>
        <member name="T:PHP.Library.CharType">
            <summary>
            Implements character type functions known as <c>ctype</c>.
            </summary>
        </member>
        <member name="M:PHP.Library.CharType.IsAlphanumeric(System.Object)">
            <summary>
            Check for alphanumeric character(s).
            </summary>
        </member>
        <member name="M:PHP.Library.CharType.IsAlpha(System.Object)">
            <summary>
            Check for alphabetic character(s). 
            </summary>
        </member>
        <member name="M:PHP.Library.CharType.IsControl(System.Object)">
            <summary>
            Check for control character(s). 
            </summary>
        </member>
        <member name="M:PHP.Library.CharType.IsDigit(System.Object)">
            <summary>
            Check for numeric character(s).
            </summary>
        </member>
        <member name="M:PHP.Library.CharType.IsLower(System.Object)">
            <summary>
            Check for lowercase character(s). 
            </summary>
        </member>
        <member name="M:PHP.Library.CharType.IsPunctuation(System.Object)">
            <summary>
            Check for any printable character which is not whitespace or an alphanumeric character.
            </summary>
        </member>
        <member name="M:PHP.Library.CharType.IsWhiteSpace(System.Object)">
            <summary>
            Check for whitespace character(s).
            </summary>
        </member>
        <member name="M:PHP.Library.CharType.IsUpper(System.Object)">
            <summary>
            Check for uppercase character(s).
            </summary>
        </member>
        <member name="M:PHP.Library.CharType.IsHexadigit(System.Object)">
            <summary>
            Check for character(s) representing a hexadecimal digit. 
            </summary>
        </member>
        <member name="M:PHP.Library.CharType.IsGraph(System.Object)">
            <summary>
            Check for any printable character(s) except space. Those are alpha-numeric characters and punctuations.
            </summary>
        </member>
        <member name="M:PHP.Library.CharType.IsPrintable(System.Object)">
            <summary>
            Check for printable character(s). Those are alpha-numeric characters, punctuations, and space character.
            </summary>
        </member>
        <member name="M:PHP.Library.LibraryConfiguration.GetSetRestore(PHP.Core.LocalConfiguration,System.String,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets, or restores a value of a legacy configuration option.
            </summary>
        </member>
        <member name="M:PHP.Library.LibraryConfiguration.LegacyOptionsToXml(System.Xml.XmlTextWriter,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Writes Phalanger BCL legacy options and their values to XML text stream.
            Skips options whose values are the same as default values of Phalanger.
            </summary>
            <param name="writer">XML writer.</param>
            <param name="options">A hashtable containing PHP names and option values. Consumed options are removed from the table.</param>
            <param name="writePhpNames">Whether to add "phpName" attribute to option nodes.</param>
        </member>
        <member name="M:PHP.Library.LibraryConfiguration.RegisterLegacyOptions">
            <summary>
            Registers legacy ini-options.
            </summary>
        </member>
        <member name="M:PHP.Library.LibraryConfiguration.DeepCopy">
            <summary>
            Creates a deep copy of the configuration record.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="M:PHP.Library.LibraryConfiguration.GetLocal(PHP.Core.ScriptContext)">
            <summary>
            Gets local configuration associated with a specified script context.
            </summary>
            <param name="context">Scritp context.</param>
            <returns>Local library configuration.</returns>
        </member>
        <member name="P:PHP.Library.LibraryConfiguration.Local">
            <summary>
            Gets the library configuration associated with the current script context.
            </summary>
        </member>
        <member name="P:PHP.Library.LibraryConfiguration.DefaultLocal">
            <summary>
            Gets the default library configuration.
            </summary>
        </member>
        <member name="T:PHP.Library.LibraryConfiguration.HighlightingSection">
            <summary>
            Highlighting functions options.
            </summary>
            <summary>
            Highlighting functions options.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.HighlightingSection.String">
            <summary>String color.</summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.HighlightingSection.Comment">
            <summary>Comment color.</summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.HighlightingSection.Keyword">
            <summary>Keyword color.</summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.HighlightingSection.Background">
            <summary>Background color.</summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.HighlightingSection.Html">
            <summary>HTML color.</summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.HighlightingSection.ScriptTags">
            <summary>Script tags color (<c>&lt;?</c>, <c>?&gt;</c>, <c>&lt;%</c>, <c>?&gt;%</c>, ...).</summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.HighlightingSection.Default">
            <summary>Default foreground color.</summary>
        </member>
        <member name="T:PHP.Library.LibraryConfiguration.MailerSection">
            <summary>
            Mailign funtions options.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.MailerSection.SmtpServer">
            <summary>
            SMTP server name used for sending e-mails.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.MailerSection.SmtpPort">
            <summary>
            SMTP server port used for sending e-mails.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.MailerSection.DefaultFromHeader">
            <summary>
            The default value of "From" header.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.MailerSection.AddXHeader">
            <summary>
            Whether to add <c>X-PHP-Originating-Script</c> header to sent mails.
            </summary>
        </member>
        <member name="T:PHP.Library.LibraryConfiguration.SessionSection">
            <summary>
            Serialization options.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.SessionSection.GcProbability">
            <summary>
            A probability factor of invocation of old sessions collection. To get the probability, 
            the factor is divided by <see cref="F:PHP.Library.LibraryConfiguration.SessionSection.GcDivisor"/>.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.SessionSection.GcDivisor">
            <summary>
            The divisor of probability factor.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.SessionSection.GcMaxLifetime">
            <summary>
            A maximal session lifetime in seconds.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.SessionSection.SavePath">
            <summary>
            A directory path relative to the current directory where the session files will be stored in.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.SessionSection.CacheExpire">
            <summary>
            HttpContext.Session.Timeout if not -1.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.SessionSection.CacheLimiter">
            <summary>
            CacheLimiter if not null.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.SessionSection.CookieLifetime">
            <summary>
            HttpContext.SessionCookieLifetime if not -1.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.SessionSection.CookiePath">
            <summary>
            cookie.Path if not null.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.SessionSection.CookieDomain">
            <summary>
            cookie.Domain if not null.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.SessionSection.CookieSecure">
            <summary>
            cookie.Secure.
            </summary>
        </member>
        <member name="M:PHP.Library.LibraryConfiguration.SessionSection.DeepCopy">
            <summary>
            Copies values to the target structure.
            </summary>
        </member>
        <member name="P:PHP.Library.LibraryConfiguration.SessionSection.Serializer">
            <summary>
            A serializer used for serializing session data. Can't contain a <B>null</B> reference.
            Setting <B>null</B> to the propety will set the default PHP serializer.
            </summary>
        </member>
        <member name="T:PHP.Library.LibraryConfiguration.DateSection">
            <summary>
            Date funtions options.
            </summary>
            <summary>
            Date funtions options.
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.DateSection.Latitude">
            <summary>
            Default latitude (used for calculating sunrise and sunset times).
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.DateSection.Longitude">
            <summary>
            Default longitude (used for calculating sunrise and sunset times).
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.DateSection.SunsetZenith">
            <summary>
            Default longitude (used for calculating sunrise and sunset times).
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.DateSection.SunriseZenith">
            <summary>
            Default longitude (used for calculating sunrise and sunset times).
            </summary>
        </member>
        <member name="F:PHP.Library.LibraryConfiguration.DateSection.TimeZone">
            <summary>
            Default timezone used by time-zone functions.
            </summary>
        </member>
        <member name="T:PHP.Library.LibraryConfiguration.SerializationSection">
            <summary>
            Serialization functions options.
            </summary>
        </member>
        <member name="P:PHP.Library.LibraryConfiguration.SerializationSection.DefaultSerializer">
            <summary>
            A serializer used for serializing data. Can't contain a <B>null</B> reference.
            Setting <B>null</B> to the property will set the default PHP serializer.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpConstants">
            <summary>
            Implementation of constants handling functions.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PhpConstants.Define(System.String,System.Object)">
            <summary>
            Defines a constant.
            </summary>
            <param name="name">The name of the constant. Can be arbitrary string.</param>
            <param name="value">The value of the constant. Can be <B>null</B> reference or a scalar <see cref="M:PHP.Library.PhpVariables.IsScalar(System.Object)"/>.</param>
            <returns>Whether the new constant has been defined.</returns>
        </member>
        <member name="M:PHP.Library.PhpConstants.Define(System.String,System.Object,System.Boolean)">
            <summary>
            Defines a constant.
            </summary>
            <param name="name">The name of the constant. Can be arbitrary string.</param>
            <param name="value">The value of the constant. Can be <B>null</B> reference or a scalar <see cref="M:PHP.Library.PhpVariables.IsScalar(System.Object)"/>.</param>
            <param name="caseInsensitive">Whether the name is case insensitive.</param>
            <returns>Whether the new constant has been defined.</returns>
        </member>
        <member name="M:PHP.Library.PhpConstants.Defined(PHP.Core.ScriptContext,System.String)">
            <summary>
            Determines whether a constant is defined.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="name">The name of the constant.</param>
            <returns>Whether the constant is defined.</returns>
        </member>
        <member name="M:PHP.Library.PhpConstants.EvaluateConstant(PHP.Core.Analyzer,System.String,System.Nullable{System.Boolean}@)">
            <summary>
            Try to find constant by given <paramref name="name"/> in compile time.
            </summary>
            <param name="analyzer">Actual <see cref="T:PHP.Core.Analyzer"/>.</param>
            <param name="name">Constant name, including class constants.</param>
            <param name="exists">Outputs <c>true</c> or <c>false</c> if the existance of the constant was determined.</param>
            <returns>Constant descriptor.</returns>
        </member>
        <member name="M:PHP.Library.PhpConstants.Constant(System.String)">
            <summary>
            Retrieves a value of a constant.
            </summary>
            <param name="name">The name of the constant.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:PHP.Library.PhpConstants.GetDefinedConstants">
            <summary>
            Retrieves defined constants.
            </summary>
            <returns>The array which contains pairs (constant name,constant value).</returns>
        </member>
        <member name="M:PHP.Library.PhpConstants.GetDefinedConstants(System.Boolean)">
            <summary>
            Retrieves defined constants.
            </summary>
            <param name="categorize">Returns a multi-dimensional array with categories in the keys of the first dimension and constants and their values in the second dimension. </param>
            <returns>Retrives the names and values of all the constants currently defined.</returns>
        </member>
        <member name="M:PHP.Library.PhpGlob.CanonizePattern(System.String)">
            <summary>
            Replaces all slashes with <c>/</c>.
            </summary>
            <param name="pattern">Path pattern.</param>
            <returns>Canonized pattern.</returns>
        </member>
        <member name="M:PHP.Library.PhpGlob.FnMatch(System.String,System.String,PHP.Library.PhpGlob.FnMatchOptions)">
            <summary>
            Matches the given path against a pattern.
            </summary>
            <param name="pattern">A <see cref="T:System.String"/> containing a wildcard.</param>
            <param name="path">The <see cref="T:System.String"/> to be matched.</param>
            <param name="flags">Additional flags.</param>
            <returns><c>true</c> if the <paramref name="path"/> matches with the given 
            wildcard <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpGlob.Match(System.String,System.String)">
            <summary>
            Matches the given path against a pattern.
            </summary>
            <param name="pattern">A <see cref="T:System.String"/> containing a wildcard.</param>
            <param name="path">The <see cref="T:System.String"/> to be matched.</param>
            <returns><c>true</c> if the <paramref name="path"/> matches with the given 
            wildcard <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpGlob.Glob(System.String)">
            <summary>
            Find pathnames matching a pattern.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpGlob.Glob(System.String,PHP.Library.PhpGlob.GlobOptions)">
            <summary>
            Find pathnames matching a pattern.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpGlob.GlobOptions">
            <summary>
            Flags used in call to <c>glob()</c>.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpGlob.GlobOptions.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpGlob.GlobOptions.Mark">
            <summary>
            Append system directory separator (slash) to matching directories.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpGlob.GlobOptions.NoCheck">
            <summary>
            Return pattern itself if nothing matches.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpGlob.GlobOptions.NoSort">
            <summary>
            Don't sort.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpGlob.GlobOptions.Brace">
            <summary>
            Expand braces ala csh.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpGlob.GlobOptions.NoEscape">
            <summary>
            Disable backslash escaping.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpGlob.GlobOptions.OnlyDir">
            <summary>
            List directories only.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpGlob.GlobOptions.StopOnError">
            <summary>
            List directories only.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpGlob.FnMatchOptions">
            <summary>
            Flags used in call to <c>fnmatch()</c>.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpGlob.FnMatchOptions.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpGlob.FnMatchOptions.CaseFold">
            <summary>
            Caseless match. Part of the GNU extension. 
            </summary>
        </member>
        <member name="F:PHP.Library.PhpGlob.FnMatchOptions.Period">
            <summary>
            Leading period in string must be exactly matched by period in the given pattern. 
            </summary>
        </member>
        <member name="F:PHP.Library.PhpGlob.FnMatchOptions.NoEscape">
            <summary>
            Disable backslash escaping. 
            </summary>
        </member>
        <member name="F:PHP.Library.PhpGlob.FnMatchOptions.PathName">
            <summary>
            Slash in string only matches slash in the given pattern. 
            </summary>
        </member>
        <member name="T:PHP.Library.FilterIds">
            <summary>
            Other filter ids.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterIds.FILTER_REQUIRE_SCALAR">
            <summary>
            Flag used to require scalar as input
            </summary>
        </member>
        <member name="F:PHP.Library.FilterIds.FILTER_REQUIRE_ARRAY">
            <summary>
            Require an array as input.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterIds.FILTER_FORCE_ARRAY">
            <summary>
            Always returns an array.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterIds.FILTER_NULL_ON_FAILURE">
            <summary>
            Use NULL instead of FALSE on failure.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterIds.FILTER_CALLBACK">
            <summary>
            ID of "callback" filter.
            </summary>
        </member>
        <member name="T:PHP.Library.FilterValidate">
            <summary>
            Validation filters.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterValidate.INT">
            <summary>
            ID of "int" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterValidate.BOOLEAN">
            <summary>
            ID of "boolean" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterValidate.FLOAT">
            <summary>
            ID of "float" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterValidate.REGEXP">
            <summary>
            ID of "validate_regexp" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterValidate.URL">
            <summary>
            ID of "validate_url" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterValidate.EMAIL">
            <summary>
            ID of "validate_email" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterValidate.IP">
            <summary>
            ID of "validate_ip" filter.
            </summary>
        </member>
        <member name="T:PHP.Library.FilterSanitize">
            <summary>
            Sanitize filters.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterSanitize.STRING">
            <summary>
            ID of "string" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterSanitize.STRIPPED">
            <summary>
            ID of "stripped" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterSanitize.ENCODED">
            <summary>
            ID of "encoded" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterSanitize.SPECIAL_CHARS">
            <summary>
            ID of "special_chars" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterSanitize.FILTER_UNSAFE_RAW">
            <summary>
            ID of "unsafe_raw" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterSanitize.FILTER_DEFAULT">
            <summary>
            ID of default ("string") filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterSanitize.EMAIL">
            <summary>
            ID of "email" filter.
            Remove all characters except letters, digits and !#$%&amp;'*+-/=?^_`{|}~@.[].
            </summary>
        </member>
        <member name="F:PHP.Library.FilterSanitize.URL">
            <summary>
            ID of "url" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterSanitize.NUMBER_INT">
            <summary>
            ID of "number_int" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterSanitize.NUMBER_FLOAT">
            <summary>
            ID of "number_float" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterSanitize.MAGIC_QUOTES">
            <summary>
            ID of "magic_quotes" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.NONE">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.ALLOW_OCTAL">
            <summary>
            Allow octal notation (0[0-7]+) in "int" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.ALLOW_HEX">
            <summary>
            Allow hex notation (0x[0-9a-fA-F]+) in "int" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.STRIP_LOW">
            <summary>
            Strip characters with ASCII value less than 32.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.STRIP_HIGH">
            <summary>
            Strip characters with ASCII value greater than 127.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.ENCODE_LOW">
            <summary>
            Encode characters with ASCII value less than 32.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.ENCODE_HIGH">
            <summary>
            Encode characters with ASCII value greater than 127.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.ENCODE_AMP">
            <summary>
            Encode &amp;.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.NO_ENCODE_QUOTES">
            <summary>
            Don't encode ' and ".
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.EMPTY_STRING_NULL">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.ALLOW_FRACTION">
            <summary>
            Allow fractional part in "number_float" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.ALLOW_THOUSAND">
            <summary>
            Allow thousand separator (,) in "number_float" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.ALLOW_SCIENTIFIC">
            <summary>
            Allow scientific notation (e, E) in "number_float" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.PATH_REQUIRED">
            <summary>
            Require path in "validate_url" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.QUERY_REQUIRED">
            <summary>
            Require query in "validate_url" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.IPV4">
            <summary>
            Allow only IPv4 address in "validate_ip" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.IPV6">
            <summary>
            Allow only IPv6 address in "validate_ip" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.NO_RES_RANGE">
            <summary>
            Deny reserved addresses in "validate_ip" filter.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterFlag.NO_PRIV_RANGE">
            <summary>
            Deny private addresses in "validate_ip" filter.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFiltering.filter_input_array(System.Int32,System.Object)">
            <summary>
            Gets external variables and optionally filters them.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFiltering.filter_id(System.String)">
            <summary>
            Returns the filter ID belonging to a named filter.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFiltering.filter_list">
            <summary>
            Returns a list of all supported filters.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFiltering.filter_var_array(PHP.Core.PhpArray,System.Object)">
            <summary>
            Gets multiple variables and optionally filters them.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFiltering.filter_input(PHP.Core.ScriptContext,PHP.Library.FilterInput,System.String,System.Int32,System.Object)">
            <summary>
            Gets a specific external variable by name and optionally filters it.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFiltering.filter_has_var(PHP.Core.ScriptContext,PHP.Library.FilterInput,System.String)">
            <summary>
            Checks if variable of specified type exists
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFiltering.GetArrayByInput(PHP.Core.ScriptContext,PHP.Library.FilterInput)">
            <summary>
            Returns <see cref="T:PHP.Core.PhpArray"/> containing required input.
            </summary>
            <param name="context">CUrrent <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="type"><see cref="T:PHP.Library.FilterInput"/> value.</param>
            <returns>An instance of <see cref="T:PHP.Core.PhpArray"/> or <c>null</c> if there is no such input.</returns>
        </member>
        <member name="M:PHP.Library.PhpFiltering.filter_var(System.Object,System.Int32,System.Object)">
            <summary>
            Filters a variable with a specified filter.
            </summary>
            <param name="variable">Value to filter.</param>
            <param name="filter">The ID of the filter to apply.</param>
            <param name="options">Associative array of options or bitwise disjunction of flags. If filter accepts options, flags can be provided in "flags" field of array. For the "callback" filter, callback type should be passed. The callback must accept one argument, the value to be filtered, and return the value after filtering/sanitizing it.</param>
            <returns>Returns the filtered data, or <c>false</c> if the filter fails.</returns>
        </member>
        <member name="M:PHP.Library.PhpFiltering.FilterSanitizeString(System.String,System.Predicate{System.Char})">
            <summary>
            Remove all characters not valid by given <paramref name="predicate"/>.
            </summary>
        </member>
        <member name="T:PHP.Library.CRC32">
            <summary>
            An implementation of the CRC32 hash algorithm.
            </summary>
        </member>
        <member name="M:PHP.Library.CRC32.#ctor">
            <summary>
            Creates a new <see cref="T:PHP.Library.CRC32"/> instance.
            </summary>
        </member>
        <member name="M:PHP.Library.CRC32.Initialize">
            <summary>
            Initializes this <see cref="T:PHP.Library.CRC32"/> instance.
            </summary>
        </member>
        <member name="M:PHP.Library.CRC32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes hash from the supplied data.
            </summary>
        </member>
        <member name="M:PHP.Library.CRC32.HashFinal">
            <summary>
            Finalizes the hash computation after the last data block is processed.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpHttpUtility">
            <summary>
            This class implements alternative for HttpUtility.UrlEncode function which results have
            hexadecimal values with small letters. However PHP returns big letters. This can lead
            to incompatibility. e.g. %3a vs %3A
            </summary>
        </member>
        <member name="T:PHP.Library.JsonSerializable">
            <summary>
            Classes implementing Countable can be used with the count() function.
            </summary>
        </member>
        <member name="M:PHP.Library.JsonSerializable.jsonSerialize(PHP.Core.ScriptContext)">
            <summary>
            Specify data which should be serialized to JSON.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/> provided by Phalanger.</param>
            <returns>Return data which should be serialized by <c>json_encode()</c>, see <see cref="M:PHP.Library.PhpJson.Serialize(System.Object)"/>.</returns>
        </member>
        <member name="T:PHP.Library.PhpJson">
            <summary>
            JSON encoding/decoding functions.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PhpJson.Unserialize(PHP.Core.PhpBytes,System.Boolean,System.Int32,PHP.Library.PhpJson.JsonDecodeOptions)">
            <summary>
            
            </summary>
            <param name="json"></param>
            <param name="assoc">When TRUE, returned object's will be converted into associative array s. </param>
            <param name="depth">User specified recursion depth. </param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:PHP.Library.PhpJson.JsonLastError">
            <summary>
            Values returned by json_last_error function.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonLastError.JSON_ERROR_NONE">
            <summary>
            No error has occurred  	 
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonLastError.JSON_ERROR_DEPTH">
            <summary>
            The maximum stack depth has been exceeded  	 
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonLastError.PHP_JSON_ERROR_STATE_MISMATCH">
            <summary>
            Occurs with underflow or with the modes mismatch.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonLastError.JSON_ERROR_CTRL_CHAR">
            <summary>
            Control character error, possibly incorrectly encoded  	 
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonLastError.JSON_ERROR_SYNTAX">
            <summary>
            Syntax error  	 
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonLastError.JSON_ERROR_UTF8">
            <summary>
            
            </summary>
        </member>
        <member name="T:PHP.Library.PhpJson.JsonEncodeOptions">
            <summary>
            Options given to json_encode function.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonEncodeOptions.Default">
            <summary>
            No options specified.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonEncodeOptions.JSON_HEX_TAG">
            <summary>
            All &lt; and &gt; are converted to \u003C and \u003E. 
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonEncodeOptions.JSON_HEX_AMP">
            <summary>
            All &amp;s are converted to \u0026. 
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonEncodeOptions.JSON_HEX_APOS">
            <summary>
            All ' are converted to \u0027. 
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonEncodeOptions.JSON_HEX_QUOT">
            <summary>
            All " are converted to \u0022. 
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonEncodeOptions.JSON_FORCE_OBJECT">
            <summary>
            Outputs an object rather than an array when a non-associative array is used. Especially useful when the recipient of the output is expecting an object and the array is empty. 
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonEncodeOptions.JSON_NUMERIC_CHECK">
            <summary>
            Encodes numeric strings as numbers. 
            </summary>
        </member>
        <member name="T:PHP.Library.PhpJson.JsonDecodeOptions">
            <summary>
            Options given to json_decode function.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJson.JsonDecodeOptions.JSON_BIGINT_AS_STRING">
            <summary>
            Big integers represent as strings rather than floats.
            </summary>
        </member>
        <member name="T:PHP.Library.JsonFormatter">
            <summary>
            Implements a JSON formatter (serializer).
            </summary>
        </member>
        <member name="F:PHP.Library.JsonFormatter.serializationPermission">
            <summary>
            Serialization security permission demanded in <see cref="M:PHP.Library.JsonFormatter.Serialize(System.IO.Stream,System.Object)"/>.
            </summary>
        </member>
        <member name="F:PHP.Library.JsonFormatter.encoding">
            <summary>
            The encoding to be used when writing and reading the serialization stream.
            </summary>
        </member>
        <member name="M:PHP.Library.JsonFormatter.#ctor(System.Text.Encoding,PHP.Library.JsonFormatter.EncodeOptions,PHP.Library.JsonFormatter.DecodeOptions,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates a new <see cref="T:PHP.Library.PhpFormatter"/> with a given <see cref="P:PHP.Library.JsonFormatter.Encoding"/> and
            default <see cref="P:PHP.Library.JsonFormatter.Context"/>.
            </summary>
            <param name="encoding">The encoding to be used when writing and reading the serialization stream.</param>
            <param name="encodeOptions">Options used to encode the data stream.</param>
            <param name="decodeOptions">Options used to decode the data stream.</param>
            <param name="caller">DTypeDesc of the caller's class context if it is known or UnknownTypeDesc if it should be determined lazily.</param>
        </member>
        <member name="M:PHP.Library.JsonFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes an object, or graph of objects with the given root to the provided stream.
            </summary>
            <param name="serializationStream">The stream where the formatter puts the serialized data.</param>
            <param name="graph">The object, or root of the object graph, to serialize.</param>
        </member>
        <member name="M:PHP.Library.JsonFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects.
            </summary>
            <param name="serializationStream">The stream containing the data to deserialize.</param>
            <returns>The top object of the deserialized graph.</returns>
        </member>
        <member name="P:PHP.Library.JsonFormatter.Encoding">
            <summary>
            Gets or sets the encoding to be used when writing and reading the serialized stream.
            </summary>
        </member>
        <member name="P:PHP.Library.JsonFormatter.Binder">
            <summary>
            Gets or sets the serialization binder that performs type lookups during deserialization.
            </summary>
        </member>
        <member name="P:PHP.Library.JsonFormatter.Context">
            <summary>
            Gets or sets the streaming context used for serialization and deserialization.
            </summary>
        </member>
        <member name="P:PHP.Library.JsonFormatter.SurrogateSelector">
            <summary>
            Gets or sets the surrogate selector used by the current formatter.
            </summary>
        </member>
        <member name="T:PHP.Library.JsonFormatter.Tokens">
            <summary>
            Contains definition of (one-character) tokens that constitute PHP serialized data.
            </summary>
        </member>
        <member name="T:PHP.Library.JsonFormatter.ObjectWriter">
            <summary>
            Implements the serialization functionality. Serializes an object, or graph of objects
            with the given root to the provided <see cref="T:System.IO.StreamWriter"/>.
            </summary>
        </member>
        <member name="F:PHP.Library.JsonFormatter.ObjectWriter.writer">
            <summary>
            The stream writer to write serialized data to.
            </summary>
        </member>
        <member name="F:PHP.Library.JsonFormatter.ObjectWriter.encodeOptions">
            <summary>
            Options.
            </summary>
        </member>
        <member name="F:PHP.Library.JsonFormatter.ObjectWriter.encoding">
            <summary>
            The encoding to be used when writing and reading the serialization stream.
            </summary>
        </member>
        <member name="F:PHP.Library.JsonFormatter.ObjectWriter.recursionStack">
            <summary>
            Stack of objects being currently serialized. Used to avoid stack overflow and to properly outputs "recursion_detected" warning.
            </summary>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectWriter.#ctor(PHP.Core.ScriptContext,System.IO.StreamWriter,PHP.Library.JsonFormatter.EncodeOptions,System.Text.Encoding)">
            <summary>
            Creates a new <see cref="T:PHP.Library.JsonFormatter.ObjectWriter"/> with a given <see cref="T:System.IO.StreamWriter"/>.
            </summary>
            <param name="context">The current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="writer">The writer to write serialized data to.</param>
            <param name="encodeOptions">Encoding options.</param>
            <param name="encoding">Encoding used for reading PhpBytes.</param>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectWriter.PushObject(System.Object)">
            <summary>
            Push currently serialized array or object to the stack to prevent recursion.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectWriter.PopObject">
            <summary>
            Pop the serialized object from the stack.
            </summary>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectWriter.Serialize(System.Object)">
            <summary>
            Serializes an object or graph of objects to <see cref="F:PHP.Library.JsonFormatter.ObjectWriter.writer"/>.
            </summary>
            <param name="graph">The object (graph) to serialize.</param>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectWriter.WriteUnsupported(System.String)">
            <summary>
            Serializes null and throws an exception.
            </summary>
            <param name="TypeName"></param>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectWriter.WriteNull">
            <summary>
            Serializes <B>Null</B>.
            </summary>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectWriter.WriteBoolean(System.Boolean)">
            <summary>
            Serializes a bool value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectWriter.CharIsPrintable(System.Char)">
            <summary>
            Determines if given character is printable character. Otherwise it must be encoded.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectWriter.CharShouldBeEncoded(System.Char)">
            <summary>
            Determines if given character should be encoded.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectWriter.EncodeStringIncremental(System.String,System.Int32@)">
            <summary>
            Convert 16b character into json encoded character.
            </summary>
            <param name="value">The full string to be encoded.</param>
            <param name="i">The index of character to be encoded. Can be increased if more characters are processed.</param>
            <returns>The encoded part of string, from value[i] to value[i after method call]</returns>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectWriter.WriteString(System.String)">
            <summary>
            Serializes JSON string.
            </summary>
            <param name="value">The string.</param>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectWriter.WriteArray(PHP.Core.PhpArray)">
            <summary>
            Serializes a <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
            <param name="value">The array.</param>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectWriter.WriteDObject(PHP.Core.Reflection.DObject)">
            <summary>
            Serializes a <see cref="T:PHP.Core.Reflection.DObject"/>.
            </summary>
            <param name="value">The object.</param>
        </member>
        <member name="T:PHP.Library.JsonFormatter.ObjectReader">
            <summary>
            Implements the deserialization functionality. Deserializes the data on the provided
            <see cref="T:System.IO.StreamReader"/> and reconstitutes the graph of objects.
            </summary>
        </member>
        <member name="F:PHP.Library.JsonFormatter.ObjectReader.reader">
            <summary>
            The stream reader to read serialized data from.
            </summary>
        </member>
        <member name="F:PHP.Library.JsonFormatter.ObjectReader.decodeOptions">
            <summary>
            Decoding options.
            </summary>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectReader.#ctor(PHP.Core.ScriptContext,System.IO.StreamReader,PHP.Library.JsonFormatter.DecodeOptions)">
            <summary>
            Creates a new <see cref="T:PHP.Library.JsonFormatter.ObjectReader"/> with a given <see cref="T:System.IO.StreamReader"/>.
            </summary>
            <param name="context">The current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="reader">The reader to reader serialized data from.</param>
            <param name="decodeOptions"></param>
        </member>
        <member name="M:PHP.Library.JsonFormatter.ObjectReader.Deserialize">
            <summary>
            De-serializes the data is <see cref="F:PHP.Library.JsonFormatter.ObjectReader.reader"/> and reconstitutes the graph of objects.
            </summary>
            <returns>The top object of the deserialized graph. Null in case of error.</returns>
        </member>
        <member name="T:PHP.Library.JsonFormatter.EncodeOptions">
            <summary>
            Encode (serialize) options. All false.
            </summary>
        </member>
        <member name="T:PHP.Library.JsonFormatter.DecodeOptions">
            <summary>
            Decode (unserialize) options.
            </summary>
        </member>
        <member name="F:PHP.Library.JsonFormatter.DecodeOptions.Assoc">
            <summary>
            When TRUE, returned object s will be converted into associative array s. 
            </summary>
        </member>
        <member name="F:PHP.Library.JsonFormatter.DecodeOptions.Depth">
            <summary>
            User specified recursion depth. 
            </summary>
        </member>
        <member name="T:PHP.Library.Data.PhpDbConnection">
            <summary>
            Abstract class implementing common functionality of PHP connection resources.
            </summary>
        </member>
        <member name="F:PHP.Library.Data.PhpDbConnection.pendingReader">
            <summary>
            A result associated with this connection that possibly has not been closed yet.
            </summary>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.#ctor(System.String,System.Data.IDbConnection,System.String)">
            <summary>
            Creates a new instance of <see cref="T:PHP.Library.Data.PhpDbConnection"/> with a specified connection.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="connection">Database connection.</param>
            <param name="name">Connection resource name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connection"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.GetResult(PHP.Library.Data.PhpDbConnection,System.Data.IDataReader,System.Boolean)">
            <summary>
            Gets a query result resource.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="reader">Data reader to be used for result resource population.</param>
            <param name="convertTypes">Whether to convert data types to PHP ones.</param>
            <returns>Result resource holding all resulting data of the query.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.CreateCommand">
            <summary>
            Creates a command instance.
            </summary>
            <returns>Instance of command specific for the database provider.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.BuildConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
            Builds a connection string.
            </summary>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.Connect">
            <summary>
            Opens a database connection if it has not been opened yet.
            </summary>
            <returns><B>true</B> if successful.</returns>
            <exception cref="T:PHP.Core.PhpException">Attempt to connect the database failed (Warning).</exception>
            <remarks>
            Sets <see cref="P:PHP.Library.Data.PhpDbConnection.LastException"/> to <B>null</B> (on success) or to the exception object (on failure).
            </remarks>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.FreeManaged">
            <summary>
            Closes connection and releases the resource.
            </summary>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.ClosePendingReader">
            <summary>
            Closes pending reader.
            </summary>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.ExecuteQuery(System.String,System.Boolean)">
            <summary>
            Executes a query on the connection.
            </summary>
            <param name="query">The query.</param>
            <param name="convertTypes">Whether to convert data types to PHP ones.</param>
            <returns>PhpDbResult class representing the data read from database.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="query"/> is a <B>null</B> reference.</exception>
            <exception cref="T:PHP.Core.PhpException">Query execution failed (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.ExecuteProcedure(System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter},System.Boolean)">
            <summary>
            Executes a stored procedure on the connection.
            </summary>
            <param name="procedureName">Procedure name.</param>
            <param name="parameters">Parameters.</param>
            <param name="skipResults">Whether to load results.</param>
            <returns>PhpDbResult class representing the data read from database.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="procedureName"/> is a <B>null</B> reference.</exception>
            <exception cref="T:PHP.Core.PhpException">Procedure execution failed (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.ExecuteCommand(System.String,System.Data.CommandType,System.Boolean,System.Collections.Generic.IEnumerable{System.Data.IDataParameter},System.Boolean)">
            <summary>
            Executes a command on the connection.
            </summary>
            <param name="commandText">Command text.</param>
            <param name="convertTypes">Whether to convert data types to PHP ones.</param>
            <param name="commandType">Command type.</param>
            <param name="parameters">Parameters.</param>
            <param name="skipResults">Whether to load results.</param>
            <returns>PhpDbResult class representing the data read from database.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandText"/> is a <B>null</B> reference.</exception>
            <exception cref="T:PHP.Core.PhpException">Command execution failed (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.ReexecuteSchemaQuery(PHP.Library.Data.PhpDbResult)">
            <summary>
            Reexecutes a command associated with a specified result resource to get schema of the command result.
            </summary>
            <param name="result">The result resource.</param>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.SelectDb(System.String)">
            <summary>
            Changes the active database on opened connection.
            </summary>
            <param name="databaseName"></param>
            <returns>true if databse was changed; otherwise returns false</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.GetExceptionMessage(System.Exception)">
            <summary>
            Gets a message from an exception raised by the connector.
            Removes the ending dot.
            </summary>
            <param name="e">Exception.</param>
            <returns>The message.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.GetLastErrorMessage">
            <summary>
            Gets the last error message.
            </summary>
            <returns>The message or an empty string if no error occured.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbConnection.GetLastErrorNumber">
            <summary>
            Gets the last error number.
            </summary>
            <returns>-1 on error, zero otherwise.</returns>
            <remarks>Should be implemented by the subclass if the respective provider supports error numbers.</remarks>
        </member>
        <member name="P:PHP.Library.Data.PhpDbConnection.ConnectionString">
            <summary>
            Connection string.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbConnection.Connection">
            <summary>
            Underlying database connection.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbConnection.LastResult">
            <summary>
            Last result resource.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbConnection.LastException">
            <summary>
            Gets an exception thrown by last performed operation or a <B>null</B> reference 
            if that operation succeeded.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbConnection.LastAffectedRows">
            <summary>
            Gets the number of rows affected by the last query executed on this connection.
            </summary>
        </member>
        <member name="T:PHP.Library.Data.ConnectionManager">
            <summary>
            Abstract base class for database connection managers.
            </summary>
        </member>
        <member name="M:PHP.Library.Data.ConnectionManager.CreateConnection(System.String)">
            <summary>
            Connection factory.
            </summary>
            <param name="connectionString">Connection string.</param>
            <returns>Connection.</returns>
        </member>
        <member name="F:PHP.Library.Data.ConnectionManager.connections">
            <summary>
            List of connections established by the manager.
            </summary>
        </member>
        <member name="F:PHP.Library.Data.ConnectionManager.AppConnectionCount">
            <summary>
            Number of all connections established by the application.
            </summary>
        </member>
        <member name="M:PHP.Library.Data.ConnectionManager.OpenConnection(System.String,System.Boolean,System.Int32,System.Boolean@)">
            <summary>
            Establishes a connection if a connection with the same connection string doesn't exist yet.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="newConnection">Whether to create a new connection even if there exists one with same string.</param>
            <param name="limit">Maximal number of connections. Negative value means no limit.</param>
            <param name="success"><B>true</B> on success, <B>false</B> on failure.</param>
            <returns>The connection (opened or not) or a <B>null</B> reference on failure.</returns>
        </member>
        <member name="M:PHP.Library.Data.ConnectionManager.RemoveConnection">
            <summary>
            Removes last used connection from the list of active Connections.
            </summary>
        </member>
        <member name="M:PHP.Library.Data.ConnectionManager.RemoveConnection(PHP.Library.Data.PhpDbConnection)">
            <summary>
            Removes specified connection from the list of active connections.
            </summary>
            <param name="connection">The connection to be removed.</param>
        </member>
        <member name="M:PHP.Library.Data.ConnectionManager.GetLastConnection">
            <summary>
            Returns last opened connection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PHP.Library.Data.PhpDbResult">
            <summary>
            Holds a result of a query.
            </summary>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.NextResultSet">
            <summary>
            Advances the current result set index.
            </summary>
            <returns>Whether the index has been advanced.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.#ctor(PHP.Library.Data.PhpDbConnection,System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            Creates an instance of a result resource.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="reader">Data reader from which to load results.</param>
            <param name="name">Resource name.</param>
            <param name="convertTypes">Whether to convert resulting values to PHP types.</param>
            <exception cref="T:System.ArgumentNullException">Argument is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.LoadData(System.Boolean)">
            <summary>
            Loads all data from the reader to arrays.
            </summary>
            <remarks>This method should be called before any other method.</remarks>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.FreeManaged">
            <summary>
            Disposes the resource.
            </summary>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetNames">
            <summary>
            Retrieves column names from the reader.
            </summary>
            <returns>An array of column names.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetDataTypes">
            <summary>
            Retrieves column type names from the reader.
            </summary>
            <returns>An array of column type names.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetCustomData">
            <summary>
            Get custom data of current row of <see cref="P:PHP.Library.Data.PhpDbResult.Reader"/>. Used when loading data from database.
            </summary>
            <returns>Custom object associated with current row.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetValues(System.String[],System.Boolean)">
            <summary>
            Gets values of the current row from the reader.
            </summary>
            <param name="dataTypes">Column type names.</param>
            <param name="convertTypes">Whether to convert types of values to PHP types.</param>
            <returns>An array of values of cells in the current row.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.MapFieldTypeName(System.String)">
            <summary>
            Maps SQL type name to PHP type name.
            </summary>
            <param name="typeName">SQL type name.</param>
            <returns>PHP type name.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.SeekRow(System.Int32)">
            <summary>
            Moves the internal cursor to the specified row. 
            </summary>
            <returns>Whether the cursor moved and there are data available.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.SeekField(System.Int32)">
            <summary>
            Seeks to a specified field.
            </summary>
            <param name="fieldIndex">An index of the field.</param>
            <returns>Whether the index is in the range.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.FetchNextField">
            <summary>
            Advances <see cref="P:PHP.Library.Data.PhpDbResult.LastFetchedField"/> counter and gets its value.
            </summary>
            <returns>Index of field to be fetched.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.ReadRow">
            <summary>
            Moves cursor in internal cache one ahead. Reads data from IDataReader if necessary.
            </summary>
            <returns>Whether the cursor moved and there are data available.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.FetchArray(System.Boolean,System.Boolean)">
            <summary>
            Returns a PhpArray containing data from collumns in the row and move to the next row.
            Returns false if there are no more rows.
            </summary>
            <param name="intKeys">Whether to add integer keys.</param>
            <param name="stringKeys">Whether to add string keys.</param>
            <returns>A PHP array containing the data.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.FetchObject">
            <summary>
            A <see cref="T:PHP.Core.Reflection.DObject"/> with properties that correspond to the fetched row, 
            or false if there are no more rows. 
            </summary>
            <returns></returns>
            <remarks>
            Works like FetchArray but instead of storing data to associative array,
            FetchObject use object fields. Note, that field names are case sensitive.
            </remarks>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetSchemaTable">
            <summary>
            Gets information about schema of the current result set.
            </summary>
            <returns>Schema table.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetSchemaRowInfo(System.Int32)">
            <summary>
            Gets schema information for a specified field.
            </summary>
            <param name="fieldIndex">Field index.</param>
            <returns>Data row containing column schema.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetFieldName">
            <summary>
            Gets a name of the current field.
            </summary>
            <returns>The field name.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetFieldName(System.Int32)">
            <summary>
            Gets a name of a specified field.
            </summary>
            <param name="fieldIndex">An index of the field.</param>
            <returns>The field name or a <B>null</B> reference if index is out of range.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetFieldType">
            <summary>
            Gets a type of the current field.
            </summary>
            <returns>The type name.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetPhpFieldType">
            <summary>
            Gets a PHP name of the current field type.
            </summary>
            <returns>PHP type name.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetPhpFieldType(System.Int32)">
            <summary>
            Gets a PHP name of a specified field type.
            </summary>
            <param name="fieldIndex">Field index.</param>
            <returns>PHP type name.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetFieldType(System.Int32)">
            <summary>
            Gets a type of specified field.
            </summary>
            <param name="fieldIndex">An index of the field.</param>
            <returns>The type name.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetFieldLength">
            <summary>
            Gets length of the current field.
            </summary>
            <returns>The field length.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetFieldLength(System.Int32)">
            <summary>
            Gets length of a specified field.
            </summary>
            <param name="fieldIndex">An index of the field.</param>
            <returns>The field length or 0.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetFieldValue(System.Int32,System.String)">
            <summary>
            Gets a value of a specified field of the result.
            </summary>
            <param name="rowIndex">Row index.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>The value or a <B>null</B> reference if row or index are out of range.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetFieldValue(System.Int32,System.Int32)">
            <summary>
            Gets a value of a specified field of the result.
            </summary>
            <param name="rowIndex">Row index.</param>
            <param name="fieldIndex">Index of the field.</param>
            <returns>The value or a <B>null</B> reference if row or index are out of range.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.GetRowCustomData">
            <summary>
            Get custom data associated with current set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.CheckFieldIndex(System.Int32)">
            <summary>
            Checks whether a field index is valid for the current result set.
            </summary>
            <param name="fieldIndex">Field index to check.</param>
            <returns>Whether the index is in the range [0, <see cref="P:PHP.Library.Data.PhpDbResult.FieldCount"/>).</returns>
            <exception cref="T:PHP.Core.PhpException">Invalid field index (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Data.PhpDbResult.CheckRowIndex(System.Int32)">
            <summary>
            Checks whether a row index is valid for the current result set.
            </summary>
            <param name="rowIndex">Row index to check.</param>
            <returns>Whether the index is in the range [0, <see cref="P:PHP.Library.Data.PhpDbResult.RowCount"/>).</returns>
            <exception cref="T:PHP.Core.PhpException">Invalid row index (Warning).</exception>
        </member>
        <member name="P:PHP.Library.Data.PhpDbResult.Reader">
            <summary>
            Source data reader.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbResult.Command">
            <summary>
            Command whose result is represented by this instance.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbResult.CurrentSetIndex">
            <summary>
            Gets the index of the current result set. Initialized to 0.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbResult.CurrentRowIndex">
            <summary>
            Gets the index of the current row or -1 if no row has been fetched yet.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbResult.CurrentFieldIndex">
            <summary>
            Gets the index of the current field. Initialized to 0.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbResult.LastFetchedField">
            <summary>
            Gets the index of the last fetched field. Initialized to -1.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbResult.RowCount">
            <summary>
            Gets the number of rows of the result.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbResult.FieldCount">
            <summary>
            Gets the number of fields of the result. Returns 0 if data are not loaded.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbResult.RecordsAffected">
            <summary>
            Gets the number of records affected by the query that generates this result.
            Contains minus one for select queries.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbResult.CurrentSet">
            <summary>
            Gets the current result set.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbResult.ResultSetCount">
            <summary>
            Gets the number of results sets.
            </summary>
        </member>
        <member name="T:PHP.Library.Data.PhpDbResult.ResultSet">
            <summary>
            Represents a single result set returned by query.
            </summary>
        </member>
        <member name="F:PHP.Library.Data.PhpDbResult.ResultSet.Rows">
            <summary>
            Rows.
            </summary>
        </member>
        <member name="F:PHP.Library.Data.PhpDbResult.ResultSet.Names">
            <summary>
            Names of columns in query.
            </summary>
        </member>
        <member name="F:PHP.Library.Data.PhpDbResult.ResultSet.DataTypes">
            <summary>
            Names of SQL types of columns in query.
            </summary>
        </member>
        <member name="F:PHP.Library.Data.PhpDbResult.ResultSet.RecordsAffected">
            <summary>
            Number of records affected by the query.
            </summary>
        </member>
        <member name="F:PHP.Library.Data.PhpDbResult.ResultSet.CustomData">
            <summary>
            Custom data obtained from the row by <see cref="M:PHP.Library.Data.PhpDbResult.GetCustomData"/> callback function of specific PhpDbResult implementation.
            </summary>
        </member>
        <member name="T:PHP.Library.Data.PhpDbStatement">
            <summary>
            Represents a parameterized SQL statement.
            </summary>
        </member>
        <member name="M:PHP.Library.Data.PhpDbStatement.#ctor(System.String,PHP.Library.Data.PhpDbConnection)">
            <summary>
            Creates an instance of parameterized statement.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="connection">Database connection resource.</param>
        </member>
        <member name="M:PHP.Library.Data.PhpDbStatement.AddBinding(System.Data.IDataParameter,PHP.Core.PhpReference,PHP.Library.Data.PhpDbStatement.ParameterType)">
            <summary>
            Adds a parameter to variable binding.
            </summary>
            <param name="parameter">SQL parameter.</param>
            <param name="variable">PHP variable passed by reference.</param>
            <param name="type">Parameter type specified by user.</param>
            <returns><B>true</B> if the binding succeeded.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbStatement.PrepareParameters">
            <summary>
            Loads data from bound variables to the respective parameters.
            </summary>
            <returns>An array of parameters with loaded values.</returns>
        </member>
        <member name="M:PHP.Library.Data.PhpDbStatement.WriteParametersBack">
            <summary>
            Writes parameter values back to the bound variables.
            </summary>
        </member>
        <member name="P:PHP.Library.Data.PhpDbStatement.Connection">
            <summary>
            Connection resource associated with the statement.
            </summary>
        </member>
        <member name="T:PHP.Library.Data.PhpDbStatement.ParameterType">
            <summary>
            PHP type of the parameter. Parameter value will be converted accordign to this value.
            </summary>
        </member>
        <member name="T:PHP.Library.__PHP__DateTime">
            <summary>
            Representation of date and time.
            </summary>
        </member>
        <member name="M:PHP.Library.__PHP__DateTime.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.__PHP__DateTime.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.__PHP__DateTime.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserializing constructor.</summary>
        </member>
        <member name="P:PHP.Library.__PHP__DateTime.Time">
            <summary>
            Get the date-time value, stored in UTC
            </summary>
        </member>
        <member name="P:PHP.Library.__PHP__DateTime.TimeZone">
            <summary>
            Get the time zone for this DateTime object
            </summary>
        </member>
        <member name="T:PHP.Library.PhpDateTime">
            <summary>
            Functions for date and time manipulation.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PhpDateTime.DateCreate(PHP.Core.ScriptContext)">
            <summary>
            Alias of new <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:PHP.Library.PhpDateTime.DateCreate(PHP.Core.ScriptContext,System.String)">
            <summary>
            Alias of new <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:PHP.Library.PhpDateTime.DateCreate(PHP.Core.ScriptContext,System.String,PHP.Library.DateTimeZone)">
            <summary>
            Alias of new <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:PHP.Library.PhpDateTime.DateCreateFromFormat(PHP.Core.ScriptContext,System.String,System.String)">
            <summary>
            Returns new DateTime object formatted according to the specified format.
            </summary>
            <param name="context"><see cref="T:PHP.Core.ScriptContext"/> reference.</param>
            <param name="format">The format that the passed in string should be in.</param>
            <param name="time">String representing the time.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.DateCreateFromFormat(PHP.Core.ScriptContext,System.String,System.String,PHP.Library.DateTimeZone)">
            <summary>
            Returns new DateTime object formatted according to the specified format.
            </summary>
            <param name="context"><see cref="T:PHP.Core.ScriptContext"/> reference.</param>
            <param name="format">The format that the passed in string should be in.</param>
            <param name="time">String representing the time.</param>
            <param name="timezone">A DateTimeZone object representing the desired time zone.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.DateOffsetGet(PHP.Library.__PHP__DateTime)">
            <summary>
            Alias of DateTime::getOffset().
            </summary>
        </member>
        <member name="M:PHP.Library.PhpDateTime.DateModify(PHP.Core.ScriptContext,PHP.Library.__PHP__DateTime,System.String)">
            <summary>
            Alias of DateTime::modify().
            </summary>
        </member>
        <member name="M:PHP.Library.PhpDateTime.FormatDate(System.String)">
            <summary>
            Returns a string formatted according to the given format string using the current local time.
            </summary>
            <param name="format">Format definition for output.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.FormatDate(System.String,System.Int32)">
            <summary>
            Returns a string formatted according to the given format string using the given integer timestamp.
            </summary>
            <param name="format">Format definition for output.</param>
            <param name="timestamp">Nuber of seconds since 1970 specifying a date.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.FormatUtcDate(System.String)">
            <summary>
            Identical to the date() function except that the time returned is Greenwich Mean Time (GMT)
            </summary>
            <param name="format">Format definition for output.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.FormatUtcDate(System.String,System.Int32)">
            <summary>
            Identical to the date() function except that the time returned is Greenwich Mean Time (GMT)
            </summary>
            <param name="format">Format definition for output.</param>
            <param name="timestamp">Nuber of seconds since 1970 specifying a date.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.GetDatePart(System.String)">
            <summary>
            Returns a part of current time.
            </summary>
            <param name="format">Format definition for output.</param>
            <returns>Part of the date, e.g. month or hours.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.GetDatePart(System.String,System.Int32)">
            <summary>
            Returns a part of a specified timestamp.
            </summary>
            <param name="format">Format definition for output.</param>
            <param name="timestamp">Nuber of seconds since 1970 specifying a date.</param>
            <returns>Part of the date, e.g. month or hours.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.GetIsoWeekAndYear(System.DateTime,System.Int32@,System.Int32@)">
            <summary>
            Converts a given <see cref="T:System.DateTime"/> to the ISO week of year number and ISO year number.
            </summary>
            <param name="dt">The <see cref="T:System.DateTime"/>.</param>
            <param name="week">The ISO week of year number.</param>
            <param name="year">The ISO year number.</param>
        </member>
        <member name="M:PHP.Library.PhpDateTime.GetDayNumberSuffix(System.Int32)">
            <summary>
            English ordinal suffix for the day of the month, 2 characters - st, nd, rd or th.
            </summary>
            <param name="DayNumber">Number of the day. In [1..31].</param>
            <returns>st, nd, rd or th</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.FormatTime(System.String)">
            <summary>
            Returns a string formatted according to the given format string using the current local time.
            </summary>
            <param name="format">Format of the string.</param>
            <returns>Formatted string representing date and time.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.FormatTime(System.String,System.Int32)">
            <summary>
            Returns a string formatted according to the given format string using the given timestamp.
            </summary>
            <param name="format">Format of the string.</param>
            <param name="timestamp">Number of seconds since 1970 representing the time to format.</param>
            <returns>Formatted string representing date and time.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.FormatUtcTime(System.String)">
            <summary>
            Behaves the same as <c>strftime</c> except that the time returned is Greenwich Mean Time (GMT).
            </summary>
            <param name="format">Format of the string.</param>
            <returns>Formatted string representing date and time.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.FormatUtcTime(System.String,System.Int32)">
            <summary>
            Behaves the same as <c>strftime</c> except that the time returned is Greenwich Mean Time (GMT).
            </summary>
            <param name="format">Format of the string.</param>
            <param name="timestamp">Number of seconds since 1970 representing the time to format.</param>
            <returns>Formatted string representing date and time.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.FormatTime(System.String,System.DateTime,System.TimeZoneInfo)">
            <summary>
            Implementation of <see cref="M:PHP.Library.PhpDateTime.FormatTime(System.String,System.Int32)"/> function.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpDateTime.MakeTime">
            <summary>
            Returns the Unix timestamp for current time.
            </summary>
            <returns>Unix timestamp.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.MakeTime(System.Int32)">
            <summary>
            Returns the Unix timestamp for a time compound of an hour which is specified and a minute, a second,
            a month, a day and a year which are taken from the current date values.
            </summary>
            <param name="hour">The hour.</param>
            <returns>Unix timestamp.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.MakeTime(System.Int32,System.Int32)">
            <summary>
            Returns the Unix timestamp for a time compound of an hour and a minute which are specified and a second,
            a month, a day and a year which are taken from the current date values.
            </summary>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <returns>Unix timestamp.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.MakeTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the Unix timestamp for a time compound of an hour, a minute and a second which are specified and
            a month, a day and a year which are taken from the current date values.
            </summary>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <returns>Unix timestamp.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.MakeTime(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the Unix timestamp for a time compound of an hour, a minute, a second and a month which are specified and
            a day and a year which are taken from the current date values.
            </summary>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <param name="month">The month.</param>
            <returns>Unix timestamp.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.MakeTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the Unix timestamp for a time compound of an hour, a minute, a second, a month and a day
            which are specified and a year which is taken from the current date values.
            </summary>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <returns>Unix timestamp.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.MakeTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the Unix timestamp for a time compound of an hour, a minute, a second, a month, a day and a year.
            </summary>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Unix timestamp.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.MakeTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the Unix timestamp for a time compound of an hour, a minute, a second, a month, a day and a year.
            </summary>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <param name="daylightSaving">Daylight savings time.</param>
            <returns>Unix timestamp.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.CheckDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns TRUE if the date given is valid; otherwise returns FALSE.
            Checks the validity of the date formed by the arguments.
            </summary>
            <remarks>
            A date is considered valid if:
            <list type="bullet">
            <item>year is between 1 and 32767 inclusive</item>
            <item>month is between 1 and 12 inclusive</item>
            <item>day is within the allowed number of days for the given month. Leap years are taken into consideration.</item>
            </list>
            </remarks>
            <param name="month">Month</param>
            <param name="day">Day</param>
            <param name="year">Year</param>
            <returns>True if the date is valid, false otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.GetDate">
            <summary>
            Returns an associative array containing the date information of the current local time.
            </summary>
            <returns>Associative array with date information.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.GetDate(System.Int32)">
            <summary>
            Returns an associative array containing the date information of the timestamp.
            </summary>
            <param name="timestamp">Number of seconds since 1970.</param>
            <returns>Associative array with date information.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.GetDate(System.DateTime)">
            <summary>
            Returns an associative array containing the date information.
            </summary>
            <param name="utc">UTC date time.</param>
            <returns>Associative array with date information.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.GetTimeOfDay">
            <summary>
            Gets time information.
            </summary>
            <remarks>
            It returns <see cref="T:PHP.Core.PhpArray"/> containing the following 4 entries:
            <list type="table">
            <item><term><c>"sec"</c></term><description>Unix timestamp (seconds since the Unix Epoch)</description></item>
            <item><term><c>"usec"</c></term><description>microseconds</description></item>
            <item><term><c>"minuteswest"</c></term><description>minutes west of Greenwich (doesn't take daylight savings time in consideration)</description></item>
            <item><term><c>"dsttime"</c></term><description>type of DST correction (+1 or 0, determined only by the current time zone not by the time)</description></item>
            </list>
            </remarks>
            <returns>Associative array</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.GetLocalTime">
            <summary>
            The localtime() function returns an array identical to that of the structure returned by the C function call.
            Current time is used, regular numericaly indexed array is returned.
            </summary>
            <returns>Array containing values specifying the date and time.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.GetLocalTime(System.Int32)">
            <summary>
            The localtime() function returns an array identical to that of the structure returned by the C function call.
            Time specified by the parameter timestamp is used, regular numericaly indexed array is returned.
            </summary>
            <param name="timestamp">Number of seconds since 1970.</param>
            <returns>Array containing values specifying the date and time.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.GetLocalTime(System.Int32,System.Boolean)">
            <summary>
            The localtime() function returns an array identical to that of the structure returned by the C function call.
            The first argument to localtime() is the timestamp. The second argument to the localtime() is
            the isAssociative, if this is set to <c>false</c> than the array is returned as a regular, numerically indexed array.
            If the argument is set to <c>true</c> then localtime() is an associative array containing all the different
            elements of the structure returned by the C function call to localtime.
            </summary>
            <remarks>
            Returned array contains these elements if isAssociative is set to true:
            <list type="bullet">
            <term><c>"tm_sec"</c></term><description>seconds</description>
            <term><c>"tm_min"</c></term><description>minutes</description>
            <term><c>"tm_hour"</c></term><description>hour</description>
            <term><c>"tm_mday"</c></term><description>day of the month</description>
            <term><c>"tm_mon"</c></term><description>month of the year, starting with 0 for January</description>
            <term><c>"tm_year"</c></term><description>Years since 1900</description>
            <term><c>"tm_wday"</c></term><description>Day of the week</description>
            <term><c>"tm_yday"</c></term><description>Day of the year</description>
            <term><c>"tm_isdst"</c></term><description>Is daylight savings time in effect</description>
            </list>
            </remarks>
            <param name="timestamp"></param>
            <param name="returnAssociative"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.MicroTime">
            <summary>
            Returns the string "msec sec" where sec is the current time measured in the number of seconds
            since the Unix Epoch (0:00:00 January 1, 1970 GMT), and msec is the microseconds part.
            </summary>
            <returns>String containing number of miliseconds, space and number of seconds.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.MicroTime(System.Boolean)">
            <summary>
            Returns the fractional time in seconds from the start of the UNIX epoch.
            </summary>
            <param name="returnDouble"><c>true</c> to return the double, <c>false</c> to return string.</param>
            <returns><see cref="T:System.String"/> containing number of miliseconds, space and number of seconds
            if <paramref name="returnDouble"/> is <c>false</c> and <see cref="T:System.Double"/>
            containing the fractional count of seconds otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.StringToTime(System.String)">
            <summary>
            Parses a string containing an English date format into a UNIX timestamp relative to the current time.
            </summary>
            <param name="time">String containing time definition</param>
            <returns>Number of seconds since 1/1/1970 or -1 on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.StringToTime(System.String,System.Int32)">
            <summary>
            Parses a string containing an English date format into a UNIX timestamp relative to a specified time.
            </summary>
            <param name="time">String containing time definition.</param>
            <param name="start">Timestamp (seconds from 1970) to which is the new timestamp counted.</param>
            <returns>Number of seconds since 1/1/1970 or -1 on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.StringToTime(System.String,System.DateTime)">
            <summary>
            Implementation of <see cref="M:PHP.Library.PhpDateTime.StringToTime(System.String,System.Int32)"/> function.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpDateTime.Time">
            <summary>
            Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).
            </summary>
            <returns>Number of seconds since 1970.</returns>
        </member>
        <member name="M:PHP.Library.PhpDateTime.CalculateSunTime(System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculates sunrise or sunset. Adopted PHP implementation by Moshe Doron (mosdoron@netvision.net.il).
            Returns UTC time.
            </summary>
        </member>
        <member name="P:PHP.Library.PhpDateTime.Now">
            <summary>
            Gets the current local time with respect to the current PHP time zone.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.relative">
            <summary>
            Date and time specified relatively.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.y">
            <summary>
            Absolute year/month/day.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.m">
            <summary>
            Absolute year/month/day.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.d">
            <summary>
            Absolute year/month/day.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.h">
            <summary>
            Absolute hour/minute/second.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.i">
            <summary>
            Absolute hour/minute/second.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.s">
            <summary>
            Absolute hour/minute/second.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.f">
            <summary>
            Fraction of second.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.have_time">
            <summary>
            Number of time/date/zone/relative time/weekday components specified.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.have_date">
            <summary>
            Number of time/date/zone/relative time/weekday components specified.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.have_zone">
            <summary>
            Number of time/date/zone/relative time/weekday components specified.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.have_relative">
            <summary>
            Number of time/date/zone/relative time/weekday components specified.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.have_weekday_relative">
            <summary>
            Number of time/date/zone/relative time/weekday components specified.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.z">
            <summary>
            GMT offset in minutes.
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.CheckOverflows(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Checks how many days given year/month/day/hour overflows (as it is possible in PHP format).
            </summary>
            <param name="y">parsed year</param>
            <param name="m">parsed month</param>
            <param name="d">parsed day</param>
            <param name="h">parsed hour (24 is problem)</param>
            <param name="days_overflow">resulting amount of overflowing days (will be added to the resulting DateTime).</param>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.ParseSignedInt(System.String,System.Int32@,System.Int32)">
            <summary>
            Parse integer with possible sign of a specified maximal number of digits.
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.ParseUnsignedInt(System.String,System.Int32@,System.Int32)">
            <summary>
            Parse unsigned integer of a specified maximal length.
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.ParseFraction(System.String,System.Int32@,System.Int32)">
            <summary>
            Parses real fraction ".[0-9]{1,maxDigits}". 
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.SetMeridian(System.String,System.Int32@)">
            <summary>
            Parses meridian "[ap][.]?m[.]?" and adjusts hours accordingly.
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.SkipDaySuffix(System.String,System.Int32@)">
            <summary>
            Moves string position index behind "nd", "rd", "st", "th" if applicable.
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.ParseMonth(System.String,System.Int32@)">
            <summary>
            Parses month string and returns the month number 1..12, zero on error.
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.ParseRelativeText(System.String,System.Int32@,System.Int32@)">
            <summary>
            Parses text defining ordinal number.
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.ReadToSpace(System.String,System.Int32@)">
            <summary>
            Reads characters up to the first space.
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.SetRelative(System.String,System.Int32,System.Int32)">
            <summary>
            Sets relative time and date information according to the parsed text.
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.SetWeekDay(System.String)">
            <summary>
            Sets relative week day according to a specified text.
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.WeekToDay(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts week number to day number.
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.SetTimeZone(System.String,System.Int32@)">
            <summary>
            Parses and sets time zone information.
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.ParseTimeZone(System.String,System.Int32@)">
            <summary>
            Parses numeric timezones. Returns offset in minutes.
            </summary>
        </member>
        <member name="M:PHP.Library.StrToTime.DateInfo.SetZoneOffset(System.String)">
            <summary>
            Sets zone offset by zone abbreviation.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.Relative.y">
            <summary>
            Number of years/months/days.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.Relative.m">
            <summary>
            Number of years/months/days.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.Relative.d">
            <summary>
            Number of years/months/days.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.Relative.h">
            <summary>
            Number of hours/minutes/seconds.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.Relative.i">
            <summary>
            Number of hours/minutes/seconds.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.Relative.s">
            <summary>
            Number of hours/minutes/seconds.
            </summary>
        </member>
        <member name="F:PHP.Library.StrToTime.DateInfo.Relative.weekday">
            <summary>
            Weekday (e.g. "next monday").
            </summary>
        </member>
        <member name="T:PHP.Library.DateTimeZone">
            <summary>
            Representation of time zone.
            </summary>
        </member>
        <member name="M:PHP.Library.DateTimeZone.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.DateTimeZone.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.DateTimeZone.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserializing constructor.</summary>
        </member>
        <member name="T:PHP.Library.PhpTimeZone">
            <summary>
            Provides timezone information for PHP functions.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpTimeZone.#cctor">
            <summary>
            Registers <see cref="M:PHP.Library.PhpTimeZone.Clear"/> called on request end.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpTimeZone.timezones">
            <summary>
            PHP time zone database.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpTimeZone._default">
            <summary>
            Time zone set as current. <B>null</B> initially.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpTimeZone._current">
            <summary>
            Time zone set as current. <B>null</B> initially.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpTimeZone.Clear">
            <summary>
            Clears thread static field. Called on request end.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpTimeZone.GsrTimeZone(PHP.Library.LibraryConfiguration,PHP.Library.LibraryConfiguration,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets/sets/resets legacy configuration setting "date.timezone".
            </summary>
        </member>
        <member name="M:PHP.Library.PhpTimeZone.GetTimeZone(System.String)">
            <summary>
            Gets an instance of <see cref="T:System.TimeZone"/> corresponding to specified PHP name for time zone.
            </summary>
            <param name="phpName">PHP time zone name.</param>
            <returns>The time zone or a <B>null</B> reference.</returns>
        </member>
        <member name="M:PHP.Library.PhpTimeZone.SystemToPhpTimeZone(System.TimeZoneInfo)">
            <summary>
            Tries to match given <paramref name="systemTimeZone"/> to our fixed <see cref="F:PHP.Library.PhpTimeZone.timezones"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpTimeZone.GetTZVersion">
            <summary>
            Gets the version of used the time zone database.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpTimeZone.TimeZoneOpen(PHP.Core.ScriptContext,System.String)">
            <summary>
            Alias of new <see cref="T:PHP.Library.DateTimeZone"/>
            </summary>
        </member>
        <member name="M:PHP.Library.PhpTimeZone.TimeZoneOffsetGet(PHP.Core.ScriptContext,PHP.Library.DateTimeZone,PHP.Library.__PHP__DateTime)">
            <summary>
            Alias of <see cref="M:PHP.Library.DateTimeZone.getOffset(PHP.Core.ScriptContext,System.Object)"/>
            </summary>
        </member>
        <member name="P:PHP.Library.PhpTimeZone.CurrentTimeZone">
            <summary>
            Gets the current time zone for PHP date-time library functions. Associated with the current thread.
            </summary>
            <remarks>It returns the time zone set by date_default_timezone_set PHP function.
            If no time zone was set, the time zone is determined in following order:
            1. the time zone set in configuration
            2. the time zone of the current system
            3. default UTC time zone</remarks>
        </member>
        <member name="F:PHP.Library.PhpTimeZone.TimeZoneInfoItem.PhpName">
            <summary>
            PHP time zone name.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpTimeZone.TimeZoneInfoItem.Info">
            <summary>
            Actual <see cref="T:System.TimeZoneInfo"/> from .NET.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpTimeZone.TimeZoneInfoItem.Abbrevation">
            <summary>
            An abbrevation, not supported.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpTimeZone.TimeZoneInfoItem.IsAlias">
            <summary>
            Not listed item used only as an alias for another time zone.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpTimeZone.TimeZoneInfoItem.Comparer">
            <summary>
            Comparer of <see cref="T:PHP.Library.PhpTimeZone.TimeZoneInfoItem"/>, comparing its <see cref="F:PHP.Library.PhpTimeZone.TimeZoneInfoItem.PhpName"/>.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpTimeZone.CurrentTimeZoneCache">
            <summary>
            Cache of current TimeZone with auto-update ability.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpTimeZone.CurrentTimeZoneCache._changedFunc">
            <summary>
            Function that determines if the current timezone should be rechecked.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpTimeZone.CurrentTimeZoneCache.DetermineTimeZone(System.Func{System.TimeZoneInfo,System.Boolean}@)">
            <summary>
            Finds out the time zone in the way how PHP does.
            </summary>
        </member>
        <member name="P:PHP.Library.PhpTimeZone.CurrentTimeZoneCache.TimeZone">
            <summary>
            Get the TimeZone set by the current process. Depends on environment variable, or local configuration, or system time zone.
            </summary>
        </member>
        <member name="T:PHP.Library.Errors">
            <summary>
            Implementation of PHP error control functions.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.Errors.Log(System.String)">
            <summary>
            Logs a message to a log file or the system event log.
            </summary>
            <param name="message">The message to be logged.</param>
            <returns>Whether the message has been logged successfully.</returns>
        </member>
        <member name="M:PHP.Library.Errors.Log(System.String,PHP.Library.Errors.LogAction)">
            <summary>
            Performs specific <see cref="T:PHP.Library.Errors.LogAction"/> with a given message and default options.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="action">The <see cref="T:PHP.Library.Errors.LogAction"/> to be performed.</param>
            <returns>Whether the message has been logged successfully.</returns>
        </member>
        <member name="M:PHP.Library.Errors.Log(System.String,PHP.Library.Errors.LogAction,System.String)">
            <summary>
            Performs specific <see cref="T:PHP.Library.Errors.LogAction"/> with a given message and name of the log file.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="destination">The name of the log file.</param>
            <param name="action">The <see cref="T:PHP.Library.Errors.LogAction"/> to be performed.</param>
            <returns>Whether the message has been logged successfully.</returns>
        </member>
        <member name="M:PHP.Library.Errors.Log(System.String,PHP.Library.Errors.LogAction,System.String,System.String)">
            <summary>
            Performs specific <see cref="T:PHP.Library.Errors.LogAction"/> with a given message, name of the log file and additional headers.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="destination">The name of the log file.</param>
            <param name="extraHeaders">Additional headers which are sent along the e-mail.</param>
            <param name="action">The <see cref="T:PHP.Library.Errors.LogAction"/> to be performed.</param>
            <returns>Whether the message has been logged successfully.</returns>
        </member>
        <member name="M:PHP.Library.Errors.TriggerError(System.String)">
            <summary>
            Triggers user notice with a specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:PHP.Library.Errors.TriggerError(System.String,PHP.Core.PhpError)">
            <summary>
            Triggers user error of an arbitrary type and specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="error">The type of an error. The type should be one of the user error types.</param>
            <exception cref="T:PHP.Core.PhpException">User specified error.</exception>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="error"/> argument has an invalid value.</exception>
        </member>
        <member name="M:PHP.Library.Errors.UserError(System.String)">
            <summary>
            Alias of trigger_error().
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:PHP.Library.Errors.UserError(System.String,PHP.Core.PhpError)">
            <summary>
            Alias of trigger_error().
            </summary>
            <param name="message">The message.</param>
            <param name="error">The type of an error. The type should be one of the user error types.</param>
            <exception cref="T:PHP.Core.PhpException">User specified error.</exception>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="error"/> argument has an invalid value.</exception>
        </member>
        <member name="M:PHP.Library.Errors.Backtrace">
            <summary>
            Returns array containing current stack state. Each item is an array representing one stack frame.
            </summary>
            <returns>The stack trace.</returns>
            <remarks>
            The resulting array contains the following items (their keys are stated):
            <list type="bullet">
            <item><c>"file"</c> - a source file where the function/method has been called</item>
            <item><c>"line"</c> - a line in a source code where the function/method has been called</item>
            <item><c>"column"</c> - a column in a source code where the function/method has been called</item>
            <item><c>"function"</c> - a name of the function/method</item> 
            <item><c>"class"</c> - a name of a class where the method is declared (if any)</item>
            <item><c>"object"</c> - an object which metod has been called</item>
            <item><c>"type"</c> - either "::" for static methods or "->" for instance methods</item>
            </list>
            PHP adds one more item - "args" containing values of arguments and object which metod has been called. This is not supported.
            </remarks>
        </member>
        <member name="M:PHP.Library.Errors.Backtrace(System.Boolean)">
            <summary>
            Returns array containing current stack state. Each item is an array representing one stack frame.
            </summary>
            <returns>The stack trace.</returns>
            <remarks>
            The resulting array contains the following items (their keys are stated):
            <list type="bullet">
            <item><c>"file"</c> - a source file where the function/method has been called</item>
            <item><c>"line"</c> - a line in a source code where the function/method has been called</item>
            <item><c>"column"</c> - a column in a source code where the function/method has been called</item>
            <item><c>"function"</c> - a name of the function/method</item> 
            <item><c>"class"</c> - a name of a class where the method is declared (if any)</item>
            <item><c>"object"</c> - an object which metod has been called</item>
            <item><c>"type"</c> - either "::" for static methods or "-&gt;" for instance methods</item>
            </list>
            PHP adds two more item - "args" containing values of arguments and object which metod has been called. This is not supported.
            </remarks>
            <param name="provideObject">Recipient e-mail address.</param>
            <exception cref="T:PHP.Core.PhpException"><paramref name="provideObject"/> has an invalid or unsupported value. (Warning)</exception>
        </member>
        <member name="M:PHP.Library.Errors.PrintBacktrace">
            <summary>
            Prints string representation of the stack trace.
            No value is returned.
            </summary>
        </member>
        <member name="M:PHP.Library.Errors.PrintBacktrace(System.Boolean)">
            <summary>
            Prints string representation of the stack trace.
            No value is returned.
            </summary>
        </member>
        <member name="T:PHP.Library.Errors._PhpErrorSet">
            <summary>
            Set of error types.
            </summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_ERROR">
            <summary>Error.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_WARNING">
            <summary>Warning.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_PARSE">
            <summary>Parse error.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_NOTICE">
            <summary>Notice.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_CORE_ERROR">
            <summary>Core error.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_CORE_WARNING">
            <summary>Core warning.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_COMPILE_ERROR">
            <summary>Compile error.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_COMPILE_WARNING">
            <summary>Compile warning.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_USER_ERROR">
            <summary>User error.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_USER_WARNING">
            <summary>User warning.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_USER_NOTICE">
            <summary>User notice.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_ALL">
            <summary>All errors but strict.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_STRICT">
            <summary>Strict error.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_RECOVERABLE_ERROR">
            <summary>E_RECOVERABLE_ERROR error.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_DEPRECATED">
            <summary>Deprecated error.</summary>
        </member>
        <member name="F:PHP.Library.Errors._PhpErrorSet.E_USER_DEPRECATED">
            <summary>Deprecated error.</summary>
        </member>
        <member name="T:PHP.Library.Errors.LogAction">
            <summary>
            An action performed by the <see cref="M:PHP.Library.Errors.Log(System.String)"/> method.
            </summary>
        </member>
        <member name="F:PHP.Library.Errors.LogAction.Default">
            <summary>
            A message to be logged is appended to log file or sent to system log depending on the 
            current value of <see cref="F:PHP.Core.LocalConfiguration.ErrorControl"/>.
            </summary>
        </member>
        <member name="F:PHP.Library.Errors.LogAction.SendByEmail">
            <summary>
            A message is sent by an e-mail.
            </summary>
        </member>
        <member name="F:PHP.Library.Errors.LogAction.ToDebuggingConnection">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:PHP.Library.Errors.LogAction.AppendToFile">
            <summary>
            A message is appended to a specified file.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpFile">
            <summary>
            Provides PHP I/O operations using the set of StreamWrappers.
            </summary>
            <threadsafety static="true"/>
            <summary>
            Provides PHP I/O operations using the set of StreamWrappers.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="F:PHP.Library.PhpFile.HttpResponseHeaderName">
            <summary>
            Name of variable that is filled with response headers in case of file_get_contents and http protocol.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFile.statCache">
            <summary>The most recent <c>stat()</c> result (<c>stat()</c> of the <see cref="F:PHP.Library.PhpFile.statCacheUrl"/> file).</summary>
        </member>
        <member name="F:PHP.Library.PhpFile.statCacheUrl">
            <summary>The absolute path of the last <c>stat()</c> operation.</summary>
        </member>
        <member name="M:PHP.Library.PhpFile.BuildStatArray(PHP.Core.StatStruct)">
            <summary>
            Creates a <see cref="T:PHP.Core.PhpArray"/> from the <see cref="T:PHP.Core.StatStruct"/> 
            copying the structure members into the array.
            </summary>
            <remarks>
            The resulting PhpArray has following associative keys in the given order
            (each has a corresponding numeric index starting from zero).
            As of ordering, first come all the numeric indexes and then come all the associative indexes.
            <list type="table">
            <item><term>dev</term><term>Drive number of the disk containing the file (same as st_rdev). </term></item>
            <item><term>ino</term><term>Number of the information node (the inode) for the file (UNIX-specific). On UNIX file systems, the inode describes the file date and time stamps, permissions, and content. When files are hard-linked to one another, they share the same inode. The inode, and therefore st_ino, has no meaning in the FAT, HPFS, or NTFS file systems. </term></item>
            <item><term>mode</term><term>Bit mask for file-mode information. The _S_IFDIR bit is set if path specifies a directory; the _S_IFREG bit is set if path specifies an ordinary file or a device. User read/write bits are set according to the file's permission mode; user execute bits are set according to the path extension. </term></item>
            <item><term>nlink</term><term>Always 1 on non-NTFS file systems. </term></item>
            <item><term>uid</term><term>Numeric identifier of user who owns file (UNIX-specific). This field will always be zero on Windows NT systems. A redirected file is classified as a Windows NT file. </term></item>
            <item><term>gid</term><term>Numeric identifier of group that owns file (UNIX-specific) This field will always be zero on Windows NT systems. A redirected file is classified as a Windows NT file. </term></item>
            <item><term>rdev</term><term>Drive number of the disk containing the file (same as st_dev). </term></item>
            <item><term>size</term><term>Size of the file in bytes; a 64-bit integer for _stati64 and _wstati64 </term></item>
            <item><term>atime</term><term>Time of last access of file. Valid on NTFS but not on FAT formatted disk drives. Gives the same </term></item>
            <item><term>mtime</term><term>Time of last modification of file. </term></item>
            <item><term>ctime</term><term>Time of creation of file. Valid on NTFS but not on FAT formatted disk drives. </term></item>
            <item><term>blksize</term><term>Always -1 on non-NTFS file systems. </term></item>
            <item><term>blocks</term><term>Always -1 on non-NTFS file systems. </term></item>
            </list>
            </remarks>
            <param name="stat">A <see cref="T:PHP.Core.StatStruct"/> returned by a stream wrapper.</param>
            <returns>A <see cref="T:PHP.Core.PhpArray"/> in the format of the <c>stat()</c> PHP function.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.StatInternalCheck(System.String@,System.Boolean,PHP.Core.StreamWrapper@)">
            <summary>
            Check StatInternal input parameters.
            </summary>
            <param name="path">The path passed to stat().</param>
            <param name="quiet">Wheter to suppress warning message if argument is empty.</param>
            <param name="wrapper">If passed, it will contain valid StremWrapper to the given <paramref name="path"/>.</param>
            <returns>True if check passed.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.StatInternalTryCache(System.String,System.String@)">
            <summary>
            Check the cache for given <paramref name="path"/>.
            </summary>
            <param name="path">Path to lookup in the cache.</param>
            <param name="url">Url of <paramref name="path"/>.</param>
            <returns>True if given <paramref name="path"/> is in the cache currently.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.StatInternalStat(System.String,System.String,PHP.Core.StreamWrapper,System.Boolean)">
            <summary>
            Stat the path coming from ResolvePath (file:// wrapper expects path w/o the scheme).
            </summary>
            <param name="path"></param>
            <param name="url"></param>
            <param name="wrapper"></param>
            <param name="quiet"></param>
            <returns>True if stat was successfuly added into cache.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.StatInternal(System.String,System.Boolean)">
            <summary>
            Stat the given file or directory using stream-wrappers and return the stat structure
            using the stat-cache for repetitive calls.
            </summary>
            <param name="path">The path (absolute or relative or an URL) to the file or directory to stat.</param>
            <param name="quiet"><c>true</c> to suppress the display of error messages (for example for <c>exists()</c>).</param>
            <returns><c>true</c> if the <see cref="F:PHP.Library.PhpFile.statCache"/> contains a valid 
            stat structure for the given URL, <c>false</c> on an error.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.LinkStat(System.String)">
            <summary>
            Gives information about a file or symbolic link. 
            </summary>
            <remarks>
            Behaves just like a <see cref="M:PHP.Library.PhpFile.Stat(System.String)"/> since there are no symbolic links on Windows.
            </remarks>
            <param name="path">Path to a file to <c>stat</c>.</param>
            <returns>A <see cref="T:PHP.Core.PhpArray"/> containing the stat information.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Stat(System.String)">
            <summary>
            Gives information about a file.
            </summary>
            <param name="path">Path to a file to <c>stat</c>.</param>
            <returns>A <see cref="T:PHP.Core.PhpArray"/> containing the stat information.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Stat(PHP.Core.PhpResource)">
            <summary>
            Gets information about a file using an open file pointer.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.ClearStatCache">
            <summary>
            Remove all the cached <c>stat()</c> entries.
            Function has no return value.
            </summary>
            <remarks>
            The intermediary <see cref="T:PHP.Core.StatStruct"/> used in the last stat-related function call
            is cached together with the absolute path or URL to the resource.
            The next call to one of the following functions will use the cached
            structure unless <see cref="M:PHP.Library.PhpFile.ClearStatCache"/> is called.
            <para>
            The affected functions are:
            <c>stat()</c>, <c>lstat()</c>, <c>file_exists()</c>, <c>is_writable()</c>, <c>is_readable()</c>, <c>
            is_executable()</c>, <c>is_file()</c>, <c>is_dir()</c>, <c>is_link()</c>, <c>filectime()</c>, <c>
            fileatime()</c>, <c>filemtime()</c>, <c>fileinode()</c>, <c>filegroup()</c>, <c>fileowner()</c>, <c>
            filesize()</c>, <c>filetype()</c> <c>and fileperms()</c>. 
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpFile.Exists(System.String)">
            <summary>
            Checks whether a file exists
            </summary>
            <param name="path">The file to be checked.</param>
            <returns>True if the file exists.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Touch(System.String)">
            <summary>
            Sets access and modification time of file.
            </summary>
            <param name="path">The file to touch.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Touch(System.String,System.Int32)">
            <summary>
            Sets access and modification time of file.
            </summary>
            <param name="path">The file to touch.</param>
            <param name="mtime">The new modification time.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Touch(System.String,System.Int32,System.Int32)">
            <summary>
            Sets access and modification time of file.
            </summary>
            <remarks>
            Attempts to set the access and modification time of the file named by 
            path to the value given by time. If the option time is not given, 
            uses the present time. If the third option atime is present, the access 
            time of the given path is set to the value of atime. Note that 
            the access time is always modified, regardless of the number of parameters. 
            If the file does not exist, it is created. 
            </remarks>
            <param name="path">The file to touch.</param>
            <param name="mtime">The new modification time.</param>
            <param name="atime">The desired access time.</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.GetDiskFreeSpace(System.String)">
            <summary>
            Given a string containing a directory, this function will return 
            the number of free bytes on the corresponding filesystem or disk partition. 
            </summary>
            <param name="directory">The directory specifying the filesystem or disk partition to be examined.</param>
            <returns>Nuber of free bytes available or <c>FALSE</c> on an error.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.GetFreeSpace(System.String)">
            <summary>
            Given a string containing a directory, this function will return 
            the number of free bytes on the corresponding filesystem or disk partition. 
            </summary>
            <param name="directory">The directory specifying the filesystem or disk partition to be examined.</param>
            <returns>Nuber of free bytes available or <c>FALSE</c> on an error.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.GetDiskTotalSpace(System.String)">
            <summary>
            Given a string containing a directory, this function will return 
            the number of total bytes on the corresponding filesystem or disk partition. 
            </summary>
            <param name="directory">The directory specifying the filesystem or disk partition to be examined.</param>
            <returns>Total nuber of bytes on the specified filesystem or disk partition or <c>FALSE</c> on an error.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.GetDiskFreeSpaceInternal(System.String,System.Boolean)">
            <summary>
            Given a string containing a directory, this function will return 
            the number of bytes (total or free depending on <paramref name="total"/> 
            on the corresponding filesystem or disk partition. 
            </summary>
            <param name="directory">The directory specifying the filesystem or disk partition to be examined.</param>
            <param name="total"><c>true</c> to return total space available, <c>false</c> to return free space only.</param>
            <returns>Nuber of bytes available or <c>FALSE</c> on an error.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.GetType(System.String)">
            <summary>
            Gets file type.
            </summary>
            <remarks>
            Returns the type of the file. Possible values are <c>fifo</c>, <c>char</c>, 
            <c>dir</c>, <c>block</c>, <c>link</c>, <c>file</c>, and <c>unknown</c>. 
            Returns <B>null</B> if an error occurs. 
            </remarks>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.GetAccessTime(System.String)">
            <summary>
            Returns the time the file was last accessed, or <c>false</c> in case 
            of an error. The time is returned as a Unix timestamp.
            </summary>
            <remarks>
            The results of this call are cached.
            See <see cref="M:PHP.Library.PhpFile.ClearStatCache"/> for more details.
            </remarks>
            <param name="path">The file to be probed.</param>
            <returns>The file access time or -1 in case of failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.GetCreationTime(System.String)">
            <summary>
            Returns the time the file was created, or <c>false</c> in case 
            of an error. The time is returned as a Unix timestamp.
            </summary>
            <remarks>
            The results of this call are cached.
            See <see cref="M:PHP.Library.PhpFile.ClearStatCache"/> for more details.
            <para>
            On UNIX systems the <c>filectime</c> value represents 
            the last change of the I-node.
            </para>
            </remarks>
            <param name="path">The file to be <c>stat()</c>ed.</param>
            <returns>The file size or -1 in case of failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.GetGroup(System.String)">
            <summary>
            Gets file group.
            </summary>
            <remarks>
            Always returns <c>0</c> for Windows filesystem files.
            </remarks>
            <param name="path">The file to be <c>stat()</c>ed.</param>
            <returns>The file size or <c>false</c> in case of failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.GetINode(System.String)">
            <summary>
            Gets file inode.
            </summary>
            <remarks>
            Always returns <c>0</c> for Windows filesystem files.
            </remarks>
            <param name="path">The file to be <c>stat()</c>ed.</param>
            <returns>The file size or <c>false</c> in case of failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.GetModificationTime(System.String)">
            <summary>
            Returns the time the file was last modified, or <c>false</c> in case 
            of an error. The time is returned as a Unix timestamp.
            </summary>
            <remarks>
            The results of this call are cached.
            See <see cref="M:PHP.Library.PhpFile.ClearStatCache"/> for more details.
            </remarks>
            <param name="path">The file to be <c>stat()</c>ed.</param>
            <returns>The file modification time or <c>false</c> in case of failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.GetOwner(System.String)">
            <summary>
            Gets file owner.
            </summary>
            <param name="path">The file to be <c>stat()</c>ed.</param>
            <returns>The user ID of the owner of the file, or <c>false</c> in case of an error. </returns>
        </member>
        <member name="M:PHP.Library.PhpFile.GetPermissions(System.String)">
            <summary>
            Gets file permissions.
            </summary>
            <param name="path">The file to be <c>stat()</c>ed.</param>
            <returns>Returns the permissions on the file, or <c>false</c> in case of an error. </returns>
        </member>
        <member name="M:PHP.Library.PhpFile.GetSize(System.String)">
            <summary>
            Gets the file size.
            </summary>
            <remarks>
            The results of this call are cached.
            See <see cref="M:PHP.Library.PhpFile.ClearStatCache"/> for more details.
            </remarks>
            <param name="path">The file to be probed.</param>
            <returns>The file size or false in case of failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.IsDirectory(System.String)">
            <summary>
            Tells whether the path is a directory.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.IsExecutable(System.String)">
            <summary>
            Tells whether the path is executable.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.IsFile(System.String)">
            <summary>
            Tells whether the path is a regular file and if it exists.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.IsLink(System.String)">
            <summary>
            Tells whether the path is a symbolic link.
            </summary>
            <remarks>
            Returns always <c>false</c>.
            </remarks>
            <param name="path"></param>
            <returns>Always <c>false</c></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.IsReadable(System.String)">
            <summary>
            Tells whether the path is readable.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.IsWriteable(System.String)">
            <summary>
            Tells whether the path is writable.
            </summary>
            <param name="path">The path argument may be a directory name allowing you to check if a directory is writeable. </param>
            <returns>Returns TRUE if the path exists and is writable. </returns>
        </member>
        <member name="M:PHP.Library.PhpFile.IsWritable(System.String)">
            <summary>
            Tells whether the path is writable.
            </summary>
            <param name="path">The path argument may be a directory name allowing you to check if a directory is writeable. </param>
            <returns>Returns TRUE if the path exists and is writable. </returns>
        </member>
        <member name="M:PHP.Library.PhpFile.#cctor">
            <summary>
            Registers the ClassLibrary filters for the Core streams API.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFile.Open(System.String,System.String)">
            <summary>
            Opens filename or URL using a registered StreamWrapper.
            </summary>
            <param name="path">The file to be opened. The schema part of the URL specifies the wrapper to be used.</param>
            <param name="mode">The read/write and text/binary file open mode.</param>
            <returns>The file resource or false in case of failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Open(System.String,System.String,PHP.Library.FileOpenOptions)">
            <summary>
            Opens filename or URL using a registered StreamWrapper.
            </summary>
            <param name="path">The file to be opened. The schema part of the URL specifies the wrapper to be used.</param>
            <param name="mode">The read/write and text/binary file open mode.</param>
            <param name="flags">If set to true, then the include path is searched for relative filenames too.</param>
            <returns>The file resource or false in case of failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Open(System.String,System.String,PHP.Library.FileOpenOptions,PHP.Core.PhpResource)">
            <summary>
            Opens filename or URL using a registered StreamWrapper.
            </summary>
            <param name="path">The file to be opened. The schema part of the URL specifies the wrapper to be used.</param>
            <param name="mode">The read/write and text/binary file open mode.</param>
            <param name="flags">If set to true, then the include path is searched for relative filenames too.</param>
            <param name="context">A script context to be provided to the StreamWrapper.</param>
            <returns>The file resource or false in case of failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.ProcessOptions(PHP.Library.FileOpenOptions)">
            <summary>
            Prevents invalid options from the the options argument for StreamWrapper.Open().
            </summary>
            <param name="flags">Flags passed to stream opening functions.</param>
            <returns>The StreamOpenFlags combination for the given arguments.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.OpenTemporary">
            <summary>
            Creates a temporary file.
            </summary>
            <remarks>
            Creates a temporary file with an unique name in write mode, 
            returning a file handle similar to the one returned by fopen(). 
            The file is automatically removed when closed (using fclose()), 
            or when the script ends.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Close(PHP.Core.PhpResource)">
            <summary>
            Close an open file pointer.
            </summary>
            <param name="handle">A PhpResource passed to the PHP function.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Eof(PHP.Core.PhpResource)">
            <summary>
            Tests for end-of-file on a file pointer.
            </summary>
            <param name="handle">A PhpResource passed to the PHP function.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Flush(PHP.Core.PhpResource)">
            <summary>
            Flushes the output to a file.
            </summary>
            <param name="handle">A PhpResource passed to the PHP function.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.WriteFormatted(PHP.Core.PhpResource,System.String,System.Object[])">
            <summary>
            Writes the string formatted using <c>sprintf</c> to the given stream.
            </summary>
            <param name="handle">A stream opened for writing.</param>
            <param name="format">The format string. For details, see PHP manual.</param>
            <param name="arguments">The arguments.
            See <A href="http://www.php.net/manual/en/function.sprintf.php">PHP manual</A> for details.
            Besides, a type specifier "%C" is applicable. It converts an integer value to Unicode character.</param>
            <returns>Number of characters written of <c>false</c> in case of an error.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadLineFormat(PHP.Core.PhpResource,System.String)">
            <summary>
            Parses input from a file according to a format.
            </summary>
            <param name="handle"></param>
            <param name="format"></param>
            <returns>A <see cref="T:PHP.Core.PhpArray"/> containing the parsed values.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadLineFormat(PHP.Core.PhpResource,System.String,PHP.Core.PhpReference,PHP.Core.PhpReference[])">
            <summary>
            Parses input from a file according to a format.
            </summary>
            <param name="handle"></param>
            <param name="format"></param>
            <param name="arg"></param>
            <param name="arguments"></param>
            <returns>The number of assigned values.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadLineCsv(PHP.Core.PhpResource,System.Int32,System.Char,System.Char,System.Char)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <param name="length"></param>
            <param name="delimiter"></param>
            <param name="enclosure"></param>
            <param name="escape_char">The escape character used in the CSV string.</param>
            <returns>Returns an indexed array containing the fields read.
            fgetcsv() returns NULL if an invalid handle is supplied or FALSE on other errors, including end of file.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.WriteLineCsv(PHP.Core.PhpResource,PHP.Core.PhpArray,System.Char,System.Char)">
            <remarks>
            Affected by run-time quoting (data are unqouted before written)
            (<see cref="F:PHP.Core.LocalConfiguration.VariablesSection.QuoteRuntimeVariables"/>).
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpFile.Read(PHP.Core.PhpResource,System.Int32)">
            <summary>
            Binary-safe file read.
            </summary>
            <param name="handle">A file stream opened for reading.</param>
            <param name="length">Number of bytes to be read.</param>
            <returns>
            The <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/>
            of the specified length depending on file access mode.
            </returns>
            <remarks>
            Result is affected by run-time quoting 
            (<see cref="F:PHP.Core.LocalConfiguration.VariablesSection.QuoteRuntimeVariables"/>).
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadChar(PHP.Core.PhpResource)">
            <summary>
            Gets character from file pointer.
            </summary>
            <param name="handle">A file stream opened for reading.</param>
            <returns>A <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> containing one character from the 
            given stream or <c>false</c> on EOF.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Write(PHP.Core.PhpResource,System.Object)">
            <summary>
            Binary-safe file write.
            </summary>
            <param name="handle">The file stream (opened for writing). </param>
            <param name="data">The data to be written.</param>
            <returns>Returns the number of bytes written, or FALSE on error. </returns>
            <remarks>
            Affected by run-time quoting (data are unqouted before written)
            (<see cref="F:PHP.Core.LocalConfiguration.VariablesSection.QuoteRuntimeVariables"/>).
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpFile.Write(PHP.Core.PhpResource,System.Object,System.Int32)">
            <summary>
            Binary-safe file write.
            </summary>
            <param name="handle">The file stream (opened for writing). </param>
            <param name="data">The data to be written.</param>
            <param name="length">
            If the length argument is given, writing will stop after length bytes 
            have been written or the end of string is reached, whichever comes first.
            </param>
            <returns>Returns the number of bytes written, or FALSE on error. </returns>
            <remarks>
            Affected by run-time quoting (data are unqouted before written)
            (<see cref="F:PHP.Core.LocalConfiguration.VariablesSection.QuoteRuntimeVariables"/>).
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpFile.Write2(PHP.Core.PhpResource,System.Object)">
            <summary>
            Binary-safe file write. Alias for <see cref="M:PHP.Library.PhpFile.Write(PHP.Core.PhpResource,System.Object)"/>.
            </summary>
            <param name="handle">The file stream (opened for writing). </param>
            <param name="data">The data to be written.</param>
            <returns>Returns the number of bytes written, or FALSE on error. </returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Write2(PHP.Core.PhpResource,System.Object,System.Int32)">
            <summary>
            Binary-safe file write. Alias for <see cref="M:PHP.Library.PhpFile.Write(PHP.Core.PhpResource,System.Object,System.Int32)"/>.
            </summary>
            <param name="handle">The file stream (opened for writing). </param>
            <param name="data">The data to be written.</param>
            <param name="length">If the length argument is given, writing will stop after length bytes 
            have been written or the end of string is reached, whichever comes first. </param>
            <returns>Returns the number of bytes written, or FALSE on error. </returns>
        </member>
        <member name="M:PHP.Library.PhpFile.WriteInternal(PHP.Core.PhpResource,System.Object,System.Int32)">
            <summary>
            Binary-safe file write implementation.
            </summary>
            <param name="handle">The file stream (opened for writing). </param>
            <param name="data">The data to be written.</param>
            <param name="length">The number of characters to write or <c>-1</c> to use the whole <paramref name="data"/>.</param>
            <returns>Returns the number of bytes written, or FALSE on error. </returns>
        </member>
        <member name="M:PHP.Library.PhpFile.PassThrough(PHP.Core.PhpResource)">
            <summary>
            Outputs all remaining data on a file pointer.
            </summary>
            <param name="handle">The file stream (opened for reading). </param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadFile(System.String)">
            <summary>
            Reads a file and writes it to the output buffer.
            </summary>
            <param name="path">The file to open.</param>
            <returns>Returns the number of bytes read from the file. If an error occurs, <c>false</c> is returned.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadFile(System.String,PHP.Library.FileOpenOptions)">
            <summary>
            Reads a file and writes it to the output buffer.
            </summary>
            <param name="path">The file to open.</param>
            <param name="flags">Searches for the file in the <c>include_path</c> if set to <c>true</c>.</param>
            <returns>Returns the number of bytes read from the file. If an error occurs, <c>false</c> is returned.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadFile(System.String,PHP.Library.FileOpenOptions,PHP.Core.PhpResource)">
            <summary>
            Reads a file and writes it to the output buffer.
            </summary>
            <param name="path">The file to open.</param>
            <param name="flags">Searches for the file in the <c>include_path</c> if set to <c>1</c>.</param>
            <param name="context">A <see cref="T:PHP.Core.StreamContext"/> resource with additional information for the stream.</param>
            <returns>Returns the number of bytes read from the file. If an error occurs, <c>false</c> is returned.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadLine(PHP.Core.PhpResource)">
            <summary>
            Gets one line of text from file pointer including the end-of-line character. 
            </summary>
            <param name="handle">The file stream opened for reading.</param>
            <returns>A <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> containing the line of text or <c>false</c> in case of an error.</returns>
            <remarks>
            <para>
              Result is affected by run-time quoting 
              (<see cref="F:PHP.Core.LocalConfiguration.VariablesSection.QuoteRuntimeVariables"/>).
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadLine(PHP.Core.PhpResource,System.Int32)">
            <summary>
            Gets one line of text from file pointer including the end-of-line character. 
            </summary>
            <param name="length">Maximum length of the returned text.</param>
            <param name="handle">The file stream opened for reading.</param>
            <returns>A <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> containing the line of text or <c>false</c> in case of an error.</returns>
            <remarks>
            <para>
              Returns a string of up to <paramref name="length"/><c> - 1</c> bytes read from 
              the file pointed to by <paramref name="handle"/>.
            </para>
            <para>
              The <paramref name="length"/> parameter became optional in PHP 4.2.0, if omitted, it would
              assume 1024 as the line length. As of PHP 4.3, omitting <paramref name="length"/> will keep
              reading from the stream until it reaches the end of the line. 
              If the majority of the lines in the file are all larger than 8KB, 
              it is more resource efficient for your script to specify the maximum line length.
            </para>
            <para>
              Result is affected by run-time quoting 
              (<see cref="F:PHP.Core.LocalConfiguration.VariablesSection.QuoteRuntimeVariables"/>).
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadLineStripTags(PHP.Core.PhpResource)">
            <summary>
            Gets a whole line from file pointer and strips HTML tags.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadLineStripTags(PHP.Core.PhpResource,System.Int32)">
            <summary>
            Gets a line from file pointer and strips HTML tags.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadLineStripTags(PHP.Core.PhpResource,System.Int32,System.String)">
            <summary>
            Gets one line from file pointer and strips HTML tags.
            </summary>
            <param name="handle"></param>
            <param name="length"></param>
            <param name="allowableTags"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadArray(System.String)">
            <summary>
            Reads entire file into an array.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadArray(System.String,PHP.Library.FileOptions)">
            <summary>
            Reads entire file into an array.
            </summary>
            <param name="path"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadArray(System.String,PHP.Library.FileOptions,PHP.Core.PhpResource)">
            <summary>
            Reads entire file into an array.
            </summary>
            <remarks>
            </remarks>
            <para>
              The input file is split at '\n' and the separator is included in every line.
            </para>
            <para>
              Result is affected by run-time quoting 
              (<see cref="F:PHP.Core.LocalConfiguration.VariablesSection.QuoteRuntimeVariables"/>).
            </para>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadContents(PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Reads entire file into a string.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadContents(PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,PHP.Library.FileOpenOptions)">
            <summary>
            Reads entire file into a string.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadContents(PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,PHP.Library.FileOpenOptions,PHP.Core.PhpResource)">
            <summary>
            Reads entire file into a string.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadContents(PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,PHP.Library.FileOpenOptions,PHP.Core.PhpResource,System.Int32)">
            <summary>
            Reads entire file into a string.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFile.ReadContents(PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,PHP.Library.FileOpenOptions,PHP.Core.PhpResource,System.Int32,System.Int32)">
            <summary>
            Reads entire file into a string.
            </summary>
            <remarks>
            Result is affected by run-time quoting 
            (<see cref="F:PHP.Core.LocalConfiguration.VariablesSection.QuoteRuntimeVariables"/>).
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpFile.Seek(PHP.Core.PhpResource,System.Int32)">
            <summary>
            Seeks on a file pointer.
            </summary>
            <param name="handle">The file stream resource.</param>
            <param name="offset">The number of bytes to seek.</param>
            <returns>Upon success, returns 0; otherwise, returns -1. 
            Note that seeking past EOF is not considered an error.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Seek(PHP.Core.PhpResource,System.Int32,System.Int32)">
            <summary>
            Seeks on a file pointer.
            </summary>
            <param name="handle">A file stream resource.</param>
            <param name="offset">The number of bytes to seek.</param>
            <param name="whence">The position in stream to seek from.
            May be one of the SeekOptions flags.</param>
            <returns>Upon success, returns 0; otherwise, returns -1. 
            Note that seeking past EOF is not considered an error.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Rewind(PHP.Core.PhpResource)">
            <summary>
            Rewind the position of a file pointer.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Tell(PHP.Core.PhpResource)">
            <summary>
            Tells file pointer read/write position.
            </summary>
            <param name="handle">A file stream resource.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Truncate(PHP.Core.PhpResource,System.Int32)">
            <summary>
            Truncates a file to a given length.
            </summary>
            <param name="handle"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Copy(System.String,System.String)">
            <summary>
            Copies a file (even accross different stream wrappers).
            </summary>
            <remarks>
            If the destination file already exists, it will be overwritten. 
            <para>
            Note: As of PHP 4.3.0, both source and dest may be URLs if the 
            "fopen wrappers" have been enabled. See <c>fopen()</c> for more details. 
            If dest is an URL, the copy operation may fail if the wrapper does 
            not support overwriting of existing files. 
            </para> 
            </remarks>
            <param name="source">Source URL.</param>
            <param name="dest">Destination URL.</param>
            <returns><c>true</c> on success or <c>false</c> on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Rename(System.String,System.String)">
            <summary>
            Renames a file.
            </summary>
            <remarks>
            Both the <paramref name="oldpath"/> and the <paramref name="newpath"/>
            must be handled by the same wrapper.
            </remarks>
            <param name="oldpath"></param>
            <param name="newpath"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Delete(System.String)">
            <summary>
            Deletes a file using a StreamWrapper corresponding to the given URL.
            </summary>
            <param name="path">An URL of a file to be deleted.</param>
            <returns>True in case of success.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Delete(System.String,PHP.Core.PhpResource)">
            <summary>
            Deletes a file using a StreamWrapper corresponding to the given URL.
            </summary>
            <param name="path">An URL of a file to be deleted.</param>
            <param name="context">StreamContext.</param>
            <returns>True in case of success.</returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Lock(PHP.Core.PhpResource,System.Int32)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFile.Lock(PHP.Core.PhpResource,System.Int32,System.Int32@)">
            <summary>
            Portable advisory file locking.
            </summary>
            <param name="handle">A file system pointer resource that is typically created using fopen().</param>
            <param name="operation">Operation is one of the following:
            <c>LOCK_SH</c> to acquire a shared lock (reader).
            <c>LOCK_EX</c> to acquire an exclusive lock (writer).
            <c>LOCK_UN</c> to release a lock (shared or exclusive).
            
            It is also possible to add <c>LOCK_NB</c> as a bitmask to one of the above operations if you don't want flock() to block while locking. (not supported on Windows)
            </param>
            <param name="wouldblock">The optional third argument is set to TRUE if the lock would block (EWOULDBLOCK errno condition). (not supported on Windows)</param>
            <returns>Returns <c>true</c> on success or <c>false</c> on failure.</returns>
        </member>
        <member name="T:PHP.Library.PhpFile.CsvLineReader">
            <summary>
            CSV data line reader.
            In case of stream, it returns stream.GetLine() or null in case of EOF.
            In case of string input, it returns string for the first time, then null.
            ...
            </summary>
            <returns>Next line of CSV data or NULL in case of EOF.</returns>
        </member>
        <member name="T:PHP.Library.UnixFile">
            <summary>
            Unix-specific PHP functions. Not supported. Implementations are empty.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.UnixFile.ChangeFileGroup(System.String,System.Object)">
            <summary>
            Changes a group. Not supported.
            </summary>
            <param name="path">Path to the file to change group.</param>
            <param name="group">A <see cref="T:System.String"/> or <see cref="T:System.Int32"/>
            identifier of the target group.</param>
            <returns>Always <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.UnixFile.GetAccessRule(System.Security.Principal.WellKnownSidType,System.Security.AccessControl.FileSystemRights,System.Boolean)">
            <summary>
            Add or revoke specified permission for a given role
            </summary>
            <param name="role">an equivalent to UNIX's owner, group or public</param>
            <param name="permission">~ read, write, search</param>
            <param name="add"></param>
        </member>
        <member name="M:PHP.Library.UnixFile.ResolveAccessRules(System.Int32)">
            <summary>
            Attempt to populate a set of Windows access rules, calculated from a UNIX mode flags
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.UnixFile.ChangeFileMode(System.String,System.Int32)">
            <summary>
            Changes file permissions. 
            </summary>
            <remarks>
            On Windows platform this function supports only the 
            <c>_S_IREAD (0400)</c> and <c>_S_IWRITE (0200)</c>
            options (set read / write permissions for the file owner).
            Note that the constants are octal numbers.
            </remarks>
            <param name="path">Path to the file to change group.</param>
            <param name="mode">New file permissions (see remarks).</param>
            <returns><c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:PHP.Library.UnixFile.ChangeFileOwner(System.String,System.Object)">
            <summary>
            Unix-specific function. Not supported.
            </summary>
            <param name="path">Path to the file to change owner.</param>
            <param name="user">A <see cref="T:System.String"/> or <see cref="T:System.Int32"/>
            identifier of the target group.</param>
            <returns>Always <c>false</c>.</returns>
        </member>
        <member name="M:PHP.Library.UnixFile.UMask(System.Int32)">
            <summary>
            Unix-specific function. Not supported.
            </summary>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.UnixFile.UMask">
            <summary>
            Unix-specific function. Not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.UnixFile.MakeHardLink(System.String,System.String)">
            <summary>
            Unix-specific function. Not supported.
            </summary>
            <param name="target"></param>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.UnixFile.MakeSymbolicLink(System.String,System.String)">
            <summary>
            Unix-specific function. Not supported.
            </summary>
            <param name="target"></param>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.UnixFile.ReadLink(System.String)">
            <summary>
            Unix-specific function. Not supported.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.UnixFile.GetLinkInfo(System.String)">
            <summary>
            Unix-specific function. Not supported.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:PHP.Library.FileOpenOptions">
            <summary>
            Options used in the <c>flags</c> argument of the 'fopen' function.
            </summary>
        </member>
        <member name="F:PHP.Library.FileOpenOptions.Empty">
            <summary>Default option for the <c>flags</c> argument.</summary>
        </member>
        <member name="F:PHP.Library.FileOpenOptions.UseIncludePath">
            <summary>Search for the file in the <c>include_path</c> too (1).</summary>
        </member>
        <member name="T:PHP.Library.FileOptions">
            <summary>
            Options used in the <c>flags</c> argument of PHP Filesystem functions.
            </summary>
        </member>
        <member name="F:PHP.Library.FileOptions.Empty">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:PHP.Library.FileOptions.UseIncludePath">
            <summary>
            Search for the file in the <c>include_path</c> too (1).
            </summary>
        </member>
        <member name="F:PHP.Library.FileOptions.TrimLineEndings">
            <summary>
            Do not include the line break characters to the result in <c>file()</c> (2).
            </summary>
        </member>
        <member name="F:PHP.Library.FileOptions.SkipEmptyLines">
            <summary>
            Do not include empty lines to the resulting <see cref="T:PHP.Core.PhpArray"/> in <c>file()</c> (4).
            </summary>
        </member>
        <member name="T:PHP.Library.WriteContentsOptions">
            <summary>
            The options used as the <c>flag</c> argument of <see cref="M:PHP.Library.PhpFile.WriteContents(System.String,System.Object)"/>.
            </summary>
        </member>
        <member name="F:PHP.Library.WriteContentsOptions.Empty">
            <summary>
            Empty option (default).
            </summary>
        </member>
        <member name="F:PHP.Library.WriteContentsOptions.UseIncludePath">
            <summary>
            Search for the file in the <c>include_path</c> too (1).
            </summary>
        </member>
        <member name="F:PHP.Library.WriteContentsOptions.AppendContents">
            <summary>
            Append the given data at the end of the file in <c>file_put_contents</c> (8).
            </summary>
        </member>
        <member name="F:PHP.Library.WriteContentsOptions.LockExclusive">
            <summary>
            Acquire an exclusive lock on the file.
            </summary>
        </member>
        <member name="T:PHP.Library.PathInfoOptions">
            <summary>
            The flags indicating which fields the <see cref="M:PHP.Library.PhpPath.GetInfo(System.String)"/>
            method should fill in the result array.
            </summary>
        </member>
        <member name="F:PHP.Library.PathInfoOptions.DirName">
            <summary>
            Fill the "dirname" field in results.
            </summary>
        </member>
        <member name="F:PHP.Library.PathInfoOptions.BaseName">
            <summary>
            Fill the "basename" field in results.
            </summary>
        </member>
        <member name="F:PHP.Library.PathInfoOptions.Extension">
            <summary>
            Fill the "extension" field in results.
            </summary>
        </member>
        <member name="F:PHP.Library.PathInfoOptions.FileName">
            <summary>
            Fill the "filename" field in results. Since PHP 5.2.0.
            </summary>
        </member>
        <member name="F:PHP.Library.PathInfoOptions.All">
            <summary>
            All the four options result in an array returned by <see cref="M:PHP.Library.PhpPath.GetInfo(System.String)"/>.
            </summary>
        </member>
        <member name="T:PHP.Library.Directory">
            <summary>
            User-like class encapsulating enumeration of a Directory. 
            Uses the PhpDiretory implementation upon PhpWrapper streams.
            </summary>
        </member>
        <member name="F:PHP.Library.Directory.handle">
            <summary>
            Reference to the directory listing resource.
            </summary>
        </member>
        <member name="F:PHP.Library.Directory.path">
            <summary>
            The opened path (accessible from the PHP script).
            </summary>
        </member>
        <member name="M:PHP.Library.Directory.#ctor(System.String)">
            <summary>
            Start listing of a directory (intended to be used from C#).
            </summary>
            <param name="directory">The path to the directory.</param>
        </member>
        <member name="M:PHP.Library.Directory.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.Directory.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.Directory.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserializing constructor.</summary>
        </member>
        <member name="M:PHP.Library.Directory.read(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Read next directory entry.
            </summary>
            <returns>Filename of a contained file (including . and ..).</returns>
        </member>
        <member name="M:PHP.Library.Directory.rewind(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Restart the directory listing.
            </summary>
        </member>
        <member name="M:PHP.Library.Directory.close(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Finish the directory listing.
            </summary>
        </member>
        <member name="M:PHP.Library.Directory.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.Directory.read(System.Object,PHP.Core.PhpStack)">
            <summary>Arg-less overload.</summary>
        </member>
        <member name="M:PHP.Library.Directory.rewind(System.Object,PHP.Core.PhpStack)">
            <summary>Arg-less overload.</summary>
        </member>
        <member name="M:PHP.Library.Directory.close(System.Object,PHP.Core.PhpStack)">
            <summary>Arg-less overload.</summary>
        </member>
        <member name="T:PHP.Library.DirectoryListing">
            <summary>
            Enumeration class used for PhpDirectory listings - serves as a PhpResource.
            Uses the PhpWrapper stream wrappers only to generate the list of contained files.
            No actual resources to be released explicitly.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpDirectory">
            <summary>
            Gives access to the directory manipulation and itereation.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PhpDirectory.GetWorking">
            <summary>Gets the virtual working directory of the current script.</summary>
            <remarks></remarks>
            <returns>Absolute path to the current directory.</returns>
        </member>
        <member name="M:PHP.Library.PhpDirectory.SetWorking(System.String)">
            <summary>Changes the virtual working directory for the current script.</summary>
            <param name="directory">Absolute or relative path to the new working directory.</param>
            <returns>Returns <c>true</c> on success or <c>false</c> on failure.</returns>
            <exception cref="T:PHP.Core.PhpException">If the specified directory does not exist.</exception>
        </member>
        <member name="M:PHP.Library.PhpDirectory.SetRoot(System.String)">
            <summary>
            Changes the root directory of the current process to <paramref name="directory"/>.
            Not supported.
            </summary>
            <remarks>
            This function is only available if your system supports it 
            and you're using the CLI, CGI or Embed SAPI. 
            Note: This function is not implemented on Windows platforms.
            </remarks>
            <param name="directory">The new value of the root directory.</param>
            <returns>Returns TRUE on success or FALSE on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpDirectory.GetIterator(System.String)">
            <summary>Returns an object encapsulating the directory listing mechanism on a given
            <paramref name="directory"/>.</summary>
            <remarks>A pseudo-object oriented mechanism for reading a directory. The given directory is opened. 
            Two properties are available once the directory has been opened. The handle property 
            can be used with other directory functions such as <c>readdir()</c>, <c>rewinddir()</c> and <c>closedir()</c>. 
            The path property is set to path the directory that was opened. 
            Three methods are available: <see cref="M:PHP.Library.Directory.read(PHP.Core.ScriptContext,System.Object)"/>, 
            <see cref="M:PHP.Library.Directory.rewind(PHP.Core.ScriptContext,System.Object)"/> and <see cref="M:PHP.Library.Directory.close(PHP.Core.ScriptContext,System.Object)"/>.</remarks>
            <param name="directory">The path to open for listing.</param>
            <returns>An instance of <see cref="T:PHP.Library.Directory"/>.</returns>
        </member>
        <member name="F:PHP.Library.PhpDirectory.lastDirHandle">
            <summary>
            Last handle opened by <c>opendir</c>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpDirectory.Open(System.String)">
            <summary>Returns a directory handle to be used in subsequent 
            <c>readdir()</c>, <c>rewinddir()</c> and <c>closedir()</c> calls.</summary>
            <remarks>
            <para>
            If path is not a valid directory or the directory can not 
            be opened due to permission restrictions or filesystem errors, 
            <c>opendir()</c> returns <c>false</c> and generates a PHP error of level <c>E_WARNING</c>. 
            </para>
            <para>
            As of PHP 4.3.0 path can also be any URL which supports directory listing, 
            however only the <c>file://</c> url wrapper supports this in PHP 4.3. 
            As of PHP 5.0.0, support for the <c>ftp://</c> url wrapper is included as well.
            </para>
            </remarks>
            <param name="directory">The path of the directory to be listed.</param>
            <returns>A <see cref="T:PHP.Library.DirectoryListing"/> resource containing the listing.</returns>
            <exception cref="T:PHP.Core.PhpException">In case the specified stream wrapper can not be found
            or the desired directory can not be opened.</exception>
        </member>
        <member name="M:PHP.Library.PhpDirectory.Read">
            <summary>
            Reads an entry from a directory handle. Uses last handle opened by <c>opendir</c>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpDirectory.Read(PHP.Core.PhpResource)">
            <summary>
            Reads an entry from a directory handle.
            </summary>
            <param name="dirHandle">A <see cref="T:PHP.Core.PhpResource"/> returned by <see cref="M:PHP.Library.PhpDirectory.Open(System.String)"/>.</param>
            <returns>
            Returns the path of the next file from the directory. 
            The filenames (including . and ..) are returned in the order 
            in which they are stored by the filesystem.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpDirectory.Rewind">
            <summary>
            Rewinds a directory handle. Uses last handle opened by <c>opendir</c>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpDirectory.Rewind(PHP.Core.PhpResource)">
            <summary>
            Rewinds a directory handle.
            Function has no return value.
            </summary>
            <param name="dirHandle">A <see cref="T:PHP.Core.PhpResource"/> returned by <see cref="M:PHP.Library.PhpDirectory.Open(System.String)"/>.</param>
            <remarks>
            Resets the directory stream indicated by <paramref name="dirHandle"/> to the 
            beginning of the directory.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpDirectory.Close">
            <summary>
            Closes a directory handle. Uses last handle opened by <c>opendir</c>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpDirectory.Close(PHP.Core.PhpResource)">
            <summary>
            Closes a directory handle.
            Function has no return value.
            </summary>
            <param name="dirHandle">A <see cref="T:PHP.Core.PhpResource"/> returned by <see cref="M:PHP.Library.PhpDirectory.Open(System.String)"/>.</param>
            <remarks>
            Closes the directory stream indicated by <paramref name="dirHandle"/>. 
            The stream must have previously been opened by by <see cref="M:PHP.Library.PhpDirectory.Open(System.String)"/>.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpDirectory.Scan(System.String)">
            <summary>Lists files and directories inside the specified <paramref name="directory"/>.</summary>
            <remarks>
            Returns an array of files and directories from the <paramref name="directory"/>. 
            If <paramref name="directory"/> is not a directory, then boolean <c>false</c> is returned, 
            and an error of level <c>E_WARNING</c> is generated. 
            </remarks>
            <param name="directory">The directory to be listed.</param>
            <returns>A <see cref="T:PHP.Core.PhpArray"/> of filenames or <c>false</c> in case of failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpDirectory.Scan(System.String,System.Int32)">
            <summary>Lists files and directories inside the specified path.</summary>
            <remarks>
            Returns an array of files and directories from the <paramref name="directory"/>. 
            If <paramref name="directory"/> is not a directory, then boolean <c>false</c> is returned, 
            and an error of level <c>E_WARNING</c> is generated. 
            </remarks>
            <param name="directory">The directory to be listed.</param>
            <param name="sorting_order">
            By default, the listing is sorted in ascending alphabetical order. 
            If the optional sorting_order is used (set to <c>1</c>), 
            then sort order is alphabetical in descending order.</param>
            <returns>A <see cref="T:PHP.Core.PhpArray"/> of filenames or <c>false</c> in case of failure.</returns>
            <exception cref="T:PHP.Core.PhpException">In case the specified stream wrapper can not be found
            or the desired directory can not be opened.</exception>
        </member>
        <member name="M:PHP.Library.PhpDirectory.ValidListing(PHP.Core.PhpResource)">
            <summary>
            Casts the given resource handle to the <see cref="T:PHP.Library.DirectoryListing"/> enumerator.
            Throw an exception when a wrong argument is supplied.
            </summary>
            <param name="dir_handle">The handle passed to a PHP function.</param>
            <returns>The enumerator over the files in the DirectoryListing.</returns>
            <exception cref="T:PHP.Core.PhpException">When the supplied argument is not a valid <see cref="T:PHP.Library.DirectoryListing"/> resource.</exception>
        </member>
        <member name="M:PHP.Library.PhpDirectory.MakeDirectory(System.String)">
            <summary>
            Makes a new directory.
            </summary>
            <param name="pathname">The directory to create.</param>
            <returns><c>true</c> if successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpDirectory.MakeDirectory(System.String,System.Int32)">
            <summary>
            Makes a directory or a branch of directories using the specified wrapper.
            </summary>
            <param name="pathname">The path to create.</param>
            <param name="mode">A combination of <see cref="T:PHP.Core.StreamMakeDirectoryOptions"/>.</param>
            <returns><c>true</c> if successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpDirectory.MakeDirectory(System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pathname"></param>
            <param name="mode"></param>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpDirectory.MakeDirectory(System.String,System.Int32,System.Boolean,PHP.Core.PhpResource)">
            <summary>
            
            </summary>
            <param name="pathname"></param>
            <param name="mode"></param>
            <param name="recursive"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpDirectory.RemoveDirectory(System.String)">
            <summary>
            Removes a directory.
            </summary>
            <param name="dirname"></param>
            <returns><c>true</c> if successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpDirectory.RemoveDirectory(System.String,PHP.Core.StreamContext)">
            <summary>
            Removes a directory.
            </summary>
            <param name="dirname"></param>
            <param name="context"></param>
            <returns><c>true</c> if successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:PHP.Library.PhpPath">
            <summary>
            Provides path strings manipulation.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PhpPath.GetScheme(System.String)">
            <summary>
            Wrapper-safe method of getting the schema portion from an URL.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing an URL or a local filesystem path.</param>
            <returns>
            The schema portion of the given <paramref name="path"/> or <c>"file"</c>
            for a local filesystem path.
            </returns>
            <exception cref="T:System.ArgumentException">Invalid path.</exception>
        </member>
        <member name="M:PHP.Library.PhpPath.GetUrl(System.String)">
            <summary>
            Concatenates a scheme with the given absolute path if necessary.
            </summary>
            <param name="absolutePath">Absolute path.</param>
            <returns>The given url or absolute path preceded by a <c>file://</c>.</returns>
            <exception cref="T:System.ArgumentException">Invalid path.</exception>
        </member>
        <member name="M:PHP.Library.PhpPath.GetFilename(System.String)">
            <summary>
            Returns the given filesystem url without the scheme.
            </summary>
            <param name="path">A path or url of a local filesystem file.</param>
            <returns>The filesystem path or <b>null</b> if the <paramref name="path"/> is not a local file.</returns>
            <exception cref="T:System.ArgumentException">Invalid path.</exception>
        </member>
        <member name="M:PHP.Library.PhpPath.IsLocalFile(System.String)">
            <summary>
            Check if the given path is a path to a local file.
            </summary>
            <param name="url">The path to test.</param>
            <returns><c>true</c> if it's not a fully qualified name of a remote resource.</returns>
            <exception cref="T:System.ArgumentException">Invalid path.</exception>
        </member>
        <member name="M:PHP.Library.PhpPath.IsRemoteFile(System.String)">
            <summary>
            Check if the given path is a remote url.
            </summary>
            <param name="url">The path to test.</param>
            <returns><c>true</c> if it's a fully qualified name of a remote resource.</returns>
            <exception cref="T:System.ArgumentException">Invalid path.</exception>
        </member>
        <member name="M:PHP.Library.PhpPath.AbsolutePath(System.String)">
            <summary>
            Merges the path with the current working directory
            to get a canonicalized absolute pathname representing the same path
            (local files only). If the provided <paramref name="path"/>
            is absolute (rooted local path or an URL) it is returned unchanged.
            </summary>
            <param name="path">An absolute or relative path to a directory or an URL.</param>
            <returns>Canonicalized absolute path in case of a local directory or the original 
            <paramref name="path"/> in case of an URL.</returns>
        </member>
        <member name="M:PHP.Library.PhpPath.GetBase(System.String)">
            <summary>
            Returns path component of path.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing a path to a file.</param>
            <returns>The path conponent of the given <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException">Invalid path.</exception>
        </member>
        <member name="M:PHP.Library.PhpPath.GetBase(System.String,System.String)">
            <summary>
            Returns path component of path.
            </summary>
            <remarks>
            Given a <see cref="T:System.String"/> containing a path to a file, this function will return the base name of the file. 
            If the path ends in this will also be cut off. 
            On Windows, both slash (/) and backslash (\) are used as path separator character. 
            In other environments, it is the forward slash (/). 
            </remarks>
            <param name="path">A <see cref="T:System.String"/> containing a path to a file.</param>
            <param name="suffix">A <see cref="T:System.String"/> containing suffix to be cut off the path if present.</param>
            <returns>The path conponent of the given <paramref name="path"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpPath.GetDirectory(System.String)">
            <summary>
            Returns directory name component of path.
            </summary>
            <param name="path">The full path.</param>
            <returns>The directory portion of the given path.</returns>
        </member>
        <member name="M:PHP.Library.PhpPath.GetInfo(System.String)">
            <summary>
            Extracts parts from a specified path.
            </summary>
            <param name="path">The path to be parsed.</param>
            <returns>Array keyed by <c>"dirname"</c>, <c>"basename"</c>, and <c>"extension"</c>.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpPath.GetInfo(System.String,PHP.Library.PathInfoOptions)">
            <summary>
            Extracts part(s) from a specified path.
            </summary>
            <param name="path">The path to be parsed.</param>
            <param name="options">Flags determining the result.</param>
            <returns>
            If <paramref name="options"/> is <see cref="F:PHP.Library.PathInfoOptions.All"/> then returns array
            keyed by <c>"dirname"</c>, <c>"basename"</c>, and <c>"extension"</c>. Otherwise,
            it returns string value containing a single part of the path.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpPath.GetTemporaryFilename(System.String,System.String)">
            <summary>
            Creates a file with a unique path in the specified directory. 
            If the directory does not exist, <c>tempnam()</c> may generate 
            a file in the system's temporary directory, and return the name of that.
            </summary>
            <param name="dir">The directory where the temporary file should be created.</param>
            <param name="prefix">The prefix of the unique path.</param>
            <returns>A unique path for a temporary file 
            in the given <paramref name="dir"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpPath.GetTempDirectoryName">
            <summary>
            Returns the path of the directory PHP stores temporary files in by default.
            </summary>
            <returns>Returns the path of the temporary directory.</returns>
            <remarks>Path ends with "\"</remarks>
        </member>
        <member name="F:PHP.Library.PhpPath.tempCounter">
            <summary>
            A counter used to generate unique filenames for <see cref="M:PHP.Library.PhpPath.GetTemporaryFilename(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpPath.RealPath(System.String)">
            <summary>
            Returns canonicalized absolute path name.
            </summary>
            <param name="path">Arbitrary path.</param>
            <returns>
            The given <paramref name="path"/> combined with the current working directory or
            <B>null</B> (<B>false</B> in PHP) if the path is invalid or doesn't exists.
            </returns>
        </member>
        <member name="T:PHP.Library.PhpFunctions">
            <summary>
            Provides means for PHP functions handling.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PhpFunctions.CallUserFunction(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpCallback,System.Object[])">
            <summary>
            Calls a function or a method defined by callback with given arguments.
            </summary>
            <param name="caller">DTypeDesc of the caller's class context. Can be UnknownTypeDesc.</param>
            <param name="function">The function or metod designation.</param>
            <param name="args">The arguments.</param>
            <returns>The return value.</returns>
        </member>
        <member name="M:PHP.Library.PhpFunctions.CallUserFunctionArray(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpCallback,PHP.Core.PhpArray)">
            <summary>
            Calls a function or a method defined by callback with arguments stored in an array.
            </summary>
            <param name="caller">DTypeDesc of the caller's class context. Can be UnknownTypeDesc.</param>
            <param name="function">The function or method designation.</param>
            <param name="args">The arguments. Can be null.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:PHP.Library.PhpFunctions.CreateFunction(System.String,System.String)">
            <summary>
            Creates a new lambda function given its arguments and body.
            </summary>
            <param name="args">A source code defining function signature, e.g. "$a,MyClass $b,$c = null".</param>
            <param name="body">A source code defining function body, e.g. "return $a + $b->x + $c;"</param>
            <returns>A name of the created function.</returns>
        </member>
        <member name="M:PHP.Library.PhpFunctions.GetInlinedLambdaCodeFill(PHP.Core.Text.TextSpan,PHP.Core.Text.TextSpan)">
            <summary>
            Gets a string which is used as a fill in the code to be parsed in order to maintain
            correct token positioning.
            </summary>
            <param name="args">A position of string literal holding source code for lambda function arguments.</param>
            <param name="body">A position of string literal holding source code for the body.</param>
            <returns>A string containing spaces and end-of-line characters '\n'.</returns>
        </member>
        <member name="M:PHP.Library.PhpFunctions.GetArgsNumber">
            <summary>
            Retrieves the number of arguments passed to the current user-function.
            </summary>
            <remarks><seealso cref="M:PHP.Core.PhpStack.GetArgCount(System.Int32@,System.Int32@)"/></remarks>
        </member>
        <member name="M:PHP.Library.PhpFunctions.GetArg(System.Int32)">
            <summary>
            Retrieves an argument passed to the current user-function.
            </summary>
            <remarks><seealso cref="M:PHP.Core.PhpStack.GetArgument(System.Int32)"/></remarks>
        </member>
        <member name="M:PHP.Library.PhpFunctions.GetArgs">
            <summary>
            Returns an array of arguments of the current user-defined function. 
            </summary>
            <remarks><seealso cref="M:PHP.Core.PhpStack.GetArguments"/>
            Also throws warning if called from global scope.</remarks>
        </member>
        <member name="M:PHP.Library.PhpFunctions.GetGenericArgsNumber">
            <summary>
            Retrieves the number of generic type arguments passed to the current user-function.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFunctions.GetGenericArg(System.Int32)">
            <summary>
            Retrieves a fully qualified name of the generic type argument passed to the current user-function.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFunctions.GetGenericArgs">
            <summary>
            Returns an array of names of generic type arguments of the current user-defined function. 
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFunctions.Exists(System.String)">
            <summary>
            Determines whether a function with a specified name exists.
            </summary>
            <param name="name">The name of the function.</param>
            <returns>Wheter the function exists.</returns>
            <remarks>User functions which are declared conditionally and was not declared yet is considered as not existent.</remarks>
        </member>
        <member name="M:PHP.Library.PhpFunctions.GetDefinedFunctions">
            <summary>
            Retrieves defined functions.
            </summary>
            <returns>
            The <see cref="T:PHP.Core.PhpArray"/> containing two entries with keys "internal" and "user".
            The former's value is a <see cref="T:PHP.Core.PhpArray"/> containing PHP library functions as values.
            The latter's value is a <see cref="T:PHP.Core.PhpArray"/> containing user defined functions as values.
            Keys of both these arrays are integers starting from 0.
            </returns>
            <remarks>User functions which are declared conditionally and was not declared yet is considered as not existent.</remarks>
        </member>
        <member name="M:PHP.Library.PhpFunctions.RegisterShutdownFunction(PHP.Core.PhpCallback,System.Object[])">
            <summary>
            Registers callback which will be called when script processing is complete but before the request
            has been complete.
            Function has no return value.
            </summary>
            <param name="function">The function which is called after main code of the script is finishes execution.</param>
            <param name="parameters">Parameters for the function.</param>
            <remarks>
            Although, there is explicitly written in the PHP manual that it is not possible 
            to send an output to a browser via echo or another output handling functions you can actually do so.
            There is no such limitation with Phalanger.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpFunctions.RegisterTickFunction(PHP.Core.PhpCallback)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFunctions.RegisterTickFunction(PHP.Core.PhpCallback,System.Object)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFunctions.UnregisterTickFunction(PHP.Core.PhpCallback)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpFunctions.AssertOption">
            <summary>
            Assertion options.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpHash">
            <summary>
            PHP hash functions support.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpHash.CRC32(PHP.Core.PhpBytes)">
            <summary>
            Calculates the crc32 polynomial of a string of bytes.
            </summary>
            <param name="bytes">The string of bytes to compute crc32 of.</param>
            <returns>The CRC32 of <paramref name="bytes"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.MD5(PHP.Core.PhpBytes)">
            <summary>
            Calculate the md5 hash of a string of bytes.
            </summary>
            <param name="bytes">The string of bytes to compute md5 of.</param>
            <returns>MD5 of <paramref name="bytes"/> as a sequence of hexadecimal numbers.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.MD5(PHP.Core.PhpBytes,System.Boolean)">
            <summary>
            Calculate the md5 hash of a string of bytes.
            </summary>
            <param name="bytes">The string of bytes to compute md5 of.</param>
            <param name="rawOutput">If true, returns raw binary hash, otherwise returns hash as 
            a sequence of hexadecimal numbers.</param>
            <returns>md5 of <paramref name="bytes"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.MD5FromFile(System.String)">
            <summary>
            Calculates the md5 hash of a given file.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>MD5 of given <paramref name="fileName"/> content.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.MD5FromFile(System.String,System.Boolean)">
            <summary>
            Calculates the md5 hash of a given file.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="rawOutput">If <B>true</B>, returns raw binary hash, otherwise returns hash as 
            a sequence of hexadecimal numbers.</param>
            <returns>MD5 of given <paramref name="fileName"/> content.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.SHA1(PHP.Core.PhpBytes)">
            <summary>
            Calculate the sha1 hash of a string of bytes.
            </summary>
            <param name="bytes">The string of bytes to compute SHA1 of.</param>
            <returns>SHA1 of <paramref name="bytes"/> as a sequence of hexadecimal numbers.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.SHA1(PHP.Core.PhpBytes,System.Boolean)">
            <summary>
            Calculate the SHA1 hash of a string of bytes.
            </summary>
            <param name="bytes">The string of bytes to compute SHA1 of.</param>
            <param name="rawOutput">If <B>true</B>, returns raw binary hash, otherwise returns hash as 
            a sequence of hexadecimal numbers.</param>
            <returns>md5 of <paramref name="bytes"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.SHA1FromFile(System.String)">
            <summary>
            Calculates the SHA1 hash of a given file.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>SHA1 of given <paramref name="fileName"/> content.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.SHA1FromFile(System.String,System.Boolean)">
            <summary>
            Calculates the SHA1 hash of a given file.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="rawOutput">If <B>true</B>, returns raw binary hash, otherwise returns hash as 
            a sequence of hexadecimal numbers.</param>
            <returns>SHA1 of <paramref name="fileName"/> content.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.Hash(System.Security.Cryptography.HashAlgorithm,PHP.Core.PhpBytes,System.Boolean)">
            <summary>
            Computes a hash of a string of bytes using specified algorithm.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpHash.HashFromFile(System.Security.Cryptography.HashAlgorithm,System.String,System.Boolean)">
            <summary>
            Computes a hash of a file using specified algorithm.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpHash.GetHashAlgorithms">
            <summary>
            Get an array of available hashing algorithms. These names can be used in hash* functions, as the "algo" argument.
            </summary>
            <returns>Zero-based indexed array of names of hashing algorithms.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.HashUpdateFromStream(PHP.Library.PhpHash.HashPhpResource,PHP.Core.PhpStream,System.Int32)">
            <summary>
            Pump data from valid PHP stream into the hashing incremental algorithm.
            </summary>
            <param name="context">Hash resource to be updated from given <paramref name="stream"/>. Cannot be null.</param>
            <param name="stream">The <see cref="T:PHP.Core.PhpStream"/> to read from. Cannot be null.</param>
            <param name="length">Maximum number of bytes to read from <paramref name="stream"/>. Or <c>-1</c> to read entire stream.</param>
            <returns>Number of bytes read from given <paramref name="stream"/>.</returns>
        </member>
        <member name="T:PHP.Library.PhpHash.HashPhpResource">
            <summary>
            The Hashing Context PHP Resource.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.#ctor">
            <summary>
            hash_init
            </summary>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.Clone">
            <summary>
            hash_copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.Init">
            <summary>
            hash_init
            Restart the hashing algorithm.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.Update(System.Byte[])">
            <summary>
            hash_update
            Push more data into the algorithm, incremental hashing.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.Final">
            <summary>
            hash_final
            Finalize the algorithm. Get the result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.ProcessBlocked(System.Byte[],System.Int32)">
            <summary>
            Returns blocks of data, using buffered data stored before.
            Provided data can be too small to fit the block, so they are buffered and processed when more data comes.
            </summary>
            <param name="newData">New pack of data to be appended to the buffered ones.</param>
            <param name="blockSize">Block size, when buffered data fits this, they are returned.</param>
            <returns>Packs of block, as a pair of byte array and index of first element.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.GetBufferedBlock(System.Int32@)">
            <summary>
            Returns the buffered bytes not processed yet.
            </summary>
            <param name="length">Amount of used bytes in the buffer.</param>
            <returns>Buffer, can be null.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.CloneBufferedBlock(PHP.Library.PhpHash.HashPhpResource)">
            <summary>
            Copies the buffered information from this instance into the clone.
            </summary>
            <param name="clone">Copy buffered info here.</param>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.ComputeHash(System.Byte[])">
            <summary>
            Simply compute hash on existing HashPhpResource instance.
            No HMAC.
            The algorithm is reinitialized.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:PHP.Library.PhpHash.HashPhpResource.BlockSize">
            <summary>
            HMAC key max size.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.MD5.F(System.UInt32,System.UInt32,System.UInt32)">
            F, G, H and I are basic MD5 functions.
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.MD5.ROTATE_LEFT(System.UInt32,System.Byte)">
            <summary>
            ROTATE_LEFT rotates x left n bits.
            </summary>
            <param name="x"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.MD5.FF(System.UInt32@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.UInt32)">
            FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
            Rotation is separate from addition to prevent re-computation.
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.MD5.MD5Transform(System.Byte[],System.Int32)">
            <summary>
            MD5 basic transformation. Transforms state based on block.
            </summary>
            <param name="block"></param>
            <param name="startIndex"></param>
        </member>
        <member name="T:PHP.Library.PhpHash.HashPhpResource.MD5.MD5Consts">
            <summary>
            MD5 Transformation constants.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpHash.HashPhpResource.SHA`1">
            <summary>
            Base class for SHA based hashing algorithms.
            </summary>
            <typeparam name="T">Actual type of SHA class. Used to instantiate new one in <see cref="M:PHP.Library.PhpHash.HashPhpResource.SHA`1.Clone"/> method.</typeparam>
        </member>
        <member name="F:PHP.Library.PhpHash.HashPhpResource.SHA`1._buffer">
            <summary>
            Internal buffer holding SHA results.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpHash.HashPhpResource.SHA`1._count">
            <summary>
            Amount of chars encoded.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpHash.HashPhpResource.SHA`1._tmp">
            <summary>
            Temporary buffer used internally by <see cref="M:PHP.Library.PhpHash.HashPhpResource.SHA`1._HashData(System.Byte[],System.Int32,System.Int32)"/> method.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpHash.HashPhpResource.SHA`1._state">
            <summary>
            Current hash state.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.SHA`1.InitializeState">
            <summary>
            Set <see cref="F:PHP.Library.PhpHash.HashPhpResource.SHA`1._count"/> and <see cref="F:PHP.Library.PhpHash.HashPhpResource.SHA`1._state"/> to their initial state.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.SHA`1._EndHash">
            <summary>
            Finalize the hash.
            </summary>
            <returns>Resulting hash.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.SHA`1._HashData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pump more data into the hashing algorithm.
            </summary>
            <param name="partIn">Array of data to be hashed.</param>
            <param name="ibStart">Index where to start reading from <paramref name="partIn"/>.</param>
            <param name="cbSize">Amount of bytes to read from <paramref name="partIn"/>.</param>
            <returns><c>true</c> if hashing succeeded.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.SHA1._EndHash">
            <summary>
            Finalize the hash.
            </summary>
            <returns>Hashed bytes.</returns>
        </member>
        <member name="M:PHP.Library.PhpHash.HashPhpResource.SHA256._EndHash">
            <summary>
            Finalize the hash.
            </summary>
            <returns>Hashed bytes.</returns>
        </member>
        <member name="T:PHP.Library.PhpHash.HashInitOptions">
            <summary>
            hash_init() options
            </summary>
        </member>
        <member name="F:PHP.Library.PhpHash.HashInitOptions.HASH_DEFAULT">
            <summary>
            No options.
            Default.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpHash.HashInitOptions.HASH_HMAC">
            <summary>
            Use HMAC. The key must be provided.
            </summary>
        </member>
        <member name="T:PHP.Library.Highlighting">
            <summary>
            Functions for highlighting PHP source code written as HTML.
            </summary>
        </member>
        <member name="M:PHP.Library.Highlighting.HighlightFile(System.String)">
            <summary>
            Writes PHP source code from file highlighted to output.
            </summary>
            <param name="fileName">PHP source file to highlight.</param>
            <returns><B>True</B> if the source code was succesfuly highlighted.</returns>
        </member>
        <member name="M:PHP.Library.Highlighting.HighlightFile(System.String,System.Boolean)">
            <summary>
            Writes PHP source code from file highlighted to output or returns this code as string
            according to second parameter.
            </summary>
            <param name="fileName">PHP source file to highlight.</param>
            <param name="returnHighlighted"><B>True</B> if highlighted code should be returned,
            <B>false</B> if it should be printed out.</param>
            <returns>Highlighted source code or - if it is printed out - <B>true</B> if the code was
            highlighted succesfuly, false otherwise.</returns>
        </member>
        <member name="M:PHP.Library.Highlighting.HighlightString(System.String)">
            <summary>
            Writes highlighted PHP source code passed as string to output.
            </summary>
            <param name="str">PHP source code to highlight</param>
            <returns><B>True</B> if the source code was successfully highlighted.</returns>
        </member>
        <member name="M:PHP.Library.Highlighting.HighlightString(System.String,System.Boolean)">
            <summary>
            Writes PHP source code highlighted to output or returns this code as string
            according to second parameter.
            </summary>
            <param name="str">PHP source code</param>
            <param name="returnHighlighted"><B>True</B> if highlighted code should be returned,
            <B>false</B> if it should be printed out.</param>
            <returns>Highlighted source code or - if it is printed out - <B>true</B> if the code was
            highlighted succesfuly, false otherwise.</returns>
        </member>
        <member name="M:PHP.Library.Highlighting.ShowSource(System.String)">
            <summary>
            Alias for <see cref="M:PHP.Library.Highlighting.HighlightFile(System.String)"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.Highlighting.ShowSource(System.String,System.Boolean)">
            <summary>
            Alias for <see cref="M:PHP.Library.Highlighting.HighlightFile(System.String)"/>.
            </summary>
        </member>
        <member name="T:PHP.Library.LibraryDescriptor">
            <summary>
            Describes the class library assembly content and configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.LibraryDescriptor.Loaded(PHP.Core.PhpLibraryAttribute,PHP.Core.LibraryConfigStore)">
            <summary>
            Called by the Core after the library is loaded.
            </summary>
        </member>
        <member name="M:PHP.Library.LibraryDescriptor.CreateConfigContext">
            <summary>
            Creates empty library configuration context.
            </summary>
            <returns>An initialized configuration context. Should not be a <B>null</B> reference.</returns>
        </member>
        <member name="M:PHP.Library.LibraryDescriptor.ParseConfig(PHP.Core.ConfigContextBase,PHP.Core.PhpConfigurationContext,System.Xml.XmlNode)">
            <summary>
            Parses a configuration section belonging to the library. 
            </summary>
            <param name="result">A library configuration context.</param>
            <param name="context">The context of the configuration created by Phalanger Core.</param>
            <param name="section">A XML node containing the configuration or its part.</param>
            <returns>Updated library configuration context.</returns>
        </member>
        <member name="P:PHP.Library.LibraryDescriptor.Singleton">
            <summary>
            Stores one and only instance of the class that is created when the assembly is loaded.
            </summary>
        </member>
        <member name="T:PHP.Library.Locale">
            <summary>
            This class manages locale information for PHP and interacts .NET Framework.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.Locale.GetCulture(PHP.Library.Locale.Category)">
            <summary>
            Gets a culture specific for the given category.
            </summary>
            <param name="category">The category.</param>
            <returns>Non-null culture info.</returns>
        </member>
        <member name="M:PHP.Library.Locale.SetCulture(PHP.Library.Locale.Category,System.Globalization.CultureInfo)">
            <summary>
            Sets a culture specific for the given category.
            </summary>
            <param name="category">The category.</param>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:PHP.Library.Locale.GetStringComparer(System.Boolean)">
            <summary>
            Creates a new <see cref="T:PHP.Core.PhpLocaleStringComparer"/> comparing according to the current collate.
            </summary>
            <param name="ignoreCase">Whether to create a case-insensitive comparer.</param>
            <returns>The comparer.</returns>
        </member>
        <member name="M:PHP.Library.Locale.GetGroupingArray(System.Int32[])">
            <summary>
            Converts .NET groups information to PHP array.
            </summary>
        </member>
        <member name="M:PHP.Library.Locale.localeconv">
            <summary>
            Gets information about the current thread culture.
            </summary>
            <returns>The associative array of number and currency information.</returns>
        </member>
        <member name="M:PHP.Library.Locale.SetLocale(PHP.Library.Locale.Category,System.Object,System.Object[])">
            <summary>
            Sets or gets the current thread culture settings.
            </summary>
            <param name="category">
            A category to be modified. The only supported value in this version is <see cref="F:PHP.Library.Locale.Category.All"/>.
            </param>
            <param name="locale">Either an instance of <see cref="T:PHP.Core.PhpArray"/> containing locales or a locale.</param>
            <param name="moreLocales">If <paramref name="locale"/> is not of type <see cref="T:PHP.Core.PhpArray"/> contains locales, ignored otherwise.</param>
            <returns>The culture string (e.g. "en-US").</returns>
            <remarks>
            <para>
            Values specified in <paramref name="locale"/> and <paramref name="moreLocales"/> are converted to strings.
            Each value should have format "{language}-{region}" or "{language}_{region}" or "{language}" or special values "C" or empty string
            which represents the invariant culture or special values <B>null</B> or "0" which means no changes is made 
            by the method rather the current culture name is returned. 
            The first value containing am existing culture string is used.
            </para>
            </remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="category"/> has an invalid or unsupported value. (Warning)</exception>
        </member>
        <member name="M:PHP.Library.Locale.GetFirstExistingCulture(System.Object,System.Object[],System.Globalization.CultureInfo@)">
            <summary>
            Searches in given objects for a locale string describing an existing culture.
            </summary>
            <param name="locale">Contains either an instance of <see cref="T:PHP.Core.PhpArray"/> containing locales or a locale.</param>
            <param name="moreLocales">If <paramref name="locale"/> is not of type <see cref="T:PHP.Core.PhpArray"/> contains locales, ignored otherwise.</param>
            <param name="culture">The resulting culture. A <B>null</B> reference means no culture has been found.</param>
            <returns>Whether a culture settings should be changed.</returns>
        </member>
        <member name="M:PHP.Library.Locale.GetCultureByName(System.String)">
            <summary>
            Gets a culture of a specified name. 
            Tries "{language}-{country}", "{country}-{language}".
            Recognizes "C", "", "0" and <B>null</B> as invariant culture.
            Note, PHP swaps language and country codes.
            </summary>
        </member>
        <member name="M:PHP.Library.Locale.StringCollate(System.String,System.String)">
            <summary>
            Compares two specified strings, honoring their case, using culture specific comparison.
            </summary>
            <param name="str1">A string.</param>
            <param name="str2">A string.</param>
            <returns>
            Returns -1 if <paramref name="str1"/> is less than <paramref name="str2"/>; +1 if <paramref name="str1"/> is greater than <paramref name="str2"/>,
            and 0 if they are equal.
            </returns>
        </member>
        <member name="M:PHP.Library.Locale.nl_langinfo(System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:PHP.Library.Locale.cultures">
            <summary>
            Cultures associated with cathegories.
            </summary>
        </member>
        <member name="T:PHP.Library.Locale.Category">
            <summary>
            A locale categories.
            </summary>
            <exclude/>
        </member>
        <member name="F:PHP.Library.Locale.Category.All">
            <summary>
            Assigning a culture to this category is equivalent to assigning it to all other categories.
            </summary>
        </member>
        <member name="F:PHP.Library.Locale.Category.Collate">
            <summary>
            Influences function <c>strcoll</c>.
            </summary>
        </member>
        <member name="F:PHP.Library.Locale.Category.CType">
            <summary>
            Influences functions <c>strtolower</c>, <c>strtoupper</c>
            </summary>
        </member>
        <member name="F:PHP.Library.Locale.Category.Monetary">
            <summary>
            Influences functions <c>money_format</c>, <c>localeconv</c>
            </summary>
        </member>
        <member name="F:PHP.Library.Locale.Category.Numeric">
            <summary>
            Influences function <c>localeconv</c> and formatting of all floating-point numbers.
            </summary>
        </member>
        <member name="F:PHP.Library.Locale.Category.Time">
            <summary>
            Influences function <c>strftime</c>.
            </summary>
        </member>
        <member name="T:PHP.Library.Mailer">
            <summary>
            Maps PHP mailing methods to Framework ones.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.Mailer.Mail(System.String,System.String,System.String)">
            <summary>
            Sends e-mail only with essential headers.
            </summary>
            <param name="to">Recipient e-mail address.</param>
            <param name="subject">E-mail subject.</param>
            <param name="message">Message body.</param>
            <returns>True if mail was accepted to send.</returns>
        </member>
        <member name="M:PHP.Library.Mailer.Mail(System.String,System.String,System.String,System.String)">
            <summary>
            Sends e-mail, allows specify additional headers.
            Supported are Cc, Bcc, From, Priority, Content-type. Others are ignored.
            </summary>
            <remarks>
            E-mail addresses specified in additional headers must be valid (including From header).
            Otherwise your e-mail will not be send.
            </remarks>
            <param name="to">Recipient e-mail address.</param>
            <param name="subject">E-mail subject.</param>
            <param name="message">Message body.</param>
            <param name="additionalHeaders">Additional headers.</param>
            <returns>True if mail was accepted to send.</returns>
        </member>
        <member name="M:PHP.Library.Mailer.Mail(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends e-mail, allows specify additional headers and additional parameters.
            </summary>
            <remarks>
            Additional parameters are not supported, must be null or empty string.
            Use overload function without <c>additionalParameters</c> parameter.
            </remarks>
            <param name="to">Recipient e-mail address.</param>
            <param name="subject">E-mail subject.</param>
            <param name="message">Message body.</param>
            <param name="additionalHeaders">Additional headers.</param>
            <param name="additionalParameters">Additional parameters.</param>
            <returns>True if mail was accepted to send.</returns>
        </member>
        <member name="M:PHP.Library.Mailer.ezmlm_hash(System.String)">
            <summary>
            Counts hash value needed by EZMLM.
            </summary>
            <param name="addr">Mail address for which is hash value calculating.</param>
            <returns>Calculated hash value.</returns>
        </member>
        <member name="M:PHP.Library.Mailer.SetMailHeaders(System.String,System.Net.Mail.MailMessage)">
            <summary>
            Extracts mail headers from string <c>headers</c> and if the string contains supported headers,
            appropriate fields are set to <c>MailMessage mm</c> object.
            Supported headers are: Cc, Bcc, From, Priority, Content-type. Others are ignored.
            </summary>
            <param name="headers">String containing mail headers.</param>
            <param name="mm">MailMessage object to set fields according to <c>headers</c>.</param>
        </member>
        <member name="M:PHP.Library.Mailer.ExtractMailAddressesOnly(System.String,System.Int32)">
            <summary>
            Converts semicolon separated list of email addresses and names of email owners
            to semicolon separated list of only email addresses.
            </summary>
            <param name="emails">Semicolon separated list of email addresses and names.</param>
            <param name="max">Max number of emails returned.</param>
            <returns>Semicolon separated list of email addresses only.</returns>
        </member>
        <member name="M:PHP.Library.Mailer.ExtractPriority(System.String)">
            <summary>
            Used for converting header Priority to <c>MailPriority</c> value needed by .NET Framework mailer.
            </summary>
            <param name="p">"Priority:" header value.</param>
            <returns><c>MailPriority</c> specified by header value.</returns>
        </member>
        <member name="M:PHP.Library.Mailer.ExtractContentType(System.String,System.Net.Mail.MailMessage)">
            <summary>
            Used for converting header ContentType to <c>MailFormat</c> value and <c>Encoding</c> class.
            </summary>
            <param name="contentTypeHeader">"Content-type:" header value</param>
            <param name="mm">Mail message instance.</param>
        </member>
        <member name="T:PHP.Library.Mailer.RawSmtpClient">
            <summary>
            Raw SMTP client serving the needs of PHP mail functions. This is reimplemented mainly because .NET SmtpClient provides
            certain level of abstraction which is incompatible with mail function usage. Currently not as much advanced, but it can easily be.
            </summary>
        </member>
        <member name="F:PHP.Library.Mailer.RawSmtpClient._pollTime">
            <summary>
            Wait time for Socket.Poll - in microseconds.
            </summary>
        </member>
        <member name="F:PHP.Library.Mailer.RawSmtpClient._connectionTimeout">
            <summary>
            Timeout of connection. We don't want to block for too long.
            </summary>
        </member>
        <member name="M:PHP.Library.Mailer.RawSmtpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of AdvancedSmtp client class.
            </summary>
            <param name="hostName">Host name (IP or domain name) of the SMTP server.</param>
            <param name="port">Port on which SMTP server runs.</param>
        </member>
        <member name="M:PHP.Library.Mailer.RawSmtpClient.ResetConnection">
            <summary>
            Resets the state of this object.
            </summary>
        </member>
        <member name="M:PHP.Library.Mailer.RawSmtpClient.Connect">
            <summary>
            Connects to the server.
            </summary>
            <remarks>Method throws an exception on any error.</remarks>
            <exception cref="T:System.Net.Mail.SmtpException">If any error occures.</exception>
        </member>
        <member name="M:PHP.Library.Mailer.RawSmtpClient.Disconnect">
            <summary>
            Disconnects the client from the server.
            </summary>
        </member>
        <member name="M:PHP.Library.Mailer.RawSmtpClient.Reset">
            <summary>
            Sends reset message to the server.
            </summary>
        </member>
        <member name="M:PHP.Library.Mailer.RawSmtpClient.ProcessMessageHeaders(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Starts mail transaction and prepares the data lines from supplied message properties.
            Processes provided headers to determine cc, bcc and from values.
            All data will be send as ASCII if possible.
            </summary>
            <param name="from">Sender of the mail.</param>
            <param name="to">Recipients of the mail.</param>
            <param name="subject">Subject of the mail.</param>
            <param name="headers">Additional headers.</param>
            <param name="body">Message body.</param>
            <returns>List of message body lines.</returns>
        </member>
        <member name="M:PHP.Library.Mailer.RawSmtpClient.FormatEmailAddress(System.String,System.String)">
            <summary>
            Cut out the address if contained within &lt;...&gt; characters. Otherwise take the whole <paramref name="address"/> string.
            The address is transformed using given <paramref name="formatString"/> format.
            </summary>
            <param name="address">Given mail address.</param>
            <param name="formatString">Format to be used for <see cref="M:System.String.Format(System.String,System.Object)"/> method.</param>
            <returns>Formatted email address.</returns>
        </member>
        <member name="M:PHP.Library.Mailer.RawSmtpClient.Post(System.String)">
            <summary>
            Writes <paramref name="line"/>, appends <c>CRLF</c> and flushes internal writer.
            </summary>
            <param name="line"><see cref="T:System.String"/> to be written onto the internal writer.</param>
        </member>
        <member name="M:PHP.Library.Mailer.RawSmtpClient.PostRcptTo(System.String)">
            <summary>
            Send <c>RCPT TO</c> commands.
            </summary>
            <param name="recipients">List of recipients comma-separated.</param>
        </member>
        <member name="M:PHP.Library.Mailer.RawSmtpClient.SendMessage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends the raw message.
            </summary>
            <remarks>On eny error an exception is thrown.</remarks>
            <exception cref="T:System.Net.Mail.SmtpException">When any error occures during the mail send.</exception>
        </member>
        <member name="P:PHP.Library.Mailer.RawSmtpClient.Connected">
            <summary>
            Gets a value indicating whether this client is connected to a server.
            </summary>
        </member>
        <member name="P:PHP.Library.Mailer.RawSmtpClient.UseExtendedSmtp">
            <summary>
            Gets or sets a value indicating whether this client should implicitly use ESMTP to connect to the server.
            </summary>
        </member>
        <member name="P:PHP.Library.Mailer.RawSmtpClient.HostName">
            <summary>
            Gets host name set for this client to connect to.
            </summary>
        </member>
        <member name="P:PHP.Library.Mailer.RawSmtpClient.Port">
            <summary>
            Gets port number set for this client to connect to.
            </summary>
        </member>
        <member name="P:PHP.Library.Mailer.RawSmtpClient.Extensions">
            <summary>
            Gets a list of SMTP extensions supported by current connection.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpMath">
            <summary>
            Implements PHP mathematical functions and constants.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PhpMath.#cctor">
            <summary>
            Registers <see cref="M:PHP.Library.PhpMath.ClearGenerators"/> routine to be called on request end.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpMath.ClearGenerators">
            <summary>
            Nulls <see cref="F:PHP.Library.PhpMath._generator"/> and <see cref="F:PHP.Library.PhpMath._mtGenerator"/> fields on request end.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Absolutizes range specified by an offset and a length relatively to a dimension of an array.
            </summary>
            <param name="count">The number of items in array. Should be non-negative.</param>
            <param name="offset">
            The offset of the range relative to the beginning (if non-negative) or the end of the array (if negative).
            If the offset underflows or overflows the length is shortened appropriately.
            </param>
            <param name="length">
            The length of the range if non-negative. Otherwise, its absolute value is the number of items
            which will not be included in the range from the end of the array. In the latter case 
            the range ends with the |<paramref name="length"/>|-th item from the end of the array (counting from zero).
            </param>
            <remarks>
            Ensures that <c>[offset,offset + length]</c> is subrange of <c>[0,count]</c>.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpMath.Seed">
            <summary>
            Seed the random number generator. No return value.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpMath.Seed(System.Int32)">
            <summary>
            Seed the random number generator. No return value.
            </summary>
            <param name="seed">Optional seed value.</param>
        </member>
        <member name="M:PHP.Library.PhpMath.GetMaxRandomValue">
            <summary>
            Show largest possible random value.
            </summary>
            <returns>The largest possible random value returned by rand().</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Random">
            <summary>
            Generate a random integer.
            </summary>
            <returns>A pseudo random value between 0 and getrandmax(), inclusive.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Random(System.Int32,System.Int32)">
            <summary>
            Generate a random integer.
            </summary>
            <param name="min">The lowest value to return.</param>
            <param name="max">The highest value to return.</param>
            <returns>A pseudo random value between min and max, inclusive. </returns>
        </member>
        <member name="M:PHP.Library.PhpMath.UniqueId">
            <summary>
            Generate a unique ID.
            Gets a prefixed unique identifier based on the current time in microseconds. 
            </summary>
            <returns>Returns the unique identifier, as a string.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.UniqueId(System.String)">
            <summary>
            Generate a unique ID.
            Gets a prefixed unique identifier based on the current time in microseconds. 
            </summary>
            <param name="prefix">Can be useful, for instance, if you generate identifiers simultaneously on several hosts that might happen to generate the identifier at the same microsecond.
            With an empty prefix , the returned string will be 13 characters long.
            </param>
            <returns>Returns the unique identifier, as a string.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.UniqueId(System.String,System.Boolean)">
            <summary>
            Generate a unique ID.
            </summary>
            <remarks>
            With an empty prefix, the returned string will be 13 characters long. If more_entropy is TRUE, it will be 23 characters.
            </remarks>
            <param name="prefix">Use the specified prefix.</param>
            <param name="more_entropy">Use LCG to generate a random postfix.</param>
            <returns>A pseudo-random string composed from the given prefix, current time and a random postfix.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.LcgValue">
            <summary>
            Generates a pseudo-random number using linear congruential generator in the range of (0,1).
            </summary>
            <remarks>
            This method uses the Framwork <see cref="M:PHP.Library.PhpMath.Random"/> generator
            which may or may not be the same generator as the PHP one (L(CG(2^31 - 85),CG(2^31 - 249))).
            </remarks>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpMath.MtSeed">
            <summary>
            Seed the better random number generator.
            No return value.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpMath.MtSeed(System.Int32)">
            <summary>
            Seed the better random number generator.
            No return value.
            </summary>
            <param name="seed">Optional seed value.</param>
        </member>
        <member name="M:PHP.Library.PhpMath.ConvertToInt(System.Double)">
            <summary>
            Converts the given number to int (if the number is whole
            and fits into the int's range).
            </summary>
            <param name="number"></param>
            <returns><c>int</c> representation of number if possible, otherwise a <c>double</c> representation.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.DecToBin(System.Double)">
            <summary>
            Converts the lowest 32 bits of the given number to a binary string.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpMath.DecToBinUnicode(System.Double)">
            <summary>
            Converts the lowest 32 bits of the given number to a binary string.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpMath.BinToDec(PHP.Core.PhpBytes)">
            <summary>
            Returns the decimal equivalent of the binary number represented by the binary_string argument.
            bindec() converts a binary number to an integer or, if needed for size reasons, double.
            </summary>
            <param name="str">The binary string to convert.</param>
            <returns>The decimal value of <paramref name="str"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.DecToOct(System.Int32)">
            <summary>
            Returns a string containing an octal representation of the given number argument.
            </summary>
            <param name="number">Decimal value to convert.</param>
            <returns>Octal string representation of <paramref name="number"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.OctToDec(PHP.Core.PhpBytes)">
            <summary>
            Returns the decimal equivalent of the octal number represented by the <paramref name="str"/> argument.
            </summary>
            <param name="str">The octal string to convert.</param>
            <returns>The decimal representation of <paramref name="str"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.DecToHex(System.Int32)">
            <summary>
            Returns a string containing a hexadecimal representation of the given number argument.
            </summary>
            <param name="number">Decimal value to convert.</param>
            <returns>Hexadecimal string representation of <paramref name="number"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.HexToDec(PHP.Core.PhpBytes)">
            <summary>
            Hexadecimal to decimal.
            Returns the decimal equivalent of the hexadecimal number represented by the hex_string argument. hexdec() converts a hexadecimal string to a decimal number.
            hexdec() will ignore any non-hexadecimal characters it encounters.
            </summary>
            <param name="str">The hexadecimal string to convert.</param>
            <returns>The decimal representation of <paramref name="str"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.BaseConvert(System.String,System.Int32,System.Int32)">
            <summary>
            Convert a number between arbitrary bases.
            Returns a string containing number represented in base tobase. The base in which number is given is specified in <paramref name="fromBase"/>. Both <paramref name="fromBase"/> and <paramref name="toBase"/> have to be between 2 and 36, inclusive. Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35.
            </summary>
            <param name="number">The number to convert</param>
            <param name="fromBase">The base <paramref name="number"/> is in.</param>
            <param name="toBase">The base to convert <paramref name="number"/> to</param>
            <returns><paramref name="number"/> converted to base <paramref name="toBase"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.DegreesToRadians(System.Double)">
            <summary>
            Degrees to radians.
            </summary>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpMath.RadiansToDegrees(System.Double)">
            <summary>
            Radians to degrees.
            </summary>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpMath.PI">
            <summary>
            Returns an approximation of pi.
            </summary>
            <returns>The value of pi as <c>double</c>.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Acos(System.Double)">
            <summary>
            Returns the arc cosine of arg in radians.
            acos() is the complementary function of cos(), which means that <paramref name="x"/>==cos(acos(<paramref name="x"/>)) for every value of a that is within acos()' range.
            </summary>
            <param name="x">The argument to process.</param>
            <returns>The arc cosine of <paramref name="x"/> in radians.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Asin(System.Double)">
            <summary>
            Returns the arc sine of arg in radians. asin() is the complementary function of sin(), which means that <paramref name="x"/>==sin(asin(<paramref name="x"/>)) for every value of a that is within asin()'s range.
            </summary>
            <param name="x">The argument to process.</param>
            <returns>The arc sine of <paramref name="x"/> in radians.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Exp(System.Double)">
            <summary>
            Returns <c>e</c> raised to the power of <paramref name="x"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpMath.ExpM1(System.Double)">
            <summary>
            expm1() returns the equivalent to 'exp(arg) - 1' computed in a way that is accurate even
            if the value of arg is near zero, a case where 'exp (arg) - 1' would be inaccurate due to
            subtraction of two numbers that are nearly equal. 
            </summary>
            <param name="x">The argument to process </param>
        </member>
        <member name="M:PHP.Library.PhpMath.Log10(System.Double)">
            <summary>
            Returns the base-10 logarithm of <paramref name="x"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpMath.Log(System.Double,System.Double)">
            <summary>
            If the optional <paramref name="logBase"/> parameter is specified, log() returns log(<paramref name="logBase"/>) <paramref name="x"/>, otherwise log() returns the natural logarithm of <paramref name="x"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpMath.Log1P(System.Double)">
            <summary>
            log1p() returns log(1 + number) computed in a way that is accurate even when the value
            of number is close to zero. log()  might only return log(1) in this case due to lack of precision. 
            </summary>
            <param name="x">The argument to process </param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Power(System.Object,System.Object)">
            <summary>
            Returns <paramref name="base"/> raised to the power of <paramref name="exp"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpMath.Ceiling(System.Double)">
            <summary>
            Returns the next highest integer value by rounding up <paramref name="x"/> if necessary.
            </summary>
            <param name="x">The value to round.</param>
            <returns><paramref name="x"/> rounded up to the next highest integer. The return value of ceil() is still of type <c>double</c> as the value range of double is usually bigger than that of integer.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Floor(System.Double)">
            <summary>
            Returns the next lowest integer value by rounding down <paramref name="x"/> if necessary.
            </summary>
            <param name="x">The numeric value to round.</param>
            <returns><paramref name="x"/> rounded to the next lowest integer. The return value of floor() is still of type <c>double</c> because the value range of double is usually bigger than that of integer.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Round(System.Double)">
            <summary>
            Rounds a float.
            </summary>
            <param name="x">The value to round.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Round(System.Double,System.Int32)">
            <summary>
            Rounds a float.
            </summary>
            <param name="x">The value to round.</param>
            <param name="precision">The optional number of decimal digits to round to. Can be less than zero to ommit digits at the end. Default is <c>0</c>.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Power10Value(System.Int32)">
            <summary>
            Returns precise value of 10^<paramref name="power"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpMath.Round(System.Double,System.Int32,PHP.Library.PhpMath.RoundMode)">
            <summary>
            Rounds a float.
            </summary>
            <param name="x">The value to round.</param>
            <param name="precision">The optional number of decimal digits to round to. Can be less than zero to ommit digits at the end. Default is <c>0</c>.</param>
            <param name="mode">One of PHP_ROUND_HALF_UP, PHP_ROUND_HALF_DOWN, PHP_ROUND_HALF_EVEN, or PHP_ROUND_HALF_ODD. Default is <c>PHP_ROUND_HALF_UP</c>.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Abs(System.Object)">
            <summary>
            Returns the absolute value of <paramref name="x"/>.
            </summary>
            <param name="x">The numeric value to process.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Fmod(System.Double,System.Double)">
            <summary>
            Returns the floating point remainder (modulo) of the division of the arguments.
            </summary>
            <param name="x">The dividend.</param>
            <param name="y">The divisor.</param>
            <returns>The floating point remainder of <paramref name="x"/>/<paramref name="y"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Max(System.Object[])">
            <summary>
            Find highest value.
            If the first and only parameter is an array, max() returns the highest value in that array. If at least two parameters are provided, max() returns the biggest of these values.
            </summary>
            <param name="numbers">An array containing the values or values separately.</param>
            <returns>max() returns the numerically highest of the parameter values. If multiple values can be considered of the same size, the one that is listed first will be returned.
            When max() is given multiple arrays, the longest array is returned. If all the arrays have the same length, max() will use lexicographic ordering to find the return value.
            When given a string it will be cast as an integer when comparing.</returns>
        </member>
        <member name="M:PHP.Library.PhpMath.Min(System.Object[])">
            <summary>
            Find lowest value.
            If the first and only parameter is an array, min() returns the lowest value in that array. If at least two parameters are provided, min() returns the smallest of these values.
            </summary>
            <param name="numbers">An array containing the values or values separately.</param>
            <returns>min() returns the numerically lowest of the parameter values.</returns>
        </member>
        <member name="P:PHP.Library.PhpMath.Generator">
            <summary>
            Gets an initialized random number generator associated with the current thread.
            </summary>
        </member>
        <member name="P:PHP.Library.PhpMath.MTGenerator">
            <summary>
            Gets an initialized Mersenne Twister random number generator associated with the current thread.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpMath.RoundMode">
            <summary>
            <c>$mode</c> parameter for <see cref="M:PHP.Library.PhpMath.Round(System.Double,System.Int32,PHP.Library.PhpMath.RoundMode)"/> function.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpMath.RoundMode.HalfUp">
            <summary>
            When a number is halfway between two others, it is rounded away from zero.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpMath.RoundMode.HalfDown">
            <summary>
            When a number is halfway between two others, it is rounded to the zero.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpMath.RoundMode.HalfEven">
            <summary>
            When a number is halfway between two others, it is rounded toward the nearest even number.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpMath.RoundMode.HalfOdd">
            <summary>
            When a number is halfway between two others, it is rounded toward the nearest odd number.
            </summary>
        </member>
        <member name="T:PHP.Library.MersenneTwister">
            <summary>
            Mersanne Twister random generator.
            </summary>
        </member>
        <member name="M:PHP.Library.MersenneTwister.#ctor">
            <summary>
            Create a new instance of <see cref="T:PHP.Library.MersenneTwister"/> using a default seed.
            </summary>
        </member>
        <member name="M:PHP.Library.MersenneTwister.#ctor(System.UInt32)">
            <summary>
            Create a new instance of <see cref="T:PHP.Library.MersenneTwister"/> using a specified seed.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:PHP.Library.MersenneTwister.Seed(System.UInt32)">
            <summary>
            Seeds the generator.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:PHP.Library.MersenneTwister.NextUnsigned">
            <summary>
            Generates a random unsigned integer.
            </summary>
            <returns>The generated number.</returns>
        </member>
        <member name="M:PHP.Library.MersenneTwister.Next">
            <summary>
            Generates a random signed integer value.
            </summary>
            <returns>The generated number.</returns>
        </member>
        <member name="M:PHP.Library.MersenneTwister.Next(System.Int32,System.Int32)">
            <summary>
            Generates a random number from interval [min,max).
            </summary>
            <returns>The generated number.</returns>
        </member>
        <member name="M:PHP.Library.MersenneTwister.NextDouble">
            <summary>
            Generates a random double value from interval [0,1).
            </summary>
            <returns>The generated number.</returns>
        </member>
        <member name="T:PHP.Library.PhpInfoSections">
            <exclude/>
        </member>
        <member name="T:PHP.Library.PhpCreditsSections">
            <exclude/>
        </member>
        <member name="T:PHP.Library.Misc">
            <summary>
            Miscellaneous functionality.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.Misc.PhpInfo">
            <summary>
            Shows all information about Phalanger.
            </summary>
            <returns>1.</returns>
        </member>
        <member name="M:PHP.Library.Misc.PhpInfo(PHP.Library.PhpInfoSections)">
            <summary>
            Shows specific information about Phalanger.
            </summary>
            <param name="sections">A section to show.</param>
            <returns>1.</returns>
        </member>
        <member name="M:PHP.Library.Misc.PhpCredits">
            <summary>
            Shows all credits of Phalanger.
            </summary>
            <returns>True on success, or False on failure.</returns>
        </member>
        <member name="M:PHP.Library.Misc.PhpCredits(PHP.Library.PhpCreditsSections)">
            <summary>
            Shows all credits of Phalanger.
            </summary>
            <param name="sections">Ignored.</param>
            /// <returns>True on success, or False on failure.</returns>
        </member>
        <member name="M:PHP.Library.Misc.PhpVersion">
            <summary>
            Retrieves a string version of PHP language which features is supported by the Phalanger.
            </summary>
            <returns>PHP language version.</returns>
        </member>
        <member name="M:PHP.Library.Misc.PhpVersion(System.String)">
            <summary>
            Retrieves a string version of a specified extension.
            </summary>
            <returns>Version of the extension or <b>null</b> if it cannot be retrieved.</returns>
        </member>
        <member name="M:PHP.Library.Misc.VersionCompare(System.String,System.String)">
            <summary>
            Compares PHP versions.
            </summary>
            <param name="ver1">The first version.</param>
            <param name="ver2">The second version.</param>
            <returns>The result of comparison (-1,0,+1).</returns>
        </member>
        <member name="M:PHP.Library.Misc.VersionCompare(System.String,System.String,System.String)">
            <summary>
            Compares PHP versions using a specified operators.
            </summary>
            <param name="ver1">The first version.</param>
            <param name="ver2">The second version.</param>
            <param name="op">The operator to be used.</param>
            <returns>A boolean result of comparison or a <B>null</B> reference if the operator is invalid.</returns>
        </member>
        <member name="M:PHP.Library.Misc.ZendVersion">
            <summary>
            Gets the current version of Zend engine as it is defined in the currently supported PHP.
            </summary>
            <returns>The version.</returns>
        </member>
        <member name="M:PHP.Library.Misc.GetHostName">
            <summary>
            gethostname() gets the standard host name for the local machine. 
            </summary>
            <returns>Returns a string with the hostname on success, otherwise FALSE is returned. </returns>
        </member>
        <member name="M:PHP.Library.Misc.PhpUName">
            <summary>
            Retrieves full version information about OS.
            </summary>
            <returns>OS version.</returns>
        </member>
        <member name="M:PHP.Library.Misc.PhpUName(System.String)">
            <summary>
            Retrieves specific version information about OS.
            </summary>
            <param name="mode">
            <list type="bullet">
            <term>'a'</term><description>This is the default. Contains all modes in the sequence "s n r v m".</description>
            <term>'s'</term><description>Operating system name, e.g. "Windows NT", "Windows 9x".</description>
            <term>'n'</term><description>Host name, e.g. "www.php-compiler.net".</description>
            <term>'r'</term><description>Release name, e.g. "5.1".</description>
            <term>'v'</term><description>Version information. Varies a lot between operating systems, e.g. "build 2600".</description>
            <term>'m'</term><description>Machine type. eg. "i586".</description>
            </list>
            </param>
            <returns>OS version.</returns>
        </member>
        <member name="M:PHP.Library.Misc.MemoryGetUsage">
            <summary>
            Retrieves the size of the current process working set in bytes.
            (In PHP, Returns the amount of memory, in bytes, that's currently being allocated to your PHP script.)
            </summary>
            <returns>The size.</returns>
        </member>
        <member name="M:PHP.Library.Misc.MemoryGetUsage(System.Boolean)">
            <summary>
            Retrieves the size of the current process working set in bytes.
            </summary>
            <param name="real_usage">
            "Set this to TRUE to get the real size of memory allocated from system.
            If not set or FALSE only the memory used by emalloc() is reported."</param>
            <returns>The size.</returns>
        </member>
        <member name="M:PHP.Library.Misc.MemoryGetPeakUsage">
            <summary>
            Returns the peak of memory, in bytes, that's been allocated to the PHP script.
            </summary>
            <returns>The size.</returns>
        </member>
        <member name="M:PHP.Library.Misc.MemoryGetPeakUsage(System.Boolean)">
            <summary>
            Returns the peak of memory, in bytes, that's been allocated to the PHP script.
            </summary>
            <param name="real_usage">
            Set this to TRUE to get the real size of memory allocated from system.
            If not set or FALSE only the memory used by emalloc() is reported.</param>
            <returns>The size.</returns>
        </member>
        <member name="M:PHP.Library.Misc.PhpSapiName">
            <summary>
            Returns the type of interface between web server and Phalanger. 
            </summary>
            <returns>The "isapi" string if runned under webserver (ASP.NET works via ISAPI) or "cli" otherwise.</returns>
        </member>
        <member name="M:PHP.Library.Misc.GetCurrentProcessId">
            <summary>
            Returns the PID of the current process. 
            </summary>
            <returns>The PID.</returns>
        </member>
        <member name="M:PHP.Library.Misc.GetLastModification">
            <summary>
            Gets time of last page modification. 
            </summary>
            <returns>The UNIX timestamp or -1 on error.</returns>
        </member>
        <member name="M:PHP.Library.Misc.GetCurrentUser">
            <summary>
            Gets the name of the current user.
            </summary>
            <returns>The name of the current user.</returns>
        </member>
        <member name="M:PHP.Library.Misc.GetCurrentUserId">
            <summary>
            Not supported.
            </summary>
            <returns>Zero.</returns>
        </member>
        <member name="M:PHP.Library.Misc.sleep(System.Int32)">
            <summary>
            Sleeps the current thread for a specified amount of time.
            </summary>
            <param name="seconds">The number of seconds to sleep.</param>
            <returns>Zero on success, or FALSE if negative argument is passed.</returns>
        </member>
        <member name="M:PHP.Library.Misc.usleep(System.Int32)">
            <summary>
            Sleeps the current thread for a specified amount of time.
            No value is returned.
            </summary>
            <param name="microSeconds">The number of microseconds to sleep.</param>
        </member>
        <member name="M:PHP.Library.Misc.LoadExtension(System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="library">Ignored.</param>
            <returns><B>false</B></returns>
        </member>
        <member name="M:PHP.Library.Misc.ExtensionLoaded(System.String)">
            <summary>
            Determines whether a native extension is loaded.
            </summary>
            <param name="extension">Internal extension name (e.g. <c>sockets</c>).</param>
            <returns><B>true</B> if the <paramref name="extension"/> is loaded, <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.Misc.GetLoadedExtensions">
            <summary>
            Returns an array with names of all loaded native extensions.
            </summary>
            <returns>The array of extension names.</returns>
        </member>
        <member name="M:PHP.Library.Misc.GetExtensionFunctions(System.String)">
            <summary>
            Returns an array with names of the functions of a native extension.
            </summary>
            <param name="extension">Internal extension name (e.g. <c>sockets</c>).</param>
            <returns>The array of function names or <B>null</B> if the <paramref name="extension"/> is not loaded.</returns>
        </member>
        <member name="M:PHP.Library.Misc.AddFunctionToHashtable(System.Reflection.MethodInfo,PHP.Core.ImplementsFunctionAttribute,System.Object)">
            <summary>
            A callback used by <see cref="M:PHP.Library.Misc.GetExtensionFunctions(System.String)"/> method. Adds a function to the resulting array as a key.
            </summary>
        </member>
        <member name="M:PHP.Library.Misc.GetRequiredFiles">
            <summary>
            Returns an array of included file paths.
            </summary>
            <returns>The array of paths to included files (without duplicates).</returns>
        </member>
        <member name="M:PHP.Library.Misc.GetIncludedFiles">
            <summary>
            Returns an array of included file paths.
            </summary>
            <returns>The array of paths to included files (without duplicates).</returns>
        </member>
        <member name="M:PHP.Library.Misc.GetMimeContentType(System.String)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Misc.ZendLogoGuid">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Misc.PhpLogoGuid">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Misc.GetMyGid">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Misc.GetMyINode">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="T:PHP.Library.DnsRecordType">
            <summary>
            Types of the DNS record.
            </summary>
        </member>
        <member name="F:PHP.Library.DnsRecordType.Ip4Address">
            <summary>IPv4 Address Resource</summary>
        </member>
        <member name="F:PHP.Library.DnsRecordType.Mail">
            <summary>Mail Exchanger Resource</summary>
        </member>
        <member name="F:PHP.Library.DnsRecordType.Alias">
            <summary>Alias (Canonical Name) Resource</summary>
        </member>
        <member name="F:PHP.Library.DnsRecordType.NameServer">
            <summary>Authoritative Name Server Resource.</summary>
        </member>
        <member name="F:PHP.Library.DnsRecordType.Pointer">
            <summary>Pointer Resource.</summary>
        </member>
        <member name="F:PHP.Library.DnsRecordType.HostInfo">
            <summary>Host Info Resource.</summary>
        </member>
        <member name="F:PHP.Library.DnsRecordType.StartOfAuthority">
            <summary>Start of Authority Resource.</summary>
        </member>
        <member name="F:PHP.Library.DnsRecordType.Text">
            <summary>Text Resource.</summary>
        </member>
        <member name="F:PHP.Library.DnsRecordType.Any">
            <summary>Any Resource Record.</summary>
        </member>
        <member name="F:PHP.Library.DnsRecordType.Ip6Address">
            <summary>IPv6 Address Resource</summary>
        </member>
        <member name="F:PHP.Library.DnsRecordType.All">
            <summary>Iteratively query the name server for each available record type.</summary>
        </member>
        <member name="T:PHP.Library.Sockets">
            <summary>
            Socket functions.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.Sockets.Open(System.String,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Sockets.Open(System.String,System.Int32,System.Int32@)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Sockets.Open(System.String,System.Int32,System.Int32@,System.String@)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Sockets.Open(System.String,System.Int32,System.Int32@,System.String@,System.Double)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Sockets.Open(System.String,System.Int32,System.Int32@,System.String@,System.Double,System.Boolean)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Sockets.GetStatus(PHP.Core.PhpResource)">
            <summary>
            Gets status.
            </summary>
            <param name="stream">A stream.</param>
            <returns>The array containing status info.</returns>
        </member>
        <member name="M:PHP.Library.Sockets.SetBlocking(PHP.Core.PhpResource,System.Int32)">
            <summary>
            Sets blocking mode.
            </summary>
            <param name="stream">A stream.</param>
            <param name="mode">A mode.</param>
        </member>
        <member name="M:PHP.Library.Sockets.SetTimeout(PHP.Core.PhpResource,System.Int32)">
            <summary>
            Sets a timeout.
            </summary>
            <param name="stream">A stream.</param>
            <param name="seconds">The timeout in seconds.</param>
        </member>
        <member name="M:PHP.Library.Sockets.SetTimeout(PHP.Core.PhpResource,System.Int32,System.Int32)">
            <summary>
            Sets a timeout.
            </summary>
            <param name="stream">A stream.</param>
            <param name="seconds">Seconds part of the timeout.</param>
            <param name="microseconds">Microseconds part of the timeout.</param>
        </member>
        <member name="T:PHP.Library.Dns">
            <summary>
            Functions working with DNS.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.Dns.CheckRecordRows(System.String)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Dns.CheckRecordRows(System.String,System.String)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Dns.CheckRecords(System.String,System.String)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Dns.GetRecord(System.String)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Dns.GetRecord(System.String,PHP.Library.DnsRecordType)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Dns.GetRecord(System.String,PHP.Library.DnsRecordType,PHP.Core.PhpArray@,PHP.Core.PhpArray@)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Dns.GetHostByAddress(System.String)">
            <summary>
            Gets the Internet host name corresponding to a given IP address.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <returns>The host name or unmodified <paramref name="ipAddress"/> on failure.</returns>
        </member>
        <member name="M:PHP.Library.Dns.GetHostByName(System.String)">
            <summary>
            Gets the IP address corresponding to a given Internet host name.
            </summary>
            <param name="hostName">The host name.</param>
            <returns>The IP address or unmodified <paramref name="hostName"/> on failure.</returns>
        </member>
        <member name="M:PHP.Library.Dns.GetHostByNameList(System.String)">
            <summary>
            Gets a list of IP addresses corresponding to a given Internet host name.
            </summary>
            <param name="hostName">The host name.</param>
            <returns>The list of IP addresses to which the Internet host specified by <paramref name="hostName"/> resolves.
            </returns>
        </member>
        <member name="M:PHP.Library.Dns.GetMxRecordRow(System.String,PHP.Core.PhpArray)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Dns.GetMxRecordRow(System.String,PHP.Core.PhpArray,PHP.Core.PhpArray)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Dns.GetMxRecord(System.String,PHP.Core.PhpArray)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Dns.GetMxRecord(System.String,PHP.Core.PhpArray,PHP.Core.PhpArray)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.Dns.GetProtocolByName(System.String)">
            <summary>
            Returns protocol number associated with a given protocol name.
            </summary>
            <param name="name">The protocol name.</param>
            <returns>The protocol number or <c>-1</c> if <paramref name="name"/> is not found.</returns>
        </member>
        <member name="M:PHP.Library.Dns.GetProtocolByNumber(System.Int32)">
            <summary>
            Returns protocol name associated with a given protocol number.
            </summary>
            <param name="number">The protocol number.</param>
            <returns>The protocol name or <B>null</B> if <paramref name="number"/> is not found.</returns>
        </member>
        <member name="M:PHP.Library.Dns.GetServiceByName(System.String,System.String)">
            <summary>
            Returns port number associated with a given Internet service and protocol.
            </summary>
            <param name="service">The service.</param>
            <param name="protocol">The protocol.</param>
            <returns>The port number or <c>-1</c> if not found.</returns>
        </member>
        <member name="M:PHP.Library.Dns.GetServiceByPort(System.Int32,System.String)">
            <summary>
            Returns an Internet service that corresponds to a given port and protocol.
            </summary>
            <param name="port">The port.</param>
            <param name="protocol">The protocol.</param>
            <returns>The service name or <B>null</B> if not found.</returns>
        </member>
        <member name="M:PHP.Library.Dns.IPToInteger(System.String)">
            <summary>
            Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address.
            </summary>
            <param name="ipAddress">The string representation of the address.</param>
            <returns>The integer representation of the address.</returns>
        </member>
        <member name="M:PHP.Library.Dns.IntegerToIP(System.Int32)">
            <summary>
            Converts an (IPv4) Internet network address into a string in Internet standard dotted format.
            </summary>
            <param name="properAddress">The integer representation of the address.</param>
            <returns>The string representation of the address.</returns>
        </member>
        <member name="T:PHP.Library.PhpObjects">
            <summary>
            Contains object-related class library functions.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PhpObjects.CallUserMethodInternal(PHP.Core.Reflection.DTypeDesc,System.String,System.Object,System.Collections.ICollection)">
            <summary>
            Calls the method referred by <paramref name="methodName"/> from the user defined
            object <paramref name="classNameOrObject"/> with parameters <paramref name="args"/>.
            </summary>
            <param name="caller">DTypeDesc of the caller's class context. Can be UnknownTypeDesc.</param>
            <param name="methodName">The name of the method.</param>
            <param name="classNameOrObject">An instance to invoke the method on or a class name.</param>
            <param name="args">Parameters to invoke the method with.</param>
            <returns>The method's return value (always dereferenced).</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.CallUserMethod(PHP.Core.Reflection.DTypeDesc,System.String,System.Object,System.Object[])">
            <summary>
            Calls the method referred by <paramref name="methodName"/> from the user defined
            object <paramref name="classNameOrObject"/> with parameters <paramref name="args"/>.
            </summary>
            <param name="caller">DTypeDesc of the caller's class context. Can be UnknownTypeDesc.</param>
            <param name="methodName">The name of the method.</param>
            <param name="classNameOrObject">An instance to invoke the method on or a class name.</param>
            <param name="args">Parameters to invoke the method with.</param>
            <returns>The method's return value (always dereferenced).</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.CallUserMethodArray(PHP.Core.Reflection.DTypeDesc,System.String,System.Object,PHP.Core.PhpArray)">
            <summary>
            Calls the method referred by <paramref name="methodName"/> from the user defined
            object <paramref name="classNameOrObject"/> with parameters <paramref name="args"/>.
            </summary>
            <param name="caller">DTypeDesc of the caller's class context. Can be UnknownTypeDesc.</param>
            <param name="methodName">The name of the method.</param>
            <param name="classNameOrObject">An instance to invoke the method on or a class name.</param>
            <param name="args">Parameters to invoke the method with.</param>
            <returns>The method's return value.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.GetClassVars(PHP.Core.Reflection.DTypeDesc,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:PHP.Core.PhpArray"/> of default fields of a class.
            </summary>
            <param name="caller">The caller of the method to resolve visible properties properly. Can be UnknownTypeDesc.</param>
            <param name="className">The name of the class.</param>
            <param name="parentsFirst">Whether to list vars in PHP order (child vars then parent vars) or logical (parent vars then child).</param>
            <param name="includeStatic">Specifies whether static variables should be listed as well</param>
            <returns>Array of <paramref name="className"/>'s default fields.</returns>
            <remarks>
            <para>
            The resulting array elements are in the form of <c>varname =&gt; value</c>, where <c>value</c>
            is the default value of the field.
            </para>
            <para>
            This method returns fields declared in <paramref name="className"/> and all its parent classes.
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpObjects.GetObjectVars(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DObject)">
            <summary>
            Returns a <see cref="T:PHP.Core.PhpArray"/> of defined fields for the specified object <paramref name="obj"/>. 
            </summary>
            <param name="caller">The caller of the method to resolve visible properties properly. Can be UnknownTypeDesc.</param>
            <param name="obj">The object whose fields are requested.</param>
            <returns>Array of <paramref name="obj"/>'s fields (name =&gt; value pairs).</returns>
            <remarks>
            This method returns default fields (those declared in the class using "var") declared in the
            class and all its parent classes) as well as fields added at runtime.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpObjects.GetObjectVars(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DObject,System.Boolean)">
            <summary>
            Returns a <see cref="T:PHP.Core.PhpArray"/> of defined fields for the specified object <paramref name="obj"/>. 
            </summary>
            <param name="caller">The caller of the method to resolve visible properties properly. Can be UnknownTypeDesc.</param>
            <param name="obj">The object whose fields are requested.</param>
            <param name="IgnoreReferences">References will be omited from the result</param>
            <returns>Array of <paramref name="obj"/>'s fields (name =&gt; value pairs).</returns>
            <remarks>
            This method returns default fields (those declared in the class using "var") declared in the
            class and all its parent classes) as well as fields added at runtime.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpObjects.MethodExists(PHP.Core.Reflection.DTypeDesc,System.Object,System.String)">
            <summary>
            Verifies whether the method given by <paramref name="methodName"/> has been defined for the given
            object <paramref name="obj"/>. 
            </summary>
            <param name="caller">Current class context.</param>
            <param name="obj">The object to test.</param>
            <param name="methodName">The name of the method.</param>
            <returns><B>True</B> if the method given by <paramref name="methodName"/> has been defined for the given
            object <paramref name="obj"/>, <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.ClassNameOrObjectToType(PHP.Core.ScriptContext,PHP.Core.NamingContext,PHP.Core.Reflection.DTypeDesc,System.Object,System.Boolean)">
            <summary>
            Converts a class name or class instance to <see cref="T:PHP.Core.Reflection.DTypeDesc"/> object.
            </summary>
            <param name="scriptContext">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="namingContext">Current <see cref="T:PHP.Core.NamingContext"/>.</param>
            <param name="caller">The caller of the method to resolve visible properties properly. Can be UnknownTypeDesc.</param>
            <param name="classNameOrObject">The class name or class instance (<see cref="T:PHP.Core.Reflection.DObject"/>).</param>
            <param name="useAutoload"><B>True</B> iff the <c>__autoload</c> magic function should be used.</param>
            <returns>The type desc that corresponds to <paramref name="classNameOrObject"/> or <B>null</B>
            if the type could not be found or <paramref name="classNameOrObject"/> is neither a string
            nor <see cref="T:PHP.Core.Reflection.DObject"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.PropertyExists(PHP.Core.Reflection.DTypeDesc,System.Object,System.String)">
            <summary>
            Verifies whether the property given by <paramref name="propertyName"/> has been defined for the given
            object object or class. 
            </summary>
            <param name="caller">The caller of the method to resolve visible properties properly. Can be UnknownTypeDesc.</param>
            <param name="classNameOrObject">The object (<see cref="T:PHP.Core.Reflection.DObject"/>) or the name of a class
            (<see cref="T:System.String"/>).</param>
            <param name="propertyName">The name of the property.</param>
            <returns><B>True</B> if the property given by <paramref name="propertyName"/> has been defined for the
            given class or object and is accessible from current class context.</returns>
            <remarks>
            This function has different semantics than <see cref="M:PHP.Library.PhpObjects.MethodExists(PHP.Core.Reflection.DTypeDesc,System.Object,System.String)"/>, which ignores visibility.
            If an object is passed in the first parameter, the property is searched among runtime fields as well.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpObjects.GetClassMethods(PHP.Core.Reflection.DTypeDesc,System.Object)">
            <summary>
            Returns all methods defined in the specified class or class of specified object, and its predecessors.
            </summary>
            <param name="caller">The caller of the method to resolve visible properties properly. Can be UnknownTypeDesc.</param>
            <param name="classNameOrObject">The object (<see cref="T:PHP.Core.Reflection.DObject"/>) or the name of a class
            (<see cref="T:System.String"/>).</param>
            <returns>Array of all methods defined in <paramref name="classNameOrObject"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.GetDeclaredClasses">
            <summary>
            Returns a <see cref="T:PHP.Core.PhpArray"/> with names of all defined classes (system and user).
            </summary>
            <returns><see cref="T:PHP.Core.PhpArray"/> of class names.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.GetDeclaredInterfaces">
            <summary>
            Returns a <see cref="T:PHP.Core.PhpArray"/> with names of all defined interfaces (system and user).
            </summary>
            <returns><see cref="T:PHP.Core.PhpArray"/> of interface names.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.IsSubclassOf(PHP.Core.Reflection.DTypeDesc,System.Object,System.String)">
            <summary>
            Tests whether the class given by <paramref name="classNameOrObject"/> is derived from a class given
            by <paramref name="baseClassName"/>.
            </summary>
            <param name="caller">The caller of the method to resolve visible properties properly. Can be UnknownTypeDesc.</param>
            <param name="classNameOrObject">The object (<see cref="T:PHP.Core.Reflection.DObject"/>) or the name of a class
            (<see cref="T:System.String"/>).</param>
            <param name="baseClassName">The name of the (base) class.</param>
            <returns><B>true</B> if <paramref name="classNameOrObject"/> implements or extends <paramref name="baseClassName"/>,
            <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.ClassExists(PHP.Core.Reflection.DTypeDesc,System.String)">
            <summary>
            Tests whether a given class is defined.
            </summary>
            <param name="caller">The caller class context to resolve visibility.</param>
            <param name="className">The name of the class.</param>
            <returns><B>true</B> if the class given by <paramref name="className"/> has been defined,
            <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.ClassExists(PHP.Core.Reflection.DTypeDesc,System.String,System.Boolean)">
            <summary>
            Tests whether a given class is defined.
            </summary>
            <param name="caller">The caller class context to resolve visibility.</param>
            <param name="className">The name of the class.</param>
            <param name="autoload">Whether to attempt to call <c>__autoload</c>.</param>
            <returns><B>true</B> if the class given by <paramref name="className"/> has been defined,
            <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.InterfaceExists(PHP.Core.Reflection.DTypeDesc,System.String)">
            <summary>
            Tests whether a given interface is defined.
            </summary>
            <param name="caller">The class context of the caller.</param>
            <param name="ifaceName">The name of the interface.</param>
            <returns><B>true</B> if the interface given by <paramref name="ifaceName"/> has been defined,
            <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.InterfaceExists(PHP.Core.Reflection.DTypeDesc,System.String,System.Boolean)">
            <summary>
            Tests whether a given interface is defined.
            </summary>
            <param name="caller">The class context of the caller.</param>
            <param name="ifaceName">The name of the interface.</param>
            <param name="autoload">Whether to attempt to call <c>__autoload</c>.</param>
            <returns><B>true</B> if the interface given by <paramref name="ifaceName"/> has been defined,
            <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.GetClass(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Returns the name of the current class.
            </summary>
            <param name="caller">Current class context.</param>
            <returns>Current class name.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.GetClass(PHP.Core.Reflection.DTypeDesc,System.Object)">
            <summary>
            Returns the name of the class of which the object <paramref name="var"/> is an instance.
            </summary>
            <param name="caller">Current class context.</param>
            <param name="var">The object whose class is requested.</param>
            <returns><paramref name="var"/>'s class name or current class name if <paramref name="var"/> is
            <B>null</B>.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.GetParentClass(PHP.Core.Reflection.DTypeDesc,System.Object)">
            <summary>
            Gets the name of the class from which class given by <paramref name="classNameOrObject"/>
            inherits.
            </summary>
            <param name="caller">The caller of the method to resolve visible properties properly. Can be UnknownTypeDesc.</param>
            <param name="classNameOrObject">The object (<see cref="T:PHP.Core.Reflection.DObject"/>) or the name of a class
            (<see cref="T:System.String"/>).</param>
            <returns>If <paramref name="classNameOrObject"/> is an <see cref="T:PHP.Core.Reflection.DObject"/>, returns the name
            of the parent class of the class of which <paramref name="classNameOrObject"/> is an instance.
            If <paramref name="classNameOrObject"/> is a <see cref="T:System.String"/>, returns the name of the parent
            class of the class with that name.</returns>
            <remarks>
            If the class given by <paramref name="classNameOrObject"/> has no parent in PHP class hierarchy,
            this method returns <B>null</B>.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpObjects.IsA(PHP.Core.Reflection.DTypeDesc,System.Object,System.String)">
            <summary>
            Tests whether <paramref name="obj"/>'s class is derived from a class given by <paramref name="className"/>.
            </summary>
            <param name="caller">The caller of the method to resolve visible properties properly. Can be UnknownTypeDesc.</param>
            <param name="obj">The object to test.</param>
            <param name="className">The name of the class.</param>
            <returns><B>true</B> if the object <paramref name="obj"/> belongs to <paramref name="className"/> class or
            a class which is a subclass of <paramref name="className"/>, <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.GetClassParents(PHP.Core.Reflection.DTypeDesc,System.Object,System.Boolean)">
            <summary>
            Returns a <see cref="T:PHP.Core.PhpArray"/> with keys and values being names of a given class's
            base classes.
            </summary>
            <param name="caller">The caller of the method to resolve visible properties properly. Can be UnknownTypeDesc.</param>
            <param name="classNameOrObject">The <see cref="T:PHP.Core.Reflection.DObject"/> or class name to get base classes of.</param>
            <param name="useAutoload"><B>True</B> if the magic <c>__autoload</c> function should be used.</param>
            <returns>The <see cref="T:PHP.Core.PhpArray"/> with base class names.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.GetClassParents(PHP.Core.Reflection.DTypeDesc,System.Object)">
            <summary>
            Returns a <see cref="T:PHP.Core.PhpArray"/> with keys and values being names of a given class's
            base classes.
            </summary>
            <param name="caller">The caller of the method to resolve visible properties properly. Can be UnknownTypeDesc.</param>
            <param name="classNameOrObject">The <see cref="T:PHP.Core.Reflection.DObject"/> or class name to get base classes of.</param>
            <returns>The <see cref="T:PHP.Core.PhpArray"/> with base class names.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.GetClassInterfaces(PHP.Core.Reflection.DTypeDesc,System.Object,System.Boolean)">
            <summary>
            Returns a <see cref="T:PHP.Core.PhpArray"/> with keys and values being names of interfaces implemented by a given
            class.
            </summary>
            <param name="caller">The caller of the method to resolve visible properties properly. Can be UnknownTypeDesc.</param>
            <param name="classNameOrObject">The <see cref="T:PHP.Core.Reflection.DObject"/> or class name to get implemented interfaces of.
            <param name="useAutoload"><B>True</B> if the magic <c>__autoload</c> function should be used.</param>
            </param>
            <returns>The <see cref="T:PHP.Core.PhpArray"/> with interface names.</returns>
        </member>
        <member name="M:PHP.Library.PhpObjects.GetClassInterfaces(PHP.Core.Reflection.DTypeDesc,System.Object)">
            <summary>
            Returns a <see cref="T:PHP.Core.PhpArray"/> with keys and values being names of interfaces implemented by a given
            class.
            </summary>
            <param name="caller">The caller of the method to resolve visible properties properly. Can be UnknownTypeDesc.</param>
            <param name="classNameOrObject">The <see cref="T:PHP.Core.Reflection.DObject"/> or class name to get implemented interfaces of.
            </param>
            <returns>The <see cref="T:PHP.Core.PhpArray"/> with interface names.</returns>
        </member>
        <member name="T:PHP.Library.Output">
            <summary>
            PHP output control functions implementation. 
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.Output.PrintFormatted(System.String,System.Object[])">
            <summary>
            Generates output according to the specified formatting string.
            </summary>
            <param name="format">The formatting string. See also the <b>sprintf</b> function (<see cref="M:PHP.Library.PhpStrings.Format(System.String,System.Object[])"/>).</param>
            <param name="args">Variables to format.</param>
            <returns>Returns the length of the outputted string. </returns>
        </member>
        <member name="M:PHP.Library.Output.PrintFormatted(System.String,PHP.Core.PhpArray)">
            <summary>
            Generates output according to the specified formatting string.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="args">Array of variables to format.</param>
            <returns>Returns the length of the outputted string. </returns>
        </member>
        <member name="M:PHP.Library.Output.Start">
            <summary>
            Increases the level of buffering and enables output buffering if disabled.
            </summary>
            <returns>Always true.</returns>
        </member>
        <member name="M:PHP.Library.Output.Start(PHP.Core.PhpCallback)">
            <summary>
            Increases the level of buffering, enables output buffering if disabled and assignes the filtering callback
            to the new level of buffering.
            </summary>
            <param name="filter">The filtering callback. Ignores invalid callbacks.</param>
            <returns>Whether the filter is empty or a valid callback.</returns>
        </member>
        <member name="M:PHP.Library.Output.Start(PHP.Core.PhpCallback,System.Int32)">
            <summary>
            Increases the level of buffering, enables output buffering if disabled and assignes the filtering callback
            to the new level of buffering.
            </summary>
            <param name="filter">The filtering callback. Ignores invalid callbacks.</param>
            <param name="chunkSize">Not supported.</param>
            <returns>Whether the filter is empty or a valid callback.</returns>
        </member>
        <member name="M:PHP.Library.Output.Start(PHP.Core.PhpCallback,System.Int32,System.Boolean)">
            <summary>
            Increases the level of buffering, enables output buffering if disabled and assignes the filtering callback
            to the new level of buffering.
            </summary>
            <param name="filter">The filtering callback. Ignores invalid callbacks.</param>
            <param name="chunkSize">Not supported.</param>
            <param name="erase">Not supported.</param>
            <returns>Whether the filter is valid callback.</returns>
        </member>
        <member name="M:PHP.Library.Output.Clean">
            <summary>
            Discards the contents of the current level of buffering.
            No value is returned.
            </summary>
        </member>
        <member name="M:PHP.Library.Output.EndAndClean">
            <summary>
            Discards the contents of the current level of buffering and decreases the level.
            </summary>
            <returns>Whether the content was discarded and the level was decreased.</returns>
        </member>
        <member name="M:PHP.Library.Output.EndAndFlush">
            <summary>
            Flushes the contents of the current level of buffering and decreases the level.
            </summary>
            <returns>Whether the content was discarded and the level was decreased.</returns>
        </member>
        <member name="M:PHP.Library.Output.EndInternal(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Decreases the level of buffering and discards or flushes data on the current level of buffering.
            </summary>
            <param name="context">Current script context.</param>
            <param name="flush">Whether to flush data.</param>
            <returns>Whether the content was discarded and the level was decreased.</returns>
        </member>
        <member name="M:PHP.Library.Output.GetAndClean">
            <summary>
            Gets the contents of the current buffer and cleans it.
            </summary>
            <returns>The content of type <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/>.</returns>
        </member>
        <member name="M:PHP.Library.Output.GetContents">
            <summary>
            Gets the content of the current buffer.
            </summary>
            <returns>The content of type <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/>.</returns>
        </member>
        <member name="M:PHP.Library.Output.GetAndFlush">
            <summary>
            Gets the content of the current buffer and decreases the level of buffering.
            </summary>
            <returns>The content of the buffer.</returns>
        </member>
        <member name="M:PHP.Library.Output.GetLevel">
            <summary>
            Retrieves the level of buffering.
            </summary>
            <returns>The level of buffering.</returns>
        </member>
        <member name="M:PHP.Library.Output.GetLength">
            <summary>
            Retrieves the length of the output buffer.
            </summary>
            <returns>The length of the contents in the output buffer or <B>false</B>, if output buffering isn't active.</returns>
        </member>
        <member name="M:PHP.Library.Output.GetStatus">
            <summary>
            Get the status of the current or all output buffers.
            </summary>
            <returns>The array of name => value pairs containing information.</returns>
        </member>
        <member name="M:PHP.Library.Output.GetStatus(System.Boolean)">
            <summary>
            Get the status of the current or all output buffers.
            </summary>
            <param name="full">Whether to retrieve extended information about all levels of buffering or about the current one.</param>
            <returns>The array of name => value pairs containing information.</returns>
        </member>
        <member name="M:PHP.Library.Output.FlushHttpBuffers">
            <summary>
            Flush the output buffer of the HTTP server. Has no effect on data buffered in Phalanger output buffers.
            No value is returned.
            </summary>
        </member>
        <member name="M:PHP.Library.Output.FlushOutputBuffer">
            <summary>
            Flushes data from the current level of buffering to the previous one or to the client 
            if the current one is the first one. Applies the filter assigned to the current level (if any).
            No value is returned.
            </summary>
        </member>
        <member name="M:PHP.Library.Output.ImplicitFlush">
            <summary>
            Switches implicit flushing on. 
            No value is returned.
            </summary>
            <remarks>Affects the current script context.</remarks>
        </member>
        <member name="M:PHP.Library.Output.ImplicitFlush(System.Boolean)">
             <summary>
             Switches implicit flushing on or off.
             No value is returned.
             </summary>
             <param name="doFlush">Do flush implicitly?</param>
             <remarks>
             Affects the current script context.
            
             There is a bug in the PHP implementation of this function: 
             "Turning implicit flushing on will disable output buffering, the output buffers current output 
             will be sent as if ob_end_flush() had been called."
             Actually, this is not true (PHP doesn't do that) and in fact it is nonsense because 
             ob_end_flush only flushes and destroys one level of buffering. 
             It would be more meaningful if ob_implicit_flush function had flushed and destroyed all existing buffers
             and so disabled output buffering. 
             </remarks>  
        </member>
        <member name="M:PHP.Library.Output.GzipHandler(System.Object,System.Int32)">
            <summary>
            Compresses data by gzip compression.
            </summary>
            <param name="data">Data to be compressed.</param>
            <param name="mode">Compression mode.</param>
            <returns>Compressed data.</returns>
            <remarks>The function does not support subsequent calls to compress more chunks of data subsequentally.</remarks>
        </member>
        <member name="M:PHP.Library.Output.DoGzipHandler(System.Object,System.Web.HttpContext,PHP.Library.Output.ContentEncoding)">
            <summary>
            Compress given data using compressor named in contentEncoding. Set the response header accordingly.
            </summary>
            <param name="data">PhpBytes or string to be compressed.</param>
            <param name="httpcontext">Current HttpContext.</param>
            <param name="contentEncoding">gzip or deflate</param>
            <returns>Byte stream of compressed data.</returns>
        </member>
        <member name="T:PHP.Library.Output.ContentEncoding">
            <summary>
            Available content encodings.
            </summary>
            <remarks>Values correspond to "content-encoding" response header.</remarks>
        </member>
        <member name="T:PHP.Library.PhpFormatter">
            <summary>
            Implements a PHP-compatible formatter (serializer).
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.serializationPermission">
            <summary>
            Serialization security permission demanded in <see cref="M:PHP.Library.PhpFormatter.Serialize(System.IO.Stream,System.Object)"/>.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.encoding">
            <summary>
            The encoding to be used when writing and reading the serialization stream.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.caller">
            <summary>
            DTypeDesc of the caller class context known already or UnknownTypeDesc if class context should be determined lazily.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.#ctor(System.Text.Encoding,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates a new <see cref="T:PHP.Library.PhpFormatter"/> with a given <see cref="T:System.Text.Encoding"/> and
            default <see cref="P:PHP.Library.PhpFormatter.Context"/>.
            </summary>
            <param name="encoding">The encoding to be used when writing and reading the serialization stream.</param>
            <param name="caller">DTypeDesc of the caller's class context if it is known or UnknownTypeDesc if it should be determined lazily.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes an object, or graph of objects with the given root to the provided stream.
            </summary>
            <param name="serializationStream">The stream where the formatter puts the serialized data.</param>
            <param name="graph">The object, or root of the object graph, to serialize.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects.
            </summary>
            <param name="serializationStream">The stream containing the data to deserialize.</param>
            <returns>The top object of the deserialized graph.</returns>
        </member>
        <member name="P:PHP.Library.PhpFormatter.Binder">
            <summary>
            Gets or sets the serialization binder that performs type lookups during deserialization.
            </summary>
        </member>
        <member name="P:PHP.Library.PhpFormatter.Context">
            <summary>
            Gets or sets the streaming context used for serialization and deserialization.
            </summary>
        </member>
        <member name="P:PHP.Library.PhpFormatter.SurrogateSelector">
            <summary>
            Gets or sets the surrogate selector used by the current formatter.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpFormatter.Tokens">
            <summary>
            Contains definition of (one-character) tokens that constitute PHP serialized data.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpFormatter.ObjectWriter">
            <summary>
            Implements the serialization functionality. Serializes an object, or graph of objects
            with the given root to the provided <see cref="T:System.IO.StreamWriter"/>.
            </summary>
        </member>
        <member name="T:PHP.Library.Serializer.ClassContextHolder">
            <summary>
            Common base class of <c>ObjectWriter</c> and <c>ObjectReader</c> containing the cached class context functionality.
            </summary>
            <remarks>
            Class context is needed when invoking <c>__sleep</c> and <c>__wakeup</c> magic methods.
            </remarks>
        </member>
        <member name="T:PHP.Library.Serializer">
            <summary>
            A base class for serializers, i.e. a named formatters.
            </summary>
        </member>
        <member name="M:PHP.Library.Serializer.GetName">
            <summary>
            Gets a name of the serializer. Shouldn't return a <B>null</B> reference.
            </summary>
        </member>
        <member name="M:PHP.Library.Serializer.CreateFormatter(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates a formatter. Shouldn't return a <B>null</B> reference.
            </summary>
            <param name="caller">DTypeDesc of the class context or UnknownTypeDesc if class context is not known yet and will be determined lazily.</param>
        </member>
        <member name="M:PHP.Library.Serializer.ToString">
            <summary>
            Gets tring representation of the serializer.
            </summary>
            <returns>The name of the serializer.</returns>
        </member>
        <member name="M:PHP.Library.Serializer.GetFormatter(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates a formatter (always non-null).
            </summary>
            <param name="caller">DTypeDesc of the class context or UnknownTypeDesc if class context is not known yet and will be determined lazily.</param>
            <returns>New IFormatter class instance.</returns>
        </member>
        <member name="M:PHP.Library.Serializer.Serialize(System.Object,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Serializes a graph of connected objects to a byte array using a given formatter.
            </summary>
            <param name="variable">The variable to serialize.</param>
            <param name="caller">DTypeDesc of the caller's class context if it is known or UnknownTypeDesc if it should be determined lazily.</param>
            <returns>
            The serialized representation of the <paramref name="variable"/> or a <B>null</B> reference on error.
            </returns>
            <exception cref="T:PHP.Core.PhpException">Serialization failed (Notice).</exception>
        </member>
        <member name="M:PHP.Library.Serializer.Deserialize(PHP.Core.PhpBytes,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Deserializes a graph of connected object from a byte array using a given formatter.
            </summary>
            <param name="bytes">The byte array to deserialize the graph from.</param>
            <param name="caller">DTypeDesc of the caller's class context if it is known or UnknownTypeDesc if it should be determined lazily.</param>
            <returns>
            The deserialized object graph or an instance of <see cref="T:PHP.Core.PhpReference"/> containing <B>false</B> on error.
            </returns>
            <exception cref="T:PHP.Core.PhpException">Deserialization failed (Notice).</exception>
        </member>
        <member name="P:PHP.Library.Serializer.Name">
            <summary>
            Gets the serializer name (always non-null).
            </summary>
        </member>
        <member name="T:PHP.Library.Serializer.ClassContextHolder">
            <summary>
            Common base class of <c>ObjectWriter</c> and <c>ObjectReader</c> containing the cached class context functionality.
            </summary>
            <remarks>
            Class context is needed when invoking <c>__sleep</c> and <c>__wakeup</c> magic methods.
            </remarks>
        </member>
        <member name="M:PHP.Library.Serializer.ClassContextHolder.#ctor(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Initialize the ClassCOntextHolder with a known DTypeDesc.
            Use UnknownTypeDesc.Singleton to specify an unknown caller. In this case the caller will be determined when needed.
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:PHP.Library.Serializer.ClassContextHolder.#ctor(PHP.Library.Serializer.ClassContextHolder)">
            <summary>
            Copies info from already used ClassContextHolder. It reuses the holder iff class context was already initialized.
            </summary>
            <param name="holder">Exiting class context holder with potentionaly already obtained class context.</param>
        </member>
        <member name="F:PHP.Library.Serializer.ClassContextHolder._classContext">
            <summary>
            Holds the current class context (a type derived from <see cref="T:PHP.Core.Reflection.DObject"/> in whose
            scope the calling code is executing). Initialized lazily.
            </summary>
        </member>
        <member name="F:PHP.Library.Serializer.ClassContextHolder.classContextIsValid">
            <summary>
            Invalid class context singleton. The initial value for <see cref="F:PHP.Library.Serializer.ClassContextHolder._classContext"/>.
            </summary>
        </member>
        <member name="P:PHP.Library.Serializer.ClassContextHolder.ClassContext">
            <summary>
            Gets or sets the current class context. See <see cref="F:PHP.Library.Serializer.ClassContextHolder._classContext"/>.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectWriter.writer">
            <summary>
            The stream writer to write serialized data to.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectWriter.sequenceNumber">
            <summary>
            Object ID counter used by the <B>r</B> and <B>R</B> tokens.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.#ctor(PHP.Core.ScriptContext,System.IO.StreamWriter,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates a new <see cref="T:PHP.Library.PhpFormatter.ObjectWriter"/> with a given <see cref="T:System.IO.StreamWriter"/>.
            </summary>
            <param name="context">The current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="writer">The writer to write serialized data to.</param>
            <param name="caller">DTypeDesc of the caller's class context if it is known or UnknownTypeDesc if it should be determined lazily.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.Serialize(System.Object)">
            <summary>
            Serializes an object or graph of objects to <see cref="F:PHP.Library.PhpFormatter.ObjectWriter.writer"/>.
            </summary>
            <param name="graph">The object (graph) to serialize.</param>
            <remarks>
            This is just a switch over <paramref name="graph"/>'s type that delegates the task
            to one of <see cref="M:PHP.Library.PhpFormatter.ObjectWriter.WriteNull"/>, <see cref="M:PHP.Library.PhpFormatter.ObjectWriter.WriteBoolean(System.Boolean)"/>, <see cref="M:PHP.Library.PhpFormatter.ObjectWriter.WriteInteger(System.Int64)"/>,
            <see cref="M:PHP.Library.PhpFormatter.ObjectWriter.WriteDouble(System.Double)"/>, <see cref="M:PHP.Library.PhpFormatter.ObjectWriter.WriteString(System.String)"/>, <see cref="M:PHP.Library.PhpFormatter.ObjectWriter.WriteReference(PHP.Core.PhpReference)"/>,
            <see cref="M:PHP.Library.PhpFormatter.ObjectWriter.WriteBinaryData(System.Byte[])"/>, <see cref="M:PHP.Library.PhpFormatter.ObjectWriter.WriteArray(PHP.Core.PhpArray)"/> and <see cref="M:PHP.Library.PhpFormatter.ObjectWriter.WriteObject(PHP.Core.Reflection.DObject)"/>.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.WriteNull">
            <summary>
            Serializes <B>Null</B>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.WriteBoolean(System.Boolean)">
            <summary>
            Serializes a bool value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.WriteInteger(System.Int64)">
            <summary>
            Serializes an integer.
            </summary>
            <param name="value">The integer.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.WriteDouble(System.Double)">
            <summary>
            Serializes a double.
            </summary>
            <param name="value">The double.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.WriteString(System.String)">
            <summary>
            Serializes a string.
            </summary>
            <param name="value">The string.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.WriteBinaryData(System.Byte[])">
            <summary>
            Serializes binary data.
            </summary>
            <param name="value">The data.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.WriteReference(PHP.Core.PhpReference)">
            <summary>
            Serializes a <see cref="T:PHP.Core.PhpReference"/>.
            </summary>
            <param name="value">The reference.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.WriteArray(PHP.Core.PhpArray)">
            <summary>
            Serializes a <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
            <param name="value">The array.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.WriteObject(PHP.Core.Reflection.DObject)">
            <summary>
            Serializes a <see cref="T:PHP.Core.Reflection.DObject"/>.
            </summary>
            <param name="value">The object.</param>
            <remarks>Avoids redundant serialization of the same object by using <see cref="P:PHP.Library.PhpFormatter.ObjectWriter.serializedRefs"/>.</remarks>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.WritePhpObjectInternal(PHP.Core.Reflection.DObject)">
            <summary>
            Serializes <see cref="T:PHP.Core.Reflection.DObject"/> using PHP serialization.
            </summary>
            <param name="value">The object.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.WriteClrObjectInternal(System.Object)">
            <summary>
            Serializes an object using .NET binary formatter.
            </summary>
            <param name="realObject">The object.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.WriteSleepResult(PHP.Core.Reflection.DObject,PHP.Core.PhpArray)">
            <summary>
            Serializes properties whose names have been returned by <c>__sleep</c>.
            </summary>
            <param name="value">The instance containing the properties to serialize.</param>
            <param name="propertiesToSerialize">The array containing names of the properties to serialize.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectWriter.WriteAllProperties(PHP.Core.Reflection.DObject,System.Boolean)">
            <summary>
            Serializes all properties of a given instance.
            </summary>
            <param name="value">The instance containing the properties to serialize.</param>
            <param name="avoidPicName">If <B>true</B>, the property named <c>__PHP_Incomplete_Class_Name</c>
            should not be serialized.</param>
        </member>
        <member name="P:PHP.Library.PhpFormatter.ObjectWriter.serializedRefs">
            <summary>
            Maintains a sequence number for every <see cref="T:PHP.Core.Reflection.DObject"/> and <see cref="T:PHP.Core.PhpReference"/>
            that have already been serialized.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpFormatter.ObjectReader">
            <summary>
            Implements the deserialization functionality. Deserializes the data on the provided
            <see cref="T:System.IO.Stream"/> and reconstitutes the graph of objects.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.stream">
            <summary>
            The stream to read serialized data from.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.encoding">
            <summary>
            Encoding to be used for conversion from binary to unicode strings.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.atoms">
            <summary>
            List of objects deserialized from the reader.
            </summary>
            <remarks>
            In its first phase, the deserializer reads the input stream token by token and stores the
            deserialized items to this <see cref="T:System.Collections.Generic.List`1"/>. If a proper back-reference (<B>&amp;</B>)
            is encountered, the referenced item is converted to <see cref="T:PHP.Core.PhpReference"/> and a
            <see cref="T:PHP.Library.PhpFormatter.ObjectReader.BackReference"/> instance is stored to <see cref="F:PHP.Library.PhpFormatter.ObjectReader.atoms"/>. End of array item and
            object property lists are delimited by the <see cref="F:PHP.Library.PhpFormatter.ObjectReader.delimiter"/> singleton. In the second phase,
            after the whole stream has been read, the object graph is built from this list (see
            <see cref="M:PHP.Library.PhpFormatter.ObjectReader.BuildObjectGraph"/>).
            </remarks>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.sequenceMap">
            <summary>
            Maps sequence numbers used in the serialized stream to indices in the <see cref="F:PHP.Library.PhpFormatter.ObjectReader.atoms"/>
            list.
            </summary>
            <remarks>
            This <see cref="T:System.Collections.Generic.List`1"/> is built simultaneously with <see cref="F:PHP.Library.PhpFormatter.ObjectReader.atoms"/> during the
            first "parsing" phase.
            </remarks>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.lookAhead">
            <summary>
            The lookahead symbol of the parser input (i.e. the <see cref="M:PHP.Library.PhpFormatter.ObjectReader.Consume"/>).
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.unicodeMode">
            <summary>
            Tells whether Consume methods are in Unicode reading mode. Legacy only, will be removed.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.lastUnicodeCharacterPos">
            <summary>
            Used for switching back from Unicode mode. Legacy only, will be removed.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.miniByteBuffer">
            <summary>
            Used by Unicode consume to buffer bytes and read characters, if possible.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.miniCharBuffer">
            <summary>
            Used by Unicode consume to buffer chars.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.decoder">
            <summary>
            Used by Unicode consume to decode characters;
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.endOfStream">
            <summary>
            If <B>true</B>, there are no more characters in the input stream.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.skipSequenceNumber">
            <summary>
            If <B>true</B>, the next item being added to the <see cref="F:PHP.Library.PhpFormatter.ObjectReader.atoms"/> list should not be
            assigned a sequence number.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.delimiter">
            <summary>
            Marks ends of array items and ends of object properties in the <see cref="F:PHP.Library.PhpFormatter.ObjectReader.atoms"/> list.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.atomCounter">
            <summary>
            Current position in the <see cref="F:PHP.Library.PhpFormatter.ObjectReader.atoms"/> list during object graph building.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.GetTemporaryStringBuilder(System.Int32)">
            <summary>
            Temporarily used <see cref="T:System.Text.StringBuilder"/>. Remember it to save GC.
            This method always returns the same instance of <see cref="T:System.Text.StringBuilder"/>, it will always reset its <see cref="P:System.Text.StringBuilder.Length"/> to <c>0</c>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.#ctor(PHP.Core.ScriptContext,System.IO.Stream,System.Text.Encoding,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates a new <see cref="T:PHP.Library.PhpFormatter.ObjectReader"/> with a given <see cref="T:System.IO.StreamReader"/>.
            </summary>
            <param name="context">The current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="stream">The stream to read serialized data from.</param>
            <param name="encoding">Encoding used to read serialized strings.</param>
            <param name="caller">DTypeDesc of the caller's class context if it is known or UnknownTypeDesc if it should be determined lazily.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ThrowUnexpected">
            <summary>
            Throws a <see cref="T:System.Runtime.Serialization.SerializationException"/> due to an unexpected character.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ThrowEndOfStream">
            <summary>
            Throws a <see cref="T:System.Runtime.Serialization.SerializationException"/> due to an unexpected end of stream.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ThrowInvalidDataType">
            <summary>
            Throws a <see cref="T:System.Runtime.Serialization.SerializationException"/> due to an data type.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ThrowInvalidLength">
            <summary>
            Throws a <see cref="T:System.Runtime.Serialization.SerializationException"/> due to an invalid length marker.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ThrowInvalidReference">
            <summary>
            Throws a <see cref="T:System.Runtime.Serialization.SerializationException"/> due to an invalid back-reference.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.Consume">
            <summary>
            Consumes the look ahead character and moves to the next character in the input stream.
            </summary>
            <returns>The old (consumed) look ahead character.</returns>
            <remarks>The consumed value is 8-bit, always in range 0x00 - 0xff.</remarks>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ConsumeLegacy">
            <summary>
            Consumes Unicode character based on encoding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.Consume(System.Char)">
            <summary>
            Consumes a given look ahead character and moves to the next character in the input stream.
            </summary>
            <param name="ch">The character that should be consumed.</param>
            <remarks>If <paramref name="ch"/> does not match current look ahead character,
            <see cref="M:PHP.Library.PhpFormatter.ObjectReader.ThrowUnexpected"/> is called.</remarks>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.TryConsume(System.Char)">
            <summary>
            Tries to consume a given look ahead character and, if successful, moves to the next character in the input stream.
            </summary>
            <param name="ch">The character that should be consumed.</param>
            <remarks>If <paramref name="ch"/> does not match current look ahead character,
            <see cref="M:PHP.Library.PhpFormatter.ObjectReader.ThrowUnexpected"/> is called.</remarks>
            <returns>True if a character was successfully consumed, otherwise false.</returns>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.AddAtom(System.Object)">
            <summary>
            Adds an item to the <see cref="F:PHP.Library.PhpFormatter.ObjectReader.atoms"/> list and optionally assigns a sequence number to it.
            </summary>
            <param name="obj">The item to add.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.IsDigit(System.Char)">
            <summary>
            Quickly check if the look ahead byte is digit. Assumes the value is in range 0x00 - 0xff.
            </summary>
            <param name="lookAhead">The lookAhead byte value.</param>
            <returns>True if value is in range '0'-'9'.</returns>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.Digit(System.Char)">
            <summary>
            Quickly determine the numeric value of given lookAhead byte.
            </summary>
            <param name="lookAhead">The lookAhead byte value.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.Parse">
            <summary>
            The top-level parser method. 
            </summary>
            <remarks>Just a switch over the look ahead characters that delegates the work to one of
            <see cref="M:PHP.Library.PhpFormatter.ObjectReader.ParseNull"/>, <see cref="M:PHP.Library.PhpFormatter.ObjectReader.ParseBoolean"/>, <see cref="M:PHP.Library.PhpFormatter.ObjectReader.ParseInteger"/>, <see cref="M:PHP.Library.PhpFormatter.ObjectReader.ParseDouble"/>,
            <see cref="M:PHP.Library.PhpFormatter.ObjectReader.ParseString"/>, <see cref="M:PHP.Library.PhpFormatter.ObjectReader.ParseArray"/>, <see cref="M:PHP.Library.PhpFormatter.ObjectReader.ParseObject(System.Boolean)"/>, <see cref="M:PHP.Library.PhpFormatter.ObjectReader.ParseReference"/>,
            <see cref="M:PHP.Library.PhpFormatter.ObjectReader.ParseObjectRef"/>.</remarks>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ReadInteger">
            <summary>
            Reads a signed 64-bit integer number from the <see cref="F:PHP.Library.PhpFormatter.ObjectReader.stream"/>.
            </summary>
            <returns>The integer.</returns>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ReadDouble">
            <summary>
            Reads a double-precision floating point number from the <see cref="F:PHP.Library.PhpFormatter.ObjectReader.stream"/>.
            </summary>
            <returns>The double.</returns>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ReadString(System.Int32)">
            <summary>
            Reads a string with a given length surrounded by quotes from the <see cref="F:PHP.Library.PhpFormatter.ObjectReader.stream"/>.
            </summary>
            <param name="length">The expected length of the string.</param>
            <returns>Byte array or null if string appears to be unicode (old functionality of serialize).</returns>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ReadStringUnicode(System.Int32)">
            <summary>
            Reads a string with a given length surrounded by quotes from the <see cref="F:PHP.Library.PhpFormatter.ObjectReader.stream"/>.
            </summary>
            <param name="length">The expected length of the string.</param>
            <returns>The string or null.</returns>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ReadStringLegacy(System.Int32)">
            <summary>
            LEGACY functionality, will be removed in future.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ParseNull">
            <summary>
            Parses the <B>N</B> token.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ParseBoolean">
            <summary>
            Parses the <B>b</B> token.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ParseInteger">
            <summary>
            Parses the <B>i</B> token.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ParseDouble">
            <summary>
            Parses the <B>d</B> token.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ParseString">
            <summary>
            Parses the <B>s</B> token.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ParseArray">
            <summary>
            Parses the <B>a</B> token.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ParseObject(System.Boolean)">
            <summary>
            Parses the <B>O</B> and <B>C</B> tokens.
            </summary>
            <param name="serializable">If <B>true</B>, the last token eaten was <B>C</B>, otherwise <B>O</B>.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ParseClrObject">
            <summary>
            Parses the <B>T</B> token.
            </summary>
            <remarks>Expects CLR object formatted using <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.</remarks>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ParseReference">
            <summary>
            Parses the <B>R</B> token.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.ParseObjectRef">
            <summary>
            Parses the <B>r</B> token.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.BuildObjectGraph">
            <summary>
            Builds the object graph from <see cref="F:PHP.Library.PhpFormatter.ObjectReader.atoms"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.BuildDObject(PHP.Core.Reflection.DObject)">
            <summary>
            Builds a <see cref="T:PHP.Core.Reflection.DObject"/> from atoms (the object itself given as parameter).
            </summary>
            <param name="obj">The instance.</param>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.Deserialize">
            <summary>
            Deserializes the data from the <see cref="F:PHP.Library.PhpFormatter.ObjectReader.stream"/> and reconstitutes the graph of objects.
            </summary>
            <returns>The top object of the deserialized graph.</returns>
        </member>
        <member name="T:PHP.Library.PhpFormatter.ObjectReader.BackReference">
            <summary>
            Intermediate representation of a <B>r</B> or <B>R</B> record in serialized stream.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.BackReference.index">
            <summary>
            The index referenced by this back-reference record.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpFormatter.ObjectReader.BackReference.isProper">
            <summary>
            If <B>true</B>, this is a proper <B>&amp;</B> reference (<B>R</B>), if <B>false</B>,
            this is an object instance reference (<B>r</B>) following the PHP 5 reference
            semantics in objects.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpFormatter.ObjectReader.BackReference.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:PHP.Library.PhpFormatter.ObjectReader.BackReference"/> with a given index.
            </summary>
            <param name="index">The index of the record being referred to.</param>
            <param name="isProper">Indicates whether this is a <B>&amp;</B> reference, or
            just object identity (valid only for objects - class instances).</param>
        </member>
        <member name="P:PHP.Library.PhpFormatter.ObjectReader.BackReference.Index">
            <summary>
            Returns the index that is being referred to.
            </summary>
        </member>
        <member name="P:PHP.Library.PhpFormatter.ObjectReader.BackReference.IsProper">
            <summary>
            Returns <B>true</B> is this a <B>&amp;</B> reference. See <see cref="F:PHP.Library.PhpFormatter.ObjectReader.BackReference.isProper"/>.
            </summary>
        </member>
        <member name="T:PHP.Library.AssertOption">
            <summary>
            Assertion options.
            </summary>
        </member>
        <member name="F:PHP.Library.AssertOption.Active">
            <summary>
            Whether assertions are evaluated.
            </summary>
        </member>
        <member name="F:PHP.Library.AssertOption.ReportWarning">
            <summary>
            Whether an error is reported if assertion fails.
            </summary>
        </member>
        <member name="F:PHP.Library.AssertOption.Terminate">
            <summary>
            Whether script execution is terminated if assertion fails.
            </summary>
        </member>
        <member name="F:PHP.Library.AssertOption.Quiet">
            <summary>
            Whether to disable error reporting during assertion evaluation.
            </summary>
        </member>
        <member name="F:PHP.Library.AssertOption.Callback">
            <summary>
            The user callback to be called if assertion fails. 
            Can be a <B>null</B> reference which means no function is called.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpIni">
            <summary>
            Class manipulating PHP configuration. 
            The class is provided only for backward compatibility with PHP and 
            is intended to be used only by a compiler of PHP language.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="F:PHP.Library.PhpIni.DefaultMimetype">
            <summary>
            Default value for "default_mimetype" PHP configuration option.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIni.ErrorLogSysLog">
            <summary>
            A value of "error_log" option meaning System log.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIni.DefaultCharset">
            <summary>
            Default value for "default_charset" PHP configuration option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.CoreOptionsToXml(System.Xml.XmlTextWriter,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Writes Core legacy options and their values to XML text stream.
            Skips options whose values are the same as default values of Phalanger.
            </summary>
            <param name="writer">XML writer.</param>
            <param name="options">A hashtable containing PHP names and option values. Consumed options are removed from the table.</param>
            <param name="writePhpNames">Whether to add "phpName" attribute to option nodes.</param>
        </member>
        <member name="M:PHP.Library.PhpIni.GSR(System.Boolean@,System.Boolean,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets or restores boolean option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.GSR(System.Int32@,System.Int32,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets or restores integer option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.GSR(System.Double@,System.Double,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets or restores double option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.GSR(System.String@,System.String,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets or restores string option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.GSR(PHP.Core.PhpCallback@,PHP.Core.PhpCallback,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets or restores callback option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.GsrDefaultCharset(System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets or restores "default_charset" option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.GsrDefaultMimetype(System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets or restores "default_mimetype" option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.GsrMemoryLimit(System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets or restores "memory_limit" option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.GsrDisableFunctions(System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets or restores "disable_functions" option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.GsrVariablesOrder(PHP.Core.LocalConfiguration,PHP.Core.LocalConfiguration,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets or restores "variables_order" option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.GsrErrorLog(PHP.Core.LocalConfiguration,PHP.Core.LocalConfiguration,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets or restores "error_log" option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.Get(System.String)">
            <summary>
            Gets the value of a configuration option.
            </summary>
            <param name="option">The option name (case sensitive).</param>
            <returns>The option old value conveted to string or <B>false</B> on error.</returns>
            <exception cref="T:PHP.Core.PhpException">The option is not supported (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpIni.Set(System.String,System.Object)">
            <summary>
            Sets the value of a configuration option.
            </summary>
            <param name="option">The option name (case sensitive).</param>
            <param name="value">The option new value.</param>
            <returns>The option old value converted to string or <B>false</B> on error.</returns>
            <exception cref="T:PHP.Core.PhpException">The option is not supported (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">The option cannot be set by script (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpIni.Restore(System.String)">
            <summary>
            Restores the value of a configuration option to its global value.
            No value is returned.
            </summary>
            <param name="option">The option name (case sensitive).</param>
            <exception cref="T:PHP.Core.PhpException">The option is not supported (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpIni.GetCfgVar(System.String)">
            <summary>
            Gets the value of a configuration option (alias for <see cref="M:PHP.Library.PhpIni.Get(System.String)"/>).
            </summary>
            <param name="option">The option name (case sensitive).</param>
            <returns>The option old value conveted to string or <B>false</B> on error.</returns>
            <exception cref="T:PHP.Core.PhpException">The option is not supported (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpIni.Alter(System.String,System.Object)">
            <summary>
            Sets the value of a configuration option (alias for <see cref="M:PHP.Library.PhpIni.Set(System.String,System.Object)"/>).
            </summary>
            <param name="option">The option name (case sensitive).</param>
            <param name="value">The option new value converted to string.</param>
            <returns>The option old value.</returns>
            <exception cref="T:PHP.Core.PhpException">The option is not supported (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">The option cannot be set by script (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpIni.GetAll">
            <summary>
            Retrieves an array of all configuration entries.
            </summary>
            <seealso cref="M:PHP.Library.PhpIni.GetAll(System.String)"/>
        </member>
        <member name="M:PHP.Library.PhpIni.GetAll(System.String)">
            <summary>
            Retrieves an array of configuration entries of a specified extension.
            </summary>
            <param name="extension">The PHP internal extension name.</param>
            <remarks>
            For each supported configuration option an entry is added to the resulting array.
            The key is the name of the option and the value is an array having three entries: 
            <list type="bullet">
              <item><c>global_value</c> - global value of the option</item>
              <item><c>local_value</c> - local value of the option</item>
              <item><c>access</c> - 7 (PHP_INI_ALL), 6 (PHP_INI_PERDIR | PHP_INI_SYSTEM) or 4 (PHP_INI_SYSTEM)</item>
            </list>
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpIni.AssertOptions(PHP.Library.AssertOption)">
            <summary>
            Gets a value of an assert option.
            </summary>
            <param name="option">The option which value to get.</param>
            <returns>The value of the option.</returns>
        </member>
        <member name="M:PHP.Library.PhpIni.AssertOptions(PHP.Library.AssertOption,System.Object)">
            <summary>
            Sets a value of an assert option.
            </summary>
            <param name="option">The option which value to get.</param>
            <param name="value">The new value for the option.</param>
            <returns>The value of the option.</returns>
        </member>
        <member name="M:PHP.Library.PhpIni.AssertOptions(PHP.Library.AssertOption,System.Object,PHP.Library.IniAction)">
            <summary>
            Implementation of <see cref="M:PHP.Library.PhpIni.AssertOptions(PHP.Library.AssertOption)"/> and <see cref="M:PHP.Library.PhpIni.AssertOptions(PHP.Library.AssertOption,System.Object)"/>.
            </summary>
            <remarks>Only gets/sets. No restore.</remarks>
        </member>
        <member name="M:PHP.Library.PhpIni.GetIncludePath">
            <summary>
            Gets a value of "include_path" option.
            </summary>
            <returns>The current value.</returns>
        </member>
        <member name="M:PHP.Library.PhpIni.SetIncludePath(System.String)">
            <summary>
            Sets a new value of "include_path" option.
            </summary>
            <returns>A previous value.</returns>
        </member>
        <member name="M:PHP.Library.PhpIni.RestoreIncludePath">
            <summary>
            Restores a value of "include_path" option from global configuration.
            No value is returned.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.GetMagicQuotesGPC">
            <summary>
            Gets a value of "magic_quotes_gpc" option.
            </summary>
            <returns>The current value.</returns>
        </member>
        <member name="M:PHP.Library.PhpIni.GetMagicQuotesRuntime">
            <summary>
            Gets a value of "magic_quotes_runtime" option.
            </summary>
            <returns>The current value.</returns>
        </member>
        <member name="M:PHP.Library.PhpIni.SetMagicQuotesRuntime(System.Boolean)">
            <summary>
            Sets a new value of "magic_quotes_runtime" option.
            </summary>
            <param name="value">The new value.</param>
            <returns>A previous value.</returns>
        </member>
        <member name="M:PHP.Library.PhpIni.ErrorReporting">
            <summary>
            Retrieves the current error reporting level.
            </summary>
            <returns>
            The bitmask of error types which are reported. Returns 0 if error reporting is disabled
            by means of @ operator.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpIni.ErrorReporting(System.Int32)">
            <summary>
            Sets a new level of error reporting.
            </summary>
            <param name="level">The new level.</param>
            <returns>The original level.</returns>
        </member>
        <member name="F:PHP.Library.PhpIni.OldUserErrorHandlers">
            <summary>
            Stores user error handlers which has been rewritten by a new one.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIni.OldUserExceptionHandlers">
            <summary>
            Stores user exception handlers which has been rewritten by a new one.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.ClearOldUserHandlers">
            <summary>
            Clears <see cref="F:PHP.Library.PhpIni.OldUserErrorHandlers"/> and <see cref="F:PHP.Library.PhpIni.OldUserExceptionHandlers"/> on request end.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.SetErrorHandler(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpCallback)">
            <summary>
            Sets user defined handler to handle errors.
            </summary>
            <param name="caller">The class context used to bind the callback.</param>
            <param name="newHandler">The user callback called to handle an error.</param>
            <returns>
            The PHP representation of previous user handler, <B>null</B> if there is no user one, or 
            <B>false</B> if <paramref name="newHandler"/> is invalid or empty.
            </returns>
            <remarks>
            Stores old user handlers on the stack so that it is possible to 
            go back to arbitrary previous user handler.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpIni.SetErrorHandler(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpCallback,System.Int32)">
            <summary>
            Sets user defined handler to handle errors.
            </summary>
            <param name="caller">The class context used to bind the callback.</param>
            <param name="newHandler">The user callback called to handle an error.</param>
            <param name="errorTypes">Error types to be handled by the handler.</param>
            <returns>
            The PHP representation of previous user handler, <B>null</B> if there is no user one, or 
            <B>false</B> if <paramref name="newHandler"/> is invalid or empty.
            </returns>
            <remarks>
            Stores old user handlers on the stack so that it is possible to 
            go back to arbitrary previous user handler.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpIni.RestoreErrorHandler">
            <summary>
            Restores the previous user error handler if there was any.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.SetExceptionHandler(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpCallback)">
            <summary>
            Sets user defined handler to handle exceptions.
            </summary>
            <param name="caller">The class context used to bind the callback.</param>
            <param name="newHandler">The user callback called to handle an exceptions.</param>
            <returns>
            The PHP representation of previous user handler, <B>null</B> if there is no user one, or 
            <B>false</B> if <paramref name="newHandler"/> is invalid or empty.
            </returns>
            <remarks>
            Stores old user handlers on the stack so that it is possible to 
            go back to arbitrary previous user handler.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpIni.RestoreExceptionHandler">
            <summary>
            Restores the previous user error handler if there was any.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.SetTimeLimit(System.Int32)">
            <summary>
            Sets the request time-out in seconds (configuration option "max_execution_time").
            No value is returned.
            </summary>
            <param name="seconds">The time-out setting for request.</param>
        </member>
        <member name="M:PHP.Library.PhpIni.IgnoreUserAbort">
            <summary>
            Get a value of a configuration option "ignore_user_abort".
            </summary>
            <returns>The current value of the option.</returns>
        </member>
        <member name="M:PHP.Library.PhpIni.IgnoreUserAbort(System.Boolean)">
            <summary>
            Sets a value of a configuration option "ignore_user_abort".
            </summary>
            <param name="value">The new value of the option.</param>
            <returns>The previous value of the option.</returns>
            <exception cref="T:PHP.Core.PhpException">Web request PHP context is not available (Warning).</exception>
        </member>
        <member name="T:PHP.Library.PhpIni.ErrorHandlerRecord">
            <summary>
            Internal record in the error handler stack.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIni.ErrorHandlerRecord.ErrorHandler">
            <summary>
            Error handler callback.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIni.ErrorHandlerRecord.ErrorTypes">
            <summary>
            Error types to be handled.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIni.ErrorHandlerRecord.#ctor(PHP.Core.PhpCallback,PHP.Core.PhpError)">
            <summary>
            Public constructor of the class.
            </summary>
            <param name="handler">Error handler callback.</param>
            <param name="errors">Error types to be handled.</param>
        </member>
        <member name="T:PHP.Library.IniAction">
            <summary>
            An action which can be performed on option.
            </summary>
        </member>
        <member name="M:PHP.Library.IniOptions.GetOption(System.String)">
            <summary>
            Gets an option by name.
            </summary>
            <param name="name">The name of the option.</param>
            <returns>Information about the option or a <B>null</B> reference if it has not been registered yet.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <B>null</B> reference.</exception>
            <remarks>Shouldn't be called before or during option registration (not thread safe for writes).</remarks>
        </member>
        <member name="M:PHP.Library.IniOptions.Register(System.String,PHP.Library.IniFlags,PHP.Library.GetSetRestoreDelegate,System.String)">
            <summary>
            Registeres a legacy configuration option. Not thread safe.
            </summary>
            <param name="name">A case-sensitive unique option name.</param>
            <param name="flags">Flags.</param>
            <param name="gsr">A delegate pointing to a method which will perform option's value getting, setting, and restoring.</param>
            <param name="extension">A case-sensitive name of the extension which the option belongs to. Can be a <B>null</B> reference.</param>
            <remarks>
            Registered options are known to <c>ini_get</c>, <c>ini_set</c>, and <c>ini_restore</c> PHP functions.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="gsr"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.ArgumentException">An option with specified name has already been registered.</exception>
        </member>
        <member name="M:PHP.Library.IniOptions.RegisterCoreOption(System.String,PHP.Library.IniFlags)">
            <summary>
            Registeres a Core option.
            </summary>
        </member>
        <member name="M:PHP.Library.IniOptions.TryGetSetRestore(System.String,System.Object,PHP.Library.IniAction,System.Boolean@)">
            <summary>
            Tries to get, set, or restore an option given its PHP name and value.
            </summary>
            <param name="name">The option name.</param>
            <param name="value">The option new value if applicable.</param>
            <param name="action">The action to be taken.</param>
            <param name="error"><B>true</B>, on failure.</param>
            <returns>The option old value.</returns>
            <exception cref="T:PHP.Core.PhpException">The option not supported (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">The option is read only but action demands write access (Warning).</exception>
        </member>
        <member name="M:PHP.Library.IniOptions.FormatOptionState(PHP.Library.IniFlags,System.Object,System.Object)">
            <summary>
            Formats a state of the specified option into <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
            <param name="flags">The option's flag.</param>
            <param name="defaultValue">A default value of the option.</param>
            <param name="localValue">A script local value of the option.</param>
            <returns>An array containig keys <c>"global_value"</c>, <c>"local_value"</c>, <c>"access"</c>.</returns>
        </member>
        <member name="M:PHP.Library.IniOptions.GetAllOptionStates(System.String,System.Collections.IDictionary)">
            <summary>
            Gets an array of options states formatted by <see cref="M:PHP.Library.IniOptions.FormatOptionState(PHP.Library.IniFlags,System.Object,System.Object)"/>.
            </summary>
            <param name="extension">An extension which options to retrieve.</param>
            <param name="result">A dictionary where to add options.</param>
            <returns>An array of option states.</returns>
            <remarks>Options already contained in <paramref name="result"/> are overwritten.</remarks>
        </member>
        <member name="P:PHP.Library.IniOptions.Count">
            <summary>
            Gets a number of currently registered options.
            </summary>
        </member>
        <member name="T:PHP.Library.IniOptions.OptionDefinition">
            <summary>
            Holds information about the option.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpIniParser">
            <summary>
            Implements the INI file parsing functionality (see the <c>parse_ini_file</c> PHP function).
            </summary>
            <remarks>
            The parser is implemented by hand using the recursive descent (LL) approach.
            Note (jakub): can be implemented using regular expressions ?
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpIniParser.ParseString(System.String)">
            <summary>
            Parse a configuration string.
            </summary>
            <param name="ini">The contents of the ini file being parsed. </param>
            <returns>The settings are returned as an associative array on success, and FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.PhpIniParser.ParseString(System.String,System.Boolean)">
            <summary>
            Parse a configuration string.
            </summary>
            <param name="ini">The contents of the ini file being parsed. </param>
            <param name="processSections">By setting the process_sections  parameter to TRUE, you get a multidimensional array, with the section names and settings included. The default for process_sections  is FALSE</param>
            <returns>The settings are returned as an associative array on success, and FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.PhpIniParser.ParseString(System.String,System.Boolean,System.Int32)">
            <summary>
            Parse a configuration string.
            </summary>
            <param name="ini">The contents of the ini file being parsed. </param>
            <param name="processSections">By setting the process_sections  parameter to TRUE, you get a multidimensional array, with the section names and settings included. The default for process_sections  is FALSE</param>
            <param name="scanner_mode">Can either be INI_SCANNER_NORMAL (default) or INI_SCANNER_RAW. If INI_SCANNER_RAW is supplied, then option values will not be parsed. </param>
            <returns>The settings are returned as an associative array on success, and FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.PhpIniParser.ParseFile(System.String)">
            <summary>
            Parses an INI-style configuration file.
            </summary>
            <param name="fileName">A file designation (may be a local file path, an URL, or whatever is accepted
            by <c>fopen</c>).</param>
            <returns>An array of key-value pairs read from the INI file.</returns>
            <exception cref="T:PHP.Core.PhpException">Parse error (Warning).</exception>
            <remarks>
            Section names and keys are converted to integers if applicable. The parser recognizes special values
            <c>true</c>, <c>on</c> and <c>yes</c> (converted to "1"); and <c>false</c>, <c>off</c>,
            <c>no</c> and <c>none</c> (converted to "").
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpIniParser.ParseFile(System.String,System.Boolean)">
            <summary>
            Parses an INI-style configuration file.
            </summary>
            <param name="fileName">A file designation (may be a local file path, an URL, or whatever is accepted
            by <c>fopen</c>).</param>
            <param name="processSections">If <B>true</B>, the returned array contains nested arrays corresponding
            to individual INI sections. If <B>false</B>, section names are completely disregarded and the returned
            array contains directly key-value pairs from all sections.</param>
            <returns>An array of key-value pairs read from the INI file.</returns>
            <exception cref="T:PHP.Core.PhpException">Parse error (Warning).</exception>
            <remarks>
            Section names and keys are converted to integers if applicable. The parser recognizes special values
            <c>true</c>, <c>on</c> and <c>yes</c> (converted to "1"); and <c>false</c>, <c>off</c>,
            <c>no</c> and <c>none</c> (converted to "").
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpIniParser.ParseFile(System.String,System.Boolean,System.Int32)">
            <summary>
            Parses an INI-style configuration file.
            </summary>
            <param name="fileName">A file designation (may be a local file path, an URL, or whatever is accepted
            by <c>fopen</c>).</param>
            <param name="processSections">If <B>true</B>, the returned array contains nested arrays corresponding
            to individual INI sections. If <B>false</B>, section names are completely disregarded and the returned
            array contains directly key-value pairs from all sections.</param>
            <param name="scanner_mode">Can either be INI_SCANNER_NORMAL (default) = 0 or INI_SCANNER_RAW = 1. If INI_SCANNER_RAW is supplied, then option values will not be parsed. </param>
            <returns>An array of key-value pairs (<paramref name="processSections"/> is <B>false</B>) or an array
            of arrays of key-value pairs (<paramref name="processSections"/> is <B>true</B>).</returns>
            <exception cref="T:PHP.Core.PhpException">Parse error (Warning).</exception>
            <remarks>
            Section names and keys are converted to integers if applicable. The parser recognizes special values
            <c>true</c>, <c>on</c> and <c>yes</c> (converted to "1"); and <c>false</c>, <c>off</c>,
            <c>no</c> and <c>none</c> (converted to "").
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpIniParser.Parse(PHP.Core.PhpStream,PHP.Library.PhpIniParser.IParserCallbacks)">
            <summary>
            Parses an INI-style configuration file.
            </summary>
            <param name="stream">A stream referring to the file to parse. Should be open in binary mode.</param>
            <param name="callbacks">Implementation of the parser callbacks invoked during parsing.</param>
            <exception cref="T:PHP.Library.PhpIniParser.ParseException">Parse error.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> or <paramref name="callbacks"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.ArgumentException">Stream is was not opened as binary.</exception>
        </member>
        <member name="F:PHP.Library.PhpIniParser.lineGetter">
            <summary>
            Object getting next lines of INI source.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIniParser.callbacks">
            <summary>
            Implementation of the parser callbacks invoked during parsing.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIniParser.line">
            <summary>
            The line read from <see cref="F:PHP.Library.PhpIniParser.lineGetter"/> that is currently being processed.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIniParser.lineNumber">
            <summary>
            Current line number.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIniParser.linePos">
            <summary>
            The position within the current <see cref="F:PHP.Library.PhpIniParser.line"/> (0-based column).
            </summary>
            <remarks>
            <c>line[linePos]</c> denotes a lookahead symbol.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpIniParser.#ctor(PHP.Core.PhpStream,PHP.Library.PhpIniParser.IParserCallbacks)">
            <summary>
            Creates a new <see cref="T:PHP.Library.PhpIniParser"/> operating on a given input stream.
            </summary>
            <param name="stream">The input stream. Should be open in binary mode.</param>
            <param name="callbacks">Implementation of the parser callbacks invoked during parsing.</param>
        </member>
        <member name="M:PHP.Library.PhpIniParser.#ctor(System.String,PHP.Library.PhpIniParser.IParserCallbacks)">
            <summary>
            Creates a new <see cref="T:PHP.Library.PhpIniParser"/> operating on a given input stream.
            </summary>
            <param name="text">The input INI file content.</param>
            <param name="callbacks">Implementation of the parser callbacks invoked during parsing.</param>
        </member>
        <member name="M:PHP.Library.PhpIniParser.LoadLine">
            <summary>
            Loads the next line from <see cref="F:PHP.Library.PhpIniParser.lineGetter"/>, and updates <see cref="F:PHP.Library.PhpIniParser.line"/> and <see cref="F:PHP.Library.PhpIniParser.linePos"/>.
            </summary>
            <returns><B>true</B> if a line was successfully loaded, <B>false</B> if end-of-file was reached.</returns>
        </member>
        <member name="M:PHP.Library.PhpIniParser.Consume">
            <summary>
            Returns the lookahead symbol and cosumes it, i.e. advances the <see cref="F:PHP.Library.PhpIniParser.linePos"/>.
            <seealso cref="P:PHP.Library.PhpIniParser.LookAhead"/>
            </summary>
            <returns>The original lookahead (before advancing).</returns>
        </member>
        <member name="M:PHP.Library.PhpIniParser.Consume(System.Char)">
            <summary>
            Consumes the current lookahead symbol and compares it to a given character.
            </summary>
            <param name="ch">The character that is expected as the current lookahead symbol. If the characters
            do not match, a <see cref="T:PHP.Library.PhpIniParser.ParseException"/> is thrown.</param>
        </member>
        <member name="M:PHP.Library.PhpIniParser.ConsumeWhiteSpace">
            <summary>
            Keeps consuming the current lookahead as long as it is categorized as a white space.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIniParser.AddValue(PHP.Core.PhpArray,System.Object,System.String)">
            <summary>
            Adds a key-value pair into a <see cref="T:PHP.Core.PhpArray"/>. If a value with the same key already exists,
            a nested <see cref="T:PHP.Core.PhpArray"/> containing all values with this key is created.
            </summary>
            <param name="array">The array to add the pair to.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PHP.Library.PhpIniParser.SubstringToKey(System.Int32,System.Int32)">
            <summary>
            Converts a substring of the current <see cref="F:PHP.Library.PhpIniParser.line"/> into the array key representing a section name
            (the interior of <c>[ ]</c>) or an option name (on the left of <c>=</c>).
            </summary>
            <param name="start">The start index of the substring (within the current <see cref="F:PHP.Library.PhpIniParser.line"/>).</param>
            <param name="length">The length of the substring.</param>
            <returns>The key found at the position given by <paramref name="start"/> and <paramref name="length"/>.
            This may be either a string or an integer (decimal, hexadecimal and octal numbers are decoded).</returns>
        </member>
        <member name="M:PHP.Library.PhpIniParser.SubstringToValue(System.Int32,System.Int32)">
            <summary>
            Converts a substring of the current <see cref="F:PHP.Library.PhpIniParser.line"/> into the array value representing an option
            value (on the right of <c>=</c>).
            </summary>
            <param name="start">The start index of the substring (within the current <see cref="F:PHP.Library.PhpIniParser.line"/>).</param>
            <param name="length">The length of the substring.</param>
            <returns>The value found at the position given by <paramref name="start"/> and <paramref name="length"/>.
            This may be either a string or an integer (decimal numbers are decoded and constants are looked up).
            </returns>
        </member>
        <member name="M:PHP.Library.PhpIniParser.TopLevel">
            <summary>
            Top level parsing method. 
            </summary>
            <remarks>
            Reads and processes lines from the input stream until the end-of-file is reached. Invokes the
            <see cref="F:PHP.Library.PhpIniParser.callbacks"/> during parsing.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpIniParser.Section">
            <summary>
            Parses an INI section (<c>[&lt;section_name&gt;&lt;whitespace&gt;]&lt;whitespace&gt;</c>).
            </summary>
            <returns>The section name (either a string or an integer).</returns>
        </member>
        <member name="M:PHP.Library.PhpIniParser.Key">
            <summary>
            Parses an INI option name (<c>&lt;option_name&gt;&lt;whitespace&gt;=</c>).
            </summary>
            <returns>The option name (either a string or an integer).</returns>
        </member>
        <member name="M:PHP.Library.PhpIniParser.Value(System.Boolean@)">
            <summary>
            Parses an INI option value (<c>&quot;&lt;quoted_value&gt;</c> or <c>&lt;expression&gt;</c>).
            </summary>
            <param name="multiline">If <B>true</B>, next line of a multi-line value is expected; if <B>false</B>
            otherwise. Receives <B>true</B> if more lines should follow and <B>false</B> if this was the last one
            or the only one line.</param>
            <returns>The option value (always a string). If <paramref name="multiline"/> receives <B>true</B>,
            the return values is just a fragment and should be concatenated with subsequent return values to 
            obtain the entire option value.</returns>
        </member>
        <member name="M:PHP.Library.PhpIniParser.QuotedValue(System.Boolean@)">
            <summary>
            Parses an INI option quoted value (<c>&lt;option_value&gt;</c> or
            <c>&lt;option_value&gt;&quot;&lt;whitespace&gt;</c>).
            </summary>
            <param name="moreLinesFollow">Receives <B>true</B> if this value consists of more lines that
            should follow (i.e. right quote not found yet), <B>false</B> otherwise.</param>
            <returns>The option value (always a string). If <paramref name="moreLinesFollow"/> receives
            <B>true</B>, the return values is just a fragment and should be concatenated with subsequent
            return values to obtain the entire option value.</returns>
        </member>
        <member name="M:PHP.Library.PhpIniParser.Expression">
            <summary>
            Parses an INI option value expression (<c>&lt;literal&gt;(&amp;/|&lt;literal&gt;)*</c>).
            </summary>
            <returns>The expression value (either a string or an integer).</returns>
        </member>
        <member name="M:PHP.Library.PhpIniParser.Literal">
            <summary>
            Parses an INI option value literal (<c>&lt;whitespace&gt;(&lt;expression&gt;)&lt;whitespace&gt;</c>,
            <c>&lt;whitespace&gt;!&lt;literal&gt;</c>, <c>&lt;whitespace&gt;~&lt;literal&gt;</c> or
            <c>&lt;whitespace&gt;&lt;literal_value&gt;&lt;whitespace&gt;</c>).
            </summary>
            <returns>The literal value (either a string or an integer).</returns>
        </member>
        <member name="P:PHP.Library.PhpIniParser.LookAhead">
            <summary>
            Returns the lookahead symbol which is either <c>line[linePos]</c> or <see cref="F:PHP.Library.PhpIniParser.Tokens.EndOfLine"/>
            if there are no more characters in the current line.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpIniParser.ScannerMode">
            <summary>
            Type of sorting.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIniParser.ScannerMode.Normal">
            <summary>Normal scanner mode.</summary>
        </member>
        <member name="F:PHP.Library.PhpIniParser.ScannerMode.Raw">
            <summary>Raw scanner mode.</summary>
        </member>
        <member name="T:PHP.Library.PhpIniParser.IParserCallbacks">
            <summary>
            Groups together methods that are called back by the parser during parsing.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIniParser.IParserCallbacks.ProcessSection(System.Object)">
            <summary>
            Called when an INI section is encountered.
            </summary>
            <param name="sectionName">The section name (without the enclosing brackets). Either a string or
            an integer.</param>
        </member>
        <member name="M:PHP.Library.PhpIniParser.IParserCallbacks.ProcessOption(System.Object,System.String)">
            <summary>
            Called when an option (i.e. a key-value pair) is encountered.
            </summary>
            <param name="key">The key. Either a string or an integer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PHP.Library.PhpIniParser.IParserCallbacks.GetConstantValue(System.String)">
            <summary>
            Called when a token, which might possibly denote a constant, should be resolved.
            </summary>
            <param name="name">The constant name.</param>
            <returns>The constant value. Should be either a string or an integer. Usually, when the
            implementing method is unable to resolve the constant, it simply returns <paramref name="name"/>.
            </returns>
        </member>
        <member name="T:PHP.Library.PhpIniParser.ArrayBuilder">
            <summary>
            Provides an array-building implementation of the the parser callbacks.
            </summary>
            <remarks>
            The format of the resulting <see cref="T:PHP.Core.PhpArray"/> complies to the <c>parse_ini_file</c>
            return value.
            </remarks>
        </member>
        <member name="F:PHP.Library.PhpIniParser.ArrayBuilder.result">
            <summary>
            The resulting array.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIniParser.ArrayBuilder.currentSection">
            <summary>
            The section currently being processed.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIniParser.ArrayBuilder.scriptContext">
            <summary>
            The <see cref="T:PHP.Core.ScriptContext"/> used to lookup constants.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIniParser.ArrayBuilder.processSections">
            <summary>
            A flag that affects the way the <see cref="F:PHP.Library.PhpIniParser.ArrayBuilder.result"/> is built up.
            </summary>
            <remarks>
            If <B>true</B>, the resulting array contains nested arrays corresponding to individual
            INI sections. If <B>false</B>, section names are completely disregarded and the resulting
            array contains directly key-value pairs from all sections.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpIniParser.ArrayBuilder.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Creates a new <see cref="T:PHP.Library.PhpIniParser.ArrayBuilder"/>.
            </summary>
            <param name="scriptContext">The <see cref="T:PHP.Core.ScriptContext"/> used to lookup constants or a <B>null</B> reference.</param>
            <param name="processSections">If <B>true</B>, the resulting array contains nested arrays
            corresponding to individual INI sections. If <B>false</B>, section names are completely
            disregarded and the resulting array contains directly key-value pairs from all sections.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scriptContext"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.PhpIniParser.ArrayBuilder.ProcessSection(System.Object)">
            <summary>
            Called when an INI section is encountered.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIniParser.ArrayBuilder.ProcessOption(System.Object,System.String)">
            <summary>
            Called when an option (i.e. a key-value pair) is encountered.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIniParser.ArrayBuilder.GetConstantValue(System.String)">
            <summary>
            Called when a token, which might possibly denote a constant, should be resolved.
            </summary>
        </member>
        <member name="P:PHP.Library.PhpIniParser.ArrayBuilder.Result">
            <summary>
            Returns the resulting array.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpIniParser.Tokens">
            <summary>
            Contains definition of (one-character) tokens that are relevant for INI files.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpIniParser.ParseException">
            <summary>
            An exception thrown by the parser when an error occurs.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIniParser.ParseException.lineNumber">
            <summary>
            Number of the line where the parse error occured.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIniParser.ParseException.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:PHP.Library.PhpIniParser.ParseException"/>.
            </summary>
            <param name="lineNumber">Number of the line where the parse error occured.</param>
        </member>
        <member name="P:PHP.Library.PhpIniParser.ParseException.LineNumber">
            <summary>
            Returns the number of the line where the parse error occured.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpIniParser.LineGetter">
            <summary>
            Interface for getting next line from the source.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpIniParser.LineGetter.GetLine">
            <summary>
            Get the next line from the source. Every line must ends with "\n".
            </summary>
            <returns>Next line or null if you reach the end of the source.</returns>
        </member>
        <member name="T:PHP.Library.PhpIniParser.LineGetterStream">
            <summary>
            Getting next line from the PhpStream.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpIniParser.LineGetterStream.stream">
            <summary>
            A stream representing the input INI file, instead of text.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpIniParser.LineGetterString">
            <summary>
            Getting  next line from the string.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpTokenizer">
            <summary>
            Provides functions and constant related to PHP tokenizer.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpTokenizer.GetAllTokens(System.String)">
            <summary>
            Tokenize a source source and returns a list of tokens.
            </summary>
            <returns>
            Array of items that are either token string values of for unnamed tokens
            or arrays comprising of token id and token string value.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpTokenizer.GetTokenName(PHP.Library.PhpTokenizer.Tokens)">
            <summary>
            Gets the name of the PHP grammar token.
            </summary>
            <param name="token">The token id.</param>
            <returns>The token name.</returns>
        </member>
        <member name="T:PHP.Library.PhpTokenizer.Tokens">
            <exclude/>
        </member>
        <member name="M:PHP.Library.Processes.OpenPipe(System.String,System.String)">
            <summary>
            Starts a process and creates a pipe to its standard input or output.
            </summary>
            <param name="command">The command.</param>
            <param name="mode">Pipe open mode (<c>"r"</c> or <c>"w"</c>).</param>
            <returns>Opened pipe or <B>null</B> on error.</returns>
        </member>
        <member name="M:PHP.Library.Processes.ClosePipe(PHP.Core.PhpResource)">
            <summary>
            Closes a pipe and a process opened by <see cref="M:PHP.Library.Processes.OpenPipe(System.String,System.String)"/>.
            </summary>
            <param name="pipeHandle">The pipe handle returned by <see cref="M:PHP.Library.Processes.OpenPipe(System.String,System.String)"/>.</param>
            <returns>An exit code of the process.</returns>
        </member>
        <member name="M:PHP.Library.Processes.Open(System.String,PHP.Core.PhpArray,PHP.Core.PhpArray@)">
            <summary>
            Opens a process.
            </summary>
        </member>
        <member name="M:PHP.Library.Processes.Open(System.String,PHP.Core.PhpArray,PHP.Core.PhpArray@,System.String)">
            <summary>
            Opens a process.
            </summary>
        </member>
        <member name="M:PHP.Library.Processes.Open(System.String,PHP.Core.PhpArray,PHP.Core.PhpArray@,System.String,PHP.Core.PhpArray)">
            <summary>
            Opens a process.
            </summary>
        </member>
        <member name="M:PHP.Library.Processes.Open(System.String,PHP.Core.PhpArray,PHP.Core.PhpArray@,System.String,PHP.Core.PhpArray,PHP.Core.PhpArray)">
            <summary>
            Starts a process and otpionally redirects its input/output/error streams to specified PHP streams.
            </summary>
            <param name="command"></param>
            <param name="descriptors"></param>
            Indexed array where the key represents the descriptor number (0 for STDIN, 1 for STDOUT, 2 for STDERR)
            and the value represents how to pass that descriptor to the child process. 
            A descriptor is either an opened file resources or an integer indexed arrays 
            containing descriptor name followed by options. Supported descriptors:
            <list type="bullet">
            <term><c>array("pipe",{mode})</c></term><description>Pipe is opened in the specified mode .</description>
            <term><c>array("file",{path},{mode})</c></term><description>The file is opened in the specified mode.</description>
            </list>
            <param name="pipes">
            Set to indexed array of file resources corresponding to the current process's ends of created pipes.
            </param>
            <param name="workingDirectory">
            Working directory.
            </param>
            <param name="envVariables"></param>
            <param name="options">
            Associative array containing following key-value pairs.
              <list type="bullet">
                <term>"suppress_errors"</term><description></description>
              </list>
            </param>
            <returns>
            Resource representing the process.
            </returns>
        </member>
        <member name="M:PHP.Library.Processes.Open(System.String,PHP.Core.PhpArray,PHP.Core.PhpArray,System.String,PHP.Core.PhpArray,PHP.Core.PhpArray)">
            <summary>
            Opens a process.
            </summary>
        </member>
        <member name="M:PHP.Library.Processes.GetStatus(PHP.Core.PhpResource)">
            <summary>
            
            </summary>
            <param name="process"></param>
            <returns>
            <list type="bullet">
            <term>"command"</term><description>The command string that was passed to proc_open()</description> 
            <term>"pid"</term><description>process id</description>
            <term>"running"</term><description>TRUE if the process is still running, FALSE if it has terminated</description>  
            <term>"signaled"</term><description>TRUE if the child process has been terminated by an uncaught signal. Always set to FALSE on Windows.</description>
            <term>"stopped"</term><description>TRUE if the child process has been stopped by a signal. Always set to FALSE on Windows.</description>  
            <term>"exitcode"</term><description>the exit code returned by the process (which is only meaningful if running is FALSE)</description>  
            <term>"termsig"</term><description>the number of the signal that caused the child process to terminate its execution (only meaningful if signaled is TRUE)</description>  
            <term>"stopsig"</term><description>the number of the signal that caused the child process to stop its execution (only meaningful if stopped is TRUE)</description>  
            </list>
            </returns>
        </member>
        <member name="T:PHP.Library.PerlRegexOptions">
            <summary>
            Perl regular expression specific options that are not captured by .NET <see cref="T:System.Text.RegularExpressions.RegexOptions"/> or by
            transformation of the regular expression itself.
            </summary>
        </member>
        <member name="T:PHP.Library.PerlRegExp">
            <summary>
            Implements PERL extended regular expressions as they are implemented in PHP.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Quote(System.String)">
            <summary>
            <para>Escapes all characters that have special meaning in regular expressions. These characters are
            . \\ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | :</para>
            </summary>
            <param name="str">String with characters to escape.</param>
            <returns>String with escaped characters.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Quote(System.String,System.String)">
            <summary>
            <para>Escapes all characters that have special meaning in regular expressions. These characters are
            . \\ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : plus <paramref name="delimiter"/>.</para>
            </summary>
            <param name="str">String with characters to escape.</param>
            <param name="delimiter">Character to escape in additon to general special characters.</param>
            <returns>String with escaped characters.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Quote(System.String,System.Char,System.Boolean)">
            <summary>
            Escapes all characters with special meaning in Perl regular expressions and char
            <paramref name="delimiter"/>.
            </summary>
            <param name="str">String to quote.</param>
            <param name="delimiter">Additional character to quote.</param>
            <param name="delimiterUsed">Whether the delimiter should be quoted.</param>
            <returns>String with quoted characters.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Grep(System.Object,PHP.Core.PhpArray)">
            <summary>
            Returns the array consisting of the elements of the <paramref name="input"/> array that match
            the given <paramref name="pattern"/>.
            </summary>
            <param name="pattern">Pattern to be matched against each array element.</param>
            <param name="input">Array of strings to match.</param>
            <returns>Array containing only values from <paramref name="input"/> that match <paramref name="pattern"/>
            </returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Grep(System.Object,PHP.Core.PhpArray,PHP.Library.PerlRegExp.GrepFlags)">
            <summary>
            <para>Returns the array consisting of the elements of the <paramref name="input"/> array that match
            the given <paramref name="pattern"/>.</para>
            <para>If <see cref="F:PHP.Library.PerlRegExp.GrepFlags.GrepInvert"/> flag is specified, resulting array will contain
            elements that do not match the <paramref name="pattern"/>.</para>
            </summary>
            <param name="pattern">Pattern to be matched against each array element.</param>
            <param name="input">Array of strings to match.</param>
            <param name="flags">Flags modifying which elements contains resulting array.</param>
            <returns>Array containing only values from <paramref name="input"/> that match <paramref name="pattern"/>.
            (Or do not match according to <paramref name="flags"/> specified.)</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Match(System.Object,System.Object)">
            <summary>
            Searches <paramref name="data"/> for a match to the regular expression given in <paramref name="pattern"/>.
            The search is stopped after the first match is found.
            </summary>
            <param name="pattern">Perl regular expression.</param>
            <param name="data">String to search.</param>
            <returns>0 if there is no match and 1 if the match was found.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Match(System.Object,System.Object,PHP.Core.PhpArray@)">
            <summary>
            <para>Searches <paramref name="data"/> for a match to the regular expression given in
            <paramref name="pattern"/>. The search is stopped after the first match is found.</para>
            <para><paramref name="matches"/> contains an array with matches. At index 0 is the whole string that
            matches the <paramref name="pattern"/>, from index 1 are stored matches for parenthesized subpatterns.</para>
            </summary>
            <param name="pattern">Perl regular expression.</param>
            <param name="data">String or string of bytes to search.</param>
            <param name="matches">Array containing matched strings.</param>
            <returns>0 if there is no match and 1 if the match was found.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Match(System.Object,System.Object,PHP.Core.PhpArray@,PHP.Library.PerlRegExp.MatchFlags)">
            <summary>
            <para>Searches <paramref name="data"/> for a match to the regular expression given in
            <paramref name="pattern"/>. The search is stopped after the first match is found.</para>
            <para><paramref name="matches"/> contains an array with matches. At index 0 is the whole string that
            matches the <paramref name="pattern"/>, from index 1 are stored matches for parenthesized subpatterns.</para>
            <para>Flag <see cref="F:PHP.Library.PerlRegExp.MatchFlags.OffsetCapture"/> can be specified and it means that the
            <paramref name="matches"/> array will not contain substrings, but another array where the substring
            is stored at index [0] and index [1] is its offset in <paramref name="data"/>.</para>
            </summary>
            <param name="pattern">Perl regular expression.</param>
            <param name="data">String to search.</param>
            <param name="matches">Array containing matched strings.</param>
            <param name="flags"><see cref="T:PHP.Library.PerlRegExp.MatchFlags"/>.</param>
            <returns>0 if there is no match and 1 if the match was found.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Match(System.Object,System.Object,PHP.Core.PhpArray@,PHP.Library.PerlRegExp.MatchFlags,System.Int32)">
            <summary>
            <para>Searches <paramref name="data"/> for a match to the regular expression given in
            <paramref name="pattern"/>. The search is stopped after the first match is found.</para>
            <para><paramref name="matches"/> contains an array with matches. At index 0 is the whole string that
            matches the <paramref name="pattern"/>, from index 1 are stored matches for parenthesized subpatterns.</para>
            <para>Flag <see cref="F:PHP.Library.PerlRegExp.MatchFlags.OffsetCapture"/> can be specified and it means that the
            <paramref name="matches"/> array will not contain substrings, but another array where the substring
            is stored at index [0] and index [1] is its offset in <paramref name="data"/>. <paramref name="offset"/>
            specifies where the search should start. (Note that it is not the same as passing a substring of
            <paramref name="data"/>.)</para>
            </summary>
            <param name="pattern">Perl regular expression.</param>
            <param name="data">String or string of bytes to search.</param>
            <param name="matches">Array containing matched strings.</param>
            <param name="flags"><see cref="T:PHP.Library.PerlRegExp.MatchFlags"/>.</param>
            <param name="offset">Offset to <paramref name="data"/> where the match should start.</param>
            <returns>0 if there is no match and 1 if the match was found.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.MatchAll(System.Object,System.Object,PHP.Core.PhpArray@)">
            <summary>
            <para>Searches <paramref name="data"/> for all matches to the regular expression given in pattern and puts
            them in <paramref name="matches"/> array. The matches are sorted in "Pattern Order" i. e. at zero
            index is an array containing whole matches, at first index is an array containing number 1 subpatterns
            for all matches etc.</para>
            <para>Next match search starts just after the previous match.</para>
            </summary>
            <param name="pattern">Regular expression.</param>
            <param name="data">String or string of bytes to search.</param>
            <param name="matches">Output array containing matches found.</param>
            <returns>Number of whole matches.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.MatchAll(System.Object,System.Object,PHP.Core.PhpArray@,PHP.Library.PerlRegExp.MatchFlags)">
            <summary>
            <para>Searches <paramref name="data"/> for all matches to the regular expression given in pattern and puts
            them in <paramref name="matches"/> array. The matches are sorted in "Pattern Order" i. e. at zero
            index is an array containing whole matches, at first index is an array containing number 1 subpatterns
            for all matches etc.</para>
            <para>Next match search starts just after the previous match.</para>
            <para>If <see cref="F:PHP.Library.PerlRegExp.MatchFlags.PatternOrder"/> flag is specified, <paramref name="matches"/> array
            contains an array of full pattern matches at index 0, an array of strings matched to
            first parenthesized substring at index 1 etc. If <see cref="F:PHP.Library.PerlRegExp.MatchFlags.SetOrder"/> is set, at index 0 is the first
            set of matches (full match and substrings), at index 1 full set for second match etc.</para>
            <para>Flag <see cref="F:PHP.Library.PerlRegExp.MatchFlags.OffsetCapture"/> indicates that instead the matched substring should
            be an array containing the substring at index 0 and position at original string at index 1.</para>
            </summary>
            <param name="pattern">Regular expression.</param>
            <param name="data">String or string of bytes to search.</param>
            <param name="matches">Output array containing matches found.</param>
            <param name="flags">Flags for specifying order of results in <paramref name="matches"/> array (Set Order,
            Pattern Order) and whether positions of matches should be added to results (Offset Capture).</param>
            <returns>Number of whole matches.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.MatchAll(System.Object,System.Object,PHP.Core.PhpArray@,PHP.Library.PerlRegExp.MatchFlags,System.Int32)">
            <summary>
            <para>Searches <paramref name="data"/> for all matches to the regular expression given in pattern and puts
            them in <paramref name="matches"/> array. The matches are sorted in "Pattern Order" i. e. at zero
            index is an array containing whole matches, at first index is an array containing number 1 subpatterns
            for all matches etc.</para>
            <para>Next match search starts just after the previous match.</para>
            <para>If <see cref="F:PHP.Library.PerlRegExp.MatchFlags.PatternOrder"/> flag is specified, <paramref name="matches"/> array
            contains at index 0 an array of full pattern matches, at index 1 is an array of strings matched to
            first parenthesized substring etc. If <see cref="F:PHP.Library.PerlRegExp.MatchFlags.SetOrder"/> is set, at index 0 is the first
            set of matches (full match and substrings), at index 1 full set for second match etc.</para>
            <para>Flag <see cref="F:PHP.Library.PerlRegExp.MatchFlags.OffsetCapture"/> indicates that instead the matched substring should
            be an array containing the substring at index 0 and position at original string at index 1.</para>
            </summary>
            <param name="pattern">Regular expression.</param>
            <param name="data">String or string of bytes to search.</param>
            <param name="matches">Output array containing matches found.</param>
            <param name="flags">Flags for specifying order of results in <paramref name="matches"/> array (Set Order,
            Pattern Order) and whether positions of matches should be added to results (Offset Capture).</param>
            <param name="offset">Offset in <paramref name="data"/> where the search should begin. Note that it is
            not equal to passing an substring as this parameter because of ^ (start of the string or line) modifier.
            </param>
            <returns>Number of whole matches.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Match(System.Object,System.Object,PHP.Core.PhpArray@,PHP.Library.PerlRegExp.MatchFlags,System.Int32,System.Boolean)">
            <summary>
            Private method implementing functions from match family.
            </summary>
            <param name="pattern">Perl regular expression match pattern.</param>
            <param name="data">String to search matches.</param>
            <param name="matches">An array containing matches found.</param>
            <param name="flags">Flags for searching.</param>
            <param name="offset">Offset to <paramref name="pattern"/> where the search should start.</param>
            <param name="matchAll"><B>True</B> if all matches should be found, <B>false</B> if only the first
            is enough.</param>
            <returns>Number of times the <paramref name="pattern"/> matches.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Split(System.Object,System.Object)">
            <summary>
            Splits <paramref name="data"/> along boundaries matched by <paramref name="pattern"/> and returns
            an array containing substrings.
            </summary>
            <param name="pattern">Regular expression to match to boundaries.</param>
            <param name="data">String string of bytes to split.</param>
            <returns>An array containing substrings.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Split(System.Object,System.Object,System.Int32)">
            <summary>
            <para>Splits <paramref name="data"/> along boundaries matched by <paramref name="pattern"/> and returns
            an array containing substrings.</para>
            <para><paramref name="limit"/> specifies the maximum number of strings returned in the resulting
            array. If (limit-1) matches is found and there remain some characters to match whole remaining
            string is returned as the last element of the array.</para>
            </summary>
            <param name="pattern">Regular expression to match to boundaries.</param>
            <param name="data">String string of bytes to split.</param>
            <param name="limit">Max number of elements in the resulting array.</param>
            <returns>An array containing substrings.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Split(System.Object,System.Object,System.Int32,PHP.Library.PerlRegExp.SplitFlags)">
            <summary>
            <para>Splits <paramref name="data"/> along boundaries matched by <paramref name="pattern"/> and returns
            an array containing substrings.</para>
            <para><paramref name="limit"/> specifies the maximum number of strings returned in the resulting
            array. If (limit-1) matches is found and there remain some characters to match whole remaining
            string is returned as the last element of the array.</para>
            <para>Some flags may be specified. <see cref="F:PHP.Library.PerlRegExp.SplitFlags.NoEmpty"/> means no empty strings will be
            in the resulting array. <see cref="F:PHP.Library.PerlRegExp.SplitFlags.DelimCapture"/> adds also substrings matching
            the delimiter and <see cref="F:PHP.Library.PerlRegExp.SplitFlags.OffsetCapture"/> returns instead substrings the arrays
            containing appropriate substring at index 0 and the offset of this substring in original
            <paramref name="data"/> at index 1.</para>
            </summary>
            <param name="pattern">Regular expression to match to boundaries.</param>
            <param name="data">String or string of bytes to split.</param>
            <param name="limit">Max number of elements in the resulting array.</param>
            <param name="flags">Flags affecting the returned array.</param>
            <returns>An array containing substrings.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Replace(PHP.Core.ScriptContext,PHP.Core.Reflection.DObject,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Object,System.Object)">
            <summary>
            <para>Searches <paramref name="data"/> for matches to <paramref name="pattern"/> and replaces them
            with <paramref name="replacement"/>. <paramref name="replacement"/> may contain backreferences
            of the form of <I>\\n</I> or <I>$n</I> (second one preferred).</para>
            <para>Every parameter may be an unidimensional array of strings. If <paramref name="data"/> is
            an array, replacement is done on every element and return value is an array as well. If
            <paramref name="pattern"/> and <paramref name="replacement"/> are arrays, the replacements are processed
            in the order the keys appear in the array. If only <paramref name="pattern"/> is an array, the
            replacement string is used for every key in the <paramref name="pattern"/>.</para>
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>. Passed by Phalanger runtime, cannot be null.</param>
            <param name="self">Instance of object that called the replace method (replace pattern may contain $this).</param>
            <param name="definedVariables"></param>
            <param name="pattern">Regular expression to match.</param>
            <param name="replacement">Replacement string.</param>
            <param name="data">String to search for replacements.</param>
            <returns>String or array containing strings with replacement performed.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Replace(PHP.Core.ScriptContext,PHP.Core.Reflection.DObject,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Object,System.Object,System.Int32)">
            <summary>
            <para>Searches <paramref name="data"/> for matches to <paramref name="pattern"/> and replaces them
            with <paramref name="replacement"/>. <paramref name="replacement"/> may contain backreferences
            of the form of <I>\\n</I> or <I>$n</I> (second one preferred).</para>
            <para>Every parameter may be an unidimensional array of strings. If <paramref name="data"/> is
            an array, replacement is done on every element and return value is an array as well. If
            <paramref name="pattern"/> and <paramref name="replacement"/> are arrays, the replacements are processed
            in the order the keys appear in the array. If only <paramref name="pattern"/> is an array, the
            replacement string is used for every key in the <paramref name="pattern"/>.</para>
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>. Passed by Phalanger runtime, cannot be null.</param>
            <param name="self">Instance of object that called the replace method (replace pattern may contain $this)</param>
            <param name="definedVariables"></param>
            <param name="pattern">Regular expression to match.</param>
            <param name="replacement">Replacement string.</param>
            <param name="data">String to search for replacements.</param>
            <param name="limit">Maximum number of matches replaced. (-1 for no limit)</param>
            <returns>String or array containing strings with replacement performed.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Replace(PHP.Core.ScriptContext,PHP.Core.Reflection.DObject,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Object,System.Object,System.Int32,System.Int32@)">
            <summary>
            <para>Searches <paramref name="data"/> for matches to <paramref name="pattern"/> and replaces them
            with <paramref name="replacement"/>. <paramref name="replacement"/> may contain backreferences
            of the form of <I>\\n</I> or <I>$n</I> (second one preferred).</para>
            <para>Every parameter may be an unidimensional array of strings. If <paramref name="data"/> is
            an array, replacement is done on every element and return value is an array as well. If
            <paramref name="pattern"/> and <paramref name="replacement"/> are arrays, the replacements are processed
            in the order the keys appear in the array. If only <paramref name="pattern"/> is an array, the
            replacement string is used for every key in the <paramref name="pattern"/>.</para>
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>. Passed by Phalanger runtime, cannot be null.</param>
            <param name="self">Instance of object that called the replace method (replace pattern may contain $this)</param>
            <param name="definedVariables"></param>
            <param name="pattern">Regular expression to match.</param>
            <param name="replacement">Replacement string.</param>
            <param name="data">String to search for replacements.</param>
            <param name="limit">Maximum number of matches replaced. (-1 for no limit)</param>
            <param name="count">Number of replacements.</param>
            <returns>String or array containing strings with replacement performed.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Replace(PHP.Core.ScriptContext,System.Object,PHP.Core.PhpCallback,System.Object)">
            <summary>
            <para>Searches <paramref name="data"/> for matches to <paramref name="pattern"/> and the array of matched
            strings (full pattern match + parenthesized substrings) is passed to <paramref name="callback"/> which
            returns replacement string.</para>
            <para><paramref name="pattern"/> and <paramref name="data"/> parameters may be also unidimensional
            arrays of strings. For the explanation <see cref="M:PHP.Library.PerlRegExp.Replace(PHP.Core.ScriptContext,PHP.Core.Reflection.DObject,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Object,System.Object)"/>.</para>
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>. Passed by Phalanger runtime, cannot be null.</param>
            <param name="pattern">Regular expression to match.</param>
            <param name="callback">Function called to find out the replacement string.</param>
            <param name="data">String to search for replacements.</param>
            <returns>String or array containing strings with replacement performed.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Replace(PHP.Core.ScriptContext,System.Object,PHP.Core.PhpCallback,System.Object,System.Int32)">
            <summary>
            <para>Searches <paramref name="data"/> for matches to <paramref name="pattern"/> and the array of matched
            strings (full pattern match + parenthesized substrings) is passed to <paramref name="callback"/> which
            returns replacement string.</para>
            <para><paramref name="pattern"/> and <paramref name="data"/> parameters may be also unidimensional
            arrays of strings. For the explanation <see cref="M:PHP.Library.PerlRegExp.Replace(PHP.Core.ScriptContext,PHP.Core.Reflection.DObject,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Object,System.Object)"/>.</para>
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>. Passed by Phalanger runtime, cannot be null.</param>
            <param name="pattern">Regular expression to match.</param>
            <param name="callback">Function called to find out the replacement string.</param>
            <param name="data">String to search for replacements.</param>
            <param name="limit">Maximum number of matches replaced. (-1 for no limit)</param>
            <returns>String or array containing strings with replacement performed.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Replace(PHP.Core.ScriptContext,System.Object,PHP.Core.PhpCallback,System.Object,System.Int32,System.Int32@)">
            <summary>
            <para>Searches <paramref name="data"/> for matches to <paramref name="pattern"/> and the array of matched
            strings (full pattern match + parenthesized substrings) is passed to <paramref name="callback"/> which
            returns replacement string.</para>
            <para><paramref name="pattern"/> and <paramref name="data"/> parameters may be also unidimensional
            arrays of strings. For the explanation <see cref="M:PHP.Library.PerlRegExp.Replace(PHP.Core.ScriptContext,PHP.Core.Reflection.DObject,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Object,System.Object)"/>.</para>
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>. Passed by Phalanger runtime, cannot be null.</param>
            <param name="pattern">Regular expression to match.</param>
            <param name="callback">Function called to find out the replacement string.</param>
            <param name="data">String to search for replacements.</param>
            <param name="limit">Maximum number of matches replaced. (-1 for no limit)</param>
            <param name="count">Number of replacements.</param>
            <returns>String or array containing strings with replacement performed.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Replace(PHP.Core.ScriptContext,PHP.Core.Reflection.DObject,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Object,PHP.Core.PhpCallback,System.Object,System.Int32,System.Int32@)">
            <summary>
            Private mehtod implementing all replace methods. Just one of <paramref name="replacement"/> or <paramref name="callback"/> should be used.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>. Must not be null.</param>
            <param name="self">Instance of object that called the replace method (replace pattern may contain $this)</param>
            <param name="definedVariables"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <param name="callback"></param>
            <param name="data"></param>
            <param name="limit"></param>
            <param name="count"></param>
            <returns>String or an array.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.SimpleReplace(PHP.Core.Reflection.DObject,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.String,PHP.Core.PhpCallback,System.Object,System.Int32,PHP.Core.Reflection.SourceCodeDescriptor,System.Int32@)">
            <summary>
            Takes a regular expression <paramref name="pattern"/> and one of <paramref name="replacement"/> or 
            <paramref name="callback"/>. Performs replacing on <paramref name="data"/>, which can be
            <see cref="T:PHP.Core.PhpArray"/>, in other cases it is converted to string.
            If <paramref name="data"/> is <see cref="T:PHP.Core.PhpArray"/>, every value is converted to string and
            replacement is performed in place in this array.
            Either <paramref name="replacement"/> or <paramref name="callback"/> should be null.
            </summary>
            <param name="self">Instance of object that called the replace method (replace pattern may contain $this)</param>
            <param name="definedVariables">Array with local variables - can be used by replace pattern</param>
            <param name="pattern">Regular expression to search.</param>
            <param name="replacement">Regular replacement expression. Should be null if callback is specified.</param>
            <param name="callback">Callback function that should be called to make replacements. Should be null
            if replacement is specified.</param>
            <param name="data">Array or string where pattern is searched.</param>
            <param name="limit">Max count of replacements for each item in subject.</param>
            <param name="descriptor"><see cref="T:PHP.Core.Reflection.SourceCodeDescriptor"/> for possible lambda function creation.</param>
            <param name="count">Cumulated number of replacements.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.ReplaceInternal(PHP.Core.Reflection.DObject,System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Library.PerlRegExpConverter,PHP.Core.PhpCallback,System.String,System.Int32,PHP.Core.Reflection.SourceCodeDescriptor,System.Int32@)">
            <summary>
            Replaces <paramref name="limit"/> occurences of substrings.
            </summary>
            <param name="converter">
            Converter used for replacement if <paramref name="callback"/> is <B>null</B>.
            </param>
            <param name="self">Instance of object that called the replace method (replace pattern may contain $this)</param>
            <param name="definedVariables">Array with local variables - can be used by replace pattern</param>
            <param name="callback">Callback to call for replacement strings.</param>
            <param name="str">String to search for matches.</param>
            <param name="limit">Max number of replacements performed.</param>
            <param name="sourceCodeDesc"><see cref="T:PHP.Core.Reflection.SourceCodeDescriptor"/> for possible lambda function creation.</param>
            <param name="count">Cumulated number of replacements.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.NewArrayItem(System.Object,System.Int32,System.Boolean)">
            <summary>
            Used for handling Offset Capture flags. Returns just <paramref name="item"/> if
            <paramref name="offsetCapture"/> is <B>false</B> or an <see cref="T:PHP.Core.PhpArray"/> containing
            <paramref name="item"/> at index 0 and <paramref name="index"/> at index 1.
            </summary>
            <param name="item">Item to add to return value.</param>
            <param name="index">Index to specify in return value if <paramref name="offsetCapture"/> is
            <B>true</B>.</param>
            <param name="offsetCapture">Whether or not to make <see cref="T:PHP.Core.PhpArray"/> with item and index.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.FillMatchesArrayAllPatternOrder(System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Match,PHP.Core.PhpArray@,System.Boolean)">
            <summary>
            Goes through <paramref name="m"/> matches and fill <paramref name="matches"/> array with results
            according to Pattern Order.
            </summary>
            <param name="r"><see cref="T:System.Text.RegularExpressions.Regex"/> that produced the match</param>
            <param name="m"><see cref="M:PHP.Library.PerlRegExp.Match(System.Object,System.Object)"/> to iterate through all matches by NextMatch() call.</param>
            <param name="matches">Array for storing results.</param>
            <param name="addOffsets">Whether or not add arrays with offsets instead of strings.</param>
            <returns>Number of full pattern matches.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExp.FillMatchesArrayAllSetOrder(System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Match,PHP.Core.PhpArray@,System.Boolean)">
            <summary>
            Goes through <paramref name="m"/> matches and fill <paramref name="matches"/> array with results
            according to Set Order.
            </summary>
            <param name="r"><see cref="T:System.Text.RegularExpressions.Regex"/> that produced the match</param>
            <param name="m"><see cref="M:PHP.Library.PerlRegExp.Match(System.Object,System.Object)"/> to iterate through all matches by NextMatch() call.</param>
            <param name="matches">Array for storing results.</param>
            <param name="addOffsets">Whether or not add arrays with offsets instead of strings.</param>
            <returns>Number of full pattern matches.</returns>
        </member>
        <member name="T:PHP.Library.PerlRegExp.GrepFlags">
            <summary>
            Flags for Grep functions.
            </summary>
        </member>
        <member name="T:PHP.Library.PerlRegExp.MatchFlags">
            <summary>
            Flags for Match function family.
            </summary>
            <remarks>
            MatchFlags used by pre_match PHP functions is a hybrid enumeration.
            PatternOrder and SetOrder flags are mutually exclusive but OffsetCapture may be added by bitwise | operator.
            Moreover, PatternOrder is a default value used by these functions, so it can be equal to 0.
            (This confusing declaration is done by PHP authors.)
            </remarks>
        </member>
        <member name="T:PHP.Library.PerlRegExp.SplitFlags">
            <summary>
            Flags for split functions family.
            </summary>
        </member>
        <member name="T:PHP.Library.PerlRegExp.Evaluator">
            <summary>
            Class implementing <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate evaluating php code if 'e' modifier
            in preg_replace is specified.
            </summary>
        </member>
        <member name="M:PHP.Library.PerlRegExp.Evaluator.Substitute(System.String,System.Text.RegularExpressions.GroupCollection)">
            <summary>
            Expects replacement string produced by <see cref="M:PHP.Library.PerlRegExpReplacement.ConvertReplacement(System.Text.RegularExpressions.Regex,System.String)"/>, 
            i.e. only ${n} refer to valid groups.
            </summary>
        </member>
        <member name="M:PHP.Library.PerlRegExpReplacement.ConvertReplacement(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Get the converted replacement from the cache or perform conversion and cache.
            </summary>
            <param name="regex"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PerlRegExpReplacement.ConvertReplacement(System.Int32,System.String)">
            <summary>
            Converts substitutions of the form \\xx to $xx (perl to .NET format).
            </summary>
            <param name="max_number">Maximum group number for the current regullar expression.
            <code>
                int[] group_numbers = regex.GetGroupNumbers();
                int max_number = (group_numbers.Length > 0) ? group_numbers[group_numbers.Length - 1] : 0;
            </code>
            </param>
            <param name="replacement">String possibly containing \\xx substitutions.</param>
            <returns>String with converted $xx substitution format.</returns>
        </member>
        <member name="T:PHP.Library.PerlRegExpConverter">
            <summary>
            Used for converting PHP Perl like regular expressions to .NET regular expressions.
            </summary>
        </member>
        <member name="F:PHP.Library.PerlRegExpConverter.GroupPrefix">
            <summary>
            All named groups from Perl regexp are renamed to start with this character. 
            In order to enable group names starting with number
            </summary>
        </member>
        <member name="F:PHP.Library.PerlRegExpConverter.DotNetReplaceExpression">
            <summary>
            Returns .NET replacement string.
            </summary>
        </member>
        <member name="F:PHP.Library.PerlRegExpConverter.nextcache">
            <summary>
            Internal pointer to the next <see cref="T:PHP.Library.PerlRegExpConverter"/> in the list of cached <see cref="T:PHP.Library.PerlRegExpConverter"/> instances.
            </summary>
        </member>
        <member name="F:PHP.Library.PerlRegExpConverter.hitsCount">
            <summary>
            Internal hits counter. Once it gets to specified constant number, <see cref="F:PHP.Library.PerlRegExpConverter.regex"/> gets compiled.
            </summary>
        </member>
        <member name="F:PHP.Library.PerlRegExpConverter.generation">
            <summary>
            Current generation. Old generations can be removed from cache.
            </summary>
        </member>
        <member name="F:PHP.Library.PerlRegExpConverter.CacheEquals">
            <summary>
            Function that efficiently compares <c>this</c> instance of <see cref="T:PHP.Library.PerlRegExpConverter"/> with another <see cref="T:PHP.Library.PerlRegExpConverter"/>.
            1st argument is reference to <c>this</c>.
            2nd argument is the other's <see cref="F:PHP.Library.PerlRegExpConverter._pattern"/>.
            3nd argument is the other's <see cref="F:PHP.Library.PerlRegExpConverter._replacement"/>.
            Function returns <c>true</c> if pattern and replacement match.
            </summary>
        </member>
        <member name="M:PHP.Library.PerlRegExpConverter.#ctor(System.Object,System.String)">
            <summary>
            Initializes cache-specific fields of <see cref="T:PHP.Library.PerlRegExpConverter"/> new instance.
            </summary>
        </member>
        <member name="M:PHP.Library.PerlRegExpConverter.#ctor(System.Object,System.String,System.Text.Encoding)">
            <summary>
            Creates new <see cref="T:PHP.Library.PerlRegExpConverter"/> and converts Perl regular expression to .NET.
            </summary>
            <param name="pattern">Perl regular expression to convert.</param>
            <param name="replacement">Perl replacement string to convert or a <B>null</B> reference for match only.</param>
            <param name="encoding">Encoding used in the case the pattern is a binary string.</param>
        </member>
        <member name="M:PHP.Library.PerlRegExpConverter.ExtractExceptionalMessage(System.String,System.String)">
            <summary>
            Extracts the .NET exceptional message from the message stored in an exception.
            The message has format 'parsing "{pattern}" - {message}\r\nParameter name {pattern}' in .NET 1.1.
            </summary>
        </member>
        <member name="M:PHP.Library.PerlRegExpConverter.ParseEscapeCode(System.String,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Parses escaped sequences: "\[xX][0-9A-Fa-f]{2}", "\[xX]\{[0-9A-Fa-f]{0,4}\}", "\[0-7]{3}", 
            "\[pP]{Unicode Category}"
            </summary>
        </member>
        <member name="F:PHP.Library.PerlRegExpConverter.encodeChars">
            <summary>
            Characters that must be encoded in .NET regexp
            </summary>
        </member>
        <member name="M:PHP.Library.PerlRegExpConverter.IsCharRegexSpecial(System.Char)">
            <summary>
            Returns true if character needs to be escaped in .NET regex
            </summary>
        </member>
        <member name="M:PHP.Library.PerlRegExpConverter.ConvertRegex(System.String,PHP.Library.PerlRegexOptions,System.Text.Encoding)">
            <summary>
            Converts Perl match expression (only, without delimiters, options etc.) to .NET regular expression.
            </summary>
            <param name="perlExpr">Perl regular expression to convert.</param>
            <param name="opt">Regexp options - some of them must be processed by changes in match string.</param>
            <param name="encoding">Encoding used for character ranges and escaping.</param>
            <returns>Resulting .NET regular expression.</returns>
        </member>
        <member name="M:PHP.Library.PerlRegExpConverter.ConvertPossesiveToAtomicGroup(System.Text.StringBuilder)">
            <summary>
            Convert possesive quantifiers to atomic group, which .NET support.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
            <remarks>Works on these cases *+, ++, ?+, {}+
            </remarks>
        </member>
        <member name="M:PHP.Library.PerlRegExpConverter.CountUTF32Range(System.Text.StringBuilder,System.Int32,System.Int32,System.Collections.Generic.HashSet{System.UInt32})">
            <summary>
            Ranges characters from <paramref name="chFrom"/> up to <paramref name="chTo"/> inclusive, where characters are UTF32.
            We will only list every from surrogate pair once (same result as writing all the characters one by one).
            </summary>
            <param name="sb"></param>
            <param name="chFrom"></param>
            <param name="chTo"></param>
            <param name="addedSurrogate2Ranges">Cache of already added character pairs to avoid duplicitous character ranges.</param>
        </member>
        <member name="M:PHP.Library.PerlRegExpConverter.AddCharacterRangeChecked(System.Text.StringBuilder,System.Char,System.Collections.Generic.HashSet{System.UInt32})">
            <summary>
            Adds "-<paramref name="chTo"/>" iff there is not the same character range in the result already. Otherwise the last character form <paramref name="sb"/> is removed.
            </summary>
            <param name="sb"><see cref="T:System.Text.StringBuilder"/> with lower bound of the range already added.</param>
            <param name="chTo">Upper bound of the range.</param>
            <param name="addedSurrogate2Ranges">Cache of already added character pairs.</param>
            <remarks>Assumes there is starting character at the end of <paramref name="sb"/>.</remarks>
        </member>
        <member name="M:PHP.Library.PerlRegExpConverter.ModifyRegExpAnchored(System.String@)">
            <summary>
            Modifies regular expression so it matches only at the beginning of the string.
            </summary>
            <param name="expr">Regular expression to modify.</param>
        </member>
        <member name="P:PHP.Library.PerlRegExpConverter.quantifiers">
            <summary>
            Regular expression used for matching quantifiers, they are changed ungreedy to greedy and vice versa if
            needed.
            </summary>
        </member>
        <member name="P:PHP.Library.PerlRegExpConverter.posixCharClasses">
            <summary>
            Regular expression for POSIX regular expression classes matching.
            </summary>
        </member>
        <member name="P:PHP.Library.PerlRegExpConverter.Regex">
            <summary>
            Returns <see cref="P:PHP.Library.PerlRegExpConverter.Regex"/> class that can be used for matching.
            </summary>
        </member>
        <member name="P:PHP.Library.PerlRegExpConverter.DotNetOptions">
            <summary>
            <see cref="T:System.Text.RegularExpressions.RegexOptions"/> which should be set while matching the expression. May be <B>null</B>
            if <see cref="F:PHP.Library.PerlRegExpConverter.regex"/> is already set.
            </summary>
        </member>
        <member name="P:PHP.Library.PerlRegExpConverter.ArgumentException">
            <summary>
            An error message. Is <c>null</c> if all the conversions are ok.
            </summary>
        </member>
        <member name="T:PHP.Library.PerlRegExpConverter.CacheEqualsFunctions">
            <summary>
            Functions for efficient equality check.
            </summary>
        </member>
        <member name="M:PHP.Library.PerlRegExpConverter.CacheEqualsFunctions.SelectEqualsFunction(System.Object,System.String)">
            <summary>
            Select appropriate equality function delegate for given <see cref="T:PHP.Library.PerlRegExpConverter"/>'s pattern and replacement.
            </summary>
        </member>
        <member name="T:PHP.Library.PosixRegExp">
            <summary>
            Implements POSIX extended regular expressions as they are implemented in PHP.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PosixRegExp.GetCaseInsensitivePattern(System.String)">
            <summary>
            Returns a valid regular expression which will match string, ignoring case.
            </summary>
            <param name="str">String for that is case insensitive regular expression created.</param>
            <returns>Regular expression matching str case insensitive.
            This expression is string with each character converted to a bracket expression;
            this bracket expression contains that character's uppercase and lowercase form if applicable,
            otherwise it contains only the original character.
            </returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.Replace(System.String,System.String,System.String)">
            <summary>
            This function scans str for matches to pattern and replaces the matched text with replacement.
            The modified string is returned. Pattern can contain parenthesized substrings in this case
            replacement may contain substrings of the form \\digit, they will be replaced by the text
            matching the digit'th parenthesized substring. \\0 means the entire contents of string.
            Up to nine substrings (1..9) may be used. Parentheses may be nested, in which case they are counted by the opening parenthesis. 
            </summary>
            <param name="pattern">Regular expression that is matched to str.</param>
            <param name="replacement">String that will be placed instead of string that matched pattern.</param>
            <param name="str">Scanned string.</param>
            <returns>Modified string with replacements. If there is no match found, unmodified str is returned.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.ReplaceIgnoreCase(System.String,System.String,System.String)">
            <summary>
            Case insensitive version of ereg_replace.
            Ignores case distinction when matching characters. Other behaviour is identical to ereg_replace.
            </summary>
            <param name="pattern">Regular expression that is matched to str.</param>
            <param name="replacement">String that will be placed instead of string that matched pattern.</param>
            <param name="str">Scanned string.</param>
            <returns>Modified string with replacements. If there is no match found, unmodified str is returned.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.Match(System.String,System.String)">
            <summary>
            Scans str for matches to the regular expression pattern (case sensitive).
            </summary>
            <param name="pattern">Regular expression.</param>
            <param name="str">Scanned string.</param>
            <returns>True if there is a match, false otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.Match(System.String,System.String,PHP.Core.PhpReference)">
            <summary>
            Scans <c>str</c> for matches to the regular expression <c>pattern</c> (case sensitive).
            If <c>pattern</c> contains parentheses and matches are found for parenthesized substrings, these matches
            are stored in <c>registers</c> array.
            </summary>
            <remarks>
            <c>registers[0]</c> contains whole matched string,
            <c>registers[1]</c> to <c>registers[9]</c> contain matched substrings, if applicable.
            Parenthesized substrigs are counted according to open parenthesis.
            
            Extension to PHP:  if <c>pattern</c> contains
            more than 9 parenthesis all of matched substrings are stored in <c>registers</c> array,
            not only first 9 of them.
            </remarks>
            <param name="pattern">Regular expression.</param>
            <param name="str">Scanned string.</param>
            <param name="registers">Array containing matches for parenthesized substrings.</param>
            <returns>True if there is a match, false otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.MatchIgnoreCase(System.String,System.String)">
            <summary>
            Case insensitive variation of ereg function.
            
            <see>ereg()</see>
            </summary>
            <param name="pattern">Regular expression.</param>
            <param name="str">Scanned string.</param>
            <returns>True if there is a match, false otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.MatchIgnoreCase(System.String,System.String,PHP.Core.PhpReference)">
            <summary>
            Case insensitive variation of ereg function.
            
            <see>ereg()</see>
            </summary>
            <param name="pattern">Regular expression.</param>
            <param name="str">Scanned string.</param>
            <param name="registers">Array containing matches for parenthesized substrings.</param>
            <returns>True if there is a match, false otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.Split(System.String,System.String)">
            <summary>
            Splits string <c>str</c> to arrays of strings by regular expression <c>pattern</c>
            (case sensitive).
            </summary>
            <param name="pattern">Regular expression matching string delimiters.</param>
            <param name="str">String to split according to regular expression.</param>
            <returns>Array of substrings.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.Split(System.String,System.String,System.Int32)">
            <summary>
            Splits string <c>str</c> to arrays of strings by regular expression <c>pattern</c>.
            Returned array contains max. <c>limit</c> elements. If there is more substrings in <c>str</c>,
            array contains only first <c>limit-1</c> substrings and last element contains the whole rest
            of input <c>string</c>.
            </summary>
            <param name="pattern">Regular expression matching string delimiters.</param>
            <param name="str">String to split according to regular expression.</param>
            <param name="limit">Max number of elements in returned array.</param>
            <returns>Array of substrings.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.SplitIgnoreCase(System.String,System.String)">
            <summary>
            Splits string <c>str</c> to arrays of strings by regular expression <c>pattern</c>
            in case insensitive way.
            </summary>
            <param name="pattern">Regular expression matching string delimiters.</param>
            <param name="str">String to split according to regular expression.</param>
            <returns>Array of substrings.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.SplitIgnoreCase(System.String,System.String,System.Int32)">
            <summary>
            Splits string <c>str</c> to arrays of strings by regular expression <c>pattern</c>
            in case insensitive way.
            Returned array contains max. <c>limit</c> elements. If there is more substrings in <c>str</c>,
            array contains only first <c>limit-1</c> substrings and last element contains the whole rest
            of input <c>string</c>.
            </summary>
            <param name="pattern">Regular expression matching string delimiters.</param>
            <param name="str">String to split according to regular expression.</param>
            <param name="limit">Max number of elements in returned array.</param>
            <returns>Array of substrings.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.DoSplit(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Implementation of functions family "split"
            </summary>
            <param name="pattern">POSIX regular expression that match delimiter.</param>
            <param name="str">String to split.</param>
            <param name="limit">Maximum elements of output array.</param>
            <param name="useLimit">True if you want to use previous parameter.</param>
            <param name="ignoreCase">True if <c>str</c> is matched case insensitive, false otherwise.</param>
            <returns>Array containing parts of str</returns>
        </member>
        <member name="F:PHP.Library.PosixRegExp.controlCharsMap">
            <summary>
            <c>CharMap</c> containing characters that must be preppended by '\'.
            </summary>
        </member>
        <member name="M:PHP.Library.PosixRegExp.ConvertPosix2DotNetExpr(System.String)">
            <summary>
            Converts POSIX regular expression to .NET Framework regular expression
            </summary>
            <param name="expr">POSIX 1003.2 regular expression</param>
            <returns>.NET Framework compatible regular expression</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.ConvertPosix2DotNetRepl(System.String,System.Int32[])">
            <summary>
            Converts string that represents replacement and can be used with regular expression and
            contain references to parenthesized substrings in that regular expression.
            </summary>
            <param name="replacement">String to convert</param>
            <param name="substrNumbers">Array containig numbers of parenthesized substrings in matching regular expression.</param>
            <returns>Converted .NET Framework compatible regular expression to replacement.</returns>
        </member>
        <member name="T:PHP.Library.PosixRegExp.BracketExpression">
            <summary>
            Class representing one bracket expression ([...]) in whole regular expression.
            </summary>
            <remarks>
            While converting POSIX regular expression to framework regexp if we determine start
            of bracket expression, characters are written to this class and it controls regexp processing.
            Nothing is written to output while processing, results are stored in this class and the
            converted bracket expression is written at once after to the output.
            </remarks>
        </member>
        <member name="F:PHP.Library.PosixRegExp.BracketExpression.allOK">
            <summary>
            indicates whether or not some failure occurs
            </summary>
        </member>
        <member name="F:PHP.Library.PosixRegExp.BracketExpression.specialTranslationNeeded">
            <summary>
            indicates if there is a part that cannot be converted to single [...] expression, for example
            [xyz[.abcd.]opq]. Is set to "true" in optimization if some part is marked as <c>UnrolledCollatingElement</c>
            or <c>UnrolledEquivalenceClass</c>
            </summary>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.OptimizeParts">
             <summary>
             According to currentPartNumber part makes some changes at the end of buffer. Assumes that
             currentPartNumber is last in buffer.
             Sets allOK to false if something is wrong.
             
             BEFORE optimization there can be:
             Range, Normal, NormalBackslash, CharacterClass, CollatingElement, EquivalenceClass
            
             AFTER optimization there can be:
             Range, UnrolledRange, Normal, NormalBackslash, NormalBackslashNoRangeNext, NormalNoRangeNext,
             UnrolledCharacterClass, WordBoundary, UnrolledCollatingElement, UnrolledEquivalenceClass
             </summary>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.OptimizeRange">
            <summary>
            Assume that currentPartNumber is set to Range and is last in buffer.
            According to previous part type changes types and groups some parts.
            Sets allOK to false if something is wrong.
            </summary>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.CountRangeEscaped(System.Char,System.Char)">
            <summary>
            Returns string containing appropriate characters for range according to current encoding. If some
            characters may have special meaning in the bracket expression they are escaped.
            Sets private variable allOK to false if secondCharacter is before firstCharacter in current encoding
            or the range cannot be counted for these characters.
            </summary>
            <param name="firstCharacter">First endpoint of the range.</param>
            <param name="secondCharacter">Second endpoint of the range.</param>
            <returns>String with all range characters.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.EscapeBracketExpressionSpecialChars(System.Text.StringBuilder,System.String)">
            <summary>
            Escapes characters that have special meaning in bracket expression to make them ordinary characters.
            </summary>
            <param name="sb"><see cref="T:System.Text.StringBuilder"/> to output the result.</param>
            <param name="chars">String possibly containing characters with special meaning.</param>
            <returns>String with escaped characters.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.CountRange(System.Char,System.Char,System.String@,System.Int32@)">
            <summary>
            Takes endpoints of a range and returns string containing appropriate characters.
            </summary>
            <param name="firstCharacter">First endpoint of a range.</param>
            <param name="secondCharacter">Second endpoint of a range.</param>
            <param name="characters">String containing all characters that are to be in the range.</param>
            <param name="result">Integer specifying an error. Value 1 means characters specified cannot
            be expressed in current encoding, value of 2 first character is greater than second.</param>
            <returns><B>True</B> if range was succesfuly counted, <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.CountCharacterClass(System.String)">
            <summary>
            Takes character class name and returns string containing appropriate characters.
            Returns <B>null</B> if has got unknown character class name.
            </summary>
            <param name="chClassName">Character class name.</param>
            <returns>String containing characters from character class.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.OptimizeCharacterClass">
            <summary>
            Replaces CharacterClass name with appropriate characters and changes type to UnrolledCharacterClass.
            </summary>
            <remarks>
            Assumes that currentPartNumber is last part in buffer and has type CharacterClass.
            </remarks>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.CountCollatingElement(System.String)">
            <summary>
            Takes collating element "name" (string that was enclosed in [. and .]) and returns appropriate
            character(s) or the original string, if there no association exist.
            </summary>
            <param name="cElement">String that was enclosed in [. and .] (collating element).</param>
            <returns>String associated with cElement.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.OptimizeCollatingElement">
            <summary>
            Assumes that currentPartNumber is last part in buffer and has type CollatingElement.
            Changes it to Normal, NormalBackslash or UnrolledCollatingElement.
            </summary>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.OptimizeEquivalenceClass">
            <summary>
            Calls OptimizeCollatingElement() and sets current part type to UnrolledEquivalenceClass.
            </summary>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.StartNextPart">
            <summary>
            If something was written to current part, creates next empty part.
            </summary>
            <remarks>
            Important to easy automaton implementation: if current part is empty, does nothing!
            Appending new parts is unlimited, arrays are enlarged if needed.
            </remarks>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.StartNextPart(System.Boolean)">
            <summary>
            If something was written to current part, creates next empty part.
            </summary>
            <remarks>
            Important to easy automaton implementation: if current part is empty, does nothing!
            Appending new parts is unlimited, arrays are enlarged if needed.
            </remarks>
            <param name="optimize">Whether call OptimizeParts().</param>
            <returns>True if everything is OK.</returns>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.#ctor">
            <summary>
            Constructor. Sets all fields to appropriate empty values.
            </summary>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.Reset">
            <summary>
            Sets inner state as if the object was created.
            </summary>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.Append(System.Char)">
            <summary>
            Appends one character to current part of bracket expression.
            </summary>
            <param name="ch">Character to append.</param>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.Append(System.Char,System.Char)">
            <summary>
            Appends two characters to current part of bracket expression.
            </summary>
            <param name="ch1">First character to append.</param>
            <param name="ch2">Second character to append.</param>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.Append(System.Char,System.Char,System.Char)">
            <summary>
            Appends three characters to current part of bracket expression.
            </summary>
            <param name="ch1">First character to append.</param>
            <param name="ch2">Second character to append.</param>
            <param name="ch3">Third character to append.</param>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.WriteOutNoSpecial(System.Text.StringBuilder@)">
            <summary>
            
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.WriteOutSpecial(System.Text.StringBuilder@)">
            <summary>
            
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.WriteOutWordBoundary(System.Text.StringBuilder@)">
            <summary>
            Writes to <c>output</c> Framework regular expression for beginning or end of word,
            according to first part in <c>parts</c> array.
            </summary>
            <param name="output"><c>StringBuilder</c> to write out.</param>
        </member>
        <member name="M:PHP.Library.PosixRegExp.BracketExpression.WriteOut(System.Text.StringBuilder@)">
            <summary>
            Compose all parts and creates .NET Framework compatible regular expression.
            </summary>
            <returns>.NET Framework compatible regular expression</returns>
        </member>
        <member name="P:PHP.Library.PosixRegExp.BracketExpression.Negation">
            <summary>
            Indicates that this bracket expression has '^' as the first character.
            </summary>
        </member>
        <member name="T:PHP.Library.SingletonSerializer">
            <summary>
            Represents a serializer with a singleton formatter.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="F:PHP.Library.SingletonSerializer.name">
            <summary>
            A name of the serializer. Can't contain a <B>null</B> reference.
            </summary>
        </member>
        <member name="F:PHP.Library.SingletonSerializer.formatter">
            <summary>
            A formatter. Can't contain a <B>null</B> reference.
            </summary>
        </member>
        <member name="M:PHP.Library.SingletonSerializer.#ctor(System.String,System.Runtime.Serialization.IFormatter)">
            <summary>
            Creates a new instance of the serializer.
            </summary>
            <param name="name">The name.</param>
            <param name="formatter">The formatter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="formatter"/> are <B>null</B> references.</exception>
        </member>
        <member name="M:PHP.Library.SingletonSerializer.GetName">
            <summary>
            Returns the name.
            </summary>
        </member>
        <member name="M:PHP.Library.SingletonSerializer.CreateFormatter(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Returns the formatter.
            </summary>
        </member>
        <member name="T:PHP.Library.ContextualSerializer">
            <summary>
            Prepresents a serializer with a formatter utilizing the <see cref="T:PHP.Core.SerializationContext"/>.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="F:PHP.Library.ContextualSerializer.name">
            <summary>
            A name of the serializer. Can't contain a <B>null</B> reference.
            </summary>
        </member>
        <member name="F:PHP.Library.ContextualSerializer.formatterFactory">
            <summary>
            A formatter. Can't contain a <B>null</B> reference.
            </summary>
        </member>
        <member name="M:PHP.Library.ContextualSerializer.#ctor(System.String,PHP.Library.ContextualSerializer.FormatterFactory)">
            <summary>
            Creates a new instance of the serializer.
            </summary>
            <param name="name">The name.</param>
            <param name="formatterFactory">The factory that supplies fresh instances of the formatter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="formatterFactory"/> are <B>null</B> references.</exception>
        </member>
        <member name="M:PHP.Library.ContextualSerializer.GetName">
            <summary>
            Returns the name.
            </summary>
        </member>
        <member name="M:PHP.Library.ContextualSerializer.CreateFormatter(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Returns the formatter.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpSerializer.Default">
            <summary>
            A singleton instance. 
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSerializer.GetName">
            <summary>
            Returns the name.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSerializer.CreateFormatter(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Returns the formatter using the current page encoding set in the global configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpJsonSerializer.#ctor(PHP.Library.JsonFormatter.EncodeOptions,PHP.Library.JsonFormatter.DecodeOptions)">
            <summary>
            Initialize parametrized serializer.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpJsonSerializer.Default">
            <summary>
            A singleton instance with default parameters.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpJsonSerializer.GetName">
            <summary>
            Returns the name.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpJsonSerializer.CreateFormatter(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Returns the formatter using the current page encoding set in the global configuration.
            </summary>
        </member>
        <member name="T:PHP.Library.Serializers">
            <summary>
            Maintains serializers. Libraries can register their own serializers here.
            </summary>
        </member>
        <member name="F:PHP.Library.Serializers.serializers">
            <summary>
            Registered handlers.
            </summary>
        </member>
        <member name="M:PHP.Library.Serializers.RegisterSerializer(PHP.Library.Serializer)">
            <summary>
            Registeres a new serializer. Serializers are usualy registered by libraries.
            </summary>
            <param name="serializer">The serializer.</param>
            <returns>Whether the serializer has been successfuly registered. Two serializers with the same names can't be registered.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="serializer"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.Serializers.GetSerializer(System.String)">
            <summary>
            Gets a serializer by specified name.
            </summary>
            <param name="name">The name of the serializer.</param>
            <returns>The serializer or <B>null</B> reference if such serializer has not been registered.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="T:PHP.Library.PhpSessionHandlerBase">
            <summary>
            A base class for PHP session handlers.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSessionHandlerBase.LoadSerializedVariables(System.String,System.String)">
            <summary>
            Loads serialized variables.
            </summary>
            <param name="savePath">A path where session files can be stored in.</param>
            <param name="sid">A session ID.</param>
            <returns>Variables in serialized form.</returns>
        </member>
        <member name="M:PHP.Library.PhpSessionHandlerBase.SaveSerializedVariables(System.String,System.String,PHP.Core.PhpBytes)">
            <summary>
            Stores serialized variables.
            </summary>
            <param name="savePath">A path where session files can be stored in.</param>
            <param name="sid">A session ID.</param>
            <param name="data">Variables in serialized form.</param>
        </member>
        <member name="M:PHP.Library.PhpSessionHandlerBase.Collect(System.String,System.String,System.Int32)">
            <summary>
            Collects old session data.
            </summary>
            <param name="savePath">A path where session files can be stored in.</param>
            <param name="sid">A session ID.</param>
            <param name="lifetime">A data lifetime in seconds.</param>
        </member>
        <member name="M:PHP.Library.PhpSessionHandlerBase.Load(PHP.Core.ScriptContext,System.Web.HttpContext)">
            <summary>
            Loads session variables from persistent storage.
            </summary>
            <param name="context">The current script context.</param>
            <param name="httpContext">The current HTTP context.</param>
            <returns>An array of session variables. A <B>null</B> reference on error.</returns>
        </member>
        <member name="M:PHP.Library.PhpSessionHandlerBase.Persist(PHP.Core.PhpArray,PHP.Core.ScriptContext,System.Web.HttpContext)">
            <summary>
            Persists session variables to a file.
            </summary>
            <param name="variables">Variables to persist.</param>
            <param name="context">The current script context.</param>
            <param name="httpContext">The current HTTP context.</param>
        </member>
        <member name="M:PHP.Library.PhpSessionHandlerBase.DoCollection(PHP.Library.LibraryConfiguration)">
            <summary>
            Decides whether to perform collection or not.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSessionHandlerBase.GetSessionFileName(System.String)">
            <summary>
            Gets a name of the session file without path.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSessionHandlerBase.GetSessionFilePath(System.String,System.String)">
            <summary>
            Gets a full path to the session file.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpSessionHandler">
            <summary>
            Handles PHP file backed sessions.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpSessionHandler.Default">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSessionHandler.LoadSerializedVariables(System.String,System.String)">
            <summary>
            Loads session data from the session file.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSessionHandler.SaveSerializedVariables(System.String,System.String,PHP.Core.PhpBytes)">
            <summary>
            Stores serialied variables to the session file.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSessionHandler.Collect(System.String,System.String,System.Int32)">
            <summary>
            Deletes session files older than <paramref name="lifetime"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSessionHandler.Abandoning(PHP.Core.ScriptContext,System.Web.HttpContext)">
            <summary>
            Called immediately before the session is abandoned.
            </summary>
            <param name="context">A current script context.</param>
            <param name="httpContext">A current HTTP context.</param>
        </member>
        <member name="M:PHP.Library.PhpSessionHandler.OpenSessionFile(System.String,System.String,System.Boolean)">
            <summary>
            Opens a session file for reading or writing.
            </summary>
            <param name="savePath">A save path in the configuration.</param>
            <param name="sid">The SID.</param>
            <param name="write">Whether to open the file for writing.</param>
        </member>
        <member name="P:PHP.Library.PhpSessionHandler.Name">
            <summary>
            Gets name of the handler used in configuration.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpUserSessionHandler">
            <summary>
            Handles PHP sessions via user handlers.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpUserSessionHandler.Default">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpUserSessionHandler.LoadSerializedVariables(System.String,System.String)">
            <summary>
            Calls "open" and "read" user handlers if not empty.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpUserSessionHandler.SaveSerializedVariables(System.String,System.String,PHP.Core.PhpBytes)">
            <summary>
            Calls "write" and "close" user handlers if not empty.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpUserSessionHandler.Collect(System.String,System.String,System.Int32)">
            <summary>
            Calls "gc" user handler if not empty.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpUserSessionHandler.Abandoning(PHP.Core.ScriptContext,System.Web.HttpContext)">
            <summary>
            Calls "destroy" user handler if not empty.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpUserSessionHandler.ReportError(System.String,System.String,System.String)">
            <summary>
            Reports an error when the user handler has failed.
            </summary>
        </member>
        <member name="P:PHP.Library.PhpUserSessionHandler.Name">
            <summary>
            Gets name of the handler used in configuration.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpUserSessionHandler.Handlers">
            <summary>
            A set of session callbacks. 
            </summary>
        </member>
        <member name="M:PHP.Library.PhpUserSessionHandler.Handlers.Clear">
            <summary>
            Clears thread static field. Called on request end.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpUserSessionHandler.Handlers.#cctor">
            <summary>
            Registeres <see cref="M:PHP.Library.PhpUserSessionHandler.Handlers.Clear"/> called on request end.
            </summary>
        </member>
        <member name="P:PHP.Library.PhpUserSessionHandler.Handlers.Current">
            <summary>
            Gets the current set of handlers.
            </summary>
        </member>
        <member name="T:PHP.Library.AspNetThruSessionHandler">
            <summary>
            Session handler based of ASP.NET sessions.
            </summary>
        </member>
        <member name="M:PHP.Library.AspNetThruSessionHandler.#ctor">
            <summary>
            Does not allow instantiation from outside.
            </summary>
        </member>
        <member name="F:PHP.Library.AspNetThruSessionHandler.Default">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="M:PHP.Library.AspNetThruSessionHandler.ToString">
            <summary>
            Gets a string representation.
            </summary>
            <returns>The name of the handler.</returns>
        </member>
        <member name="M:PHP.Library.AspNetThruSessionHandler.Load(PHP.Core.ScriptContext,System.Web.HttpContext)">
            <summary>
            Loads variables from ASP.NET session to an array.
            </summary>
        </member>
        <member name="M:PHP.Library.AspNetThruSessionHandler.Persist(PHP.Core.PhpArray,PHP.Core.ScriptContext,System.Web.HttpContext)">
            <summary>
            Stores session variables to ASP.NET session.
            </summary>
        </member>
        <member name="M:PHP.Library.AspNetThruSessionHandler.Abandoning(PHP.Core.ScriptContext,System.Web.HttpContext)">
            <summary>
            Called immediately before the session is abandoned.
            </summary>
        </member>
        <member name="M:PHP.Library.AspNetThruSessionHandler.GetCookie(System.Web.HttpContext)">
            <summary>
            Gets session cookie associated with a specified HTTP context.
            </summary>
            <param name="context">The context.</param>
            <returns>The cookie.</returns>
        </member>
        <member name="P:PHP.Library.AspNetThruSessionHandler.Name">
            <summary>
            Gets a name of the handler used in the configuration.
            </summary>
        </member>
        <member name="P:PHP.Library.AspNetThruSessionHandler.AllowsSessionIdChange">
            <summary>
            ASP.NET session handler won't persist data if session id has been changed. New session will be created.
            </summary>
        </member>
        <member name="M:PHP.Library.AspNetThruSessionHandler.AspNetSessionArray.NotWakeupThrowHelper(System.Object)">
            <summary>
            Checks whether given object DOES NOT implement <c>__wakeup</c> and <c>__sleep</c> magic methods.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpSession">
            <summary>
            PHP session handling functions.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="F:PHP.Library.PhpSession.DefaultCacheExpire">
            <summary>
            Default value for "session.cache_expire" PHP configuration option.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpSession.DefaultCacheLimiter">
            <summary>
            Default value for "session.cache_limiter" PHP configuration option.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpSession.DefaultCookieLifetime">
            <summary>
            Default value for "session.cookie_lifetime" PHP configuration option.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpSession.DefaultCookiePath">
            <summary>
            Default value for "session.cookie_path" PHP configuration option.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpSession.DefaultCookieDomain">
            <summary>
            Default value for "session.cookie_domain" PHP configuration option.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpSession.DefaultCookieSecure">
            <summary>
            Default value for "session.cookie_secure" PHP configuration option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.GsrSerializer(PHP.Library.LibraryConfiguration,PHP.Library.LibraryConfiguration,System.Object,PHP.Library.IniAction)">
            <summary>
            GSR routine for "session.serialize_handler" configuration option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.GsrHandler(PHP.Core.LocalConfiguration,PHP.Core.LocalConfiguration,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets or restores "session.save_handler" option.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.GsrCacheExpire(System.Object,PHP.Library.IniAction)">
            <summary>
            GSR routine used for configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.GsrCacheLimiter(System.Object,PHP.Library.IniAction)">
            <summary>
            GSR routine used for configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.GsrCookieLifetime(System.Object,PHP.Library.IniAction)">
            <summary>
            GSR routine used for configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.GsrCookieSecure(System.Object,PHP.Library.IniAction)">
            <summary>
            GSR routine used for configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.GsrCookiePath(System.Object,PHP.Library.IniAction)">
            <summary>
            GSR routine used for configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.GsrCookieDomain(System.Object,PHP.Library.IniAction)">
            <summary>
            GSR routine used for configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.Start">
            <summary>
            Starts session. Loads session variables to <c>$_SESSION</c> and optionally to <c>$GLOBALS</c> arrays.
            </summary>
            <returns><B>true</B> on success.</returns>
            <exception cref="T:PHP.Core.PhpException">Web server variables are not available (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpSession.Destroy">
            <summary>
            Closes session and deletes all the data associated with it.
            </summary>
            <returns><B>true</B> on success.</returns>
        </member>
        <member name="M:PHP.Library.PhpSession.WriteClose">
            <summary>
            Persists session data and closes the session. See <see cref="M:PHP.Library.PhpSession.Commit"/> for details.
            No value is returned.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.Commit">
            <summary>
            Persists session data and closes the session.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.CacheExpire">
            <summary>
            Gets a session cache expiration timeout.
            </summary>
            <returns>The timeout in minutes.</returns>
        </member>
        <member name="M:PHP.Library.PhpSession.CacheExpire(System.Int32)">
            <summary>
            Sets a session cache expiration timeout.
            </summary>
            <param name="newValue">A new value (in minutes).</param>
            <returns>An old value (in minutes).</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="newValue"/> is not positive. (Warning)</exception>
        </member>
        <member name="M:PHP.Library.PhpSession.CacheLimiter">
            <summary>
            Gets a current value of cache control limiter.
            </summary>
            <returns>The cache control limiter ("private", "public", "no-cache").</returns>
        </member>
        <member name="M:PHP.Library.PhpSession.CacheLimiter(System.String)">
            <summary>
            Sets cache control limiter.
            </summary>
            <param name="newLimiter">
            A new value - should be one of "private", "private_no_expire", "public", "nocache", or "no-cache".
            Letter case is ignored. In PHP the value can contain other colon-separated values.
            </param>
            <returns>An old value ("private", "public", or "no-cache").</returns>
            <remarks>Sets the headers according to the http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html .</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="newLimiter"/> has invalid value. (Notice)</exception>
        </member>
        <member name="M:PHP.Library.PhpSession.SavePath">
            <summary>
            Gets a path where sessions are stored.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.SavePath(System.String)">
            <summary>
            Sets a path where sessions are stored (see 'session.save_path' configuration option).
            </summary>
            <param name="newPath">The new path to set.</param>
            <remarks>A previous value of the path.</remarks>
        </member>
        <member name="M:PHP.Library.PhpSession.Name">
            <summary>
            Gets the current session name. 
            </summary>
            <returns>A session name (<c>"ASP.NET_SessionId"</c>).</returns>
        </member>
        <member name="M:PHP.Library.PhpSession.Name(System.String)">
            <summary>
            Sets the current session name.
            </summary>
            <param name="newName">A new name.</param>
            <returns>An old name.</returns>
        </member>
        <member name="M:PHP.Library.PhpSession.Id">
            <summary>
            Gets the current session id.
            </summary>
            <returns>The session id.</returns>
        </member>
        <member name="M:PHP.Library.PhpSession.Id(System.String)">
            <summary>
            Changes session id.
            </summary>
            <param name="id">A new id value.</param>
            <returns>A session id.</returns>
        </member>
        <member name="M:PHP.Library.PhpSession.RegenerateId">
            <summary>
            Update the current session id with a newly generated one.
            </summary>
            <returns>Returns TRUE on success or FALSE on failure.</returns>
        </member>
        <member name="M:PHP.Library.PhpSession.RegenerateId(System.Boolean)">
            <summary>
            Update the current session id with a newly generated one.
            </summary>
            <param name="delete_old_session">Whether to delete the old associated session file or not.</param>
            <returns>Returns TRUE on success or FALSE on failure.   </returns>
        </member>
        <member name="M:PHP.Library.PhpSession.DecodeVariables(PHP.Core.PhpBytes)">
            <summary>
            Deserializes data serialized by PHP session serializer and registers them into the $_SESSION
            and $GLOBAL (if register globals configuration option is on) variables.
            </summary>
            <param name="data">A string of bytes to deserialize.</param>
            <returns>Whether deserialization was successful.</returns>
            <exception cref="T:PHP.Core.PhpException">Out of HTTP server context (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Session doesn't not exist (Notice).</exception>
            <exception cref="T:PHP.Core.PhpException">Deserialization failed (Notice).</exception>
        </member>
        <member name="M:PHP.Library.PhpSession.EncodeVariables">
            <summary>
            Serializes session variables.
            </summary>
            <returns>
            Session variables serialized by the current session serializer. 
            Returns a <B>null</B> reference on failure.
            </returns>
            <exception cref="T:PHP.Core.PhpException">Out of HTTP server context (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Session doesn't not exist (Notice).</exception>
            <exception cref="T:PHP.Core.PhpException">Serialization failed (Notice).</exception>
        </member>
        <member name="M:PHP.Library.PhpSession.GetCookie(System.Web.HttpCookie@,PHP.Core.RequestContext@)">
            <summary>
            Gets the cookie created for the session by ASP.NET server.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.GetCookieParameters">
            <summary>
            Get the session cookie parameters.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.SetCookieParameters(System.Int32)">
            <summary>
            Set the session cookie parameters.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.SetCookieParameters(System.Int32,System.String)">
            <summary>
            Set the session cookie parameters.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.SetCookieParameters(System.Int32,System.String,System.String)">
            <summary>
            Set the session cookie parameters.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.SetCookieParameters(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Set the session cookie parameters.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.SetCookieParameters(System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Set the session cookie parameters.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpSession.SetHandlers(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpCallback,PHP.Core.PhpCallback,PHP.Core.PhpCallback,PHP.Core.PhpCallback,PHP.Core.PhpCallback,PHP.Core.PhpCallback)">
            <summary>
            Sets handlers for session managing. 
            </summary>
            <remarks>
            Only those callbacks which are non-null are set others are left their previous values. 
            If any non-null callback binding fails none are set.
            </remarks>
            <returns>Whether all non-null callbacks were successfully set.</returns>
            <exception cref="T:PHP.Core.PhpException">Web server is not available (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpSession.HandlerName">
            <summary>
            Gets the current session handler name.
            </summary>
            <returns>The name of the current session handler.</returns>
            <exception cref="T:PHP.Core.PhpException">Web server is not available (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpSession.HandlerName(System.String)">
            <summary>
            Sets the current session module.
            </summary>
            <param name="name">A name of the new handler.</param>
            <returns>The name of the current session handler.</returns>
            <exception cref="T:PHP.Core.PhpException">Web server is not available (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="name"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.PhpSession.SessionId.SetNewSessionId(PHP.Core.RequestContext,System.String)">
            <summary>
            Set new SessionId string. Resets the Session object.
            </summary>
            <param name="request_context">Current RequestContext. Cannot be null.</param>
            <param name="session_id">New SessionId string.</param>
        </member>
        <member name="P:PHP.Library.PhpSession.SessionId.Manager">
            <summary>
            Singleton SessionIDManager instance.
            </summary>
        </member>
        <member name="T:PHP.Library.Shell">
            <summary>
            Implements program execution functions defined by PHP.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.Shell.GetEnvironmentVariable(System.String)">
            <summary>
            Gets a value of an environment variable associated with a current process.
            </summary>
            <param name="name">A name of the variable.</param>
            <returns>Current value of the variable.</returns>
        </member>
        <member name="M:PHP.Library.Shell.SetEnvironmentVariable(System.String)">
            <summary>
            Sets an environment variable of the current process.
            </summary>
            <param name="setting">String in format "{name}={value}".</param>
        </member>
        <member name="M:PHP.Library.Shell.EscapeShellArg(System.String)">
            <summary>
            Escapes argument to be passed to shell command.
            </summary>
            <param name="arg">The argument to excape.</param>
            <returns>
            <para>
            On Windows platform, each occurance of double quote (") and ampersand (&amp;) 
            is replaced with a single space. The resulting string is then put into double quotes.
            </para>
            <para>
            On Unix platform, each occurance of single quote (')
            is replaced with characters '\'''. The resulting string is then put into single quotes.
            </para>
            </returns>
        </member>
        <member name="M:PHP.Library.Shell.EscapeShellCmd(System.String)">
            <summary>
            Escape shell metacharacters in a specified shell command.
            </summary>
            <param name="command">The command to excape.</param>
            <para>
            On Windows platform, each occurance of a character that might be used to trick a shell command
            is replaced with space. These characters are 
            <c>", ', #, &amp;, ;, `, |, *, ?, ~, &lt;, &gt;, ^, (, ), [, ], {, }, $, \, \u000A, \u00FF, %</c>.
            </para>
        </member>
        <member name="M:PHP.Library.Shell.Exec(System.String)">
            <summary>
            Executes a shell command.
            </summary>
            <param name="command">The command to execute.</param>
            <returns>The last line of the output.</returns>
        </member>
        <member name="M:PHP.Library.Shell.Exec(System.String,PHP.Core.PhpArray@)">
            <summary>
            Executes a shell command.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="output">An array where to add items of output. One item per each line of the output.</param>
            <returns>The last line of the output.</returns>
        </member>
        <member name="M:PHP.Library.Shell.Exec(System.String,PHP.Core.PhpArray@,System.Int32@)">
            <summary>
            Executes a shell command.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="output">An array where to add items of output. One item per each line of the output.</param>
            <param name="exitCode">Exit code of the process.</param>
            <returns>The last line of the output.</returns>
        </member>
        <member name="M:PHP.Library.Shell.PassThru(System.String)">
            <summary>
            Executes a command and writes raw output to the output sink set on the current script context.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:PHP.Library.Shell.PassThru(System.String,System.Int32@)">
            <summary>
            Executes a command and writes raw output to the output sink set on the current script context.
            </summary>
            <param name="command">The command.</param>
            <param name="exitCode">An exit code of the process.</param>
        </member>
        <member name="M:PHP.Library.Shell.System(System.String)">
            <summary>
            Executes a command and writes output line by line to the output sink set on the current script context.
            Flushes output after each written line.
            </summary>
            <param name="command">The command.</param>
            <returns>
            Either the last line of the output or a <B>null</B> reference if the command fails (returns non-zero exit code).
            </returns>
        </member>
        <member name="M:PHP.Library.Shell.System(System.String,System.Int32@)">
            <summary>
            Executes a command and writes output line by line to the output sink set on the current script context.
            Flushes output after each written line.
            </summary>
            <param name="command">The command.</param>
            <param name="exitCode">An exit code of the process.</param>
            <returns>
            Either the last line of the output or a <B>null</B> reference if the command fails (returns non-zero exit code).
            </returns>
        </member>
        <member name="M:PHP.Library.Shell.GetOptions(System.String,PHP.Core.PhpArray)">
            <summary>
            Gets options from the command line argument list.
            </summary>
            <param name="options">Each character in this string will be used as option characters and matched against options passed to the script starting with a single hyphen (-).   For example, an option string "x" recognizes an option -x.   Only a-z, A-Z and 0-9 are allowed. </param>
            <param name="longopts">An array of options. Each element in this array will be used as option strings and matched against options passed to the script starting with two hyphens (--).   For example, an longopts element "opt" recognizes an option --opt. </param>
            <returns>This function will return an array of option / argument pairs or FALSE  on failure. </returns>
        </member>
        <member name="T:PHP.Library.Autoload">
            <summary>
            Functions for date and time manipulation.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="F:PHP.Library.Autoload.SplAutoloadFunction">
            <summary>
            The name of spl_autoload default function.
            </summary>
        </member>
        <member name="M:PHP.Library.Autoload.Call(PHP.Core.NamingContext,PHP.Core.Reflection.DTypeDesc,System.String)">
            <summary>
            This function can be used to manually search for a class or interface using the registered __autoload functions.
            </summary>
        </member>
        <member name="M:PHP.Library.Autoload.FindAutoloadFunction(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Finds the specified autoload function list element.
            </summary>
            <param name="context">Current script context.</param>
            <param name="autoloadFunction">The PHP representation of callback function to find in list of SPL autoload functions.</param>
            <returns>List node or null if such a functions does not exist in the list.</returns>
        </member>
        <member name="T:PHP.Library.SPL.SplFileInfo">
            <summary>
            The SplFileInfo class offers a high-level object oriented interface to information for an individual file.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.SplFileInfo.fs_info">
            <summary>
            Internal file system entry.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.SplFileInfo.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.SplFileInfo.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.SplFileInfo.__construct(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Creates a new SplFileInfo object for the <paramref name="filename"/> specified. The file does not need to exist, or be readable.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="filename">File or directory name.</param>
        </member>
        <member name="M:PHP.Library.SPL.SplFileInfo.__toString(PHP.Core.ScriptContext)">
            <summary>
            An alias for <c>getPathname</c>.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:PHP.Library.SPL.DirectoryIterator">
            <summary>
            The DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.DirectoryIterator.dir_enumerator">
            <summary>
            Internal fs enumerator.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.DirectoryIterator.dir_enumerator_key">
            <summary>
            Internal fs enumerator item index.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.DirectoryIterator.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.DirectoryIterator.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.DirectoryIterator.EnumerateFileSystemInfos">
            <summary>
            Gets enumeration of file system entries for this iterator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.DirectoryIterator.CreateEnumeratorInternal">
            <summary>
            Initializes <see cref="F:PHP.Library.SPL.DirectoryIterator.dir_enumerator"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.DirectoryIterator.isDotInternal">
            <summary>
            Whether current entry represents "." or "..".
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.DirectoryIterator.__toString(PHP.Core.ScriptContext)">
            <summary>
            An alias for <c>getFilename</c>.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:PHP.Library.SPL.FilesystemIterator">
            <summary>
            The Filesystem iterator.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.FilesystemIterator.DefaultFlags">
            <summary>
            Default <see cref="F:PHP.Library.SPL.FilesystemIterator.flags"/>.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.FilesystemIterator.flags">
            <summary>
            Flags of the iterator. See <see cref="T:PHP.Library.SPL.FilesystemIterator"/> constants.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.FilesystemIterator.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.FilesystemIterator.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.RecursiveDirectoryIterator">
            <summary>
            The RecursiveDirectoryIterator provides an interface for iterating recursively over filesystem directories.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.RecursiveDirectoryIterator.DefaultFlags">
            <summary>
            Default <see cref="F:PHP.Library.SPL.FilesystemIterator.flags"/>.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.RecursiveDirectoryIterator.sub_path">
            <summary>
            Sub path used internally to track nesting of the iterator.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveDirectoryIterator.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveDirectoryIterator.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.SplFileObject">
            <summary>
            The SplFileObject class offers an object oriented interface for a file.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.SplFileObject.DROP_NEW_LINE">
            <summary>
            Drop newlines at the end of a line.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.SplFileObject.READ_AHEAD">
            <summary>
            Read on rewind/next.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.SplFileObject.SKIP_EMPTY">
            <summary>
            Skips empty lines in the file. This requires the READ_AHEAD flag be enabled, to work as expected.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.SplFileObject.READ_CSV">
            <summary>
            Read lines as CSV rows.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.SplFileObject.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.SplFileObject.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.SplFileObject.__construct(PHP.Core.ScriptContext,System.Object)">
            * Methods */
        </member>
        <member name="T:PHP.Library.SPL.SplIterators">
            <summary>
            Contains iterators-related class library functions.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.SPL.SplIterators.Apply(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc,PHP.Library.SPL.Iterator,PHP.Core.PhpCallback)">
            <summary>
            Calls a function for every element in an iterator.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="caller">Class context provided by compiler.</param>
            <param name="iterator">The class to iterate over.</param>
            <param name="function">The callback function to call on every element.
            Note: The function must return TRUE in order to continue iterating over the iterator.</param>
            <returns>Returns the iteration count.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="function"/> or <paramref name="iterator"/> are <B>null</B> references.</exception>
        </member>
        <member name="M:PHP.Library.SPL.SplIterators.Apply(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc,PHP.Library.SPL.Iterator,PHP.Core.PhpCallback,PHP.Core.PhpArray)">
            <summary>
            Calls a function for every element in an iterator.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="caller">Class context provided by compiler.</param>
            <param name="iterator">The class to iterate over.</param>
            <param name="function">The callback function to call on every element.
            Note: The function must return TRUE in order to continue iterating over the iterator.</param>
            <param name="args">Arguments to pass to the callback function.</param>
            <returns>Returns the iteration count.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="function"/> or <paramref name="iterator"/> are <B>null</B> references.</exception>
        </member>
        <member name="M:PHP.Library.SPL.SplIterators.Count(PHP.Core.ScriptContext,PHP.Library.SPL.Iterator)">
            <summary>
            Count the elements in an iterator.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="iterator">The iterator being counted.</param>
            <returns>The number of elements in <paramref name="iterator"/>.</returns>
        </member>
        <member name="M:PHP.Library.SPL.SplIterators.ToArray(PHP.Core.ScriptContext,PHP.Library.SPL.Iterator)">
            <summary>
            Copy the elements of an iterator into an array.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="iterator">The iterator being copied.</param>
            <returns>An array containing the elements of the <paramref name="iterator"/>.</returns>
        </member>
        <member name="M:PHP.Library.SPL.SplIterators.ToArray(PHP.Core.ScriptContext,PHP.Library.SPL.Iterator,System.Boolean)">
            <summary>
            Copy the elements of an iterator into an array.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="iterator">The iterator being copied.</param>
            <param name="use_keys">Whether to use the iterator element keys as index.</param>
            <returns>An array containing the elements of the <paramref name="iterator"/>.</returns>
        </member>
        <member name="T:PHP.Library.SplObjects">
            <summary>
            Contains object-related class library functions.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.SplObjects.ObjectHash(System.Object)">
            <summary>
            Return hash id for given object.
            </summary>
            <param name="obj">Object instance to get its hash code.</param>
            <returns>Hexadecimal number as string.</returns>
        </member>
        <member name="M:PHP.Library.SplObjects.SplClasses">
            <summary>
            This function returns an array with the current available SPL classes.
            </summary>
            <returns>Returns an array containing the currently available SPL classes.</returns>
        </member>
        <member name="T:PHP.Library.SeekOptions">
            <summary>
            The "whence" options used in PhpStream.Seek().
            </summary>
        </member>
        <member name="F:PHP.Library.SeekOptions.Set">
            <summary>Seek from the beginning of the file.</summary>
        </member>
        <member name="F:PHP.Library.SeekOptions.Current">
            <summary>Seek from the current position.</summary>
        </member>
        <member name="F:PHP.Library.SeekOptions.End">
            <summary>Seek from the end of the file.</summary>
        </member>
        <member name="T:PHP.Library.StreamLockOptions">
            <summary>
            Value used as an argument to <c>flock()</c> calls.
            Passed to streams using the <see cref="M:PHP.Core.PhpStream.SetParameter(PHP.Core.StreamParameterOptions,System.Object)"/>
            with <c>option</c> set to <see cref="F:PHP.Core.StreamParameterOptions.Locking"/>.
            </summary>
            <remarks>
            Note that not all of these are flags. Only the <see cref="F:PHP.Library.StreamLockOptions.NoBlocking"/> 
            may be added to one of the first three values.
            </remarks>
        </member>
        <member name="F:PHP.Library.StreamLockOptions.Shared">
            <summary>
            To acquire a shared lock (reader), set operation to LOCK_SH.
            </summary>
        </member>
        <member name="F:PHP.Library.StreamLockOptions.Exclusive">
            <summary>
            To acquire an exclusive lock (writer), set operation to LOCK_EX.
            </summary>
        </member>
        <member name="F:PHP.Library.StreamLockOptions.Unlock">
            <summary>
            To release a lock (shared or exclusive), set operation to LOCK_UN.
            </summary>
        </member>
        <member name="F:PHP.Library.StreamLockOptions.NoBlocking">
            <summary>
            If you don't want flock() to block while locking, add LOCK_NB to operation.
            </summary> 
        </member>
        <member name="T:PHP.Library.PhpStreamConstants">
            <summary>
            ImplementsConstant enumeration for various PHP stream-related constants.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStreamConstants.Empty">
            <summary>Empty option (default)</summary>
        </member>
        <member name="F:PHP.Library.PhpStreamConstants.UseIncludePath">
            <summary>If path is relative, Wrapper will search for the resource using the include_path (1).</summary>
        </member>
        <member name="F:PHP.Library.PhpStreamConstants.IgnoreUrl">
            <summary>When this flag is set, only the file:// wrapper is considered. (2)</summary>
        </member>
        <member name="F:PHP.Library.PhpStreamConstants.EnforceSafeMode">
            <summary>Apply the <c>safe_mode</c> permissions check when opening a file (4).</summary>
        </member>
        <member name="F:PHP.Library.PhpStreamConstants.ReportErrors">
            <summary>If this flag is set, the Wrapper is responsible for raising errors using 
            trigger_error() during opening of the stream. If this flag is not set, she should not raise any errors (8).</summary>
        </member>
        <member name="F:PHP.Library.PhpStreamConstants.MustSeek">
            <summary>If you don't need to write to the stream, but really need to 
            be able to seek, use this flag in your options (16).</summary>
        </member>
        <member name="F:PHP.Library.PhpStreamConstants.StatLink">
            <summary>Stat the symbolic link itself instead of the linked file (1).</summary>
        </member>
        <member name="F:PHP.Library.PhpStreamConstants.StatQuiet">
            <summary>Do not complain if the file does not exist (2).</summary>
        </member>
        <member name="F:PHP.Library.PhpStreamConstants.MakeDirectoryRecursive">
            <summary>Create the whole path leading to the specified directory if necessary (1).</summary>
        </member>
        <member name="T:PHP.Library.FilterStatus">
            <summary>
            The status indicators returned by filter's main method.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterStatus.FatalError">
            <summary>
            Error in data stream (1).
            </summary>
        </member>
        <member name="F:PHP.Library.FilterStatus.MoreData">
            <summary>
            Filter needs more data; stop processing chain until more is available (2).
            </summary>
        </member>
        <member name="F:PHP.Library.FilterStatus.OK">
            <summary>
            Filter generated output buckets; pass them on to next in chain (3).
            </summary>
        </member>
        <member name="T:PHP.Library.FilterChains">
            <summary>
            Indicates whether the filter is to be attached to the
            input/ouput filter-chain or both.
            </summary>
        </member>
        <member name="F:PHP.Library.FilterChains.Read">
            <summary>
            Insert the filter to the read filter chain of the stream (1).
            </summary>
        </member>
        <member name="F:PHP.Library.FilterChains.Write">
            <summary>
            Insert the filter to the write filter chain of the stream (2).
            </summary>
        </member>
        <member name="F:PHP.Library.FilterChains.ReadWrite">
            <summary>
            Insert the filter to both the filter chains of the stream (3).
            </summary>
        </member>
        <member name="T:PHP.Library.PhpFilters">
            <summary>
            Gives access to the stream filter chains.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PhpFilters.Append(PHP.Core.PhpResource,System.String)">
            <summary>
	Appends a filter to the chain of stream-filters of the <paramref name="stream"/>.
	</summary><remarks>
	The filter is attached to the read filter chain if the file was opened for reading 
	(i.e. File Mode: <c>r</c>, and/or <c>+</c>); attached to the write filter chain if the file 
	was opened for writing (i.e. File Mode: <c>w</c>, <c>a</c>, and/or <c>+</c>). 
	</remarks><param name="filter">The name of the filter - either built-in or previously
	defined using <see cref="M:PHP.Library.PhpFilters.Register(System.String,System.String)"/>.</param><param name="stream">The stream which filter-chain is to be extended with the <paramref name="filter"/>.</param><returns>True if successful.</returns>
        </member>
        <member name="M:PHP.Library.PhpFilters.Append(PHP.Core.PhpResource,System.String,System.Int32)">
            <summary>
	Appends a filter to the chain of stream-filters of the <paramref name="stream"/>.
	</summary><remarks>
	The filter is attached to the read filter chain if the file was opened for reading 
	(i.e. File Mode: <c>r</c>, and/or <c>+</c>); attached to the write filter chain if the file 
	was opened for writing (i.e. File Mode: <c>w</c>, <c>a</c>, and/or <c>+</c>). 
	</remarks><param name="filter">The name of the filter - either built-in or previously
	defined using <see cref="M:PHP.Library.PhpFilters.Register(System.String,System.String)"/>.</param><param name="stream">The stream which filter-chain is to be extended with the <paramref name="filter"/>.</param><returns>True if successful.</returns>
            <param name="read_write">Combination of the <see cref="T:PHP.Core.FilterChainOptions"/> flags.</param>
        </member>
        <member name="M:PHP.Library.PhpFilters.Append(PHP.Core.PhpResource,System.String,System.Int32,System.Object)">
            <summary>
	Appends a filter to the chain of stream-filters of the <paramref name="stream"/>.
	</summary><remarks>
	The filter is attached to the read filter chain if the file was opened for reading 
	(i.e. File Mode: <c>r</c>, and/or <c>+</c>); attached to the write filter chain if the file 
	was opened for writing (i.e. File Mode: <c>w</c>, <c>a</c>, and/or <c>+</c>). 
	</remarks><param name="filter">The name of the filter - either built-in or previously
	defined using <see cref="M:PHP.Library.PhpFilters.Register(System.String,System.String)"/>.</param><param name="stream">The stream which filter-chain is to be extended with the <paramref name="filter"/>.</param><returns>True if successful.</returns>
            <param name="read_write">Combination of the <see cref="T:PHP.Core.FilterChainOptions"/> flags.</param>
            <param name="parameters">Additional parameters for a user filter.</param>
        </member>
        <member name="M:PHP.Library.PhpFilters.Prepend(PHP.Core.PhpResource,System.String)">
            <summary>
	Prepends a filter to the chain of stream-filters of the <paramref name="stream"/>.
	</summary><remarks>
	The filter is attached to the read filter chain if the file was opened for reading 
	(i.e. File Mode: <c>r</c>, and/or <c>+</c>); attached to the write filter chain if the file 
	was opened for writing (i.e. File Mode: <c>w</c>, <c>a</c>, and/or <c>+</c>). 
	</remarks><param name="filter">The name of the filter - either built-in or previously
	defined using <see cref="M:PHP.Library.PhpFilters.Register(System.String,System.String)"/>.</param><param name="stream">The stream which filter-chain is to be extended with the <paramref name="filter"/>.</param><returns>True if successful.</returns>
        </member>
        <member name="M:PHP.Library.PhpFilters.Prepend(PHP.Core.PhpResource,System.String,System.Int32)">
            <summary>
	Prepends a filter to the chain of stream-filters of the <paramref name="stream"/>.
	</summary><remarks>
	The filter is attached to the read filter chain if the file was opened for reading 
	(i.e. File Mode: <c>r</c>, and/or <c>+</c>); attached to the write filter chain if the file 
	was opened for writing (i.e. File Mode: <c>w</c>, <c>a</c>, and/or <c>+</c>). 
	</remarks><param name="filter">The name of the filter - either built-in or previously
	defined using <see cref="M:PHP.Library.PhpFilters.Register(System.String,System.String)"/>.</param><param name="stream">The stream which filter-chain is to be extended with the <paramref name="filter"/>.</param><returns>True if successful.</returns>
            <param name="read_write">Combination of the <see cref="T:PHP.Core.FilterChainOptions"/> flags.</param>
        </member>
        <member name="M:PHP.Library.PhpFilters.Prepend(PHP.Core.PhpResource,System.String,System.Int32,System.Object)">
            <summary>
	Prepends a filter to the chain of stream-filters of the <paramref name="stream"/>.
	</summary><remarks>
	The filter is attached to the read filter chain if the file was opened for reading 
	(i.e. File Mode: <c>r</c>, and/or <c>+</c>); attached to the write filter chain if the file 
	was opened for writing (i.e. File Mode: <c>w</c>, <c>a</c>, and/or <c>+</c>). 
	</remarks><param name="filter">The name of the filter - either built-in or previously
	defined using <see cref="M:PHP.Library.PhpFilters.Register(System.String,System.String)"/>.</param><param name="stream">The stream which filter-chain is to be extended with the <paramref name="filter"/>.</param><returns>True if successful.</returns>
            <param name="read_write">Combination of the <see cref="T:PHP.Core.FilterChainOptions"/> flags.</param>
            <param name="parameters">Additional parameters for a user filter.</param>
        </member>
        <member name="M:PHP.Library.PhpFilters.Register(System.String,System.String)">
            <summary>
            Registers a user stream filter.
            </summary>
            <param name="filter">The name of the filter (may contain wildcards).</param>
            <param name="classname">The PHP user class (derived from <c>php_user_filter</c>) implementing the filter.</param>
            <returns><c>true</c> if the filter was succesfully added, <c>false</c> if the filter of such name already exists.</returns>
        </member>
        <member name="M:PHP.Library.PhpFilters.GetFilterNames">
            <summary>
            Retrieves the list of registered filters.
            </summary>
            <returns>A <see cref="T:PHP.Core.PhpArray"/> containing the names of available filters.</returns>
        </member>
        <member name="T:PHP.Library.StringFilterOptions">
            <summary>
            Options provided to the constructor of <see cref="T:PHP.Library.StringFilter"/>
            to specify which string conversion to use.
            </summary>
        </member>
        <member name="F:PHP.Library.StringFilterOptions.Rotate13">
            <summary>Use the <c>str_rot13</c> function to alter the stream data.</summary>
        </member>
        <member name="F:PHP.Library.StringFilterOptions.ToUpper">
            <summary>Use the <c>strtoupper</c> function to alter the stream data.</summary>
        </member>
        <member name="F:PHP.Library.StringFilterOptions.ToLower">
            <summary>Use the <c>strtolower</c> function to alter the stream data.</summary>
        </member>
        <member name="F:PHP.Library.StringFilterOptions.StripTags">
            <summary>Use the <c>strip_tags</c> function with an additional <c>allowable_tags</c>
            argument to alter the stream data.</summary>
        </member>
        <member name="T:PHP.Library.StringFilter">
            <summary>
            Encapsulates built-in "string.*" filters. See <see cref="T:PHP.Library.StringFilterOptions"/>
            for the list of possible filter operations.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.StringFilter.#ctor(PHP.Library.StringFilterOptions,System.Object)">
            <summary>Creates a new instance of this filter with additional parameters.</summary>
        </member>
        <member name="M:PHP.Library.StringFilter.Filter(System.Object,System.Boolean)">
            <summary>
  Processes the <paramref name="input"/> (either of type
  <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/>) data through this filter
  and returns the filtered data in one of these formats or <c>null</c>.
  </summary><remarks>
  A filter may hold data in its own buffers when it's unable
  to process whole the input. However, when closing is <c>true</c>,
  it should pass as much data as possible because it is the last call
  to Filter.
  </remarks><param name="input">A <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> containing 
  the data to be filtered.</param><param name="closing"><c>true</c> if this is the last call to this filter.</param><returns>
  A <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> containing 
  the filtered data or <c>null</c> if no output is available yet.
  </returns>
        </member>
        <member name="F:PHP.Library.StringFilter.operation">
            <summary>The selected operation of this string-filter.</summary>
        </member>
        <member name="F:PHP.Library.StringFilter.stripTagsState">
            <summary>The stored state of the last <c>strip_tags</c> function call.</summary>
        </member>
        <member name="T:PHP.Library.StringFilterFactory">
            <summary>
            Factory for string stream filters.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.StringFilterFactory.GetImplementedFilterNames">
            <summary>
            Returns the list of filters defined by this PhpFilter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.StringFilterFactory.GetImplementedFilter(System.String,System.Boolean,PHP.Core.PhpFilter@,System.Object)">
            <summary>
            Returns a filter implementation defined by this PhpFilter.
            </summary>
            <param name="name">Name of the filter to look for.</param>
            <param name="instantiate"><c>true</c> to fill <paramref name="instance"/> with a new instance of that filter.</param>
            <param name="instance">Filled with a new instance of an implemented filter if <paramref name="instantiate"/>.</param>
            <param name="parameters">Additional parameters provided to the filter constructor.</param>
            <returns><c>true</c> if a filter with the given name was found.</returns>
        </member>
        <member name="T:PHP.Library.ConversionFilterOptions">
            <summary>
            Options provided to the constructor of <see cref="T:PHP.Library.EncodingFilter"/>
            or <see cref="T:PHP.Library.DecodingFilter"/> to specify which conversion to use.
            </summary>
        </member>
        <member name="F:PHP.Library.ConversionFilterOptions.Base64">
            <summary>Use the <c>base-64</c> encoding.</summary>
        </member>
        <member name="F:PHP.Library.ConversionFilterOptions.QuotedPrintable">
            <summary>Use the <c>quoted-printable</c> encoding. Only decoding is implemented.</summary>
        </member>
        <member name="T:PHP.Library.DecodingFilter">
            <summary>
            Encapsulates built-in "convert.*" filters performing the decoding
            (string to binary) conversions. See <see cref="T:PHP.Library.ConversionFilterOptions"/>
            for the list of possible filter operations.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.DecodingFilter.#ctor(PHP.Library.ConversionFilterOptions)">
            <summary>Creates a new instance of this filter.</summary>
        </member>
        <member name="M:PHP.Library.DecodingFilter.Filter(System.Object,System.Boolean)">
            <summary>
  Processes the <paramref name="input"/> (either of type
  <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/>) data through this filter
  and returns the filtered data in one of these formats or <c>null</c>.
  </summary><remarks>
  A filter may hold data in its own buffers when it's unable
  to process whole the input. However, when closing is <c>true</c>,
  it should pass as much data as possible because it is the last call
  to Filter.
  </remarks><param name="input">A <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> containing 
  the data to be filtered.</param><param name="closing"><c>true</c> if this is the last call to this filter.</param><returns>
  A <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> containing 
  the filtered data or <c>null</c> if no output is available yet.
  </returns>
        </member>
        <member name="F:PHP.Library.DecodingFilter.operation">
            <summary>The selected operation of this conversion filter.</summary>
        </member>
        <member name="T:PHP.Library.DecodingFilterFactory">
            <summary>
            Factory for decoding stream filters.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.DecodingFilterFactory.GetImplementedFilterNames">
            <summary>
            Returns the list of filters defined by this PhpFilter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.DecodingFilterFactory.GetImplementedFilter(System.String,System.Boolean,PHP.Core.PhpFilter@,System.Object)">
            <summary>
            Returns a filter implementation defined by this PhpFilter.
            </summary>
            <param name="name">Name of the filter to look for.</param>
            <param name="instantiate"><c>true</c> to fill <paramref name="instance"/> with a new instance of that filter.</param>
            <param name="instance">Filled with a new instance of an implemented filter if <paramref name="instantiate"/>.</param>
            <param name="parameters">Additional parameters provided to the filter constructor.</param>
            <returns><c>true</c> if a filter with the given name was found.</returns>
        </member>
        <member name="T:PHP.Library.EncodingFilter">
            <summary>
            Encapsulates built-in "convert.*" filters performing the encoding
            (binary to string) conversions. See <see cref="T:PHP.Library.ConversionFilterOptions"/>
            for the list of possible filter operations.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.EncodingFilter.#ctor(PHP.Library.ConversionFilterOptions)">
            <summary>Creates a new instance of this filter.</summary>
        </member>
        <member name="M:PHP.Library.EncodingFilter.Filter(System.Object,System.Boolean)">
            <summary>
  Processes the <paramref name="input"/> (either of type
  <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/>) data through this filter
  and returns the filtered data in one of these formats or <c>null</c>.
  </summary><remarks>
  A filter may hold data in its own buffers when it's unable
  to process whole the input. However, when closing is <c>true</c>,
  it should pass as much data as possible because it is the last call
  to Filter.
  </remarks><param name="input">A <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> containing 
  the data to be filtered.</param><param name="closing"><c>true</c> if this is the last call to this filter.</param><returns>
  A <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> containing 
  the filtered data or <c>null</c> if no output is available yet.
  </returns>
        </member>
        <member name="F:PHP.Library.EncodingFilter.operation">
            <summary>The selected operation of this conversion filter.</summary>
        </member>
        <member name="T:PHP.Library.EncodingFilterFactory">
            <summary>
            Factory for encoding stream filters.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.EncodingFilterFactory.GetImplementedFilterNames">
            <summary>
            Returns the list of filters defined by this PhpFilter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.EncodingFilterFactory.GetImplementedFilter(System.String,System.Boolean,PHP.Core.PhpFilter@,System.Object)">
            <summary>
            Returns a filter implementation defined by this PhpFilter.
            </summary>
            <param name="name">Name of the filter to look for.</param>
            <param name="instantiate"><c>true</c> to fill <paramref name="instance"/> with a new instance of that filter.</param>
            <param name="instance">Filled with a new instance of an implemented filter if <paramref name="instantiate"/>.</param>
            <param name="parameters">Additional parameters provided to the filter constructor.</param>
            <returns><c>true</c> if a filter with the given name was found.</returns>
        </member>
        <member name="T:PHP.Library.PhpContexts">
            <summary>
            Class containing implementations of PHP functions accessing the <see cref="T:PHP.Core.StreamContext"/>s.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PhpContexts.CreateContext(PHP.Core.PhpArray)">
            <summary>Create a new stream context.</summary>
            <param name="data">The 2-dimensional array in format "options[wrapper][option]".</param>
        </member>
        <member name="M:PHP.Library.PhpContexts.CheckContextData(PHP.Core.PhpArray)">
            <summary>
            Check whether the provided argument is a valid stream-context data array.
            </summary>
            <param name="data">The data to be stored into context.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpContexts.FromResource(PHP.Core.PhpResource,System.Boolean)">
            <summary>
            Get the StreamContext from a handle representing either an isolated context or a PhpStream.
            </summary>
            <param name="stream_or_context">The PhpResource of either PhpStream or StreamContext type.</param>
            <param name="createContext">If true then a new context will be created at the place of <see cref="F:PHP.Core.StreamContext.Default"/>.</param>
            <returns>The respective StreamContext.</returns>
            <exception cref="T:PHP.Core.PhpException">If the first argument is neither a stream nor a context.</exception>
        </member>
        <member name="M:PHP.Library.PhpContexts.GetContextOptions(PHP.Core.PhpResource)">
            <summary>
            Retrieve options for a stream-wrapper or a context itself.
            </summary>  
            <param name="stream_or_context">The PhpResource of either PhpStream or StreamContext type.</param>
            <returns>The contained PhpArray of options.</returns>
        </member>
        <member name="M:PHP.Library.PhpContexts.SetContextOption(PHP.Core.PhpResource,System.String,System.String,System.Object)">
            <summary>
            Sets an option for a stream/wrapper/context.
            </summary> 
            <param name="stream_or_context">The PhpResource of either PhpStream or StreamContext type.</param>
            <param name="wrapper">The first-level index to the options array.</param>
            <param name="option">The second-level index to the options array.</param>
            <param name="data">The data to be stored to the options array.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:PHP.Library.PhpContexts.SetContextParameters(PHP.Core.PhpResource,PHP.Core.PhpArray)">
            <summary>
            Set parameters for a stream/wrapper/context.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpWrappers">
            <summary>
            Class containing implementations of PHP functions accessing the <see cref="T:PHP.Core.StreamWrapper"/>s.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PhpWrappers.RegisterUserWrapperByName(PHP.Core.Reflection.DTypeDesc,System.String,System.String)">
            <summary>
            Registers a user-wrapper specified by the name of a defining user-class.
            </summary>
            <param name="caller">The class context.</param>
            <param name="protocol">The schema to be associated with the given wrapper.</param>
            <param name="classname">Name of the user class implementing the wrapper functions.</param>
            <returns>False in case of failure (ex. schema already occupied).</returns>
        </member>
        <member name="M:PHP.Library.PhpWrappers.RegisterUserWrapperByName(PHP.Core.Reflection.DTypeDesc,System.String,System.String,PHP.Library.PhpWrappers.StreamWrapperRegisterFlags)">
            <summary>
            Registers a user-wrapper specified by the name of a defining user-class.
            </summary>
            <param name="caller">The class context.</param>
            <param name="protocol">The schema to be associated with the given wrapper.</param>
            <param name="classname">Name of the user class implementing the wrapper functions.</param>
            <param name="flags">Should be set to STREAM_IS_URL if protocol is a URL protocol. Default is 0, local stream.</param>
            <returns>False in case of failure (ex. schema already occupied).</returns>
        </member>
        <member name="M:PHP.Library.PhpWrappers.RegisterUserWrapperByName2(PHP.Core.Reflection.DTypeDesc,System.String,System.String)">
            <summary>
            Registers a user-wrapper specified by the name of a defining user-class.
            </summary>
            <param name="caller">The class context.</param>
            <param name="protocol">The schema to be associated with the given wrapper.</param>
            <param name="userWrapperName">Name of the user class implementing the wrapper functions.</param>
            <returns>False in case of failure (ex. schema already occupied).</returns>
        </member>
        <member name="M:PHP.Library.PhpWrappers.RegisterUserWrapperByName2(PHP.Core.Reflection.DTypeDesc,System.String,System.String,PHP.Library.PhpWrappers.StreamWrapperRegisterFlags)">
            <summary>
            Registers a user-wrapper specified by the name of a defining user-class.
            </summary>
            <param name="caller">The class context.</param>
            <param name="protocol">The schema to be associated with the given wrapper.</param>
            <param name="userWrapperName">Name of the user class implementing the wrapper functions.</param>
            <param name="flags">Should be set to STREAM_IS_URL if protocol is a URL protocol. Default is 0, local stream.</param>
            <returns>False in case of failure (ex. schema already occupied).</returns>
        </member>
        <member name="M:PHP.Library.PhpWrappers.GetWrapperSchemes">
            <summary>Retrieve list of registered streams (only the names)</summary>  
        </member>
        <member name="T:PHP.Library.PhpWrappers.StreamWrapperRegisterFlags">
            <summary>
            Optional flag for <c>stream_wrapper_register</c> function.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpStreams">
            <summary>
            A class encapsulating the static implementations of PHP Stream functions.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.PhpStreams.Copy(PHP.Core.PhpResource,PHP.Core.PhpResource)">
            <summary>
            Copies data from one stream to another.
            </summary>
            <param name="source">Stream to copy data from. Opened for reading.</param>
            <param name="dest">Stream to copy data to. Opened for writing.</param> 
        </member>
        <member name="M:PHP.Library.PhpStreams.Copy(PHP.Core.PhpResource,PHP.Core.PhpResource,System.Int32)">
            <summary>
            Copies data from one stream to another.
            </summary>
            <param name="source">Stream to copy data from. Opened for reading.</param>
            <param name="dest">Stream to copy data to. Opened for writing.</param>
            <param name="maxlength">The maximum count of bytes to copy (<c>-1</c> to copy entire <paramref name="source"/> stream.</param> 
        </member>
        <member name="M:PHP.Library.PhpStreams.Copy(PHP.Core.PhpResource,PHP.Core.PhpResource,System.Int32,System.Int32)">
            <summary>
            Copies data from one stream to another.
            </summary>
            <param name="source">Stream to copy data from. Opened for reading.</param>
            <param name="destination">Stream to copy data to. Opened for writing.</param>
            <param name="maxlength">The maximum count of bytes to copy (<c>-1</c> to copy entire <paramref name="source"/> stream.</param>
            <param name="offset">The offset where to start to copy data.</param>
        </member>
        <member name="M:PHP.Library.PhpStreams.ReadLine(PHP.Core.PhpResource,System.Int32,System.String)">
            <summary>Gets line from stream resource up to a given delimiter</summary> 
            <param name="handle">A handle to a stream opened for reading.</param>
            <param name="ending">A string containing the end-of-line delimiter.</param>
            <param name="length">Maximum length of the return value.</param>
            <returns>One line from the stream <b>without</b> the <paramref name="ending"/> string at the end.</returns>
        </member>
        <member name="M:PHP.Library.PhpStreams.GetMetaData(PHP.Core.PhpResource)">
            <summary>
            Retrieves header/meta data from streams/file pointers
            </summary>
            <remarks>
            The result array contains the following items:
            * timed_out (bool) - TRUE if the stream timed out while waiting for data on the last call to fread() or fgets().
            * blocked (bool) - TRUE if the stream is in blocking IO mode. See stream_set_blocking().
            * eof (bool) - TRUE if the stream has reached end-of-file. Note that for socket streams this member can be TRUE even when unread_bytes is non-zero. To determine if there is more data to be read, use feof() instead of reading this item.
            * unread_bytes (int) - the number of bytes currently contained in the PHP's own internal buffer.
            * stream_type (string) - a label describing the underlying implementation of the stream.
            * wrapper_type (string) - a label describing the protocol wrapper implementation layered over the stream. See List of Supported Protocols/Wrappers for more information about wrappers.
            * wrapper_data (mixed) - wrapper specific data attached to this stream. See List of Supported Protocols/Wrappers for more information about wrappers and their wrapper data.
            * filters (array) - and array containing the names of any filters that have been stacked onto this stream. Documentation on filters can be found in the Filters appendix.
            * mode (string) - the type of access required for this stream (see Table 1 of the fopen() reference)
            * seekable (bool) - whether the current stream can be seeked.
            * uri (string) - the URI/filename associated with this stream.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpStreams.GetFiltersName(PHP.Core.PhpStream)">
            <summary>
            filters (array)
            - array containing the names of any filters that have been stacked onto this stream.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpStreams.ReadContents(PHP.Core.PhpResource)">
            <summary>
            Reads entire content of the stream.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStreams.ReadContents(PHP.Core.PhpResource,System.Int32)">
            <summary>
            Reads entire content of the stream.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStreams.ReadContents(PHP.Core.PhpResource,System.Int32,System.Int32)">
            <summary>
            Reads entire content of the stream.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStreams.SetBlocking(PHP.Core.PhpResource,System.Int32)">
            <summary>Set blocking/non-blocking (synchronous/asynchronous I/O operations) mode on a stream.</summary>
            <param name="resource">A handle to a stream resource.</param>
            <param name="mode"><c>1</c> for blocking, <c>0</c> for non-blocking.</param>
            <returns><c>true</c> if the operation is supported and was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpStreams.SetTimeout(PHP.Core.PhpResource,System.Int32)">
            <summary>Set timeout period on a stream</summary>
            <param name="resource">A handle to a stream opened for reading.</param>
            <param name="seconds">The number of seconds.</param>
            <returns><c>true</c> if the operation is supported and was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpStreams.SetTimeout(PHP.Core.PhpResource,System.Int32,System.Int32)">
            <summary>Set timeout period on a stream</summary>
            <param name="resource">A handle to a stream opened for reading.</param>
            <param name="seconds">The number of seconds.</param>
            <param name="microseconds">The number of microseconds.</param>
            <returns><c>true</c> if the operation is supported and was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpStreams.SetFileBuffer(PHP.Core.PhpResource,System.Int32)">
            <summary>Sets file buffering on the given stream.</summary>   
            <param name="resource">The stream to set write buffer size to.</param>
            <param name="buffer">Number of bytes the output buffer holds before 
            passing to the underlying stream.</param>
            <returns><c>true</c> on success.</returns>
        </member>
        <member name="M:PHP.Library.PhpStreams.SetWriteBuffer(PHP.Core.PhpResource,System.Int32)">
            <summary>Sets file buffering on the given stream.</summary>   
            <param name="resource">The stream to set write buffer size to.</param>
            <param name="buffer">Number of bytes the output buffer holds before 
            passing to the underlying stream.</param>
            <returns><c>true</c> on success.</returns>
        </member>
        <member name="M:PHP.Library.PhpStreams.Select(PHP.Core.PhpArray@,PHP.Core.PhpArray@,PHP.Core.PhpArray@,System.Int32)">
            <summary>
            Runs the equivalent of the select() system call on the given arrays of streams 
            with a timeout specified by tv_sec and tv_usec.
            </summary> 
        </member>
        <member name="M:PHP.Library.PhpStreams.Select(PHP.Core.PhpArray@,PHP.Core.PhpArray@,PHP.Core.PhpArray@,System.Int32,System.Int32)">
            <summary>Runs the equivalent of the select() system call on the given arrays of streams with a timeout specified by tv_sec and tv_usec </summary>   
        </member>
        <member name="T:PHP.Library.StreamSocket">
            <summary>
            Gives access to various network-based stream properties.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.StreamSocket.GetTransports">
            <summary>Retrieve list of registered socket transports</summary>  
        </member>
        <member name="M:PHP.Library.StreamSocket.SocketGetName(PHP.Core.PhpResource,System.Boolean)">
            <summary>
            Retrieve the name of the local or remote sockets.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.ConnectClient(System.String)">
            <summary>
            Open client socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.ConnectClient(System.String,System.Int32@)">
            <summary>
            Open client socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.ConnectClient(System.String,System.Int32@,System.String@)">
            <summary>
            Open client socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.ConnectClient(System.String,System.Int32@,System.String@,System.Double)">
            <summary>
            Open client socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.ConnectClient(System.String,System.Int32@,System.String@,System.Double,PHP.Library.StreamSocket.SocketOptions)">
            <summary>
            Open client socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.ConnectClient(System.String,System.Int32@,System.String@,System.Double,PHP.Library.StreamSocket.SocketOptions,PHP.Core.PhpResource)">
            <summary>
            Open client socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.ConnectServer(System.String)">
            <summary>
            Open client socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.ConnectServer(System.String,System.Int32@)">
            <summary>
            Open client socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.ConnectServer(System.String,System.Int32@,System.String@)">
            <summary>
            Open client socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.ConnectServer(System.String,System.Int32@,System.String@,System.Double)">
            <summary>
            Open client socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.ConnectServer(System.String,System.Int32@,System.String@,System.Double,PHP.Library.StreamSocket.SocketOptions)">
            <summary>
            Open client socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.ConnectServer(System.String,System.Int32@,System.String@,System.Double,PHP.Library.StreamSocket.SocketOptions,PHP.Core.PhpResource)">
            <summary>
            Open client socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.Accept(PHP.Core.PhpResource)">
            <summary>
            Accepts a connection on a server socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.Accept(PHP.Core.PhpResource,System.Int32)">
            <summary>
            Accepts a connection on a server socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.Accept(PHP.Core.PhpResource,System.Int32,System.String@)">
            <summary>
            Accepts a connection on a server socket.
            </summary>
        </member>
        <member name="M:PHP.Library.StreamSocket.Connect(System.String,System.Int32,System.Int32@,System.String@,System.Double,PHP.Library.StreamSocket.SocketOptions,PHP.Core.StreamContext)">
            <summary>
            Opens a new SocketStream
            </summary>
        </member>
        <member name="T:PHP.Library.StreamSocket.SocketOptions">
            <summary>
            Options used for <see cref="M:PHP.Library.StreamSocket.Connect(System.String,System.Int32,System.Int32@,System.String@,System.Double,PHP.Library.StreamSocket.SocketOptions,PHP.Core.StreamContext)"/>.
            </summary>
        </member>
        <member name="F:PHP.Library.StreamSocket.SocketOptions.None">
            <summary>
            Default option.
            </summary>
        </member>
        <member name="F:PHP.Library.StreamSocket.SocketOptions.Persistent">
            <summary>
            Client socket opened with <c>stream_socket_client</c> should remain persistent 
            between page loads.
            </summary>
        </member>
        <member name="F:PHP.Library.StreamSocket.SocketOptions.Asynchronous">
            <summary>
            Open client socket asynchronously.
            </summary>
        </member>
        <member name="T:PHP.Library.QuoteStyle">
            <summary>Quote conversion options.</summary>
        </member>
        <member name="F:PHP.Library.QuoteStyle.HtmlEntitiesDefault">
            <summary>
            Default quote style for <c>htmlentities</c>.
            </summary>
        </member>
        <member name="F:PHP.Library.QuoteStyle.SingleQuotes">
            <summary>Single quotes.</summary>
        </member>
        <member name="F:PHP.Library.QuoteStyle.DoubleQuotes">
            <summary>Double quotes.</summary>
        </member>
        <member name="F:PHP.Library.QuoteStyle.NoQuotes">
            <summary>
            No quotes.
            Will leave both double and single quotes unconverted.
            </summary>
        </member>
        <member name="F:PHP.Library.QuoteStyle.Compatible">
            <summary>
            Will convert double-quotes and leave single-quotes alone.
            </summary>
        </member>
        <member name="F:PHP.Library.QuoteStyle.BothQuotes">
            <summary>
            Both single and double quotes.
            Will convert both double and single quotes.
            </summary>
        </member>
        <member name="F:PHP.Library.QuoteStyle.Ignore">
            <summary>
            Silently discard invalid code unit sequences instead of
            returning an empty string. Using this flag is discouraged
            as it may have security implications.
            </summary>
        </member>
        <member name="F:PHP.Library.QuoteStyle.Substitute">
            <summary>
            Replace invalid code unit sequences with a Unicode
            Replacement Character U+FFFD (UTF-8) or &amp;#FFFD;
            (otherwise) instead of returning an empty string.
            </summary>
        </member>
        <member name="F:PHP.Library.QuoteStyle.Html401">
            <summary>
            Handle code as HTML 4.01.
            </summary>
        </member>
        <member name="F:PHP.Library.QuoteStyle.XML1">
            <summary>
            Handle code as XML 1.
            </summary>
        </member>
        <member name="F:PHP.Library.QuoteStyle.XHTML">
            <summary>
            Handle code as XHTML.
            </summary>
        </member>
        <member name="F:PHP.Library.QuoteStyle.HTML5">
            <summary>
            Handle code as HTML 5.
            </summary>
        </member>
        <member name="F:PHP.Library.QuoteStyle.Disallowed">
            <summary>
            Replace invalid code points for the given document type
            with a Unicode Replacement Character U+FFFD (UTF-8) or &amp;#FFFD;
            (otherwise) instead of leaving them as is.
            This may be useful, for instance, to ensure the well-formedness
            of XML documents with embedded external content.
            </summary>
        </member>
        <member name="T:PHP.Library.HtmlEntitiesTable">
            <summary>Types of HTML entities tables.</summary>
        </member>
        <member name="F:PHP.Library.HtmlEntitiesTable.SpecialChars">
            <summary>Table containing special characters only.</summary>
        </member>
        <member name="F:PHP.Library.HtmlEntitiesTable.AllEntities">
            <summary>Table containing all entities.</summary>
        </member>
        <member name="T:PHP.Library.PaddingType">
            <summary>
            Type of padding.
            </summary>
        </member>
        <member name="F:PHP.Library.PaddingType.Left">
            <summary>Pad a string from the left.</summary>
        </member>
        <member name="F:PHP.Library.PaddingType.Right">
            <summary>Pad a string from the right.</summary>
        </member>
        <member name="F:PHP.Library.PaddingType.Both">
            <summary>Pad a string from both sides.</summary>
        </member>
        <member name="T:PHP.Library.WordCountResult">
            <summary>
            Format of a return value of <see cref="M:PHP.Library.PhpStrings.CountWords(System.String)"/> method. Constants are not named in PHP.
            </summary>                   
        </member>
        <member name="F:PHP.Library.WordCountResult.WordCount">
            <summary>
            Return number of words in string.
            </summary>
        </member>
        <member name="F:PHP.Library.WordCountResult.WordsArray">
            <summary>
            Return array of words.
            </summary>
        </member>
        <member name="F:PHP.Library.WordCountResult.PositionsToWordsMapping">
            <summary>
            Return positions to words mapping.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpStrings">
            <summary>
            Manipulates strings.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="F:PHP.Library.PhpStrings.CryptStandardDES">
            <summary>
            Specifies whether standard DES algorithm is implemented.
            We set it to 1, but it's not really true - our DES encryption is nothing like PHP's, so the values will be different
            If you want key compatibility with PHP, use CRYPT_MD5 by passing in a key starting with "?1?"
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStrings.CryptExtendedDES">
            <summary>
            Specifies whether extended DES algorithm is implemented.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStrings.CryptMD5">
            <summary>
            Specifies whether MD5 algorithm is implemented.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStrings.CryptBlowfish">
            <summary>
            Specifies whether Blowfish encryption is implemented.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStrings.CryptSaltLength">
            <summary>
            Specifies the length of the salt applicable to the <see cref="M:PHP.Library.PhpStrings.Encrypt(PHP.Core.PhpBytes)"/> method.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStrings.PHP_QPRINT_MAXL">
            <summary>
            Maximum length of line according to quoted-printable specification.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStrings.DefaultHtmlEntitiesCharset">
            <summary>
            Default <c>encoding</c> used in <c>htmlentities</c>.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStrings.printfFloatPrecision">
            <summary>
            Default number of decimals when formatting floating-point numbers (%f in printf).
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.InitializeCharMap">
            <summary>
            Get clear <see cref="T:PHP.Library.CharMap"/> to be used by current thread. <see cref="F:PHP.Library.PhpStrings._charmap"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.Ord(PHP.Core.PhpBytes)">
            <summary>
            Returns ASCII code of the first character of a string of bytes.
            </summary>
            <param name="bytes">The string of bytes which the first byte will be returned.</param>
            <returns>The ASCII code of <paramref name="bytes"/>[0] or zero if null or empty.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.OrdUnicode(System.String)">
            <summary>
            Returns Unicode ordinal number of the first character of a string.
            </summary>
            <param name="str">The string which the first character's ordinal number is returned.</param>
            <returns>The ordinal number of <paramref name="str"/>[0].</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Chr(System.Int32)">
            <summary>
            Converts ordinal number of character to a binary string containing that character.
            </summary>
            <param name="charCode">The ASCII code.</param>
            <returns>The character with <paramref name="charCode"/> ASCIT code.</returns>
            <remarks>Current code-page is determined by the <see cref="P:PHP.Core.ApplicationConfiguration.GlobalizationSection.PageEncoding"/> property.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.ChrUnicode(System.Int32)">
            <summary>
            Converts ordinal number of Unicode character to a string containing that character.
            </summary>
            <param name="charCode">The ordinal number of character.</param>
            <returns>The character with <paramref name="charCode"/> ordnial number.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.BinToHex(PHP.Core.PhpBytes)">
            <summary>
            Converts a string of bytes into hexadecimal representation.
            </summary>
            <param name="bytes">The string of bytes.</param>
            <returns>Concatenation of hexadecimal values of bytes of <paramref name="bytes"/>.</returns>
            <example>
            The string "01A" is converted into string "303140" because ord('0') = 0x30, ord('1') = 0x31, ord('A') = 0x40.
            </example>
        </member>
        <member name="M:PHP.Library.PhpStrings.BinToHex(System.String)">
            <summary>
            Converts a string into hexadecimal representation.
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>
            The concatenated four-characters long hexadecimal numbers each representing one character of <paramref name="str"/>.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.ToBinary(PHP.Core.PhpBytes)">
            <summary>
            Converts a variable to a string of binary data.
            </summary>
            <param name="var">A variable.</param>
            <returns>Binary data.</returns>
        </member>
        <member name="F:PHP.Library.PhpStrings.cyrWin1251">
            <summary>
            Cyrillic translation table for Windows CP1251 character set.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStrings.cyrCp866">
            <summary>
            Cyrillic translation table for CP866 character set.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStrings.cyrIso88595">
            <summary>
            Cyrillic translation table for ISO88595 character set.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStrings.cyrMac">
            <summary>
            Cyrillic translation table for Mac character set.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.GetCyrTableInternal(System.Char)">
            <summary>
            Returns a Cyrillic translation table for a specified character set,
            </summary>
            <param name="code">The character set code. Can be one of 'k', 'w', 'i', 'a', 'd', 'm'.</param>
            <returns>The translation table or null if no table is associated with given charset code.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.ConvertCyrillic(PHP.Core.PhpBytes,System.String,System.String)">
            <summary>
    Converts a string from one Cyrillic character set to another.
  </summary><param name="bytes">The string to convert.</param><param name="srcCharset">The source character set. Can be one of 'k', 'w', 'i', 'a', 'd', 'm'.</param><param name="dstCharset">The destination character set. Can be one of 'k', 'w', 'i', 'a', 'd', 'm'.</param><returns>The converted string.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown if source or destination charset is invalid. </exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.CountChars(System.String)">
            <summary>
            Creates a histogram of Unicode character occurence in the given string.
            </summary>
            <param name="str">The string to be processed.</param>
            <returns>The array of characters frequency (unsorted).</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.CountBytes(System.Byte[])">
            <summary>
            Creates a histogram of byte occurence in the given array of bytes.
            </summary>
            <param name="bytes">The array of bytes to be processed.</param>
            <returns>The array of bytes frequency.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.CountChars(PHP.Core.PhpBytes)">
            <summary>
            Creates a histogram of byte occurrence in specified string of bytes.
            </summary>
            <param name="bytes">Bytes to be processed.</param>
            <returns>The array of characters frequency.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.CountChars(System.Object,System.Int32)">
            <summary>
            Creates a histogram of character occurence in a string or string of bytes.
            </summary>
            <param name="data">The string or bytes to be processed.</param>
            <param name="mode">Determines the type of result.</param>
            <returns>Depending on <paramref name="mode"/> the following is returned:
            <list type="bullet">
            <item><term>0</term><description>an array with the character ordinals as key and their frequency as value,</description></item> 
            <item><term>1</term><description>same as 0 but only characters with a frequency greater than zero are listed,</description></item>
            <item><term>2</term><description>same as 0 but only characters with a frequency equal to zero are listed,</description></item> 
            <item><term>3</term><description>a string containing all used characters is returned,</description></item> 
            <item><term>4</term><description>a string containing all not used characters is returned.</description></item>
            </list>
            </returns>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="mode"/> is invalid.</exception>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="data"/> contains Unicode characters greater than '\u0800'.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.GetCharactersContained(System.String,System.Char,System.Char)">
            <summary>
            Returns a <see cref="T:System.String"/> containing all characters used in the specified <see cref="T:System.String"/>.
            </summary>
            <param name="str">The string to process.</param>
            <param name="lower">The lower limit for returned chars.</param>
            <param name="upper">The upper limit for returned chars.</param>
            <returns>
            The string containing characters used in <paramref name="str"/> which are sorted according to their ordinal values.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="str"/> contains characters greater than '\u0800'.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.GetCharactersNotContained(System.String,System.Char,System.Char)">
            <summary>
            Returns a <see cref="T:System.String"/> containing all characters used in the specified <see cref="T:System.String"/>.
            </summary>
            <param name="str">The string to process.</param>
            <param name="lower">The lower limit for returned chars.</param>
            <param name="upper">The upper limit for returned chars.</param>
            <returns>
            The string containing characters used in <paramref name="str"/> which are sorted according to their ordinal values.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="str"/> contains characters greater than '\u0800'.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Encrypt(PHP.Core.PhpBytes)">
            <summary>
            Encrypts a string (one-way) with a random key.
            </summary>
            <param name="str">The string to encrypt.</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Encrypt(PHP.Core.PhpBytes,PHP.Core.PhpBytes)">
            <summary>
            Encrypts a string (one-way) with given key.
            </summary>
            <param name="str">The string of bytes to encrypt</param>
            <param name="salt">The key.</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Reverse(System.Object)">
            <summary>
            Reverses the given string.
            </summary>
            <param name="obj">The string to be reversed.</param>
            <returns>The reversed string or empty string if <paramref name="obj"/> is null.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.StrSpn(System.String,System.String)">
            <summary>
            Finds a length of an initial segment consisting entirely of specified characters.
            </summary>
            <param name="str">The string to be searched in.</param>
            <param name="acceptedChars">Accepted characters.</param>
            <returns>
            The length of the initial segment consisting entirely of characters in <paramref name="acceptedChars"/>
            or zero if any argument is null.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.StrSpn(System.String,System.String,System.Int32)">
            <summary>
            Finds a length of a segment consisting entirely of specified characters.
            </summary>
            <param name="str">The string to be searched in.</param>
            <param name="acceptedChars">Accepted characters.</param>
            <param name="offset">The relativized offset of the first item of the slice.</param>
            <returns>
            The length of the substring consisting entirely of characters in <paramref name="acceptedChars"/> or 
            zero if any argument is null. Search starts from absolutized <paramref name="offset"/>
            (see <see cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/> where <c>length</c> is infinity).
            </returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.StrSpn(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Finds a length of a segment consisting entirely of specified characters.
            </summary>
            <param name="str">The string to be searched in.</param>
            <param name="acceptedChars">Accepted characters.</param>
            <param name="offset">The relativized offset of the first item of the slice.</param>
            <param name="length">The relativized length of the slice.</param>
            <returns>
            The length of the substring consisting entirely of characters in <paramref name="acceptedChars"/> or 
            zero if any argument is null. Search starts from absolutized <paramref name="offset"/>
            (see <see cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/> and takes at most absolutized <paramref name="length"/> characters.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.StrCSpn(System.String,System.String)">
            <summary>
            Finds a length of an initial segment consisting entirely of any characters excpept for specified ones.
            </summary>
            <param name="str">The string to be searched in.</param>
            <param name="acceptedChars">Accepted characters.</param>
            <returns>
            The length of the initial segment consisting entirely of characters not in <paramref name="acceptedChars"/>
            or zero if any argument is null.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.StrCSpn(System.String,System.String,System.Int32)">
            <summary>
            Finds a length of a segment consisting entirely of any characters excpept for specified ones.
            </summary>
            <param name="str">The string to be searched in.</param>
            <param name="acceptedChars">Accepted characters.</param>
            <param name="offset">The relativized offset of the first item of the slice.</param>
            <returns>
            The length of the substring consisting entirely of characters not in <paramref name="acceptedChars"/> or 
            zero if any argument is null. Search starts from absolutized <paramref name="offset"/>
            (see <see cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/> where <c>length</c> is infinity).
            </returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.StrCSpn(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Finds a length of a segment consisting entirely of any characters except for specified ones.
            </summary>
            <param name="str">The string to be searched in.</param>
            <param name="acceptedChars">Accepted characters.</param>
            <param name="offset">The relativized offset of the first item of the slice.</param>
            <param name="length">The relativized length of the slice.</param>
            <returns>
            The length of the substring consisting entirely of characters not in <paramref name="acceptedChars"/> or 
            zero if any argument is null. Search starts from absolutized <paramref name="offset"/>
            (see <see cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/> and takes at most absolutized <paramref name="length"/> characters.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.StrSpnInternal(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal version of <see cref="M:PHP.Library.PhpStrings.StrSpn(System.String,System.String)"/> (complement off) and <see cref="M:PHP.Library.PhpStrings.StrCSpn(System.String,System.String)"/> (complement on).
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.Explode(System.String,System.String)">
            <summary>
            Splits a string by string separators.
            </summary>
            <param name="separator">The substrings separator. Must not be empty.</param>
            <param name="str">The string to be split.</param>
            <returns>The array of strings.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Explode(System.String,System.String,System.Int32)">
            <summary>
            Splits a string by string separators with limited resulting array size.
            </summary>
            <param name="separator">The substrings separator. Must not be empty.</param>
            <param name="str">The string to be split.</param>
            <param name="limit">
            The maximum number of elements in the resultant array. Zero value is treated in the same way as 1.
            If negative, then the number of separators found in the string + 1 is added to the limit.
            </param>
            <returns>The array of strings.</returns>
            <remarks>
            If <paramref name="str"/> is empty an array consisting of exacty one empty string is returned.
            If <paramref name="limit"/> is zero
            </remarks>
            <exception cref="T:PHP.Core.PhpException">Thrown if the <paramref name="separator"/> is null or empty or if <paramref name="limit"/>is not positive nor -1.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.JoinGeneric(PHP.Core.PhpArray)">
            <summary>
            Concatenates items of an array into a string separating them by a glue.
            </summary>
            <param name="pieces">The array to be impleded.</param>
            <returns>The glued string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.JoinGeneric(System.Object,System.Object)">
            <summary>
            Concatenates items of an array into a string separating them by a glue.
            </summary>
            <param name="pieces">The array to be impleded.</param>
            <param name="glue">The glue string.</param>
            <returns>The glued string.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown if neither <paramref name="glue"/> nor <paramref name="pieces"/> is not null and of type <see cref="T:PHP.Core.PhpArray"/>.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.ImplodeGeneric(PHP.Core.PhpArray)">
            <summary>
            Concatenates items of an array into a string.
            </summary>
            <param name="pieces">The <see cref="T:PHP.Core.PhpArray"/> to be imploded.</param>
            <returns>The glued string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.ImplodeGeneric(System.Object,System.Object)">
            <summary>
            Concatenates items of an array into a string separating them by a glue.
            </summary>
            <param name="glue">The glue of type <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpArray"/> to be imploded.</param>
            <param name="pieces">The <see cref="T:PHP.Core.PhpArray"/> to be imploded or glue of type <see cref="T:System.String"/>.</param>
            <returns>The glued string.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown if neither <paramref name="glue"/> nor <paramref name="pieces"/> is not null and of type <see cref="T:PHP.Core.PhpArray"/>.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Implode(System.Object,PHP.Core.PhpArray)">
            <summary>
            Concatenates items of an array into a string separating them by a glue.
            </summary>
            <param name="glue">The glue string.</param>
            <param name="pieces">The enumeration to be imploded.</param>
            <returns>The glued string.</returns>           
            <remarks>
            Items of <paramref name="pieces"/> are converted to strings in the manner of PHP 
            (i.e. by <see cref="M:PHP.Core.Convert.ObjectToString(System.Object)"/>).
            </remarks>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="pieces"/> is null.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Translate(System.String,System.String,System.String)">
            <summary>
            Replaces specified characters in a string with another ones.
            </summary>
            <param name="str">A string where to do the replacement.</param>
            <param name="from">Characters to be replaced.</param>
            <param name="to">Characters to replace those in <paramref name="from"/> with.</param>
            <returns>
            A copy of <paramref name="str"/> with all occurrences of each character in <paramref name="from"/> 
            replaced by the corresponding character in <paramref name="to"/>.
            </returns>
            <remarks>
            <para>If <paramref name="from"/> and <paramref name="to"/> are different lengths, the extra characters 
            in the longer of the two are ignored.</para>
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.Translate(System.String,PHP.Core.PhpArray)">
            <summary>
            Replaces substrings according to a dictionary.
            </summary>
            <param name="str">Input string.</param>
            <param name="replacePairs">
            An dictionary that contains <see cref="T:System.String"/> to <see cref="T:System.String"/> replacement mapping.
            </param>
            <returns>A copy of str, replacing all substrings (looking for the longest possible match).</returns>
            <remarks>This function will not try to replace stuff that it has already worked on.</remarks>
            <exception cref="T:PHP.Core.PhpException">Thrown if the <paramref name="replacePairs"/> argument is null.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Rotate13(System.String)">
            <summary>
            GetUserEntryPoint encode a string by shifting every letter (a-z, A-Z) by 13 places in the alphabet.
            </summary>
            <param name="str">The string to be encoded.</param>
            <returns>The string with characters rotated by 13 places.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Substring(System.Object,System.Int32)">
            <summary>
            Retrieves a substring from the given string.
            </summary>
            <param name="str">The source string (unicode or binary).</param>
            <param name="offset">The relativized offset of the first item of the slice.</param>
            <returns>The substring of the <paramref name="str"/>.</returns>
            <remarks>
            See <see cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/> for details about <paramref name="offset"/> where <c>length</c> is infinity.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.Substring(System.Object,System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from the given string.
            </summary>
            <param name="str">The source string (unicode or binary).</param>
            <param name="offset">The relativized offset of the first item of the slice.</param>
            <param name="length">The relativized length of the slice.</param>
            <returns>The substring of the <paramref name="str"/>.</returns>
            <remarks>
            See <see cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/> for details about <paramref name="offset"/> and <paramref name="length"/>.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.Repeat(System.Object,System.Int32)">
            <summary>
            Repeats a string.
            </summary>
            <param name="str">The input string, can be both binary and unicode.</param>
            <param name="count">The number of times <paramref name="str"/> should be repeated.</param>
            <returns>The string where <paramref name="str"/> is repeated <paramref name="count"/> times.</returns>
            <remarks>If <paramref name="str"/> is <b>null</b> reference, the function will return an empty string.</remarks>   
            <remarks>If <paramref name="count"/> is set to 0, the function will return <b>null</b> reference.</remarks>   
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="count"/> is negative.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.SubstringCountInternal(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Count the number of substring occurrences. Expects correct argument values.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.SubstringCount(System.String,System.String)">
            <summary>
            See <see cref="M:PHP.Library.PhpStrings.SubstringCount(System.String,System.String,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.SubstringCount(System.String,System.String,System.Int32)">
            <summary>
            See <see cref="M:PHP.Library.PhpStrings.SubstringCount(System.String,System.String,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.SubstringCount(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Count the number of substring occurrences.
            </summary>
            <param name="haystack">The string.</param>
            <param name="needle">The substring.</param>
            <param name="offset">The relativized offset of the first item of the slice. Zero if missing in overloads</param>
            <param name="length">The relativized length of the slice. Infinity if missing in overloads.</param>
            <returns>The number of <paramref name="needle"/> occurences in <paramref name="haystack"/>.</returns>
            <example>"aba" has one occurence in "ababa".</example>
            <remarks>
            See <see cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/> for details about <paramref name="offset"/> and <paramref name="length"/>.
            </remarks>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="needle"/> is null.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.SubstringReplace(System.Object,System.Object,System.Object)">
            <summary>
            See <see cref="M:PHP.Library.PhpStrings.SubstringReplace(System.Object,System.Object,System.Object,System.Object)"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.SubstringReplace(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Replaces a portion of a string or multiple strings with another string.
            </summary>
            <param name="subject">The subject of replacement (can be an array of subjects).</param>
            <param name="replacement">The replacement string (can be array of replacements).</param>
            <param name="offset">The relativized offset of the first item of the slice (can be array of offsets).</param>
            <param name="length">The relativized length of the slice (can be array of lengths).</param>
            <returns>
            Either the <paramref name="subject"/> with a substring replaced by <paramref name="replacement"/> if it is a string
            or an array containing items of the <paramref name="subject"/> with substrings replaced by <paramref name="replacement"/>
            and indexed by integer keys starting from 0. If <paramref name="replacement"/> is an array, multiple replacements take place.
            </returns>
            <remarks>
            See <see cref="M:PHP.Library.PhpMath.AbsolutizeRange(System.Int32@,System.Int32@,System.Int32)"/> for details about <paramref name="offset"/> and <paramref name="length"/>.
            Missing <paramref name="length"/> is considered to be infinity.
            If <paramref name="offset"/> and <paramref name="length"/> conversion results in position
            less than or equal to zero and greater than or equal to string length, the replacement is prepended and appended, respectively.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.SubstringReplace(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Performs substring replacements on subject.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.SubstringCompare(System.String,System.String,System.Int32)">
            <summary>
            Case sensitive comparison of <paramref name="mainStr"/> from position <paramref name="offset"/> 
            with <paramref name="str"/>. 
            </summary>
            <seealso cref="M:PHP.Library.PhpStrings.SubstringCompare(System.String,System.String,System.Int32,System.Int32,System.Boolean)"/>.
        </member>
        <member name="M:PHP.Library.PhpStrings.SubstringCompare(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Case sensitive comparison of <paramref name="mainStr"/> from position <paramref name="offset"/> 
            with <paramref name="str"/> up to the <paramref name="length"/> characters. 
            </summary>
            <seealso cref="M:PHP.Library.PhpStrings.SubstringCompare(System.String,System.String,System.Int32,System.Int32,System.Boolean)"/>.
        </member>
        <member name="M:PHP.Library.PhpStrings.SubstringCompare(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Compares substrings.
            </summary>
            <param name="mainStr">A string whose substring to compare with <paramref name="str"/>.</param>
            <param name="str">The second operand of the comparison.</param>
            <param name="offset">An offset in <paramref name="mainStr"/> where to start. Negative value means zero. Offsets beyond <paramref name="mainStr"/> means its length.</param>
            <param name="length">A maximal number of characters to compare. Non-positive values means infinity.</param>
            <param name="ignoreCase">Whether to ignore case.</param>
        </member>
        <member name="M:PHP.Library.PhpStrings.ToPhpArray(System.Collections.DictionaryEntry[]@)">
            <summary>
            Convert array of DictionaryEntry into PhpArray.
            </summary>
            <param name="subjects"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.ReplaceInternal(System.Object,System.Object,System.Object,System.Boolean,System.Int32@)">
            <summary>
            Implements <c>str_replace</c> and <c>str_ireplace</c> functions.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.Replace(System.Object,System.Object,System.Object,System.Int32@)">
            <summary>
            Replaces all occurrences of the <paramref name="searched"/> string 
            with the <paramref name="replacement"/> string counting the number of occurrences.
            </summary>
            <param name="searched">
            The substring(s) to replace. Can be string or <see cref="T:System.Collections.IDictionary"/> of strings.
            </param>
            <param name="replacement">
            The string(s) to replace <paramref name="searched"/>. Can be string or <see cref="T:System.Collections.IDictionary"/> of strings.
            </param>
            <param name="subject">
            The string or <see cref="T:System.Collections.IDictionary"/> of strings to perform the search and replace with.
            </param>
            <param name="count">
            The number of matched and replaced occurrences.
            </param>
            <returns>
            A string or an <see cref="T:System.Collections.IDictionary"/> with all occurrences of 
            <paramref name="searched"/> in <paramref name="subject"/> replaced
            with the given <paramref name="replacement"/> value.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Replace(System.Object,System.Object,System.Object)">
            <summary>
            Replaces all occurrences of the <paramref name="searched"/> string 
            with the <paramref name="replacement"/> string.
            <seealso cref="M:PHP.Library.PhpStrings.Replace(System.Object,System.Object,System.Object,System.Int32@)"/>
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.ReplaceInsensitively(System.Object,System.Object,System.Object,System.Int32@)">
            <summary>
            Case insensitive version of <see cref="M:PHP.Library.PhpStrings.Replace(System.Object,System.Object,System.Object,System.Int32@)"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.ReplaceInsensitively(System.Object,System.Object,System.Object)">
            <summary>
            Case insensitive version of <see cref="M:PHP.Library.PhpStrings.Replace(System.Object,System.Object,System.Object)"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.Shuffle(System.String)">
            <summary>
            Randomly shuffles a string.
            </summary>
            <param name="str">The string to shuffle.</param>
            <returns>One random permutation of <paramref name="str"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Split(System.String)">
            <summary>
            Converts a string to an array.
            </summary>
            <param name="str">The string to split.</param>
            <returns>An array with keys being character indeces and values being characters.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Split(System.Object,System.Int32)">
            <summary>
            Converts a string to an array.
            </summary>
            <param name="obj">The string to split.</param>
            <param name="splitLength">Length of chunks <paramref name="obj"/> should be split into.</param>
            <returns>An array with keys being chunk indeces and values being chunks of <paramref name="splitLength"/>
            length.</returns>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="splitLength"/> parameter is not positive (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.QuotedPrintableDecode(System.String)">
            <summary>
            Converts a quoted-printable string into (an 8-bit) string.
            </summary>
            <param name="str">The quoted-printable string.</param>
            <returns>The 8-bit string corresponding to the decoded <paramref name="str"/>.</returns>
            <remarks>Based on the implementation in quot_print.c PHP source file.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.QuotedPrintableEncode(System.String)">
            <summary>
            Convert a 8 bit string to a quoted-printable string
            </summary>
            <param name="str">The input string.</param>
            <returns>The quoted-printable string.</returns>
            <remarks>Based on the implementation in quot_print.c PHP source file.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.AddSlashes(System.String)">
            <summary>
            Adds backslashes before characters depending on current configuration.
            </summary>
            <param name="str">Data to process.</param>
            <returns>
            The string or string of bytes where some characters are preceded with the backslash character.
            </returns>
            <remarks>
            If <see cref="F:PHP.Core.LocalConfiguration.VariablesSection.QuoteInDbManner"/> ("magic_quotes_sybase" in PHP) option 
            is set then '\0' characters are slashed and single quotes are replaced with two single quotes. Otherwise,
            '\'', '"', '\\' and '\0 characters are slashed.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.AddCSlashes(System.String,System.String)">
            <summary>
    Adds backslashes before specified characters.
  </summary><param name="str">The string to be processed.</param><param name="mask">The list of characters to backslash. May contain intervals "a..b" where 
    <I>a</I>, <I>b</I> are characters and <I>a</I> is less than or equal to <I>b</I>.</param><returns>
    The string in which all characters contained in <paramref name="mask"/> list are backslashed
    and each backslashed character which isn't between '\u0032' and '\u007f'
    is converted in its octal representation (e.g. "\\123") except of '\a', '\b', '\f', '\n', '\r', '\t', '\v'
    characters which are converted into their string form (e.g. '\n' -&gt; "\\n", '\t' -&gt; "\\t" etc.).
  </returns>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="str"/> interval is invalid.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.AddCSlashesAscii(System.String,System.String)">
            <summary>
    Adds backslashes before specified characters.
  </summary><param name="str">The string to be processed.</param><param name="mask">The list of characters to backslash. May contain intervals "a..b" where 
    <I>a</I>, <I>b</I> are characters and <I>a</I> is less than or equal to <I>b</I>.</param><returns>
    The string in which all characters contained in <paramref name="mask"/> list are backslashed
    and each backslashed character which isn't between '\u0032' and '\u007f'
    is converted in its octal representation (e.g. "\\123") except of '\a', '\b', '\f', '\n', '\r', '\t', '\v'
    characters which are converted into their string form (e.g. '\n' -&gt; "\\n", '\t' -&gt; "\\t" etc.).
  </returns>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="str"/> interval is invalid.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.AddCSlashesInternal(System.String,System.String,System.String)">
            <param name="translatedStr">A sequence of chars or ints from which to take character codes.</param>
            <param name="translatedMask">A mask containing codes.</param>
            <param name="str">A string to be slashed.</param>
            <exception cref="T:PHP.Core.PhpException"><paramref name="translatedStr"/> interval is invalid.</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="translatedStr"/> contains Unicode characters greater than '\u0800'.</exception>
        </member>
        <member name="F:PHP.Library.PhpStrings.metaCharactersMap">
            <summary>
            A map of following characters: {'.', '\', '+', '*', '?', '[', '^', ']', '(', '$', ')'}.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.QuoteMeta(System.String)">
            <summary>
            Adds backslashes before following characters: {'.', '\', '+', '*', '?', '[', '^', ']', '(', '$', ')'}
            </summary>
            <param name="str">The string to be processed.</param>
            <returns>The string where said characters are backslashed.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.StripSlashes(System.String)">
            <summary>
            Unquote string quoted with <see cref="M:PHP.Library.PhpStrings.AddSlashes(System.String)"/>.
            </summary>
            <param name="str">The string to unquote.</param>
            <returns>The unquoted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.StripCSlashesAscii(System.String)">
            <summary>
            Returns a string with backslashes stripped off. Recognizes \a, \b, \f, \n, \r, \t, \v, \\, octal
            and hexadecimal representation.
            </summary>
            <param name="str">The string to strip.</param>
            <returns>The stripped string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.HtmlSpecialCharsEncode(System.String)">
            <summary>
            Converts special characters to HTML entities.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.HtmlSpecialCharsEncode(System.String,PHP.Library.QuoteStyle)">
            <summary>
            Converts special characters to HTML entities.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="quoteStyle">Quote conversion.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.HtmlSpecialCharsEncode(System.String,PHP.Library.QuoteStyle,System.String)">
            <summary>
            Converts special characters to HTML entities.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="quoteStyle">Quote conversion.</param>
            <param name="charSet">The character set used in conversion. This parameter is ignored.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.HtmlSpecialCharsEncode(System.String,PHP.Library.QuoteStyle,System.String,System.Boolean)">
            <summary>
            Converts special characters to HTML entities.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="quoteStyle">Quote conversion.</param>
            <param name="charSet">The character set used in conversion. This parameter is ignored.</param>
            <param name="doubleEncode">When double_encode is turned off PHP will not encode existing html entities, the default is to convert everything.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.HtmlSpecialChars(System.String,System.Int32,System.Int32)">
            <summary>
            Converts special characters of substring to HTML entities.
            </summary>
            <param name="str">The string.</param>
            <param name="index">First character of the string to covert.</param>
            <param name="length">Length of the substring to covert.</param>
            <returns>The converted substring.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.HtmlSpecialCharsEncode(System.String,System.Int32,System.Int32,PHP.Library.QuoteStyle,System.String)">
            <summary>
            Converts special characters of substring to HTML entities.
            </summary>
            <param name="str">The string.</param>
            <param name="index">First character of the string to covert.</param>
            <param name="length">Length of the substring to covert.</param>
            <param name="quoteStyle">Quote conversion.</param>
            <param name="charSet">The character set used in conversion. This parameter is ignored.</param>
            <returns>The converted substring.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.HtmlSpecialCharsDecode(System.String)">
            <summary>
            Converts HTML entities (&amp;amp;, &amp;quot;, &amp;lt;, and &amp;gt;) 
            in a specified string to the respective characters. 
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>String with converted entities.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.HtmlSpecialCharsDecode(System.String,PHP.Library.QuoteStyle)">
            <summary>
            Converts HTML entities (&amp;amp;, &amp;lt;, &amp;gt;, and optionally &amp;quot; and &amp;#039;) 
            in a specified string to the respective characters. 
            </summary>
            <param name="str">The string to be converted.</param>
            <param name="quoteStyle">Which quote entities to convert.</param>
            <returns>String with converted entities.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.EncodeHtmlEntities(System.Object)">
            <summary>
            Converts special characters to HTML entities.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The converted string.</returns>
            <remarks>This method is identical to <see cref="M:PHP.Library.PhpStrings.HtmlSpecialChars(System.String,System.Int32,System.Int32)"/> in all ways, except with
            <b>htmlentities</b> (<see cref="M:PHP.Library.PhpStrings.EncodeHtmlEntities(System.Object)"/>), all characters that have HTML character entity equivalents are
            translated into these entities.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.EncodeHtmlEntities(System.Object,PHP.Library.QuoteStyle)">
            <summary>
            Converts special characters to HTML entities.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="quoteStyle">Quote conversion.</param>
            <returns>The converted string.</returns>
            <remarks>This method is identical to <see cref="M:PHP.Library.PhpStrings.HtmlSpecialChars(System.String,System.Int32,System.Int32)"/> in all ways, except with
            <b>htmlentities</b> (<see cref="M:PHP.Library.PhpStrings.EncodeHtmlEntities(System.Object)"/>), all characters that have HTML character entity equivalents are
            translated into these entities.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.EncodeHtmlEntities(System.Object,PHP.Library.QuoteStyle,System.String)">
            <summary>
            Converts special characters to HTML entities.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="quoteStyle">Quote conversion.</param>
            <param name="charSet">The character set used in conversion.</param>
            <returns>The converted string.</returns>
            <remarks>This method is identical to <see cref="M:PHP.Library.PhpStrings.HtmlSpecialChars(System.String,System.Int32,System.Int32)"/> in all ways, except with
            <b>htmlentities</b> (<see cref="M:PHP.Library.PhpStrings.EncodeHtmlEntities(System.Object)"/>), all characters that have HTML character entity equivalents are
            translated into these entities.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.EncodeHtmlEntities(System.Object,PHP.Library.QuoteStyle,System.String,System.Boolean)">
            <summary>
            Converts special characters to HTML entities.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="quoteStyle">Quote conversion.</param>
            <param name="charSet">The character set used in conversion. This parameter is ignored.</param>
            <param name="doubleEncode">When it is turned off existing HTML entities will not be encoded. The default is to convert everything.</param>
            <returns>The converted string.</returns>
            <remarks>This method is identical to <see cref="M:PHP.Library.PhpStrings.HtmlSpecialChars(System.String,System.Int32,System.Int32)"/> in all ways, except with
            <b>htmlentities</b> (<see cref="M:PHP.Library.PhpStrings.EncodeHtmlEntities(System.Object)"/>), all characters that have HTML character entity equivalents are
            translated into these entities.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.GetHtmlTranslationTable(PHP.Library.HtmlEntitiesTable)">
            <summary>
            Returns the translation table used by <see cref="M:PHP.Library.PhpStrings.HtmlSpecialChars(System.String,System.Int32,System.Int32)"/> and <see cref="M:PHP.Library.PhpStrings.EncodeHtmlEntities(System.Object)"/>. 
            </summary>
            <param name="table">Type of the table that should be returned.</param>
            <returns>The table.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.GetHtmlTranslationTable(PHP.Library.HtmlEntitiesTable,PHP.Library.QuoteStyle)">
            <summary>
            Returns the translation table used by <see cref="M:PHP.Library.PhpStrings.HtmlSpecialChars(System.String,System.Int32,System.Int32)"/> and <see cref="M:PHP.Library.PhpStrings.EncodeHtmlEntities(System.Object)"/>. 
            </summary>
            <param name="table">Type of the table that should be returned.</param>
            <param name="quoteStyle">Quote conversion.</param>
            <returns>The table.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.DecodeHtmlEntities(System.Object)">
            <summary>
            Converts all HTML entities to their applicable characters. 
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.DecodeHtmlEntities(System.Object,PHP.Library.QuoteStyle)">
            <summary>
            Converts all HTML entities to their applicable characters.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="quoteStyle">Quote conversion.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.DecodeHtmlEntities(System.Object,PHP.Library.QuoteStyle,System.String)">
            <summary>
            Converts all HTML entities to their applicable characters.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="quoteStyle">Quote conversion.</param>
            <param name="charSet">The character set used in conversion.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.StripTags(System.String)">
            <summary>
            Strips HTML and PHP tags from a string.
            </summary>
            <param name="str">The string to strip tags from.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.StripTags(System.String,System.String)">
            <summary>
            Strips HTML and PHP tags from a string.
            </summary>
            <param name="str">The string to strip tags from.</param>
            <param name="allowableTags">Tags which should not be stripped in the following format:
            &lt;tag1&gt;&lt;tag2&gt;&lt;tag3&gt;.</param>
            <returns>The result.</returns>
            <remarks>This is a slightly modified php_strip_tags which can be found in PHP sources.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.StripTags(System.String,System.String,System.Int32@)">
            <summary>
            Strips tags allowing to set automaton start state and read its accepting state.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.NewLinesToBreaks(System.String)">
            <summary>
            Inserts HTML line breaks before all newlines in a string.
            </summary>
            <param name="str">The input string.</param>
            <returns>The output string.</returns>
            <remarks>Inserts "&lt;br/&gt;" before each "\n", "\n\r", "\r", "\r\n".</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.NewLinesToBreaks(System.String,System.Boolean)">
            <summary>
            Inserts HTML line breaks before all newlines in a string.
            </summary>
            <param name="str">The input string.</param>
            <param name="isXHTML">Whenever to use XHTML compatible line breaks or not. </param>
            <returns>The output string.</returns>
            <remarks>Inserts "&lt;br/&gt;" before each "\n", "\n\r", "\r", "\r\n".</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.ChunkSplit(System.String)">
            <summary>
            Splits a string into chunks 76 characters long separated by "\r\n".
            </summary>
            <param name="str">The string to split.</param>
            <returns>The splitted string.</returns>
            <remarks>"\r\n" is also appended after the last chunk.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.ChunkSplit(System.String,System.Int32)">
            <summary>
            Splits a string into chunks of a specified length separated by "\r\n".
            </summary>
            <param name="str">The string to split.</param>
            <param name="chunkLength">The chunk length.</param>
            <returns>The splitted string.</returns>
            <remarks>"\r\n" is also appended after the last chunk.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.ChunkSplit(System.String,System.Int32,System.String)">
            <summary>
            Splits a string into chunks of a specified length separated by a specified string.
            </summary>
            <param name="str">The string to split.</param>
            <param name="chunkLength">The chunk length.</param>
            <param name="endOfChunk">The chunk separator.</param>
            <returns><paramref name="endOfChunk"/> is also appended after the last chunk.</returns>
        </member>
        <member name="F:PHP.Library.PhpStrings.vowelsMap">
            <summary>
            A map of following characters: {'A', 'E', 'I', 'Y', 'O', 'U', 'a', 'e', 'i', 'y', 'o', 'u'}.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.IsVowel(System.Char)">
            <summary>
            Indicates whether a character is recognized as an English vowel.
            </summary>
            <param name="c">The character.</param>
            <returns>True iff recognized as an English vowel.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Soundex(System.String)">
            <summary>
            Calculates the soundex key of a string.
            </summary>
            <param name="str">The string to calculate soundex key of.</param>
            <returns>The soundex key of <paramref name="str"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Metaphone(System.String)">
            <summary>
            Calculates the metaphone key of a string.
            </summary>
            <param name="str">The string to calculate metaphone key of.</param>
            <returns>The metaphone key of <paramref name="str"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Levenshtein(System.String,System.String)">
            <summary>
            Calculates the Levenshtein distance between two strings.
            </summary>
            <param name="src">The first string.</param>
            <param name="dst">The second string.</param>
            <returns>The Levenshtein distance between <paramref name="src"/> and <paramref name="dst"/> or -1 if any of the
            strings is longer than 255 characters.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Levenshtein(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the Levenshtein distance between two strings given the cost of insert, replace
            and delete operations.
            </summary>
            <param name="src">The first string.</param>
            <param name="dst">The second string.</param>
            <param name="insertCost">Cost of the insert operation.</param>
            <param name="replaceCost">Cost of the replace operation.</param>
            <param name="deleteCost">Cost of the delete operation.</param>
            <returns>The Levenshtein distance between <paramref name="src"/> and <paramref name="dst"/> or -1 if any of the
            strings is longer than 255 characters.</returns>
            <remarks>See <A href="http://www.merriampark.com/ld.htm">http://www.merriampark.com/ld.htm</A> for description of the algorithm.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.SimilarTextInternal(System.String,System.String)">
            <summary>
            Calculates the similarity between two strings. Internal recursive function.
            </summary>
            <param name="first">The first string.</param>
            <param name="second">The second string.</param>
            <returns>The number of matching characters in both strings.</returns>
            <remarks>Algorithm description is supposed to be found 
            <A href="http://citeseer.nj.nec.com/oliver93decision.html">here</A>.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.SimilarText(System.String,System.String)">
            <summary>
            Calculates the similarity between two strings.
            </summary>
            <param name="first">The first string.</param>
            <param name="second">The second string.</param>
            <returns>The number of matching characters in both strings.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.SimilarText(System.String,System.String,System.Double@)">
            <summary>
            Calculates the similarity between two strings.
            </summary>
            <param name="first">The first string.</param>
            <param name="second">The second string.</param>
            <param name="percent">Will become the similarity in percent.</param>
            <returns>The number of matching characters in both strings.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Tokenize(System.String)">
            <summary>
            Splits a string into tokens using given set of delimiter characters. Tokenizes the string
            that was passed to a previous call of the two-parameter version.
            </summary>
            <param name="delimiters">Set of delimiters.</param>
            <returns>The next token or a <B>null</B> reference.</returns>
            <remarks>This method implements the behavior introduced with PHP 4.1.0, i.e. empty tokens are
            skipped and never returned.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.Tokenize(System.String,System.String)">
            <summary>
            Splits a string into tokens using given set of delimiter characters.
            </summary>
            <param name="str">The string to tokenize.</param>
            <param name="delimiters">Set of delimiters.</param>
            <returns>The first token or null. Call one-parameter version of this method to get next tokens.
            </returns>
            <remarks>This method implements the behavior introduced with PHP 4.1.0, i.e. empty tokens are
            skipped and never returned.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.Trim(System.String)">
            <summary>
            Strips whitespace characters from the beginning and end of a string.
            </summary>
            <param name="str">The string to trim.</param>
            <returns>The trimmed string.</returns>
            <remarks>This one-parameter version trims '\0', '\t', '\n', '\r', '\x0b' and ' ' (space).</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.Trim(System.String,System.String)">
            <summary>
            Strips given characters from the beginning and end of a string.
            </summary>
            <param name="str">The string to trim.</param>
            <param name="whiteSpaceCharacters">The characters to strip from <paramref name="str"/>. Can contain ranges
            of characters, e.g. "\0x00..\0x1F".</param>
            <returns>The trimmed string.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="whiteSpaceCharacters"/> is invalid char mask. Multiple errors may be printed out.</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="str"/> contains Unicode characters greater than '\u0800'.</exception>
        </member>
        <member name="F:PHP.Library.PhpStrings.phpBlanks">
            <summary>Characters treated as blanks by the PHP.</summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.TrimStart(System.String)">
            <summary>
            Strips whitespace characters from the beginning of a string.
            </summary>
            <param name="str">The string to trim.</param>
            <returns>The trimmed string.</returns>
            <remarks>This one-parameter version trims '\0', '\t', '\n', '\r', '\u000b' and ' ' (space).</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.TrimStart(System.String,System.String)">
            <summary>
            Strips given characters from the beginning of a string.
            </summary>
            <param name="str">The string to trim.</param>
            <param name="whiteSpaceCharacters">The characters to strip from <paramref name="str"/>. Can contain ranges
            of characters, e.g. \0x00..\0x1F.</param>
            <returns>The trimmed string.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="whiteSpaceCharacters"/> is invalid char mask. Multiple errors may be printed out.</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="whiteSpaceCharacters"/> contains Unicode characters greater than '\u0800'.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.TrimEnd(System.String)">
            <summary>
            Strips whitespace characters from the end of a string.
            </summary>
            <param name="str">The string to trim.</param>
            <returns>The trimmed string.</returns>
            <remarks>This one-parameter version trims '\0', '\t', '\n', '\r', '\u000b' and ' ' (space).</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.TrimEnd(System.String,System.String)">
            <summary>
            Strips given characters from the end of a string.
            </summary>
            <param name="str">The string to trim.</param>
            <param name="whiteSpaceCharacters">The characters to strip from <paramref name="str"/>. Can contain ranges
            of characters, e.g. \0x00..\0x1F.</param>
            <returns>The trimmed string.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="whiteSpaceCharacters"/> is invalid char mask. Multiple errors may be printed out.</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="whiteSpaceCharacters"/> contains Unicode characters greater than '\u0800'.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Chop(System.String)">
            <summary>
            Strips whitespace characters from the end of a string.
            </summary>
            <param name="str">The string to trim.</param>
            <returns>The trimmed string.</returns>
            <remarks>This one-parameter version trims '\0', '\t', '\n', '\r', '\u000b' and ' ' (space).</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.Chop(System.String,System.String)">
            <summary>
            Strips given characters from the end of a string.
            </summary>
            <param name="str">The string to trim.</param>
            <param name="whiteSpaceCharacters">The characters to strip from <paramref name="str"/>. Can contain ranges
            of characters, e.g. \0x00..\0x1F.</param>
            <returns>The trimmed string.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="whiteSpaceCharacters"/> is invalid char mask. Multiple errors may be printed out.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.UpperCaseFirst(System.String)">
            <summary>
            Makes a string's first character uppercase.
            </summary>
            <param name="str">The input string.</param>
            <returns><paramref name="str"/> with the first character converted to uppercase.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.LowerCaseFirst(System.String)">
            <summary>
            Returns a string with the first character of str , lowercased if that character is alphabetic.
            Note that 'alphabetic' is determined by the current locale. For instance, in the default "C" locale characters such as umlaut-a (ä) will not be converted. 
            </summary>
            <param name="str">The input string.</param>
            <returns>Returns the resulting string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.UpperCaseWords(System.String)">
            <summary>
            Makes the first character of each word in a string uppercase.
            </summary>
            <param name="str">The input string.</param>
            <returns><paramref name="str"/> with the first character of each word in a string converted to 
            uppercase.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.FormatInternal(System.String,System.Object[])">
            <summary>
            Returns a formatted string.
            </summary>
            <param name="format">The format string. 
            See <A href="http://www.php.net/manual/en/function.sprintf.php">PHP manual</A> for details.
            Besides, a type specifier "%C" is applicable. It converts an integer value to Unicode character.</param>
            <param name="arguments">The arguments.</param>
            <returns>The formatted string or null if there is too few arguments.</returns>
            <remarks>Assumes that either <paramref name="format"/> nor <paramref name="arguments"/> is null.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.Format(System.String,System.Object[])">
            <summary>
            Returns a formatted string.
            </summary>
            <param name="format">The format string. For details, see PHP manual.</param>
            <param name="arguments">The arguments.
            See <A href="http://www.php.net/manual/en/function.sprintf.php">PHP manual</A> for details.
            Besides, a type specifier "%C" is applicable. It converts an integer value to Unicode character.</param>
            <returns>The formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="arguments"/> parameter is null.</exception>
            <exception cref="T:PHP.Core.PhpException">Thrown when there is less arguments than expeceted by formatting string.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Format(System.String,PHP.Core.PhpArray)">
            <summary>
            Returns a formatted string.
            </summary>
            <param name="format">The format string. For details, see PHP manual.</param>
            <param name="arguments">The arguments.</param>
            <returns>The formatted string.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown when there is less arguments than expeceted by formatting string.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.ScanFormat(System.String,System.String,PHP.Core.PhpReference,PHP.Core.PhpReference[])">
            <summary>
            Parses input from a string according to a format. 
            </summary>
            <param name="str">The string to be parsed.</param>
            <param name="format">The format. See <c>sscanf</c> C function for details.</param>
            <param name="arg">A PHP reference which value is set to the first parsed value.</param>
            <param name="arguments">PHP references which values are set to the next parsed values.</param>
            <returns>The number of parsed values.</returns>
            <remarks><seealso cref="M:PHP.Library.PhpStrings.ParseString(System.String,System.String,System.Collections.IList)"/>.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.ScanFormat(System.String,System.String)">
            <summary>
            Parses input from a string according to a format. 
            </summary>
            <param name="str">The string to be parsed.</param>
            <param name="format">The format. See <c>sscanf</c> C function for details.</param>
            <returns>A new instance of <see cref="T:PHP.Core.PhpArray"/> containing parsed values indexed by integers starting from 0.</returns>
            <remarks><seealso cref="M:PHP.Library.PhpStrings.ParseString(System.String,System.String,System.Collections.IList)"/>.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.ParseString(System.String,System.String,System.Collections.IList)">
            <summary>
            Parses a string according to a specified format.
            </summary>
            <param name="str">The string to be parsed.</param>
            <param name="format">The format. See <c>sscanf</c> C function for details.</param>
            <param name="result">A list which to fill with results.</param>
            <returns><paramref name="result"/> for convenience.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="result"/> is a <B>null</B> reference.</exception>
            <exception cref="T:PHP.Core.PhpException">Invalid formatting specifier.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.ParseRangeSpecifier(System.String,System.Int32@,System.Boolean@)">
            <summary>
            Extracts a range specifier from the formatting string.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="f">The position if the string pointing to the '[' at the beginning and to ']' at the end.</param>
            <param name="complement">Whether '^' was stated as the first character in the specifier.</param>
            <returns>
            <see cref="T:PHP.Library.CharMap"/> containing the characters belonging to the range or a <B>null</B> reference on error.
            </returns>
            <remarks>
            Specifier should be enclosed to brackets '[', ']' and can contain complement character '^' at the beginning.
            The first character after '[' or '^' can be ']'. In such a case the specifier continues to the next ']'.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.ParseSubstring(System.Char,System.Int32,System.String,System.Int32@)">
            <summary>
            Parses a string according to a given specifier.
            </summary>
            <param name="specifier">The specifier.</param>
            <param name="width">A width of the maximal parsed substring.</param>
            <param name="str">The string to be parsed.</param>
            <param name="s">A current position in the string.</param>
            <returns>The parsed value or a <B>null</B> reference on error.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.WordWrap(System.String)">
            <summary>
            Wraps a string to 75 characters using new line as the break character.
            </summary>
            <param name="str">The string to word-wrap.</param>
            <returns>The word-wrapped string.</returns>
            <remarks>The only "break-point" character is space (' '). If a word is longer than 75 characers
            it will stay uncut.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.WordWrap(System.String,System.Int32)">
            <summary>
            Wraps a string to a specified number of characters using new line as the break character.
            </summary>
            <param name="str">The string to word-wrap.</param>
            <param name="width">The desired line length.</param>
            <returns>The word-wrapped string.</returns>
            <remarks>The only "break-point" character is space (' '). If a word is longer than <paramref name="width"/> 
            characers it will stay uncut.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.WordWrap(System.String,System.Int32,System.String)">
            <summary>
            Wraps a string to a specified number of characters using a specified string as the break string.
            </summary>
            <param name="str">The string to word-wrap.</param>
            <param name="width">The desired line length.</param>
            <param name="lineBreak">The break string.</param>
            <returns>The word-wrapped string.</returns>
            <remarks>The only "break-point" character is space (' '). If a word is longer than <paramref name="width"/> 
            characers it will stay uncut.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.WordWrap(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Wraps a string to a specified number of characters using a specified string as the break string.
            </summary>
            <param name="str">The string to word-wrap.</param>
            <param name="width">The desired line length.</param>
            <param name="lineBreak">The break string.</param>
            <param name="cut">If true, words longer than <paramref name="width"/> will be cut so that no line is longer
            than <paramref name="width"/>.</param>
            <returns>The word-wrapped string.</returns>
            <remarks>The only "break-point" character is space (' ').</remarks>
            <exception cref="T:PHP.Core.PhpException">Thrown if the combination of <paramref name="width"/> and <paramref name="cut"/> is invalid.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.FormatNumber(System.Double)">
            <summary>
            Formats a number with grouped thousands.
            </summary>
            <param name="number">The number to format.</param>
            <returns>String representation of the number without decimals (rounded) with comma between every group
            of thousands.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.FormatNumber(System.Double,System.Int32)">
            <summary>
            Formats a number with grouped thousands and with given number of decimals.
            </summary>
            <param name="number">The number to format.</param>
            <param name="decimals">The number of decimals.</param>
            <returns>String representation of the number with <paramref name="decimals"/> decimals with a dot in front, and with 
            comma between every group of thousands.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.FormatNumber(System.Double,System.Int32,System.String,System.String)">
            <summary>
            Formats a number with grouped thousands, with given number of decimals, with given decimal point string
            and with given thousand separator.
            </summary>
            <param name="number">The number to format.</param>
            <param name="decimals">The number of decimals within range 0 to 99.</param>
            <param name="decimalPoint">The string to separate integer part and decimals.</param>
            <param name="thousandsSeparator">The character to separate groups of thousands. Only the first character
            of <paramref name="thousandsSeparator"/> is used.</param>
            <returns>
            String representation of the number with <paramref name="decimals"/> decimals with <paramref name="decimalPoint"/> in 
            front, and with <paramref name="thousandsSeparator"/> between every group of thousands.
            </returns>
            <remarks>
            The <b>number_format</b> (<see cref="M:PHP.Library.PhpStrings.FormatNumber(System.Double)"/>) PHP function requires <paramref name="decimalPoint"/> and <paramref name="thousandsSeparator"/>
            to be of length 1 otherwise it uses default values (dot and comma respectively). As this behavior does
            not make much sense, this method has no such limitation except for <paramref name="thousandsSeparator"/> of which
            only the first character is used (documented feature).
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.FormatMoney(System.String,System.Double)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.IsHebrew(System.Char)">
            <summary>
            Indicates whether a character is recognized as Hebrew letter.
            </summary>
            <param name="c">The character.</param>
            <returns>
            Whether the <paramref name="c"/> is a Hebrew letter according to 
            the <A href="http://www.unicode.org/charts/PDF/U0590.pdf">Unicode 4.0 standard</A>.
            </returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.IsBlank(System.Char)">
            <summary>
            Indicates whether a character is a space or tab.
            </summary>
            <param name="c">The character.</param>
            <returns>True iff space or tab.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.IsNewLine(System.Char)">
            <summary>
            Indicates whether a character is new line or carriage return.
            </summary>
            <param name="c">The character.</param>
            <returns>True iff new line or carriage return.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.HebrewReverseInternal(System.String,System.Int32,System.Boolean)">
            <summary>
            Converts logical Hebrew text to visual text.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="maxCharactersPerLine">If &gt;0, maximum number of characters per line. If 0,
            there is no maximum.</param>
            <param name="convertNewLines">Whether to convert new lines '\n' to "&lt;br/&gt;".</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.HebrewReverse(System.String)">
            <summary>
            Converts logical Hebrew text to visual text.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The comverted string.</returns>
            <remarks>Although PHP returns false if <paramref name="str"/> is null or empty there is no reason to do so.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.HebrewReverse(System.String,System.Int32)">
            <summary>
            Converts logical Hebrew text to visual text.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="maxCharactersPerLine">Maximum number of characters per line.</param>
            <returns>The comverted string.</returns>
            <remarks>Although PHP returns false if <paramref name="str"/> is null or empty there is no reason to do so.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.HebrewReverseWithNewLines(System.String)">
            <summary>
            Converts logical Hebrew text to visual text and also converts new lines '\n' to "&lt;br/&gt;".
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The converted string.</returns>
            <remarks>Although PHP returns false if <paramref name="str"/> is null or empty there is no reason to do so.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.HebrewReverseWithNewLines(System.String,System.Int32)">
            <summary>
            Converts logical Hebrew text to visual text and also converts new lines '\n' to "&lt;br/&gt;".
            </summary>
            <param name="str">The string to convert.</param>
            <param name="maxCharactersPerLine">Maximum number of characters per line.</param>
            <returns>The comverted string.</returns>
            <remarks>Although PHP returns false if <paramref name="str"/> is null or empty there is no reason to do so.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.NaturalCompare(System.String,System.String)">
            <summary>
            Compares two strings using the natural ordering.
            </summary>
            <example>NaturalCompare("page155", "page16") returns 1.</example>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.NaturalCompareIgnoringCase(System.String,System.String)">
            <summary>
            Compares two strings using the natural ordering. Ignores the case.
            </summary>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Pad(System.Object,System.Int32)">
            <summary>
            Pads a string to a certain length with spaces.
            </summary>
            <param name="str">The string to pad.</param>
            <param name="totalWidth">Desired length of the returned string.</param>
            <returns><paramref name="str"/> padded on the right with spaces.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Pad(System.Object,System.Int32,System.Object)">
            <summary>
            Pads a string to certain length with another string.
            </summary>
            <param name="str">The string to pad.</param>
            <param name="totalWidth">Desired length of the returned string.</param>
            <param name="paddingString">The string to use as the pad.</param>
            <returns><paramref name="str"/> padded on the right with <paramref name="paddingString"/>.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="paddingString"/> is null or empty.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Pad(System.Object,System.Int32,System.Object,PHP.Library.PaddingType)">
            <summary>
            Pads a string to certain length with another string.
            </summary>
            <param name="str">The string to pad.</param>
            <param name="totalWidth">Desired length of the returned string.</param>
            <param name="paddingString">The string to use as the pad.</param>
            <param name="paddingType">Specifies whether the padding should be done on the left, on the right,
            or on both sides of <paramref name="str"/>.</param>
            <returns><paramref name="str"/> padded with <paramref name="paddingString"/>.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="paddingType"/> is invalid or <paramref name="paddingString"/> is null or empty.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.CountWords(System.String)">
            <summary>
            Counts the number of words inside a string.
            </summary>
            <param name="str">The string containing words to count.</param>
            <returns>Then number of words inside <paramref name="str"/>. </returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.CountWords(System.String,PHP.Library.WordCountResult)">
            <summary>
            Splits a string into words.
            </summary>
            <param name="str">The string to split.</param>
            <param name="format">If <see cref="F:PHP.Library.WordCountResult.WordsArray"/>, the method returns an array containing all
            the words found inside the string. If <see cref="F:PHP.Library.WordCountResult.PositionsToWordsMapping"/>, the method returns 
            an array, where the key is the numeric position of the word inside the string and the value is the 
            actual word itself.</param>
            <returns>Array of words. Keys are just numbers starting with 0 (when <paramref name="format"/> is 
            WordCountResult.WordsArray) or positions of the words inside <paramref name="str"/> (when
            <paramref name="format"/> is <see cref="F:PHP.Library.WordCountResult.PositionsToWordsMapping"/>).</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="format"/> is invalid.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Compare(System.String,System.String)">
            <summary>
            Compares two specified strings, honoring their case, using culture invariant comparison.
            </summary>
            <param name="str1">A string.</param>
            <param name="str2">A string.</param>
            <returns>Returns -1 if <paramref name="str1"/> is less than <paramref name="str2"/>; +1 if <paramref name="str1"/> is greater than <paramref name="str2"/>,
            and 0 if they are equal.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.CompareIgnoringCase(System.String,System.String)">
            <summary>
            Compares two specified strings, ignoring their case, using culture invariant comparison.
            </summary>
            <param name="str1">A string.</param>
            <param name="str2">A string.</param>
            <returns>Returns -1 if <paramref name="str1"/> is less than <paramref name="str2"/>; +1 if <paramref name="str1"/> is greater than <paramref name="str2"/>,
            and 0 if they are equal.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Compare(System.String,System.String,System.Int32)">
            <summary>
            Compares parts of two specified strings, honoring their case, using culture invariant comparison.
            </summary>
            <param name="str1">The lesser string.</param>
            <param name="str2">The greater string.</param>
            <param name="length">The upper limit of the length of parts to be compared.</param>
            <returns>Returns -1 if <paramref name="str1"/> is less than <paramref name="str2"/>; +1 if <paramref name="str1"/> is greater than <paramref name="str2"/>,
            and 0 if they are equal.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.CompareIgnoringCase(System.String,System.String,System.Int32)">
            <summary>
            Compares parts of two specified strings, honoring their case, using culture invariant comparison.
            </summary>
            <param name="str1">A string.</param>
            <param name="str2">A string.</param>
            <param name="length">The upper limit of the length of parts to be compared.</param>
            <returns>Returns -1 if <paramref name="str1"/> is less than <paramref name="str2"/>; +1 if <paramref name="str1"/> is greater than <paramref name="str2"/>,
            and 0 if they are equal.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Strpos(System.String,System.Object)">
            <summary>
            Retrieves the index of the first occurrence of the <paramref name="needle"/> in the <paramref name="haystack"/>.
            </summary>
            <remarks>See <see cref="M:PHP.Library.PhpStrings.Strpos(System.String,System.Object,System.Int32)"/> for details.</remarks>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="needle"/> is empty string.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Strpos(System.String,System.Object,System.Int32)">
            <summary>
            Retrieves the index of the first occurrence of the <paramref name="needle"/> in the <paramref name="haystack"/>.
            The search starts at the specified character position.
            </summary>
            <param name="haystack">The string to search in.</param>
            <param name="needle">
            The string or the ordinal value of character to search for. 
            If non-string is passed as a needle then it is converted to an integer (modulo 256) and the character
            with such ordinal value (relatively to the current encoding set in the configuration) is searched.</param>
            <param name="offset">
            The position where to start searching. Should be between 0 and a length of the <paramref name="haystack"/> including.
            </param>
            <returns>Non-negative integer on success, -1 otherwise.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="offset"/> is out of bounds or <paramref name="needle"/> is empty string.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Stripos(System.String,System.Object)">
            <summary>
            Retrieves the index of the first occurrence of the <paramref name="needle"/> in the <paramref name="haystack"/>
            (case insensitive).
            </summary>
            <remarks>See <see cref="M:PHP.Library.PhpStrings.Strpos(System.String,System.Object,System.Int32)"/> for details.</remarks>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="needle"/> is empty string.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Stripos(System.String,System.Object,System.Int32)">
            <summary>
            Retrieves the index of the first occurrence of the <paramref name="needle"/> in the <paramref name="haystack"/>
            (case insensitive).
            </summary>
            <remarks>See <see cref="M:PHP.Library.PhpStrings.Strpos(System.String,System.Object,System.Int32)"/> for details.</remarks>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="offset"/> is out of bounds or <paramref name="needle"/> is empty string.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Strrpos(System.String,System.Object)">
            <summary>
            Retrieves the index of the last occurrence of the <paramref name="needle"/> in the <paramref name="haystack"/>.
            </summary>
            <remarks>See <see cref="M:PHP.Library.PhpStrings.Strrpos(System.String,System.Object,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.Strrpos(System.String,System.Object,System.Int32)">
            <summary>
            Retrieves the index of the last occurrence of the <paramref name="needle"/> in the <paramref name="haystack"/>.
            The search starts at the specified character position.
            </summary>
            <param name="haystack">The string to search in.</param>
            <param name="needle">The string or the ordinal value of character to search for. 
            If non-string is passed as a needle then it is converted to an integer (modulo 256) and the character
            with such ordinal value (relatively to the current encoding set in the configuration) is searched.</param>
            <param name="offset">
            The position where to start searching (is non-negative) or a negative number of characters
            prior the end where to stop searching (if negative).
            </param>
            <returns>Non-negative integer on success, -1 otherwise.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="offset"/> is out of bounds or <paramref name="needle"/> is empty string.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Strripos(System.String,System.String)">
            <summary>
            Retrieves the index of the last occurrence of the <paramref name="needle"/> in the <paramref name="haystack"/>
            (case insensitive).
            </summary>
            <remarks>See <see cref="M:PHP.Library.PhpStrings.Strrpos(System.String,System.Object,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:PHP.Library.PhpStrings.Strripos(System.String,System.Object,System.Int32)">
            <summary>
            Retrieves the index of the last occurrence of the <paramref name="needle"/> in the <paramref name="haystack"/>
            (case insensitive).
            </summary>
            <remarks>See <see cref="M:PHP.Library.PhpStrings.Strrpos(System.String,System.Object,System.Int32)"/> for details.</remarks>
            <exception cref="T:PHP.Core.PhpException">Thrown if <paramref name="offset"/> is out of bounds or <paramref name="needle"/> is empty string.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Strpos(System.String,System.Object,System.Int32,System.Boolean)">
            <summary>
            Implementation of <c>str[i]pos</c> functions.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.Strrpos(System.String,System.Object,System.Int32,System.Boolean)">
            <summary>
            Implementation of <c>strr[i]pos</c> functions.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.Strstr(System.String,System.Object)">
            <summary>
            Finds first occurrence of a string.
            </summary>
            <param name="haystack">The string to search in.</param>
            <param name="needle">The substring to search for.</param>
            <returns>Part of <paramref name="haystack"/> string from the first occurrence of <paramref name="needle"/> to the end 
            of <paramref name="haystack"/> or null if <paramref name="needle"/> is not found.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown when <paramref name="needle"/> is empty.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Strstr(System.String,System.Object,System.Boolean)">
            <summary>
            Finds first occurrence of a string.
            </summary>
            <param name="haystack">The string to search in.</param>
            <param name="needle">The substring to search for.</param>
            <param name="beforeNeedle">If TRUE, strstr() returns the part of the haystack before the first occurrence of the needle. </param>
            <returns>Part of <paramref name="haystack"/> string from the first occurrence of <paramref name="needle"/> to the end 
            of <paramref name="haystack"/> or null if <paramref name="needle"/> is not found.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown when <paramref name="needle"/> is empty.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Strchr(System.String,System.Object)">
            <summary>
            Finds first occurrence of a string. Alias of <see cref="M:PHP.Library.PhpStrings.Strstr(System.String,System.Object)"/>.
            </summary>
            <remarks>See <see cref="M:PHP.Library.PhpStrings.Strstr(System.String,System.Object)"/> for details.</remarks>
            <exception cref="T:PHP.Core.PhpException">Thrown when <paramref name="needle"/> is empty.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Stristr(System.String,System.Object)">
            <summary>
            Case insensitive version of <see cref="M:PHP.Library.PhpStrings.Strstr(System.String,System.Object)"/>.
            </summary>
            <exception cref="T:PHP.Core.PhpException">Thrown when <paramref name="needle"/> is empty.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Stristr(System.String,System.Object,System.Boolean)">
            <summary>
            Case insensitive version of <see cref="M:PHP.Library.PhpStrings.Strstr(System.String,System.Object)"/>.
            </summary>
            <param name="haystack"></param>
            <param name="needle"></param>
            <param name="beforeNeedle">If TRUE, strstr() returns the part of the haystack before the first occurrence of the needle. </param>
            <exception cref="T:PHP.Core.PhpException">Thrown when <paramref name="needle"/> is empty.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.Strrchr(System.String,System.Object)">
            <summary>
            This function returns the portion of haystack  which starts at the last occurrence of needle  and goes until the end of haystack . 
            </summary>
            <param name="haystack">The string to search in.</param>
            <param name="needle">
            If needle contains more than one character, only the first is used. This behavior is different from that of strstr().
            If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.
            </param>
            <returns>This function returns the portion of string, or FALSE  if needle  is not found.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown when <paramref name="needle"/> is empty.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.StrstrImpl(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Implementation of <c>str[i]{chr|str}</c> functions.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.Strpbrk(System.String,System.String)">
            <summary>
            Finds first occurence of any of given characters.
            </summary>
            <param name="haystack">The string to search in.</param>
            <param name="charList">The characters to search for given as a string.</param>
            <returns>Part of <paramref name="haystack"/> string from the first occurrence of any of characters contained
            in <paramref name="charList"/> to the end of <paramref name="haystack"/> or <B>null</B> if no character is
            found.</returns>
            <exception cref="T:PHP.Core.PhpException">Thrown when <paramref name="charList"/> is empty.</exception>
        </member>
        <member name="M:PHP.Library.PhpStrings.ToLower(System.String)">
            <summary>
            Returns string with all alphabetic characters converted to lowercase. 
            Note that 'alphabetic' is determined by the current culture.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The lowercased string or empty string if <paramref name="str"/> is null.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.ToUpper(System.String)">
            <summary>
            Returns string with all alphabetic characters converted to lowercase. 
            Note that 'alphabetic' is determined by the current culture.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The lowercased string or empty string if <paramref name="str"/> is null.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.Length(System.Object)">
            <summary>
            Returns the length of a string.
            </summary>
            <param name="x">The string (either <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/>).</param>
            <returns>The length of the string.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.ObjectToString(System.Object,System.String)">
            <summary>
            Converts object <paramref name="obj"/> to <see cref="T:System.String"/>.
            In case if bunary string, the conversion routine respects given <paramref name="charSet"/>.
            </summary>
            <param name="obj">Object to be converted.</param>
            <param name="charSet">Character set used to encode binary string to <see cref="T:System.String"/>.</param>
            <returns>String representation of <paramref name="obj"/>.</returns>
        </member>
        <member name="T:PHP.Library.PhpStrings.StringLengthComparer">
            <summary>
            Compares objects according to the length of their string representation
            as the primary criteria and the alphabetical order as the secondary one.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.StringLengthComparer.Compare(System.String,System.String)">
            <summary>
            Performs length and alphabetical comparability backwards (longer first).
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:PHP.Library.PhpStrings.SubstringReplacer">
            <summary>
            A class that enables customized replacement of substrings.
            Optimized for multiple replacements.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.SubstringReplacer.Evaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Called for each matched substring.
            </summary>
            <returns>Replacement.</returns>
        </member>
        <member name="M:PHP.Library.PhpStrings.SubstringReplacer.Replace(System.String,System.Int32@)">
            <summary>
            Replaces all substrings of <paramref name="subject"/> specified in constructor parameter <c>search</c> 
            with <see cref="F:PHP.Library.PhpStrings.SubstringReplacer.replacement"/>. If <paramref name="replacementCount"/> is non-negative,
            advances it by the number of replacements. Retuns resulting string.
            </summary>
        </member>
        <member name="T:PHP.Library.PhpStrings.TokenizerContext">
            <summary>
            Holds a context of <see cref="M:PHP.Library.PhpStrings.Tokenize(System.String)"/> method.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStrings.TokenizerContext.String">
            <summary>
            The <b>str</b> parameter of last <see cref="M:PHP.Library.PhpStrings.Tokenize(System.String)"/> method call.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStrings.TokenizerContext.Position">
            <summary>
            Current position in <see cref="T:PHP.Library.PhpStrings.TokenizerContext"/>.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpStrings.TokenizerContext.Length">
            <summary>
            The length of <see cref="T:PHP.Library.PhpStrings.TokenizerContext"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.TokenizerContext.Clear">
            <summary>
            Clears thread static field. Called on request end.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpStrings.TokenizerContext.#cctor">
            <summary>
            Registeres <see cref="M:PHP.Library.PhpStrings.TokenizerContext.Clear"/> called on request end.
            </summary>
        </member>
        <member name="P:PHP.Library.PhpStrings.TokenizerContext.CurrentContext">
            <summary>
            A context associated with the current thread.
            </summary>
        </member>
        <member name="T:PHP.Library.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.additional_parameters_not_supported">
            <summary>
              Looks up a localized string similar to Additional parameters not supported.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.arg_empty">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; should not be empty.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.arg_invalid_length">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; has invalid length.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.arg_invalid_value">
            <summary>
              Looks up a localized string similar to Value &apos;{1}&apos; is invalid for argument &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.arg_negative">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; should not be negative.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.arg_negative_or_zero">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; should be positive.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.arg_not_object_or_class_name">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; not an object or class name.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.arg_null_or_empty">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; should not be null nor empty.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.arg_out_of_bounds">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is out of bounds.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.arg_zero">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; should not be zero.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.argument_not_array">
            <summary>
              Looks up a localized string similar to Argument #{0} should be an array.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.argument_not_array_or_sort_flag">
            <summary>
              Looks up a localized string similar to Argument #{0} should be an array or a sort flag.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.argument_not_integer_indexed_array">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; must be an integer indexed array.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.argument_not_object_or_class_name">
            <summary>
              Looks up a localized string similar to Second argument is not an object or class name.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.aspnet_sessionhandler_id_reset">
            <summary>
              Looks up a localized string similar to By changing ASP.NET session ID, all the session data created during this request will be lost. New session will start in the next request..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.asterisk_ignored">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos;: &apos;*&apos; ignored.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.attempted_variable_override">
            <summary>
              Looks up a localized string similar to Attempted {0} variable override.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.bad_collating_el_at_first_endpoint_of_range">
            <summary>
              Looks up a localized string similar to Collating element representing more than one character cannot be the first endpoint of range.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.binary_data_overflown">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos;: binary data length has overflown integer size.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.both_must_be_arrays_or_nonarrays">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.call_user_method_deprecated">
            <summary>
              Looks up a localized string similar to This function is deprecated, use the call_user_func variety with the array(&amp;$obj, &quot;method&quot;) syntax instead.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.cannot_open_connection">
            <summary>
              Looks up a localized string similar to Cannot open connection: {0}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.cannot_retrieve_schema">
            <summary>
              Looks up a localized string similar to Cannot retrieve schema information.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.cannot_send_email">
            <summary>
              Looks up a localized string similar to Cannot send the mail due to error: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.char_range_no_char_on_left">
            <summary>
              Looks up a localized string similar to Invalid &apos;{0}&apos;-range, no character to the left of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.char_range_no_char_on_right">
            <summary>
              Looks up a localized string similar to Invalid &apos;{0}&apos;-range, no character to the right of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.char_range_not_incrementing">
            <summary>
              Looks up a localized string similar to Invalid &apos;{0}&apos;-range, &apos;{0}&apos;-range needs to be incrementing.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.character_class_at_second_endpoint_of_range">
            <summary>
              Looks up a localized string similar to Character class cannot be an endpoint of range (second endpoint here).
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.class_has_no_unserializer">
            <summary>
              Looks up a localized string similar to Class {0} has no unserializer.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.class_instantiation_failed">
            <summary>
              Looks up a localized string similar to Unable to instantiate class &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.command_execution_failed">
            <summary>
              Looks up a localized string similar to Command execution failed: {0}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.connection_limit_reached">
            <summary>
              Looks up a localized string similar to Number of connections reached the limit ({0}).
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.cut_forced_with_zero_width">
            <summary>
              Looks up a localized string similar to Can&apos;t force cut when width is zero.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.database_selection_failed">
            <summary>
              Looks up a localized string similar to Database selection failed: {0}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.delimiter_alnum_backslash">
            <summary>
              Looks up a localized string similar to Delimiter must not be alphanumeric or backslash.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.descriptor_item_invalid_mode">
            <summary>
              Looks up a localized string similar to Invalid mode for descriptor item #{0}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.descriptor_item_missing_file_name">
            <summary>
              Looks up a localized string similar to Missing file name parameter from descriptor item #{0}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.descriptor_item_missing_mode">
            <summary>
              Looks up a localized string similar to Missing mode parameter from descriptor item #{0}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.descriptor_item_missing_qualifier">
            <summary>
              Looks up a localized string similar to Descriptor item #{0} should contain handle qualifier and parameters.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.descriptor_item_not_array_nor_resource">
            <summary>
              Looks up a localized string similar to Descriptor item #{0} must be either an array or a resource.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.descriptor_unsupported">
            <summary>
              Looks up a localized string similar to Descriptor #{0} is not supported.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.deserialization_failed">
            <summary>
              Looks up a localized string similar to Deserialization failed: {0} at offset {1} of {2} bytes.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.different_variables_and_specifiers">
            <summary>
              Looks up a localized string similar to The number of variables ({0}) differs from the number of format specifiers ({1}).
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.directory_not_found">
            <summary>
              Looks up a localized string similar to The directory &apos;{0}&apos; does not exist.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.dl_not_supported">
            <summary>
              Looks up a localized string similar to Extensions cannot be loaded by script. Use configuration files instead..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.equivalence_class_at_first_endpoint_of_range">
            <summary>
              Looks up a localized string similar to Equivalence class cannot be endpoint of range (first endpoint here).
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.equivalence_class_at_second_endpoint_of_range">
            <summary>
              Looks up a localized string similar to Equivalence class cannot be an endpoint of a range (second endpoint here).
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.error_closing_connection">
            <summary>
              Looks up a localized string similar to Error occured while closing the connection: {0}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.error_report">
            <summary>
              Looks up a localized string similar to Phalanger: Error report.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.error_starting_process">
            <summary>
              Looks up a localized string similar to An error occured while starting process: {0}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.error_terminating_process">
            <summary>
              Looks up a localized string similar to An error occured while terminating process {0} (pid = {1}): {2}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.error_waiting_for_process_exit">
            <summary>
              Looks up a localized string similar to An error occured while waiting for process exit: {0}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.field_not_exists">
            <summary>
              Looks up a localized string similar to Field (column) of name &apos;{0}&apos; doesn&apos;t exist in the result.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.first_endpoint_character_class">
            <summary>
              Looks up a localized string similar to First endpoint of range cannot be a character class.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.function_disallowed_in_web_context">
            <summary>
              Looks up a localized string similar to Function not allowed in web server context.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.header_not_supported">
            <summary>
              Looks up a localized string similar to Header &apos;{0}&apos; not supported and has been ignored.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.headers_has_been_sent">
            <summary>
              Looks up a localized string similar to Headers has already been sent; modification of cookies or other HTTP headers are not allowed.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.host_not_responding">
            <summary>
              Looks up a localized string similar to Requested host not responding.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.http_request_failed">
            <summary>
              Looks up a localized string similar to HTTP request failed with message &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.illegal_hex_digit">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos;: illegal hex digit &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.ini_parse_error">
            <summary>
              Looks up a localized string similar to Parse error on line {0}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_argument">
            <summary>
              Looks up a localized string similar to Invalid argument &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_base64_encoded_data">
            <summary>
              Looks up a localized string similar to Invalid base64 encoded data.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_cache_limiter">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid value for cache limiter.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_calendar">
            <summary>
              Looks up a localized string similar to Invalid calendar id &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_connection_resource">
            <summary>
              Looks up a localized string similar to Invalid connection resource.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_context_resource">
            <summary>
              Looks up a localized string similar to Supplied resource is not a valid Stream-Context resource.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_data_bad_back_reference">
            <summary>
              Looks up a localized string similar to Invalid data encountered in the stream (bad back reference marker)..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_data_bad_length">
            <summary>
              Looks up a localized string similar to Invalid data encountered in the stream (bad length marker)..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_data_bad_type">
            <summary>
              Looks up a localized string similar to Invalid data encountered in the stream (the specified data type is invalid in this context)..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_data_result_field_index">
            <summary>
              Looks up a localized string similar to Field index {0} is invalid for {1} resource #{2}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_data_result_row_index">
            <summary>
              Looks up a localized string similar to Row index {0} is invalid for {1} resource #{2}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_directory_resource">
            <summary>
              Looks up a localized string similar to Supplied resource is not a valid Directory listing resource.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_dst_charset">
            <summary>
              Looks up a localized string similar to Invalid destination charser.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_email_address">
            <summary>
              Looks up a localized string similar to Email address &apos;{0}&apos; is not valid.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_handle_qualifier">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid handle qualifier.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_path">
            <summary>
              Looks up a localized string similar to Path &apos;{0}&apos; is invalid.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_port">
            <summary>
              Looks up a localized string similar to Invalid port number &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_process_resource">
            <summary>
              Looks up a localized string similar to Invalid process resource.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_result_resource">
            <summary>
              Looks up a localized string similar to Invalid query result resource.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_scan_conversion_character">
            <summary>
              Looks up a localized string similar to Invalid scan conversion character &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_session_save_path">
            <summary>
              Looks up a localized string similar to Invalid session save path &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_src_charset">
            <summary>
              Looks up a localized string similar to Invalid source charser.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_stored_procedure_resource">
            <summary>
              Looks up a localized string similar to Invalid stored procedure resource.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_type_name">
            <summary>
              Looks up a localized string similar to Invalid name of type.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_url">
            <summary>
              Looks up a localized string similar to Not a valid URL, unable to parse ({0}).
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.invalid_uuencoded_string">
            <summary>
              Looks up a localized string similar to The given parameter is not a valid uuencoded string.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.limit_less_than_one">
            <summary>
              Looks up a localized string similar to Limit is less than 1.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.modifier_not_supported">
            <summary>
              Looks up a localized string similar to Ignoring unsupported pattern modifier &apos;{0}&apos; in perl regular expression.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.modifier_unknown">
            <summary>
              Looks up a localized string similar to Ignoring unknown pattern modifier &apos;{0}&apos; in perl regular expression.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.modifiers_inconsistent">
            <summary>
              Looks up a localized string similar to Pattern modifier &apos;{0}&apos; is ignored due to use of modifier &apos;{1}&apos; in perl regular expression.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.multibyte_chars_unsupported">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos;: multi-byte characters are not supported.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.must_be_positive">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to 0.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.neither_string_nor_integer_value">
            <summary>
              Looks up a localized string similar to Can {0} only string and integer values.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.no_prefix_security_hazard">
            <summary>
              Looks up a localized string similar to No prefix specified - possible security hazard.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.no_prefix_specified">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.not_enought_arguments">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos;: not enough arguments.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.not_enought_characters">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos;: not enough characters in string.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.not_enought_input">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos;: not enough input, need {1}, have {2}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.number_of_elements_not_positive">
            <summary>
              Looks up a localized string similar to Number of elements must be positive.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.number_of_items_not_between_one_and_item_count">
            <summary>
              Looks up a localized string similar to The number of items is {0} but it must be between 1 and array item count {1}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.number_of_repetitions_negative">
            <summary>
              Looks up a localized string similar to Number of repetitions must be non-negative.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.option_already_registered">
            <summary>
              Looks up a localized string similar to Option &apos;{0}&apos; has already been registered..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.option_missing">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; option missing.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.option_not_supported">
            <summary>
              Looks up a localized string similar to Configuration option &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.option_readonly">
            <summary>
              Looks up a localized string similar to Configuration option &apos;{0}&apos; cannot be set or restored since it is read only.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.outside_string">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos;: outside of string.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.parameter_already_bound">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; has already been bound.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.parse_error">
            <summary>
              Looks up a localized string similar to Parse error on position {0} near &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.preg_match_pattern_set_order">
            <summary>
              Looks up a localized string similar to PREG_PATTERN_ORDER and PREG_SET_ORDER flags are mutually exclusive.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.preg_no_end_delimiter">
            <summary>
              Looks up a localized string similar to No ending delimiter &apos;{0}&apos; found.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.question_mark_folowing_nothing">
            <summary>
              Looks up a localized string similar to Quantifier &apos;?&apos; following nothing (after &apos;(&apos;).
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.range_first_character_greater">
            <summary>
              Looks up a localized string similar to Range: first character code is greater than second.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.range_not_allowed">
            <summary>
              Looks up a localized string similar to Range not allowed here (first endpoint may be illeagal).
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.range_shared_endpoint">
            <summary>
              Looks up a localized string similar to Ranges cannot share an endpoint.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.ranges_not_supported">
            <summary>
              Looks up a localized string similar to Ranges for current page encoding are not supported.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.recursion_detected">
            <summary>
              Looks up a localized string similar to Recursion detected.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.regexp_cannot_end_with_open_bracket">
            <summary>
              Looks up a localized string similar to Regular expression cannot end with &apos;(&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.regexp_cannot_end_with_two_backslashes">
            <summary>
              Looks up a localized string similar to Regular expression cannot end with &apos;\\&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.regexp_duplicate_quantifier">
            <summary>
              Looks up a localized string similar to Nothing to repeat - duplicate quantifier at offset {0} in matching part of regular expression..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.regular_expression_empty">
            <summary>
              Looks up a localized string similar to Empty regular expression.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.replacement_array_pattern_not">
            <summary>
              Looks up a localized string similar to Replacement cannot be an array if pattern is not an array.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.segment_length_not_positive">
            <summary>
              Looks up a localized string similar to The segment length must be greater then zero.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.serialization_binder_unsupported">
            <summary>
              Looks up a localized string similar to PhpFormatter does not support serialization binders..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.serialization_failed">
            <summary>
              Looks up a localized string similar to Serialization failed: {0}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.serialization_unsupported_type">
            <summary>
              Looks up a localized string similar to Serialization of type {0} is not supported by PhpFormatter..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.serialize_must_return_null_or_string">
            <summary>
              Looks up a localized string similar to {0}::serialize() must return a string or NULL.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.serializer_already_registered">
            <summary>
              Looks up a localized string similar to Serializer &apos;{0}&apos; has already been registered..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.session_not_exists">
            <summary>
              Looks up a localized string similar to Session doesn&apos;t not exist.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.should_be_specified">
            <summary>
              Looks up a localized string similar to {0} should be specified.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.sleep_seconds_less_zero">
            <summary>
              Looks up a localized string similar to Number of seconds must be greater than or equal to 0.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.smtp_sendmail_from_not_set">
            <summary>
              Looks up a localized string similar to From header was not specified..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.socket_open_error">
            <summary>
              Looks up a localized string similar to Error connecting &apos;{0}&apos;: {0}.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.socket_open_timeout">
            <summary>
              Looks up a localized string similar to Connect timeout: {0} did not respond.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.sorting_flag_already_specified">
            <summary>
              Looks up a localized string similar to Argument #{0} specifies a sorting flag which has already been specified for the array.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.streaming_context_unsupported">
            <summary>
              Looks up a localized string similar to PhpFormatter does not support streaming context..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.substr_count_length_exceeds">
            <summary>
              Looks up a localized string similar to Length value {0} exceeds string length.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.substr_count_offset_exceeds">
            <summary>
              Looks up a localized string similar to Offset value {0} exceeds string length.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.substr_count_offset_zero">
            <summary>
              Looks up a localized string similar to Offset should be greater than or equal to 0.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.substr_count_zero_length">
            <summary>
              Looks up a localized string similar to Length should be greater than 0.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.surrogate_selector_unsupported">
            <summary>
              Looks up a localized string similar to PhpFormatter does not support surrogate selectors..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.too_big_unicode_character">
            <summary>
              Looks up a localized string similar to String containg Unicode characters greater than &apos;\u0800&apos; are not supported.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.too_few_arguments">
            <summary>
              Looks up a localized string similar to Too few arguments.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.unenclosed_bracket_expression">
            <summary>
              Looks up a localized string similar to Unenclosed bracket expression.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.unexpected_arg_given">
            <summary>
              Looks up a localized string similar to expects parameter {0} to be {1}, {2} given.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.unexpected_character_in_stream">
            <summary>
              Looks up a localized string similar to Unexpected character in the stream..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.unexpected_end_of_stream">
            <summary>
              Looks up a localized string similar to Unexpected end of stream..
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.uninitialized_string_offset">
            <summary>
              Looks up a localized string similar to Uninitialized string offset &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.unknown_character_class">
            <summary>
              Looks up a localized string similar to Unknown character class name.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.unknown_file_type">
            <summary>
              Looks up a localized string similar to File type not recognized.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.unknown_format_code">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos;: unknown format code.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.unknown_option">
            <summary>
              Looks up a localized string similar to Configuration option &apos;{0}&apos; is not known.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.unknown_serializer">
            <summary>
              Looks up a localized string similar to Serializer &apos;{0}&apos; is unknown. It hasn&apos;t been registered by any loaded library.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.unknown_timezone">
            <summary>
              Looks up a localized string similar to Unknown time zone &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.unknown_timezone_env">
            <summary>
              Looks up a localized string similar to Unknown time zone &apos;{0}&apos; specified by &apos;TZ&apos; environment variable.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.unmathed_format_bracket">
            <summary>
              Looks up a localized string similar to Unmatched [ in format string.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.unused_arguments">
            <summary>
              Looks up a localized string similar to {0} unused arguments.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.user_session_handler_failed">
            <summary>
              Looks up a localized string similar to User session handler operation &apos;{0}&apos; failed (sid = &apos;{1}&apos;, save_path = &apos;{2}&apos;).
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.using_implicit_timezone">
            <summary>
              Looks up a localized string similar to Using system time zone settings which may be inaccurate (&apos;{0}&apos; zone selected).
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.web_server_not_available">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.WindowsTZ">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
            &lt;!-- document downloaded from http://unicode.org/repos/cldr/trunk/common/supplemental/windowsZones.xml --&gt;
            &lt;supplementalData&gt;
            	&lt;windowsZones&gt;
            		&lt;mapTimezones otherVersion=&quot;07dc0000&quot; typeVersion=&quot;2012a&quot;&gt;
            
            			&lt;!-- (UTC-12:00) International Date Line West --&gt;
            			&lt;mapZone other=&quot;Dateline Standard Time&quot; territory=&quot;001&quot; type=&quot;Etc/GMT+12&quot;/&gt;
            			&lt;mapZone other=&quot;Dateline Standard Time&quot; territory=&quot;ZZ&quot; type=&quot;Etc/GMT+12&quot;/&gt;
            
            			&lt;!-- (UTC-11:00) Coordinated Universal Time-11 --&gt;
            			 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:PHP.Library.Strings.word_boundary_not_single_bracket_expr">
            <summary>
              Looks up a localized string similar to Word boundary must be single bracket expression.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.wrappers_must_match">
            <summary>
              Looks up a localized string similar to The destination wrapper is different from the source one; use copy instead.
            </summary>
        </member>
        <member name="P:PHP.Library.Strings.zero_argument_invalid">
            <summary>
              Looks up a localized string similar to Zero is not a valid argument number.
            </summary>
        </member>
        <member name="M:PHP.Library.UrlRewriter.Clear">
            <summary>
            Clears thread static field. Called on request end.
            </summary>
        </member>
        <member name="M:PHP.Library.UrlRewriter.#cctor">
            <summary>
            Registers <see cref="M:PHP.Library.UrlRewriter.Clear"/> called on request end.
            </summary>
        </member>
        <member name="P:PHP.Library.UrlRewriter.Current">
            <summary>
            A context associated with the current thread.
            </summary>
        </member>
        <member name="T:PHP.Library.UrlRewriter.TagsUrlRewriter">
            <summary>
            Tags parser, modifies the specified elements in the HTML code.
            </summary>
        </member>
        <member name="T:PHP.Library.UrlRewriterTagsParser">
            <summary>
            Parsing of HTML tags,
            primarily targeted for parsing and replacing URLs within output buffering.
            
            Parses the input text and calls several events, when specified HTML elements are found.
            </summary>
        </member>
        <member name="M:PHP.Library.UrlRewriterTagsParser.OnTagAttribute(System.String,System.String@,System.String@,System.Char@)">
            <summary>
            Called when tag attribute is found and parsed.
            Allows to modify the attribute.
            </summary>
            <param name="tagName">The tag name, where the attribute was found.</param>
            <param name="attributeName">The attribute name. Can be modified.</param>
            <param name="attributeValue">The attribute value. Can be modified.</param>
            <param name="attributeValueQuote">The attribute value quote character. Can be modified.</param>
        </member>
        <member name="M:PHP.Library.UrlRewriterTagsParser.OnTagElement(System.String,System.String@)">
            <summary>
            Called when the whole tag is found and parsed.
            </summary>
            <param name="tagName">The tag name.</param>
            <param name="tagString">The whole tag input string. Can be modified.</param>
        </member>
        <member name="M:PHP.Library.UrlRewriterTagsParser.ParseHtml(PHP.Library.UrlRewriterTagsParser.ParserState,System.String)">
            <summary>
            Parses the given text, using the given current parser state.
            </summary>
            <param name="state"></param>
            <param name="text"></param>
        </member>
        <member name="T:PHP.Library.UrlRewriterTagsParser.ParserStateNum">
            <summary>
            Internal parser states.
            </summary>
        </member>
        <member name="T:PHP.Library.UrlRewriterTagsParser.ParserState">
            <summary>
            Internal parser state.
            </summary>
        </member>
        <member name="T:PHP.Library.UUEncoder">
            <summary>
            Provides methods for strings UU-encoding and UU-decoding.
            </summary>
            <remarks>
            <para>
            Uuencode repeatedly takes in a group of three bytes, adding trailing zeros if there are fewer 
            than three bytes left. These 24 bits are split into four groups of six which are treated as 
            numbers between 0 and 63. Decimal 32 is added to each number and they are output as ASCII 
            characters which will lie in the range 32 (space) to 32+63 = 95 (underscore). ASCII characters 
            greater than 95 may also be used; however, only the six right-most bits are relevant.
            </para>
            <para>
            Each group of sixty output characters (corresponding to 45 input bytes) is output as a separate 
            line preceded by an encoded character giving the number of encoded bytes on that line. 
            For all lines except the last, this will be the character 'M' (ASCII code 77 = 32+45). 
            If the input is not evenly divisible by 45, the last line will contain the remaining N 
            output characters, preceded by the character whose code is 32+N. Finally, a line containing just 
            a single space (or grave character) is output, followed by one line containing the string "end".
            </para>
            <para>
            Sometimes each data line has extra dummy characters (often the grave accent) added to avoid 
            problems with mailers that strip trailing spaces. These characters are ignored by uudecode. 
            The grave accent ('`') is used in place of a space character. 
            When stripped of their high bits they both decode to 100000.
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Library.UUEncoder.Encode(System.Byte[],System.IO.TextWriter)">
            <summary>
            Encodes an array of bytes using UU-encode algorithm.
            </summary>
            <param name="input">Array of bytes to be encoded.</param>
            <param name="output">Encoded output writer.</param>
        </member>
        <member name="M:PHP.Library.UUEncoder.Decode(System.IO.TextReader,System.IO.MemoryStream)">
            <summary>
            Decodes textual data using UU-encode algorithm.
            </summary>
            <param name="input">Textual data reader.</param>
            <param name="output">Binary output writer.</param>
            <remarks>Whether input data has correct format.</remarks>
        </member>
        <member name="M:PHP.Library.UUEncoder.Encode(PHP.Core.PhpBytes)">
            <summary>
            Encodes a string using UU-encode algorithm.
            </summary>
            <param name="bytes">String of bytes to be encoded.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:PHP.Library.UUEncoder.Decode(System.String)">
            <summary>
            Decodes a uu-encoded string.
            </summary>
            <param name="data">Data to be decoded.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="T:PHP.Library.ExtractType">
            <summary>
            Type of extraction <see cref="M:PHP.Library.PhpVariables.Extract(System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.PhpArray,PHP.Library.ExtractType,System.String)"/>.
            </summary>
        </member>
        <member name="F:PHP.Library.ExtractType.Overwrite">
            <summary>PHP constant: EXTR_OVERWRITE</summary>
        </member>
        <member name="F:PHP.Library.ExtractType.Skip">
            <summary>PHP constant: EXTR_SKIP</summary>
        </member>
        <member name="F:PHP.Library.ExtractType.PrefixSame">
            <summary>PHP constant: EXTR_PREFIX_SAME</summary>
        </member>
        <member name="F:PHP.Library.ExtractType.PrefixAll">
            <summary>PHP constant: EXTR_PREFIX_ALL</summary>
        </member>
        <member name="F:PHP.Library.ExtractType.PrefixInvalid">
            <summary>PHP constant: EXTR_PREFIX_INVALID</summary>
        </member>
        <member name="F:PHP.Library.ExtractType.PrefixIfExists">
            <summary>PHP constant: EXTR_PREFIX_IF_EXISTS</summary>
        </member>
        <member name="F:PHP.Library.ExtractType.IfExists">
            <summary>PHP constant: EXTR_IF_EXISTS</summary>
        </member>
        <member name="F:PHP.Library.ExtractType.Refs">
            <summary>PHP constant: EXTR_REFS</summary>
        </member>
        <member name="F:PHP.Library.ExtractType.NonFlags">
            <summary>A value masking all options but <see cref="F:PHP.Library.ExtractType.Refs"/> (0xff).</summary>
        </member>
        <member name="T:PHP.Library.FileUploadError">
            <summary>
            File upload errors.
            </summary>
        </member>
        <member name="F:PHP.Library.FileUploadError.None">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:PHP.Library.FileUploadError.SizeExceededOnServer">
            <summary>
            The uploaded file exceeds the "upload_max_filesize" configuration option.
            </summary>
        </member>
        <member name="F:PHP.Library.FileUploadError.SizeExceededOnClient">
            <summary>
            The uploaded file exceeds the "MAX_FILE_SIZE" value specified in the form.
            </summary>
        </member>
        <member name="F:PHP.Library.FileUploadError.Partial">
            <summary>
            The uploaded file was only partially uploaded.
            </summary>
        </member>
        <member name="F:PHP.Library.FileUploadError.NoFile">
            <summary>
            No file was uploaded.
            </summary>
        </member>
        <member name="F:PHP.Library.FileUploadError.NoTempDirectory">
            <summary>
            Missing a temporary folder
            </summary>
        </member>
        <member name="F:PHP.Library.FileUploadError.CantWrite">
            <summary>
            Missing a temporary folder
            </summary>
        </member>
        <member name="F:PHP.Library.FileUploadError.ErrorExtension">
            <summary>
            A PHP extension stopped the file upload
            </summary>
        </member>
        <member name="T:PHP.Library.PhpVariables">
            <summary>
            Provides means for PHP variables handling.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="F:PHP.Library.PhpVariables.CountRecursive">
            <summary>
            Recursive counting.
            </summary>
        </member>
        <member name="F:PHP.Library.PhpVariables.CountNormal">
            <summary>
            Non-recursive counting.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpVariables.SizeOf(System.Object)">
            <summary>
            Counts items in a variable.
            </summary>
            <param name="variable">The variable which items to count.</param>
            <returns>The number of items.</returns>
            <remarks>The same as <see cref="M:PHP.Library.PhpVariables.Count(System.Object)"/>.</remarks>
        </member>
        <member name="M:PHP.Library.PhpVariables.SizeOf(System.Object,System.Int32)">
            <summary>
            Counts items in a variable.
            </summary>
            <param name="variable">The variable which items to count.</param>
            <param name="mode">Whether to count recursively.</param>
            <returns>The number of items in all arrays contained recursivelly in <paramref name="variable"/>.</returns>
            <remarks>If any item of the <paramref name="variable"/> contains infinite recursion 
            skips items that are repeating because of such recursion.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpVariables.Count(System.Object)">
            <summary>
            Counts items in a variable.
            </summary>
            <param name="variable">The variable which items to count.</param>
            <returns>The number of items.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.Count(System.Object,System.Int32)">
            <summary>
            Counts items in a variable.
            </summary>
            <param name="variable">The variable which items to count.</param>
            <param name="mode">Whether to count recursively.</param>
            <returns>The number of items in all arrays contained recursivelly in <paramref name="variable"/>.</returns>
            <remarks>If any item of the <paramref name="variable"/> contains infinite recursion 
            skips items that are repeating because of such recursion.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpVariables.DoubleVal(System.Object)">
            <summary>
            Converts to double.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.FloatVal(System.Object)">
            <summary>
            Converts to double.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IntVal(System.Object)">
            <summary>
            Converts to integer.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IntVal(System.Object,System.Int32)">
            <summary>
            Converts to integer using a specified base.
            </summary>
            <param name="variable">The variable.</param>
            <param name="base">The base.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.StrVal(System.Object)">
            <summary>
            Converts to string.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.BoolVal(System.Object)">
            <summary>
            Converts to boolean.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.SetType(System.Object@,System.String)">
            <summary>
            Sets variable's type.
            </summary>
            <param name="variable">The variable.</param>
            <param name="type">The string identifying a new type. See PHP manual for details.</param>
            <returns>Whether <paramref name="type"/> is valid type identifier.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="type"/> has invalid value.</exception>
        </member>
        <member name="M:PHP.Library.PhpVariables.GetType(System.Object)">
            <summary>
            Retrieves name of a variable type.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The string type identifier. See PHP manual for details.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsInt(System.Object)">
            <summary>
            Checks whether a dereferenced variable is integer.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is integer.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsInteger(System.Object)">
            <summary>
            Checks whether a dereferenced variable is integer.
            Alias for is_int().
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is integer.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsLong(System.Object)">
            <summary>
            Checks whether a dereferenced variable is long. 
            TODO: Alias for is_int(). But not in Phalanger.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is long.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsBool(System.Object)">
            <summary>
            Checks whether a dereferenced variable is boolean.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is boolean.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsFloat(System.Object)">
            <summary>
            Checks whether a dereferenced variable is double.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is double.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsDouble(System.Object)">
            <summary>
            Checks whether a dereferenced variable is double.
            Alias for is_float().
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is double.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsReal(System.Object)">
            <summary>
            Checks whether a dereferenced variable is double.
            Alias for is_float().
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is double.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsString(System.Object)">
            <summary>
            Checks whether a dereferenced variable is string.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is string.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsArray(System.Object)">
            <summary>
            Checks whether a dereferenced variable is an <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is <see cref="T:PHP.Core.PhpArray"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsObject(System.Object)">
            <summary>
            Checks whether a dereferenced variable is <see cref="T:PHP.Core.Reflection.DObject"/>.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is <see cref="T:PHP.Core.Reflection.DObject"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsResource(System.Object)">
            <summary>
            Checks whether a dereferenced variable is a valid <see cref="T:PHP.Core.PhpResource"/>.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is a valid <see cref="T:PHP.Core.PhpResource"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsNull(System.Object)">
            <summary>
            Checks whether a dereferenced variable is a <B>null</B> reference.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is a <B>null</B> reference.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsScalar(System.Object)">
            <summary>
            Checks whether a dereferenced variable is a scalar.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is an integer, a double, a bool or a string after dereferencing.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsNumeric(System.Object)">
            <summary>
            Checks whether a dereferenced variable is numeric.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether <paramref name="variable"/> is integer, double or numeric string.
            <seealso cref="M:PHP.Core.Convert.StringToNumber(System.String,System.Int32@,System.Int64@,System.Double@)"/></returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsNumericString(System.String)">
            <summary>
            Checks whether given string can be converted to a number.
            </summary>
            <param name="str">A string value.</param>
            <returns><c>True</c> if the string represents a number. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsCallable(PHP.Core.Reflection.DTypeDesc,System.Object)">
            <summary>
            Verifies that the contents of a variable can be called as a function.
            </summary>
            <param name="caller">Current class context.</param>
            <param name="variable">The variable.</param>
            <returns><B>true</B> if <paramref name="variable"/> denotes a function, <B>false</B>
            otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsCallable(PHP.Core.Reflection.DTypeDesc,System.Object,System.Boolean)">
            <summary>
            Verifies that the contents of a variable can be called as a function.
            </summary>
            <param name="caller">Current class context.</param>
            <param name="variable">The variable.</param>
            <param name="syntaxOnly">If <B>true</B>, it is only checked that has <pararef name="variable"/>
            a valid structure to be used as a callback. if <B>false</B>, the existence of the function (or
            method) is also verified.</param>
            <returns><B>true</B> if <paramref name="variable"/> denotes a function, <B>false</B>
            otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.IsCallable(PHP.Core.Reflection.DTypeDesc,System.Object,System.Boolean,System.String@)">
            <summary>
            Verifies that the contents of a variable can be called as a function.
            </summary>
            <param name="caller">Current class context.</param>
            <param name="variable">The variable.</param>
            <param name="syntaxOnly">If <B>true</B>, it is only checked that has <pararef name="variable"/>
            a valid structure to be used as a callback. if <B>false</B>, the existence of the function (or
            method) is also verified.</param>
            <param name="callableName">Receives the name of the function or method (for example
            <c>SomeClass::SomeMethod</c>).</param>
            <returns><B>true</B> if <paramref name="variable"/> denotes a function, <B>false</B>
            otherwise.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.GetResourceType(PHP.Core.PhpResource)">
            <summary>
            Returns the type of a resource.
            </summary>
            <param name="resource">The resource.</param>
            <returns>The resource type name or <c>null</c> if <paramref name="resource"/> is <c>null</c>.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.Serialize(PHP.Core.Reflection.DTypeDesc,System.Object)">
            <summary>
            Serializes a graph of connected objects to a byte array using the PHP serializer.
            </summary>
            <param name="caller">DTypeDesc of the caller's class context if it is known or UnknownTypeDesc if it should be determined lazily.</param>
            <param name="variable">The variable to serialize.</param>
            <returns>The serialized representation of the <paramref name="variable"/>.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.Unserialize(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpBytes)">
            <summary>
            Deserializes a graph of connected object from a byte array using the PHP serializer.
            </summary>
            <param name="caller">DTypeDesc of the caller's class context if it is known or UnknownTypeDesc if it should be determined lazily.</param>
            <param name="bytes">The byte array to deserialize the graph from.</param>
            <returns>The deserialized object graph.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.Compact(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object[])">
            <summary>
            Creates array containing variables and their values.
            </summary>
            <param name="localVariables">The table of defined variables.</param>
            <param name="names">Names of the variables - each chan be either 
            <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpArray"/>. Names are retrived recursively from an array.</param>
            <returns>The <see cref="T:PHP.Core.PhpArray"/> which keys are names of variables and values are deep copies of 
            their values.</returns>
            <remarks>
            Items in <paramref name="names"/> which are neither of type <see cref="T:System.String"/> nor <see cref="T:PHP.Core.PhpArray"/> 
            are ignored.</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="names"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Library.PhpVariables.Extract(System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.PhpArray)">
            <summary>
            Import variables into the current variables table from an array.
            </summary>
            <param name="definedVariables">The table of defined variables.</param>
            <param name="vars">The <see cref="T:PHP.Core.PhpArray"/> containing names of variables and values to be assigned to them.</param>
            <returns>The number of variables actually affected by the extraction.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="vars"/> or <paramref name="definedVariables"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.InvalidCastException">Some key of <paramref name="definedVariables"/> is not type of <see cref="T:System.String"/>.</exception>
            <remarks>The same as <see cref="M:PHP.Library.PhpVariables.Extract(System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.PhpArray,PHP.Library.ExtractType,System.String)"/> with empty prefix and 
            <see cref="F:PHP.Library.ExtractType.Overwrite"/> option.
            </remarks>
        </member>
        <member name="M:PHP.Library.PhpVariables.Extract(System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.PhpArray,PHP.Library.ExtractType)">
            <summary>
            Import variables into the current variables table from an array.
            </summary>
            <param name="definedVariables">The table of defined variables.</param>
            <param name="vars">The <see cref="T:PHP.Core.PhpArray"/> containing names of variables and values to be assigned to them.</param>
            <param name="type">The type of the extraction.</param>
            <returns>The number of variables actually affected by the extraction.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="type"/> is invalid.</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="vars"/> or <paramref name="definedVariables"/> is a <B>null</B> reference.</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="type"/> compels presence of prefix (see <see cref="M:PHP.Library.PhpVariables.Extract(System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.PhpArray,PHP.Library.ExtractType,System.String)"/>).</exception>
            <exception cref="T:System.InvalidCastException">Some key of <paramref name="definedVariables"/> is not type of <see cref="T:System.String"/>.</exception>
            <remarks>See <see cref="M:PHP.Library.PhpVariables.Extract(System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.PhpArray,PHP.Library.ExtractType,System.String)"/> for details.</remarks>
        </member>
        <member name="M:PHP.Library.PhpVariables.Extract(System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.PhpArray,PHP.Library.ExtractType,System.String)">
            <summary>
            Import variables into the current variables table from an array.
            </summary>
            <param name="localVariables">The table of defined variables.</param>
            <param name="vars">The <see cref="T:PHP.Core.PhpArray"/> containing names of variables and values to be assigned to them.</param>
            <param name="type">The type of the extraction.</param>
            <param name="prefix">The prefix (can be a <B>null</B> reference) of variables names.</param>
            <returns>The number of variables actually affected by the extraction.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="type"/> is invalid.</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="vars"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.InvalidCastException">Some key of <paramref name="localVariables"/> is not type of <see cref="T:System.String"/>.</exception>
            <remarks>
      <para>
        A variable name can be used as it is or prefixed by <paramref name="prefix"/> according to
        <paramref name="type"/> 
        (see the following table). Regardless which name is used (prefixed or not) it is always tested by 
        method <see cref="M:PHP.Core.PhpVariable.IsValidName(System.String)"/> before the extraction is made.
      </para>
      <para>
        <list type="table">
          <listheader>
            <term>Value of the <paramref name="type"/> &amp; <see cref="F:PHP.Library.ExtractType.NonFlags"/></term>
            <description>The action taken</description>
          </listheader>
          <item>
            <term>
              <see cref="F:PHP.Library.ExtractType.Overwrite"/>
            </term>
            <description>
              If a variable doesn't exist yet it is created otherwise its value is overwritten.
            </description>
          </item>
          <item>
            <term>
              <see cref="F:PHP.Library.ExtractType.Skip"/>
            </term>
            <description>
              If a variable already exists it is skipped (its value is left untouched).
              Otherwise, a new variable is created.
            </description>
          </item>
          <item>
            <term>
              <see cref="F:PHP.Library.ExtractType.IfExists"/>
            </term>
            <description>
              If a variable already exists its value is overwritten. Otherwise, the variable is skipped
              (i.e. no new variables are created).
            </description>
          </item>
          <item>
            <term>
              <see cref="F:PHP.Library.ExtractType.PrefixAll"/>
            </term>
            <description>
              A variable name is prefixed and if a variable with that name doesn't
              exists it is created and, otherwise its value is overwritten.
            </description>
          </item>        
          <item>
            <term>
              <see cref="F:PHP.Library.ExtractType.PrefixSame"/>
            </term>
            <description>
              If a variable already exists its name is prefixed and a new variable 
              with that name is created. Otherwise, the variable's value is overwritten.
            </description>
          </item>               
          <item>
            <term>
              <see cref="F:PHP.Library.ExtractType.PrefixIfExists"/>
            </term>
            <description>
              If a variable already exists its name is prefixed and a new variable 
              with that name is created. Otherwise, the variable is skipped.
            </description>
          </item>               
        </list>      
      </para>
      <para>
        Moreover, <paramref name="type"/> can be OR'ed by <see cref="F:PHP.Library.ExtractType.Refs"/>
        which causes that refereces preserved - if there is a reference in <paramref name="vars"/>
        the target variable will be referencing the same thing.
      </para>
    </remarks>
        </member>
        <member name="M:PHP.Library.PhpVariables.GetDefinedVariables(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Retrieves an array containing copies of currently defined variables.
            </summary>
            <param name="localVariables">The table of defined variables.</param>
            <returns>The <see cref="T:PHP.Core.PhpArray"/> which keys are the name of variables and values are 
            deep copies of their values.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.ImportRequestVariables(System.String)">
            <summary>
            Imports request variables to the $GLOBALS array.
            </summary>
        </member>
        <member name="M:PHP.Library.PhpVariables.ImportRequestVariables(System.String,System.String)">
            <summary>
            Imports request variables to the $GLOBALS array.
            </summary>
            <param name="gpcOrder">
            Order of addition. A string containing 'G', 'P', 'C' letters. 
            GET, POST, COOKIE variables are set to the $GLOBALS array for each such letter, respectively, 
            overwriting variables of the same name that are already there.
            </param>
            <param name="prefix">
            String to prefix variables names with. 
            It's recommanded to specify some to prevent overriding existing global variables.
            </param>
            <returns>
            Whether any variables has been added.
            </returns>
            <exception cref="T:PHP.Core.PhpException">No prefix specified - security hazard (Notice).</exception>
            <exception cref="T:PHP.Core.PhpException">Attempt to override $GLOBALS variable (Warning).</exception>
        </member>
        <member name="M:PHP.Library.PhpVariables.Print(System.Object)">
            <summary>
            Outputs human-readable information about a variable. 
            </summary>
            <param name="expression">The variable.</param>
        </member>
        <member name="M:PHP.Library.PhpVariables.Print(System.Object,System.Boolean)">
            <summary>
            Outputs or returns human-readable information about a variable. 
            </summary>
            <param name="expression">The variable.</param>
            <param name="returnString">Whether to return a string representation.</param>
            <returns>A string representation or <B>TRUE</B> if <paramref name="returnString"/> is <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.PhpVariables.Dump(System.Object[])">
            <summary>
            Dumps variables.
            </summary>
            <param name="variables">Variables to be dumped.</param>
        </member>
        <member name="M:PHP.Library.PhpVariables.Export(System.Object)">
            <summary>
            Outputs a pars-able string representation of a variable.
            </summary>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:PHP.Library.PhpVariables.Export(System.Object,System.Boolean)">
            <summary>
            Outputs or returns a pars-able string representation of a variable.
            </summary>
            <param name="variable">The variable.</param>
            <param name="returnString">Whether to return a string representation.</param>
            <returns>A string representation or a <B>null</B> reference if <paramref name="returnString"/> is <B>false</B>.</returns>
        </member>
        <member name="T:PHP.Library.Web">
            <summary>
            Web related methods (URL, HTTP, cookies, headers, connection etc.).
            </summary>
            <threadsafety static="true"/>
            <summary>
            Web related methods (URL, HTTP, cookies, headers, connection etc.).
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:PHP.Library.Web.EnsureRequestContext(PHP.Core.RequestContext@)">
            <summary>
            Ensures that current <see cref="T:PHP.Core.RequestContext"/> associted with the thread is not a <B>null</B> reference.
            </summary>
            <param name="context">The current request context.</param>
            <returns>Whether the request context is available.</returns>
            <exception cref="T:PHP.Core.PhpException">Web server variables are not available (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Web.EnsureHttpContext(System.Web.HttpContext@)">
            <summary>
            Ensures that current <see cref="T:System.Web.HttpContext"/> is not a <B>null</B> reference.
            </summary>
            <param name="context">The current context.</param>
            <returns>Whether the HTTP context is available.</returns>
            <exception cref="T:PHP.Core.PhpException">Web server variables are not available (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Web.EnsureHttpContext">
            <summary>
            Ensures that current <see cref="T:System.Web.HttpContext"/> is not a <B>null</B> reference.
            </summary>
            <returns>Whether the HTTP context is available.</returns>
            <exception cref="T:PHP.Core.PhpException">Web server variables are not available (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Web.EnsureHeadersNotSent(System.Web.HttpContext@)">
            <summary>
            Ensures that headers has not been sent.
            </summary>
            <param name="context">The current context.</param>
            <returns>Whether the HTTP context is available and headers has not been sent.</returns>
            <exception cref="T:PHP.Core.PhpException">Web server variables are not available (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Headers has already been sent (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Web.MakeHttpStatusLine(System.Version,System.Int32,System.String)">
            <summary>
            Puts together elements of HTTP status line.
            </summary>
        </member>
        <member name="M:PHP.Library.Web.SetCookie(System.String)">
            <summary>
            Sends a cookie with specified name.
            </summary>
            <param name="name">The name of the cookie to send.</param>
            <returns>Whether a cookie has been successfully send.</returns>
        </member>
        <member name="M:PHP.Library.Web.SetCookie(System.String,System.String)">
            <summary>
            Sends a cookie with specified name and value.
            </summary>
            <param name="name">The name of the cookie to send.</param>
            <param name="value">The value of the cookie. The value will be <see cref="M:PHP.Library.Web.UrlEncode(System.String)"/>d.</param>
            <returns>Whether a cookie has been successfully send.</returns>
        </member>
        <member name="M:PHP.Library.Web.SetCookie(System.String,System.String,System.Int32)">
            <summary>
            Sends a cookie with specified name, value and expiration timestamp.
            </summary>
            <param name="name">The name of the cookie to send.</param>
            <param name="value">The value of the cookie. The value will be <see cref="M:PHP.Library.Web.UrlEncode(System.String)"/>d.</param>
            <param name="expire">The time (Unix timestamp) when the cookie expiers.</param>
            <returns>Whether a cookie has been successfully send.</returns>
        </member>
        <member name="M:PHP.Library.Web.SetCookie(System.String,System.String,System.Int32,System.String)">
            <summary>
            Sends a cookie with specified name, value and expiration timestamp.
            </summary>
            <param name="name">The name of the cookie to send.</param>
            <param name="value">The value of the cookie. The value will be <see cref="M:PHP.Library.Web.UrlEncode(System.String)"/>d.</param>
            <param name="expire">The time (Unix timestamp) when the cookie expiers.</param>
            <param name="path">The virtual path on server in which context is the cookie valid.</param>
            <returns>Whether a cookie has been successfully send.</returns>
        </member>
        <member name="M:PHP.Library.Web.SetCookie(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Sends a cookie with specified name, value and expiration timestamp.
            </summary>
            <param name="name">The name of the cookie to send.</param>
            <param name="value">The value of the cookie. The value will be <see cref="M:PHP.Library.Web.UrlEncode(System.String)"/>d.</param>
            <param name="expire">The time (Unix timestamp) when the cookie expiers.</param>
            <param name="path">The virtual path on server in which is the cookie valid.</param>
            <param name="domain">The domain where the cookie is valid.</param>
            <returns>Whether a cookie has been successfully send.</returns>
        </member>
        <member name="M:PHP.Library.Web.SetCookie(System.String,System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Sends a cookie with specified name, value and expiration timestamp.
            </summary>
            <param name="name">The name of the cookie to send.</param>
            <param name="value">The value of the cookie. The value will be <see cref="M:PHP.Library.Web.UrlEncode(System.String)"/>d.</param>
            <param name="expire">The time (Unix timestamp) when the cookie expires.</param>
            <param name="path">The virtual path on server in which is the cookie valid.</param>
            <param name="domain">The domain where the cookie is valid.</param>
            <param name="secure">Whether to transmit the cookie securely (that is, over HTTPS only).</param>
            <returns>Whether a cookie has been successfully send.</returns>
        </member>
        <member name="M:PHP.Library.Web.SetCookie(System.String,System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends a cookie with specified name, value and expiration timestamp.
            </summary>
            <param name="name">The name of the cookie to send.</param>
            <param name="value">The value of the cookie. The value will be <see cref="M:PHP.Library.Web.UrlEncode(System.String)"/>d.</param>
            <param name="expire">The time (Unix timestamp) when the cookie expires.</param>
            <param name="path">The virtual path on server in which is the cookie valid.</param>
            <param name="domain">The domain where the cookie is valid.</param>
            <param name="secure">Whether to transmit the cookie securely (that is, over HTTPS only).</param>
            <param name="httponly">When TRUE the cookie will be made accessible only through the HTTP protocol.
            This means that the cookie won't be accessible by scripting languages, such as JavaScript.
            This setting can effectively help to reduce identity theft through XSS attacks
            (although it is not supported by all browsers).</param>
            <returns>Whether a cookie has been successfully send.</returns>
        </member>
        <member name="M:PHP.Library.Web.SetRawCookie(System.String)">
            <summary>
            The same as <see cref="M:PHP.Library.Web.SetCookie(System.String)"/> except for that value is not <see cref="M:PHP.Library.Web.UrlEncode(System.String)"/>d.
            </summary>
        </member>
        <member name="M:PHP.Library.Web.SetRawCookie(System.String,System.String)">
            <summary>
            The same as <see cref="M:PHP.Library.Web.SetCookie(System.String,System.String)"/> except for that value is not <see cref="M:PHP.Library.Web.UrlEncode(System.String)"/>d.
            </summary>
        </member>
        <member name="M:PHP.Library.Web.SetRawCookie(System.String,System.String,System.Int32)">
            <summary>
            The same as <see cref="M:PHP.Library.Web.SetCookie(System.String,System.String,System.Int32)"/> except for that value is not <see cref="M:PHP.Library.Web.UrlEncode(System.String)"/>d.
            </summary>
        </member>
        <member name="M:PHP.Library.Web.SetRawCookie(System.String,System.String,System.Int32,System.String)">
            <summary>
            The same as <see cref="M:PHP.Library.Web.SetCookie(System.String,System.String,System.Int32,System.String)"/> except for that value is not <see cref="M:PHP.Library.Web.UrlEncode(System.String)"/>d.
            </summary>
        </member>
        <member name="M:PHP.Library.Web.SetRawCookie(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            The same as <see cref="M:PHP.Library.Web.SetCookie(System.String,System.String,System.Int32,System.String,System.String)"/> except for that value is not <see cref="M:PHP.Library.Web.UrlEncode(System.String)"/>d.
            </summary>
        </member>
        <member name="M:PHP.Library.Web.SetRawCookie(System.String,System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            The same as <see cref="M:PHP.Library.Web.SetCookie(System.String,System.String,System.Int32,System.String,System.String,System.Boolean)"/> except for that value is not <see cref="M:PHP.Library.Web.UrlEncode(System.String)"/>d.
            </summary>
        </member>
        <member name="M:PHP.Library.Web.SetRawCookie(System.String,System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            The same as <see cref="M:PHP.Library.Web.SetCookie(System.String,System.String,System.Int32,System.String,System.String,System.Boolean)"/> except for that value is not <see cref="M:PHP.Library.Web.UrlEncode(System.String)"/>d.
            </summary>
        </member>
        <member name="M:PHP.Library.Web.SetCookieInternal(System.String,System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Internal version common for <see cref="M:PHP.Library.Web.SetCookie(System.String)"/> and <see cref="M:PHP.Library.Web.SetRawCookie(System.String)"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.Web.Header(System.String)">
            <summary>
            Adds a specified header to the current response.
            </summary>
            <param name="str">The header to be added.</param>
            <exception cref="T:PHP.Core.PhpException">Web server variables are not available (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Headers has already been sent (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Web.Header(System.String,System.Boolean)">
            <summary>
            Adds a specified header to the current response.
            </summary>
            <param name="str">The header to be added.</param>
            <param name="replace">Whether the header should be replaced if there is already one with the same name (ignored since 5.1.2)</param>
            <exception cref="T:PHP.Core.PhpException">Web server variables are not available (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Headers has already been sent (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="replace"/> is <B>true</B> (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Web.Header(System.String,System.Boolean,System.Int32)">
            <summary>
            Adds a specified header to the current response.
            </summary>
            <param name="str">The header to be added.</param>
            <param name="replace">Whether the header should be replaced if there is already one with the same name. 
            Replacement not supported (ignored since 5.1.2)</param>
            <param name="httpResponseCode">Sets the response status code.</param>
            <remarks>
            <para>
            If <paramref name="httpResponseCode"/> is positive than the response status code is set to this value.
            Otherwise, if <paramref name="str"/> has format "{spaces}HTTP/{no spaces} {response code}{whatever}" 
            then the response code is set to the {responce code} and the method returns.
            </para>
            <para>
            If <paramref name="str"/> has format "{name}:{value}" then the respective header is set (both name and value 
            are trimmed) and an appropriate action associated with this header by ASP.NET is performed.
            </para>
            <para>
            Not:  Since PHP 4.4.2 and PHP 5.1.2 this function prevents more than one header to be sent at once as 
            a protection against header injection attacks (which means that header is always replaced).
            </para>
            </remarks>
            <exception cref="T:PHP.Core.PhpException">Web server variables are not available (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Headers has already been sent (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="replace"/> is <B>true</B> (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="str"/> has invalid format (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Web.HeaderRemove">
            <summary>
            RemoveRemoves an HTTP header previously set using header().
            </summary>
        </member>
        <member name="M:PHP.Library.Web.HeaderRemove(System.String)">
            <summary>
            Removes an HTTP header previously set using header().
            </summary>
            <param name="name">The header name to be removed.
            Note: This parameter is case-insensitive. 
            </param>
            <remarks>Caution: This function will remove all headers set by PHP, including cookies, session and the X-Powered-By headers.</remarks>
        </member>
        <member name="M:PHP.Library.Web.HttpResponseCode">
            <summary>
            http_response_code will get the current status code.
            </summary>
            <returns>Current status code</returns>
        </member>
        <member name="M:PHP.Library.Web.HttpResponseCode(System.Int32)">
            <summary>
            http_response_code will set the current status code.
            </summary>
            <param name="status">New status code.</param>
            <returns>Current status code.</returns>
        </member>
        <member name="M:PHP.Library.Web.GetHeaders(System.String)">
            <summary>
            Fetches headers sent by the server in response to a HTTP request.
            </summary>
            <param name="url">The URL where to send a request (e.g. http://www.mff.cuni.cz). </param>
            <returns>The same as <see cref="M:PHP.Library.Web.GetHeaders(System.String,System.Boolean)"/> where <c>format</c> is <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Web.GetHeaders(System.String,System.Boolean)">
            <summary>
            Fetches headers sent by the server in response to a HTTP request.
            </summary>
            <param name="url">The URL where to send a request (e.g. http://www.mff.cuni.cz). </param>
            <param name="format">Whether to parse a response and set the result's keys to header names.</param>
            <returns>
            Either an array with integer keys indexed from 0 and values set to raw headers
            (<paramref name="format"/> is <B>false</B>). Or an array which each key is a name of a header and 
            a value is either an appropriate header's value or an array of values if the header has more than one 
            value. In both cases the first item (always with key 0) will be the HTTP response status line.
            </returns>
        </member>
        <member name="M:PHP.Library.Web.HeadersSent">
            <summary>
            Checks whether all headers has been sent.
            </summary>
            <returns>Whether headers has already been sent.</returns>
            <exception cref="T:PHP.Core.PhpException">Web server variables are not available (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Web.HeadersSent(System.String@)">
            <summary>
            Checks whether all headers has been sent.
            </summary>
            <param name="file">The name of a source file which has sent headers or an empty string 
            headers has not been sent yet. Not supported.</param>
            <returns>Whether headers has already been sent.</returns>
            <exception cref="T:PHP.Core.PhpException">Web server variables are not available (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Function is not supported in this version (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Web.HeadersSent(System.String@,System.Int32@)">
            <summary>
            Checks whether all headers has been sent.
            </summary>
            <param name="file">The name of a source file which has sent headers or an empty string  if
            headers has not been sent yet. Not supported.</param>
            <param name="line">The line in a source file where headers has been sent or 0 if 
            headers has not been sent yet. Not supported.</param>
            <returns>Whether headers has already been sent.</returns>
            <exception cref="T:PHP.Core.PhpException">Web server variables are not available (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Function is not supported in this version (Warning).</exception>
        </member>
        <member name="M:PHP.Library.Web.HeadersList">
            <summary>
            headers_list() will return a list of headers to be sent to the browser / client.
            To determine whether or not these headers have been sent yet, use headers_sent(). 
            </summary>
        </member>
        <member name="M:PHP.Library.Web.HttpBuildQuery(PHP.Core.PhpArray)">
            <summary>
            Generates a URL-encoded query string from the associative (or indexed) array provided. 
            </summary>
            <param name="formData">
            The array form may be a simple one-dimensional structure, or an array of arrays
            (who in turn may contain other arrays). 
            </param>
            <returns>Returns a URL-encoded string.</returns>
        </member>
        <member name="M:PHP.Library.Web.HttpBuildQuery(PHP.Core.PhpArray,System.String)">
            <summary>
            Generates a URL-encoded query string from the associative (or indexed) array provided. 
            </summary>
            <param name="formData">
            The array form may be a simple one-dimensional structure, or an array of arrays
            (who in turn may contain other arrays). 
            </param>
            <param name="numericPrefix">
            If numeric indices are used in the base array and this parameter is provided,
            it will be prepended to the numeric index for elements in the base array only.
            This is meant to allow for legal variable names when the data is decoded by PHP
            or another CGI application later on.
            </param>
            <returns>Returns a URL-encoded string.</returns>
        </member>
        <member name="M:PHP.Library.Web.HttpBuildQuery(PHP.Core.PhpArray,System.String,System.String)">
            <summary>
            Generates a URL-encoded query string from the associative (or indexed) array provided. 
            </summary>
            <param name="formData">
            The array form may be a simple one-dimensional structure, or an array of arrays
            (who in turn may contain other arrays). 
            </param>
            <param name="numericPrefix">
            If numeric indices are used in the base array and this parameter is provided,
            it will be prepended to the numeric index for elements in the base array only.
            This is meant to allow for legal variable names when the data is decoded by PHP
            or another CGI application later on.
            </param>
            <param name="argSeparator">
            arg_separator.output is used to separate arguments, unless this parameter is
            specified, and is then used. 
            </param>
            <returns>Returns a URL-encoded string </returns>
        </member>
        <member name="M:PHP.Library.Web.HttpBuildQuery(PHP.Core.PhpArray,System.String,System.String,System.String)">
            <summary>
            Generates a URL-encoded query string from the associative (or indexed) array provided. 
            </summary>
            <param name="formData">
            The array form may be a simple one-dimensional structure, or an array of arrays
            (who in turn may contain other arrays). 
            </param>
            <param name="numericPrefix">
            If numeric indices are used in the base array and this parameter is provided,
            it will be prepended to the numeric index for elements in the base array only.
            This is meant to allow for legal variable names when the data is decoded by PHP
            or another CGI application later on.
            </param>
            <param name="argSeparator">
            arg_separator.output is used to separate arguments, unless this parameter is
            specified, and is then used. 
            </param>
            <param name="indexerPrefix">Default is null, otherwise it is a name of the array to be used instead
            of regular parameter name. Then the parameter name is used as an index.
            
            This argument must be URL encoded.</param>
            <returns>Returns a URL-encoded string </returns>
        </member>
        <member name="M:PHP.Library.Web.GetBrowser">
            <summary>
            Attempts to determine the capabilities of the user's browser, by looking up the browser's information in the browscap.ini  file.
            </summary>
            <returns>
             The information is returned in an object or an array which will contain various data elements representing,
             for instance, the browser's major and minor version numbers and ID string; TRUE/FALSE  values for features
             such as frames, JavaScript, and cookies; and so forth.
             The cookies value simply means that the browser itself is capable of accepting cookies and does not mean
             the user has enabled the browser to accept cookies or not. The only way to test if cookies are accepted is
             to set one with setcookie(), reload, and check for the value. 
            </returns>
        </member>
        <member name="M:PHP.Library.Web.GetBrowser(System.String)">
            <summary>
            Attempts to determine the capabilities of the user's browser, by looking up the browser's information in the browscap.ini  file.
            </summary>
            <param name="user_agent">
            The User Agent to be analyzed. By default, the value of HTTP User-Agent header is used; however, you can alter this (i.e., look up another browser's info) by passing this parameter.
            You can bypass this parameter with a NULL value.
            </param>
            <returns>
             The information is returned in an object or an array which will contain various data elements representing,
             for instance, the browser's major and minor version numbers and ID string; TRUE/FALSE  values for features
             such as frames, JavaScript, and cookies; and so forth.
             The cookies value simply means that the browser itself is capable of accepting cookies and does not mean
             the user has enabled the browser to accept cookies or not. The only way to test if cookies are accepted is
             to set one with setcookie(), reload, and check for the value. 
            </returns>
        </member>
        <member name="M:PHP.Library.Web.GetBrowser(System.String,System.Boolean)">
            <summary>
            Attempts to determine the capabilities of the user's browser, by looking up the browser's information in the browscap.ini  file.
            </summary>
            <param name="user_agent">
            The User Agent to be analyzed. By default, the value of HTTP User-Agent header is used; however, you can alter this (i.e., look up another browser's info) by passing this parameter.
            You can bypass this parameter with a NULL value.
            </param>
            <param name="return_array">If set to TRUE, this function will return an array instead of an object . </param>
            <returns>
             The information is returned in an object or an array which will contain various data elements representing,
             for instance, the browser's major and minor version numbers and ID string; TRUE/FALSE  values for features
             such as frames, JavaScript, and cookies; and so forth.
             The cookies value simply means that the browser itself is capable of accepting cookies and does not mean
             the user has enabled the browser to accept cookies or not. The only way to test if cookies are accepted is
             to set one with setcookie(), reload, and check for the value. 
            </returns>
        </member>
        <member name="M:PHP.Library.Web.BuildConfigureCapsMethod(System.Type)">
            <summary>
            Create DynamicMethod that configures capabilities using System.Web.Configuration.BrowserCapabilitiesFactory (or similar) type.
            </summary>
            <param name="BrowserCapabilitiesFactoryType">Type with ConfigureBrowserCapabilities and ConfigureCustomCapabilities methods.</param>
            <remarks>
            Generated method performs following code:
            {
                var capsFactory = new System.Web.Configuration.BrowserCapabilitiesFactory();
                capsFactory.ConfigureBrowserCapabilities(headers, browserCaps);
                capsFactory.ConfigureCustomCapabilities(headers, browserCaps);
            }
            </remarks>
        </member>
        <member name="M:PHP.Library.Web.IsClientDisconnected">
            <summary>
            Checks whether a client is still connected.
            </summary>
            <returns>Whether a client is still connected.</returns>
        </member>
        <member name="M:PHP.Library.Web.ConnectionTimeout">
            <summary>
            Checks whether a client is still connected.
            </summary>
            <returns>Whether a client is still connected.</returns>
        </member>
        <member name="M:PHP.Library.Web.GetConnectionStatus">
            <summary>
            Retrieves a connection status. 
            </summary>
            <returns>The connection status bitfield.</returns>
            <remarks>
            Works also out of HTTP context (i.e. in console and windows apps). 
            In that cases, only <see cref="F:PHP.Library.Web.ConnectionStatus.Timeout"/> flag is relevant.
            </remarks>
        </member>
        <member name="M:PHP.Library.Web.IsUploadedFile(System.String)">
            <summary>
            Tells whether the file was uploaded via HTTP POST.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Web.MoveUploadedFile(System.String,System.String)">
            <summary>
            Moves an uploaded file to a new location.
            </summary>
            <param name="path"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Web.ParseUrl(System.String)">
            <summary>
            Parses an URL and returns its components.
            </summary>
            <param name="url">
            The URL string with format 
            <c>{scheme}://{user}:{pass}@{host}:{port}{path}?{query}#{fragment}</c>
            or <c>{schema}:{path}?{query}#{fragment}</c>.
            </param>
            <returns>
            An array which keys are names of components (stated in URL string format in curly braces, e.g."schema")
            and values are components themselves.
            </returns>
        </member>
        <member name="M:PHP.Library.Web.ParseUrlQuery(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,PHP.Core.PhpArray@)">
            <summary>
            Parses a string as if it were the query string passed via an URL.
            </summary>
            <param name="definedVariables">Only to comply with Phalanger Class Library rules - all overloads of the same 
            function has to have the same implementation options. Can be <B>null</B> reference.</param>
            <param name="str">The string to parse.</param>
            <param name="result">The array to store the variable found in <paramref name="str"/> to.</param>
        </member>
        <member name="M:PHP.Library.Web.ParseUrlQuery(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Parses a string as if it were the query string passed via an URL and sets variables in the
            current scope.
            </summary>
            <param name="localVariables">The <see cref="T:System.Collections.IDictionary"/> where to store variables and its values.</param>
            <param name="str">The string to parse.</param>
        </member>
        <member name="M:PHP.Library.Web.RawUrlDecode(System.String)">
            <summary>
            Decode URL-encoded strings
            </summary>
            <param name="str">The URL string (e.g. "hello%20from%20foo%40bar").</param>
            <returns>Decoded string (e.g. "hello from foo@bar")</returns>
        </member>
        <member name="M:PHP.Library.Web.RawUrlEncode(System.String)">
            <summary>
            Encodes a URL string keeping spaces in it. Spaces are encoded as '%20'.
            </summary>  
            <param name="str">The string to be encoded.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:PHP.Library.Web.UrlDecode(System.String)">
            <summary>
            Decodes a URL string.
            </summary>  
        </member>
        <member name="M:PHP.Library.Web.UrlEncode(System.String)">
            <summary>
            Encodes a URL string. Spaces are encoded as '+'.
            </summary>  
        </member>
        <member name="F:PHP.Library.Web.getMetaTagsRegex">
            <summary>
            Lazily initialized &lt;meta&gt; tag regex.
            </summary>
        </member>
        <member name="M:PHP.Library.Web.GetMetaTags(System.String)">
            <summary>
            Extracts all meta tag content attributes from a file and returns an array.
            </summary>
            <param name="fileName">The file to search for meta tags in.</param>
            <returns>Array with keys set to values of the name property and values set to values of the
            content property.</returns>
            <remarks>The parsing stops at the &lt;/head&gt; tag.</remarks>
        </member>
        <member name="M:PHP.Library.Web.GetMetaTags(System.String,PHP.Library.FileOpenOptions)">
            <summary>
            Extracts all meta tag content attributes from a file and returns an array.
            </summary>
            <param name="fileName">The file to search for meta tags in.</param>
            <param name="flags">If true, the file specified by <paramref name="fileName"/> should be sought
            for along the standard include path.</param>
            <returns>Array with keys set to values of the name property and values set to values of the
            content property.</returns>
            <remarks>The parsing stops at the &lt;/head&gt; tag.</remarks>
        </member>
        <member name="P:PHP.Library.Web.ConfigureCapsMethod">
            <summary>
            Get DynamicMethod that configures capabilities on systems, where System.Web.Configuration.BrowserCapabilitiesFactory is defined.
            </summary>
            <remarks>
            The method performs following code:
            {
                var capsFactory = new System.Web.Configuration.BrowserCapabilitiesFactory();
                capsFactory.ConfigureBrowserCapabilities(headers, browserCaps);
                capsFactory.ConfigureCustomCapabilities(headers, browserCaps);
            }
            </remarks>
        </member>
        <member name="T:PHP.Library.Web.ConnectionStatus">
            <summary>
            Connection status.
            </summary>
        </member>
        <member name="M:PHP.Library.Web.ParseUrlMethods.MatchedString(System.Text.RegularExpressions.Group)">
            <summary>
            Determines matched group value or null if the group was not matched.
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Web.ParseUrlMethods.ReplaceControlCharset(System.String,System.Char)">
            <summary>
            Replace all the occurrences of control characters (see iscntrl() C++ function) with the specified character.
            </summary>
            <param name="str"></param>
            <param name="newChar"></param>
            <returns></returns>
        </member>
        <member name="P:PHP.Library.Web.ParseUrlMethods.ParseUrlRegEx">
            <summary>
            Regular expression for parsing URLs (via parse_url())
            </summary>
        </member>
    </members>
</doc>
