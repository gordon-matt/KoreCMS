<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PhpNetCore</name>
    </assembly>
    <members>
        <member name="F:PHP.Core.ApplicationContext.webServerCompilerManager">
            <summary>
            Singleton instance of <see cref="T:PHP.Core.WebServerCompilerManager"/> manager. Created lazily in HTTP context. 
            </summary>
        </member>
        <member name="F:PHP.Core.ApplicationContext.fileExists">
            <summary>
            Delegate checking for script existance. Created lazily, valid across all the requests on this <see cref="T:PHP.Core.ApplicationContext"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationContext.AddExportMethod(PHP.Core.Reflection.DTypeDesc)">
            <remarks>
            We have to inject <c>export</c> method into <see cref="T:PHP.Library.SPL.Reflector"/> interface, since it cannot be written in C#
            (abstract public static method with implementation in an interface). It could be declared in pure IL, but it would be ugly.
            </remarks>
            <param name="typedesc"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> corresponding to <see cref="T:PHP.Library.SPL.Reflector"/>.</param>
        </member>
        <member name="M:PHP.Core.ApplicationContext.GetExtensionImplementor(System.String)">
            <summary>
            Finds a library among currently loaded ones that implements an extension with a specified name.
            </summary>
            <param name="name">The name of the extension to look for.</param>
            <returns>The library descriptor.</returns>
            <remarks>Not thread-safe. Not available at compilation domain.</remarks>
        </member>
        <member name="M:PHP.Core.ApplicationContext.DeclareType(PHP.Core.Reflection.DTypeDesc,System.String)">
            <summary>
            Declares a PHP type globally. Replaces any previous declaration.
            To be called from the compiled scripts before library loading; libraries should check for conflicts.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationContext.DeclareType(System.RuntimeTypeHandle,System.String)">
            <summary>
            Declares a PHP type globally. Replaces any previous declaration.
            To be called from the compiled scripts before library loading; libraries should check for conflicts.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationContext.DeclareFunction(PHP.Core.RoutineDelegate,System.String,PHP.Core.PhpMemberAttributes,System.Reflection.MethodInfo)">
            <summary>
            Declares a PHP function globally. Replaces any previous declaration.
            To be called from the compiled scripts before library loading; libraries should check for conflicts.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationContext.DeclareConstant(System.String,System.Object)">
            <summary>
            Declares a PHP constant globally. Replaces any previous declaration.
            To be called from the compiled scripts before library loading; libraries should check for conflicts.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationContext.IsTransientRealType(System.Type)">
            <summary>
            Checkes whether a type is transient.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationContext.BuildFileExistsDelegate">
            <summary>
            Build the delegate checking if the given script specified by its FullPath exists on available locations.
            </summary>
            <returns>Function determinig the given script existance or null if no script can be included with current configuration.</returns>
        </member>
        <member name="M:PHP.Core.ApplicationContext.AddMethodToType(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes,System.String,System.Func{System.Object,PHP.Core.PhpStack,System.Object})">
            <summary>
            Add at runtime a method to a type
            </summary>
            <param name="typedesc">Type to modify</param>
            <param name="attributes">New method attributes</param>
            <param name="func_name">Method name</param>
            <param name="callback">Method body</param>
            <remarks>Used by PDO_SQLITE</remarks>
        </member>
        <member name="M:PHP.Core.ApplicationContext.AddConstantToType(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes,System.String,System.Object)">
            <summary>
            Add at runtime a constant to a type
            </summary>
            <param name="typedesc">Type to modify</param>
            <param name="attributes">New const attributes</param>
            <param name="const_name">Const name</param>
            <param name="value">Const value</param>
            <remarks>Used by PDO_MYSQL</remarks>
        </member>
        <member name="P:PHP.Core.ApplicationContext.ScriptLibraryDatabase">
            <summary>
            Contains database of scripts, which are contained in loaded script libraries. Used by dynamic inclusions and compiler.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationContext.RuntimeCompilerManager">
            <summary>
            Gets instance to compiler manager that manages script libraries, WebPages.dll and scripts compiled dynamically in runtime.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationContext.LazyFullReflection">
            <summary>
            Whether full reflection of loaded libraries should be postponed until really needed.
            Set to <B>false</B> by command line compiler (phpc) and web server manager as they both need
            to compile source files. 
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationContext.AssemblyLoader">
            <summary>
            Associated assembly loader.
            </summary>
            <exception cref="T:System.InvalidOperationException">Context is readonly.</exception>
        </member>
        <member name="P:PHP.Core.ApplicationContext.TransientAssemblyBuilder">
            <summary>
            Assembly builder where compiled pieces of eval'd code are stored.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationContext.Default">
            <summary>
            Default context.
            </summary>
        </member>
        <member name="M:PHP.Core.AssemblyLoader.Load(System.Collections.Generic.IEnumerable{PHP.Core.CompilationParameters.ReferenceItem})">
            <summary>
            Loads assemblies whose paths or full names are listed in references.
            </summary>
            <param name="references">Enumeration of paths to or full names of assemblies to load.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="references"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">An error occured while loading a library.</exception>
        </member>
        <member name="M:PHP.Core.AssemblyLoader.LoadReference(System.String,System.String)">
            <summary>
            Loads single reference.
            </summary>
            <param name="reference">Path to or full name of references assembly.</param>
            <param name="libraryRoot">If the reference represents a script library, this optional parameter can move scripts in the loaded library to a subdirectory.</param>
        </member>
        <member name="M:PHP.Core.AssemblyLoader.LoadScriptLibrary(System.String,System.Uri,System.String)">
            <summary>
            Loads assembly as script library, adding all scripts it contains into script library database.
            </summary>
            <param name="assemblyName">Long assembly name (see <see cref="M:System.Reflection.Assembly.Load(System.String)"/>) or a <B>null</B> reference.</param>
            <param name="assemblyUrl">Assembly file absolute URI or a <B>null</B> reference.</param>
            <param name="libraryRoot">Root offset of the script library. All scripts will be loaded with this offset.
            Strict behavior forbids conflicts between scriptLibrary and filesystem, all conflicts will be reported as errors.
            This is used in the runtime (dynamic include), compiler currently ignores filesystem.
            </param>
        </member>
        <member name="M:PHP.Core.AssemblyLoader.LoadScriptLibrary(System.Reflection.Assembly,System.String)">
            <summary>
            Loads assembly as script library, adding all scripts it contains into script library database.
            </summary>
            <param name="realAssembly">Script assembly that is to be loaded.</param>
            <param name="libraryRoot">Root offset of the script library. All scripts will be loaded with this offset.
            Strict behavior forbids conflicts between scriptLibrary and filesystem, all conflicts will be reported as errors.
            This is used in the runtime (dynamic include), compiler currently ignores filesystem.
            </param>
        </member>
        <member name="F:PHP.Core.AssemblyLoader.applicationContext">
            <summary>
            The owning AC.
            </summary>
        </member>
        <member name="F:PHP.Core.AssemblyLoader.loadedAssemblies">
            <summary>
            Loaded assemblies. Contains all instances loaded by the loader. Synchronized.
            </summary>
        </member>
        <member name="M:PHP.Core.AssemblyLoader.Load(System.String,System.Uri,PHP.Core.LibraryConfigStore)">
            <summary>
            Loads a library assembly given its name and configuration node.
            </summary>
            <param name="assemblyName">Long assembly name (see <see cref="M:System.Reflection.Assembly.Load(System.String)"/>) or a <B>null</B> reference.</param>
            <param name="assemblyUrl">Assembly file absolute URI or a <B>null</B> reference.</param>
            <param name="config">Configuration node describing the assembly to load (or a <B>null</B> reference).</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">An error occured while loading the library.</exception>
        </member>
        <member name="T:PHP.Core.ScriptLibraryDatabase">
            <summary>
            Database of library scripts. These scripts are contained in assemblies listed in scriptLibrary configuration section.
            Used by DynamicInclude.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptLibraryDatabase.libraries">
            <summary>
            List of libraries to be loaded lazily.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptLibraryDatabase.FindAddedLibrary(PHP.Core.ScriptLibraryDatabase.ScriptLibraryConfigurationNode)">
            <summary>
            Check if the given library was already and returns its index within <see cref="F:PHP.Core.ScriptLibraryDatabase.libraries"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptLibraryDatabase.AddLibrary(System.String,System.Uri,System.String,System.String)">
            <summary>
            Adds new library to the script library.
            </summary>
            <returns>True if library was added, false if the library was not added.</returns>
        </member>
        <member name="M:PHP.Core.ScriptLibraryDatabase.RemoveLibrary(System.String,System.Uri,System.String,System.String)">
            <summary>
            Removes specified library from the list of libraries to be loaded lazily.
            </summary>
            <returns>True if library was removed.</returns>
        </member>
        <member name="M:PHP.Core.ScriptLibraryDatabase.ClearLibraries">
            <summary>
            Clear the list of libraries to be loaded lazily.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptLibraryDatabase.AddLibrary(PHP.Core.ScriptLibraryDatabase.ScriptLibraryConfigurationNode)">
            <summary>
            Adds new library to the script library.
            </summary>
            <param name="desc">Configuration of script library to be added and reflected later.</param>
            <returns>True if library was added, false if the library was not added.</returns>
        </member>
        <member name="M:PHP.Core.ScriptLibraryDatabase.EnsureLibrariesReflected">
            <summary>
            Ensures that libraries are reflected.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptLibraryDatabase.entries">
            <summary>
            Database of the library scripts. Cannot be null.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptLibraryDatabase.applicationContext">
            <summary>
            Owning application context.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptLibraryDatabase.#ctor(PHP.Core.ApplicationContext)">
            <summary>
            Creates new ScriptLibraryDatabase object.
            </summary>
            <param name="context">Owning application context.</param>
        </member>
        <member name="M:PHP.Core.ScriptLibraryDatabase.ReflectLibraryNoLock(PHP.Core.Reflection.ScriptAssembly)">
            <summary>
            Reflect given scriptAssembly and add its modules into <c>entries</c>.
            </summary>
            <param name="scriptAssembly"><c>ScriptAssembly</c> to be reflected.</param>
        </member>
        <member name="M:PHP.Core.ScriptLibraryDatabase.GetScriptModule(PHP.Core.FullPath)">
            <summary>
            Gets a known library script.
            </summary>
            <param name="path">Application config-dependent path of the script.</param>
            <returns>Library script corresponding to the supplied path, or null if there is no such script present in the script library.</returns>
        </member>
        <member name="M:PHP.Core.ScriptLibraryDatabase.ContainsScript(PHP.Core.FullPath)">
            <summary>
            Returns a value indicating whether the script library database contains given script.
            </summary>
            <param name="path">Application config-dependent path of the script.</param>
            <returns>True if the script is contained within the script library. Otherwise false.</returns>
        </member>
        <member name="P:PHP.Core.ScriptLibraryDatabase.Count">
            <summary>
            Amount of scripts in the database.
            </summary>
        </member>
        <member name="T:PHP.Core.ScriptLibraryDatabase.Entry">
            <summary>
            Single entry in the database.
            </summary>
        </member>
        <member name="T:PHP.Core.ScriptLibraryDatabase.ScriptLibraryConfigurationNode">
            <summary>
            Description of the script library to be loaded later lazily.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptLibraryDatabase.ScriptLibraryConfigurationNode.assemblyName">
            <summary>
            The full name of the assembly. If <c>assemblyUri</c> is not provided.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptLibraryDatabase.ScriptLibraryConfigurationNode.assemblyUrl">
            <summary>
            The full path to the assembly. If <c>assemblyName</c> is not provided.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptLibraryDatabase.ScriptLibraryConfigurationNode.libraryRootPath">
            <summary>
            Relative root path to the scripts in library. Default is ".".
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptLibraryDatabase.ScriptLibraryConfigurationNode.urlNodeValue">
            <summary>
            Value of the <c>url</c> attribute to allow removing the library
            by this value within the nested configuration.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptLibraryDatabase.ScriptLibraryConfigurationNode.Equals(System.Object)">
            <summary>
            Compares two ScriptLibraryConfigurationNode objects.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:PHP.Core.PhpLibraryAttribute">
            <summary>
            Identifies PHP library assembly or extension.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpLibraryAttribute.#ctor(System.Type,System.String)">
            <summary>
            Used by hand-written libraries in PHP.
            </summary>
            <param name="descriptor">The type derived from <c>PhpLibraryDescriptor</c> class. Can be null to use default implementation.</param>
            <param name="name">The human readable name of the extension.</param>
            <remarks>List of implemented extensions <c>ImplementsExtensions</c> is an empty array. Extensions using
            this attribute does not populate any list of implemented PHP extensions.</remarks>
        </member>
        <member name="M:PHP.Core.PhpLibraryAttribute.#ctor(System.Type,System.String,System.String[])">
            <summary>
            Used by hand-written libraries.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpLibraryAttribute.#ctor(System.Type,System.String,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Used by hand-written libraries.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpLibraryAttribute.Descriptor">
            <summary>
            Name of the type describing the assembly. 
            Either a name of the type in the declaring assembly, a fully qualified name containing an assembly name
            or a <B>null</B> reference if a default descriptor can be used.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpExtensionAttribute">
            <summary>
            Identifies PHP extension written in PHP pure mode.
            It has only PHP literals as parameters and it has dynamic stubs contained already.
            </summary>
        </member>
        <member name="T:PHP.Core.ScriptAssemblyAttribute">
            <summary>
            Marks Phalanger compiled PHP script assemblies.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptAssemblyAttribute.IsMultiScript">
            <summary>
            Determines whether there are multiple scripts stored in the assembly.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptAssemblyAttribute.SSAScriptType">
            <summary>
            <see cref="T:System.Type"/> of a <c>&lt;Script&gt;</c> class in case of SingleScriptAssembly.
            </summary>
        </member>
        <member name="T:PHP.Core.PurePhpAssemblyAttribute">
            <summary>
            Marks Phalanger compiled pure assemblies.
            </summary>
        </member>
        <member name="T:PHP.Core.ImplementsTypeAttribute">
            <summary>
            Marks types of the Class Library which should be viewed as PHP classes or interfaces.
            </summary>
        </member>
        <member name="F:PHP.Core.ImplementsTypeAttribute.PHPTypeName">
            <summary>
            If not <c>null</c>, defines the PHP type name instead of the reflected name. CLR notation of namespaces.
            </summary>
        </member>
        <member name="M:PHP.Core.ImplementsTypeAttribute.#ctor">
            <summary>
            Initialized new instance of <see cref="T:PHP.Core.ImplementsTypeAttribute"/> specifying that
            the type is visible in PHP code and the type is named using the reflected <see cref="P:System.Type.FullName"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.ImplementsTypeAttribute.#ctor(System.String)">
            <summary>
            Initialized new instance of <see cref="T:PHP.Core.ImplementsTypeAttribute"/> with PHP type name specified.
            </summary>
            <param name="PHPTypeName">If not <c>null</c>, defines the PHP type name instead of the reflected name. Uses CLR notation of namespaces.</param>
            <remarks>This overload is only valid within class library types.</remarks>
        </member>
        <member name="T:PHP.Core.DTypeSpecAttribute">
            <summary>
            An attibute storing PHP formal argument type hints.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpNamespacePrivateAttribute">
            <summary>
            Marks namespace-private PHP types and functions.
            </summary>
            <remarks>Attribute is used by <see cref="N:PHP.Core.Reflection"/>.</remarks>
        </member>
        <member name="T:PHP.Core.PhpTraitAttribute">
            <summary>
            Marks CLR type representing a PHP trait.
            </summary>
            <remarks>Attribute is used by <see cref="N:PHP.Core.Reflection"/>.</remarks>
        </member>
        <member name="T:PHP.Core.PhpFinalAttribute">
            <summary>
            CLI does not allow static final methods. If a static method is declared as
            final, it is marked with this attribute.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpAbstractAttribute">
            <summary>
            CLI does not allow static abstract methods. If a  static method is declared as
            abstract, it is marked with this attribute.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpHasInitValueAttribute">
            <summary>
            Class field that have an init value is marked with this attribute.
            </summary>
            <remarks>Attribute is used by <see cref="N:PHP.Core.Reflection"/>.</remarks>
        </member>
        <member name="T:PHP.Core.AllowReturnValueOverrideAttribute">
            <summary>
            Interface method marked by this attribute can be implemented without adhering to its return type.
            </summary>
            <remarks>
            An interface method returning by reference (<B>&amp;</B>) that is decorated by this attribute
            can be implemented by a method that does not return by reference.
            Attribute is used by <see cref="N:PHP.Core.Reflection"/>.
            </remarks>
        </member>
        <member name="T:PHP.Core.AllowParametersOverrideAttribute">
            <summary>
            Interface method marked by this attribute can be implemented without adhering to its parameters.
            </summary>
            <remarks>Attribute is used by <see cref="N:PHP.Core.Reflection"/>.</remarks>
        </member>
        <member name="T:PHP.Core.PhpPublicFieldAttribute">
            <summary>
            PHP allows increasing visibility of fields that are declared as protected
            in ancestor class. A class that increases the visibility declares no field
            but is marked with that attribute.
            </summary>
            <remarks>Attribute is used by <see cref="N:PHP.Core.Reflection"/>.</remarks>
        </member>
        <member name="T:PHP.Core.FunctionImplOptions">
            <summary>
            Options of the function implementation.
            </summary>
        </member>
        <member name="F:PHP.Core.FunctionImplOptions.None">
            <summary>
            No options defined.
            </summary>
        </member>
        <member name="F:PHP.Core.FunctionImplOptions.NeedsVariables">
            <summary>
            <see cref="T:System.Collections.IDictionary"/> of declared variables will be passed to the first argument.
            </summary>
        </member>
        <member name="F:PHP.Core.FunctionImplOptions.NeedsFunctionArguments">
            <summary>
            Whether the function accesses currently executed PHP function arguments.
            </summary>
        </member>
        <member name="F:PHP.Core.FunctionImplOptions.NeedsThisReference">
            <summary>
            Whether the function needs to access instance of the object calling the function ($this reference)
            </summary>
        </member>
        <member name="F:PHP.Core.FunctionImplOptions.NotSupported">
            <summary>
            Function is not supported.
            </summary>
        </member>
        <member name="F:PHP.Core.FunctionImplOptions.Internal">
            <summary>
            Function is internal.
            </summary>
        </member>
        <member name="F:PHP.Core.FunctionImplOptions.CaptureEvalInfo">
            <summary>
            Captures eval to the current <see cref="T:PHP.Core.ScriptContext"/>. 
            The captured values has to be reset immediately before the method returns.
            </summary>
        </member>
        <member name="F:PHP.Core.FunctionImplOptions.NeedsNamingContext">
            <summary>
            Whether the function uses the current naming context.
            </summary>
        </member>
        <member name="F:PHP.Core.FunctionImplOptions.NeedsClassContext">
            <summary>
            Needs DTypeDesc class context of the caller.
            </summary>
        </member>
        <member name="F:PHP.Core.FunctionImplOptions.NeedsLateStaticBind">
            <summary>
            Needs DTypeDesc class context of the late static binding.
            </summary>
        </member>
        <member name="T:PHP.Core.ImplementsFunctionAttribute">
            <summary>
            Marks static methods of the Class Library which implements PHP functions.
            </summary>
        </member>
        <member name="M:PHP.Core.ImplementsFunctionAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:PHP.Core.ImplementsFunctionAttribute"/> attribute.
            </summary>
            <param name="name">The name of the PHP function implemented by marked method.</param>
        </member>
        <member name="M:PHP.Core.ImplementsFunctionAttribute.#ctor(System.String,PHP.Core.FunctionImplOptions)">
            <summary>
            Creates an instance of the <see cref="T:PHP.Core.ImplementsFunctionAttribute"/> attribute.
            </summary>
            <param name="name">The name of the PHP function implemented by marked method.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:PHP.Core.ImplementsFunctionAttribute.ReflectDynamic(System.Type,System.Reflection.MethodBase)">
            <summary>
            Reflects an assembly, but also supports a case where Phalanger is reflecting
            Silverlight version of the assembly (and so the type of attribute is different)
            </summary>
            <param name="attrType"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="P:PHP.Core.ImplementsFunctionAttribute.Name">
            <summary>
            The name of the PHP function.
            </summary>
        </member>
        <member name="P:PHP.Core.ImplementsFunctionAttribute.Options">
            <summary>
            Options.
            </summary>
        </member>
        <member name="T:PHP.Core.PureFunctionAttribute">
            <summary>
            Marks class library function that the specified method is pure. Therefore it can be evaluated at the compilation time.
            </summary>
        </member>
        <member name="M:PHP.Core.PureFunctionAttribute.#ctor">
            <summary>
            Creates an instance of the <see cref="T:PHP.Core.PureFunctionAttribute"/> attribute. Used if the method can be called during the compile-time evaluation.
            </summary>
        </member>
        <member name="M:PHP.Core.PureFunctionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates an instance of the <see cref="T:PHP.Core.PureFunctionAttribute"/> attribute. Used if another method must be called during the compile-time evaluation.
            </summary>
            <param name="specialMethodType">Type containing special method to be called for compile-time evaluation.</param>
            <param name="specialMethodName">Special method name to be called for compile-time evaluation.</param>
        </member>
        <member name="M:PHP.Core.PureFunctionAttribute.Reflect(System.Reflection.MethodBase)">
            <summary>
            Reflect the given MethodBase to fund the PureFunctionAttribute.
            </summary>
            <param name="method">The method where to find PureFunctionAttribute.</param>
            <returns>PureFunctionAttribute of the <c>method</c> or null if the attribute was not found.</returns>
        </member>
        <member name="P:PHP.Core.PureFunctionAttribute.CallSpecialMethod">
            <summary>
            True if special method must be called for compile-time evaluation.
            </summary>
        </member>
        <member name="P:PHP.Core.PureFunctionAttribute.SpecialMethod">
            <summary>
            MethodInfo of the method to be used during the compile-time evaluation.
            </summary>
        </member>
        <member name="P:PHP.Core.PureFunctionAttribute.SpecialMethodType">
            <summary>
            Type containing special method to be called for compile-time evaluation.
            </summary>
        </member>
        <member name="P:PHP.Core.PureFunctionAttribute.SpecialMethodName">
            <summary>
            Special method name to be called for compile-time evaluation.
            </summary>
        </member>
        <member name="T:PHP.Core.ThisAttribute">
            <summary>
            Marks the pseudo-this parameter of a class library method.
            </summary>
            <remarks>
            The method should be static and the parameter marked by this attribute should have the
            enclosing type. Use this attribute when the method must be callable both using an instance
            and statically (e.g. <c>DOMDocument::load</c>).
            </remarks>
        </member>
        <member name="T:PHP.Core.NullableAttribute">
            <summary>
            Marks a nullable parameter of a class library method.
            </summary>
            <remarks>
            When a parameter of a reference type is marked by this attribute, <B>null</B> is also a legal
            argument value.
            </remarks>
        </member>
        <member name="T:PHP.Core.ImplementsMethodAttribute">
            <summary>
            Marks methods of the Class Library which implement PHP methods.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpVisibleAttribute">
            <summary>
            Marks properties/methods of Class Library types which should be exposed to PHP.
            </summary>
        </member>
        <member name="T:PHP.Core.ImplementsConstantAttribute">
            <summary>
            Marks constants and items of enumerations in the Class Library which represent PHP constants.
            </summary>
        </member>
        <member name="M:PHP.Core.ImplementsConstantAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:PHP.Core.ImplementsConstantAttribute"/> attribute.
            </summary>
            <param name="name">The name of the PHP constant implemented by marked constant or enum item.</param>
        </member>
        <member name="P:PHP.Core.ImplementsConstantAttribute.Name">
            <summary>
            The name of the PHP constant.
            </summary>
        </member>
        <member name="P:PHP.Core.ImplementsConstantAttribute.CaseInsensitive">
            <summary>
            Whether the constant name is not case sensitive.
            </summary>
        </member>
        <member name="T:PHP.Core.ImplementsExtensionAttribute">
            <summary>
            Marks classes in the Class Library which implements a part or entire PHP extension.
            </summary>
            <remarks>
            Libraries which implements more than one extension should use the attribute 
            to distinguish which types belongs to which extension. If the library implements a single extension
            it is not required to use the attribute.
            </remarks>
        </member>
        <member name="M:PHP.Core.ImplementsExtensionAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:PHP.Core.ImplementsExtensionAttribute"/> attribute.
            </summary>
            <param name="name">The name of the PHP extension.</param>
        </member>
        <member name="P:PHP.Core.ImplementsExtensionAttribute.Name">
            <summary>
            The name of the PHP extension.
            </summary>
        </member>
        <member name="T:PHP.Core.CastToFalseAttribute">
            <summary>
            Marks return values of methods implementing PHP functions which returns <B>false</B> on error
            but has other return type than <see cref="T:System.Boolean"/> or <see cref="T:System.Object"/>.
            </summary>
            <remarks>
            Compiler takes care of converting a return value of a method into <B>false</B> if necessary.
            An attribute can be applied only on return values of type <see cref="T:System.Int32"/> (-1 is converted to <B>false</B>)
            or of a reference type (<B>null</B> is converted to <B>false</B>).
            </remarks>
        </member>
        <member name="M:PHP.Core.CastToFalseAttribute.IsDefined(System.Reflection.MethodInfo)">
            <summary>
            Determine wheter the attribute is defined for given <paramref name="method"/>.
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> to check for the attribute.</param>
            <returns>True iff given <paramref name="method"/> has <see cref="T:PHP.Core.CastToFalseAttribute"/>.</returns>
        </member>
        <member name="T:PHP.Core.PhpDeepCopyAttribute">
            <summary>
            If a parameter or a return value is marked by this attribute compiler should 
            generate deep-copy code before or after the method's call respectively.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpRwAttribute">
            <summary>
            Marks arguments having by-value argument pass semantics and data of the value can be changed by a callee.
            </summary>
        </member>
        <member name="T:PHP.Core.NeedsVariablesAttribute">
            <summary>
            Marks argless stubs in (dynamic) wrappers which consumes <see cref="F:PHP.Core.PhpStack.Variables"/>.
            </summary>
        </member>
        <member name="T:PHP.Core.ExternalCallbackAttribute">
            <summary>
            ExternalCallbackAttribute marks methods which are intended to be called by some PHP extension module.
            </summary>
            <remarks>
            Informative only. Not used so far.
            </remarks>
        </member>
        <member name="M:PHP.Core.ExternalCallbackAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:PHP.Core.ImplementsConstantAttribute"/> attribute.
            </summary>
            <param name="callbackName">The name the callback.</param>
        </member>
        <member name="F:PHP.Core.ExternalCallbackAttribute.name">
            <summary>The name of the callback.</summary>
        </member>
        <member name="P:PHP.Core.ExternalCallbackAttribute.Name">
            <summary>The name of the callback.</summary>
        </member>
        <member name="T:PHP.Core.ScriptAttribute">
            <summary>
            An attribute associated with the persistent script type.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptAttribute.#ctor(System.Int64,System.String)">
            <summary>
            Used in SSA/MSA (target web and dll). Contains info needed for compile-time/runtime reflection.
            </summary>
            <param name="sourceTimestamp">A timestamp of the source file when the script builder is created.</param>
            <param name="relativePath">Source file relative path.</param>
        </member>
        <member name="M:PHP.Core.ScriptAttribute.Reflect(System.Type)">
            <summary>
            Determine the [ScriptInfoAttribute] attribute of given script type.
            </summary>
            <param name="type">The script type to reflect from.</param>
            <returns>Script attribute associated with the given <c>type</c> or null.</returns>
        </member>
        <member name="P:PHP.Core.ScriptAttribute.SourceTimestamp">
            <summary>
            A timestamp of the source file when the script builder is created.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptAttribute.RelativePath">
            <summary>
            Source file relative path.
            </summary>
        </member>
        <member name="T:PHP.Core.ScriptIncludersAttribute">
            <summary>
            An attribute associated with the persistent script type.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptIncludersAttribute.#ctor(System.Int32[])">
            <summary>
            Used in SSA/MSA (target web and dll). Contains info needed for compile-time/runtime reflection.
            </summary>
            <param name="includers">
            Array of Scripts that statically include this script within current assembly.
            Script is represented as type token to the Script type.
            </param>
        </member>
        <member name="M:PHP.Core.ScriptIncludersAttribute.Reflect(System.Type)">
            <summary>
            Determine the [ScriptIncludersAttribute] attribute of given script type.
            </summary>
            <param name="type">The script type to reflect from.</param>
            <returns>Script attribute associated with the given <c>type</c> or null.</returns>
        </member>
        <member name="P:PHP.Core.ScriptIncludersAttribute.Includers">
            <summary>
            Array of Scripts that statically include this script within current assembly.
            Script is represented as type token to the Script type resolved within current module.
            </summary>
        </member>
        <member name="T:PHP.Core.ScriptIncludeesAttribute">
            <summary>
            An attribute associated with the persistent script type.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptIncludeesAttribute.inclusionsConditionalFlag">
            <summary>
            Bit array. Bit is set to 1 if inclusion on specified bit index is conditional.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptIncludeesAttribute.#ctor(System.Int32[],System.Byte[])">
            <summary>
            Used in SSA/MSA (target web and dll). Contains info needed for compile-time/runtime reflection.
            </summary>
            <param name="inclusions">
            Array of statically included Scripts.
            Script is represented as type token to the Script type.
            </param>
            <param name="inclusionsConditionalFlag">
            Array with bit flags determining if static inclusion on specific index is included conditionally.
            </param>
        </member>
        <member name="M:PHP.Core.ScriptIncludeesAttribute.ConvertBoolsToBits(System.Boolean[])">
            <summary>
            Convert array of bools into array of bytes.
            Note: BitArray cannot be used, missing method <c>ToBytes</c>.
            </summary>
            <param name="array">An array to convert.</param>
            <returns>Bytes with particular bits set or null of <c>array</c> is null or empty.</returns>
        </member>
        <member name="M:PHP.Core.ScriptIncludeesAttribute.Reflect(System.Type)">
            <summary>
            Determine the [ScriptIncludesAttribute] attribute of given script type.
            </summary>
            <param name="type">The script type to reflect from.</param>
            <returns>Script attribute associated with the given <c>type</c> or null.</returns>
        </member>
        <member name="P:PHP.Core.ScriptIncludeesAttribute.Inclusions">
            <summary>
            Array of statically included Scripts.
            Script is represented as type token to the Script type resolved within current module.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptIncludeesAttribute.InclusionsConditionalFlags">
            <summary>
            Get bit array with flags determining if static inclusion on specific index is included conditionally.
            </summary>
        </member>
        <member name="T:PHP.Core.ScriptDeclaresAttribute">
            <summary>
            An attribute associated with the persistent script type.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptDeclaresAttribute.#ctor(System.Int32[])">
            <summary>
            Used in SSA/MSA (target web and dll). Contains info needed for compile-time/runtime reflection.
            </summary>
            <param name="declaredTypes">
            Array of Types that are statically declared by this Script.
            Type is represented as type token to the Type resolved within current module.
            </param>
        </member>
        <member name="M:PHP.Core.ScriptDeclaresAttribute.Reflect(System.Type)">
            <summary>
            Determine the [ScriptIncludersAttribute] attribute of given script type.
            </summary>
            <param name="type">The script type to reflect from.</param>
            <returns>Script attribute associated with the given <c>type</c> or null.</returns>
        </member>
        <member name="P:PHP.Core.ScriptDeclaresAttribute.DeclaredTypes">
            <summary>
            Array of Types that are statically declared by this Script.
            Type is represented as type token to the Type resolved within current module.
            </summary>
        </member>
        <member name="T:PHP.Core.IncludesAttribute">
            <summary>
            Stores information about scripts directly included by a module which is decorated by this attribute.
            </summary>
        </member>
        <member name="M:PHP.Core.IncludesAttribute.#ctor(System.String,System.SByte,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the attribute with a specified source path and a conditionality flag.
            </summary>
            <param name="relativeSourcePath">Relative path remainder.</param>
            <param name="level">Relative path level.</param>
            <param name="isConditional">Whether the inclusion is conditional.</param>
            <param name="once"><B>True</B> if the include is include_once or require_once.</param>
        </member>
        <member name="P:PHP.Core.IncludesAttribute.RelativeSourceFile">
            <summary>
            An included script's canonical source path relative to the application source root.
            </summary>
        </member>
        <member name="P:PHP.Core.IncludesAttribute.IsConditional">
            <summary>
            Whether the inclusion is conditional.
            </summary>
        </member>
        <member name="P:PHP.Core.IncludesAttribute.Once">
            <summary>
            Whether the inclusion is include_once or require_once.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpEvalIdAttribute">
            <summary>
            Associates a class with an eval id.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpEvalIdAttribute.Id">
            <summary>
            Eval id.
            </summary>
        </member>
        <member name="T:PHP.Core.NoPhpInfoAttribute">
            <summary>
            Specifies that a target field, property, or class defined in the configuration record 
            is not displayd by PHP info.
            </summary>
        </member>
        <member name="T:PHP.Core.EmittedAttribute">
            <summary>
            Used for marking Core members that are emitted to the user code.
            </summary>
        </member>
        <member name="T:PHP.Core.NeedsArglessAttribute">
            <summary>
            Attribute specifying that function should be called statically with valid PhpStack. Such a function needs function arguments,
            e.g. it calls func_num_args() or func_get_arg() inside.
            </summary>
        </member>
        <member name="M:PHP.Core.NeedsArglessAttribute.IsSet(System.Reflection.MethodInfo)">
            <summary>
            Determines if given <c>method</c> has [NeedsArgless] attribute set.
            </summary>
            <param name="method">The method to reflect from.</param>
            <returns>True if the method is marked.</returns>
        </member>
        <member name="T:PHP.Core.UsesLateStaticBindingAttribute">
            <summary>
            Attribute specifying that function contains usage of <c>static</c> (late static binding),
            runtime should pass type used to call a static method into script context, so it can be used by late static binding.
            </summary>
        </member>
        <member name="M:PHP.Core.UsesLateStaticBindingAttribute.IsSet(System.Reflection.MethodInfo)">
            <summary>
            Determines if given <c>method</c> has [UsesLateStaticBinding] attribute set.
            </summary>
            <param name="method">The method to reflect from.</param>
            <returns>True if the method is marked.</returns>
        </member>
        <member name="T:PHP.Core.Binders.Binder">
            <summary>
            Manages run time binders.
            </summary>
        </member>
        <member name="F:PHP.Core.Binders.Binder.invokeMemberBinders">
            <summary>
            Binders cache. Alows to share binders for the same operations.
            TODO: Slit different binders into different dictionaries.
            </summary>
        </member>
        <member name="F:PHP.Core.Binders.Binder.getMemberBinders">
            <summary>
            Get*Property* binders.
            TODO: Slit different binders into different dictionaries.
            </summary>
        </member>
        <member name="M:PHP.Core.Binders.Binder.MethodCall(System.String,System.Int32,System.Int32,PHP.Core.Reflection.DTypeDesc,System.Type)">
            <summary>
            Get the instance method call binder.
            </summary>
            <param name="methodName">The method name. It is <c>null</c> iff this is not known at compile time.</param>
            <param name="classContext">The class context of the call site. It can be null or an instance of <see cref="T:PHP.Core.Reflection.DTypeDesc"/>.
            If the class context is not constant, its <see cref="P:PHP.Core.Reflection.DTypeDesc.IsUnknown"/> is <c>true</c>.</param>
            <param name="genericParamsCount">Type arguments count.</param>
            <param name="paramsCount">Parameters count.</param>
            <param name="returnType">CallSite return value type.</param>
            <returns>An instance of requested binder.</returns>
        </member>
        <member name="M:PHP.Core.Binders.Binder.StaticMethodCall(System.String,System.Int32,System.Int32,PHP.Core.Reflection.DTypeDesc,System.Type)">
            <summary>
            Get the static method call binder.
            </summary>
            <param name="methodName">The method name. It is <c>null</c> iff this is not known at compile time.</param>
            <param name="classContext">The class context of the call site. It can be null or an instance of <see cref="T:PHP.Core.Reflection.DTypeDesc"/>.
            If the class context is not constant, its <see cref="P:PHP.Core.Reflection.DTypeDesc.IsUnknown"/> is <c>true</c>.</param>
            <param name="genericParamsCount">Type arguments count.</param>
            <param name="paramsCount">Parameters count.</param>
            <param name="returnType">CallSite return value type.</param>
            <returns>An instance of requested binder.</returns>
        </member>
        <member name="T:PHP.Core.Binders.Binder.BinderFlags">
            <summary>
            Requested binder options.
            </summary>
        </member>
        <member name="F:PHP.Core.Binders.Binder.BinderFlags.ResultWanted">
            <summary>
            The return value is required. Object is expected as the return value type.
            </summary>
        </member>
        <member name="F:PHP.Core.Binders.Binder.BinderFlags.ResultAsPhpReferenceWanted">
            <summary>
            PhpReference of the return value is expected. Return type must be PhpReference and the value must not be null.
            </summary>
        </member>
        <member name="M:PHP.Core.Binders.BinderHelper.ThrowVisibilityError(PHP.Core.Reflection.DRoutineDesc,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Generates Expression that throws a 'Protected method called' or 'Private method called' <see cref="T:PHP.Core.PhpException"/>.
            </summary>
            <param name="method">The <see cref="T:PHP.Core.Reflection.DRoutineDesc"/>.</param>
            <param name="callerContext">The caller that was passed to method lookup or <B>null</B>
            if it should be determined by this method (by tracing the stack).</param>
            <remarks>
            This method is intended to be called after <see cref="M:PHP.Core.Reflection.DTypeDesc.GetMethod(PHP.Core.Name)"/> has returned
            <see cref="F:PHP.Core.Reflection.GetMemberResult.BadVisibility"/> while performing a method lookup.
            </remarks>
        </member>
        <member name="M:PHP.Core.Binders.BinderHelper.ClrObjectWrapDynamic(System.Linq.Expressions.Expression)">
            <summary>
            Builds <see cref="T:System.Linq.Expressions.Expression"/> that properly wraps given expression to return valid PHP type.
            It does not perform any conversion for PHP primitive types. Byte array is wrapped into <see cref="T:PHP.Core.PhpBytes"/> and
            anything else is wrapped using <see cref="M:PHP.Core.Reflection.ClrObject.Create(System.Object)"/> method.
            </summary>
            <param name="expression">Expression returning an object/value.</param>
            <returns><see cref="T:System.Linq.Expressions.Expression"/> returning valid PHP object.</returns>
        </member>
        <member name="M:PHP.Core.Binders.BinderHelper.ClrRealObject(System.Dynamic.DynamicMetaObject,System.Type)">
            <summary>
            Unwraps <see cref="P:PHP.Core.Reflection.DObject.RealObject"/> or <see cref="F:PHP.Core.Reflection.ClrValue`1.realValue"/> from <see cref="T:PHP.Core.Reflection.ClrObject"/> or <see cref="T:PHP.Core.Reflection.ClrValue`1"/>.
            </summary>
            <param name="target">Original <b>target</b> of binding operation.</param>
            <param name="realType">Expected <see cref="T:System.Type"/> of the operation.</param>
            <returns><see cref="T:System.Linq.Expressions.Expression"/> getting the real object wrapped into given target.</returns>
        </member>
        <member name="M:PHP.Core.Binders.BinderHelper.MakePhpReference(System.Linq.Expressions.Expression)">
            <summary>
            Ensures the expression returns <see cref="T:PHP.Core.PhpReference"/>. If not the expression is wrapped to a new instance of <see cref="T:PHP.Core.PhpReference"/>.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression"/> to be wrapped.</param>
            <returns>Expression representing PhpReference.</returns>
        </member>
        <member name="M:PHP.Core.Binders.BinderHelper.WrapInstanceMethodCall(System.Reflection.MethodInfo)">
            <summary>
            Create static <see cref="T:System.Reflection.Emit.DynamicMethod"/> that wraps call of given <paramref name="mi"/>. The call is performed statically, method's overrides are not called.
            </summary>
            <param name="mi"><see cref="T:System.Reflection.MethodInfo"/> to be called statically.</param>
            <returns>New <see cref="T:System.Reflection.MethodInfo"/> representing static method stub.</returns>
        </member>
        <member name="M:PHP.Core.Binders.BinderHelper.PackToExpressions(System.Dynamic.DynamicMetaObject[],System.Int32,System.Int32)">
            <summary>
            Converts first #length elements from a given array of DynamicMetaObject to array of Expression
            </summary>
            <param name="args">Array of DynamicMetaObject to be converted to Expression[]</param>
            <param name="startIndex">Index of first argument that's going to be converted</param>
            <param name="length">Count of arguments that are going to be converted</param>
            <returns>Expression[] of values of DynamicMetaObject array</returns>
        </member>
        <member name="M:PHP.Core.Binders.PhpRoutineExtensions.PrepareArguments(PHP.Core.Reflection.PhpRoutine,System.Dynamic.DynamicMetaObject[],System.Int32,System.Int32,System.Dynamic.BindingRestrictions@)">
            <summary>
            Prepares arguments for argfull overload.
            </summary>
            <param name="routine">Routine for which arguments should be prepared</param>
            <param name="arguments">Arguments to be prepared for the routine</param>
            <param name="genericArguments">Amount of generic arguments provided by call site.</param>
            <param name="regularArguments">Amount of value arguments provided by call site.</param>
            <param name="restrictions">Type restrictions for the arguments</param>
            <returns>Array of prepared arguments to be called with routine</returns>
            <remarks>
            This is basically substitute for everything important that was done in argless overload (except it doesn't use PhpStack but evaluation stack).
            It adopts the arguments according to routine. e.g. dereference reference if value is needed, supplies default argument, etc.
            </remarks>
        </member>
        <member name="M:PHP.Core.Binders.PhpRoutineExtensions.GeneratePeekArgument(PHP.Core.Reflection.PhpRoutine,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Int32)">
            <summary>
            Generates expression for a given argument to fit formal argument of the give routine.
            </summary>
            <param name="routine">Routine for which argument will be supplied.</param>
            <param name="scriptContext">ScriptContext DynamicMetaObject</param>
            <param name="arg">Actual argument to be supplied to be supplied to routine.</param>
            <param name="argIndex">Index of the argument in a routine(not counting ScriptContext argument).</param>
            <returns>The expression of an argument that is prepared to be supplied as an argument to the routine.</returns>
        </member>
        <member name="T:PHP.Core.Binders.PhpGetMemberBinder">
            <summary>
            
            </summary>
        </member>
        <member name="F:PHP.Core.Binders.PhpInvokeBinderKey.argumentCount">
            <summary>
            Number of arguments in the signature.
            </summary>
        </member>
        <member name="F:PHP.Core.Binders.PhpInvokeBinderKey.genericArgumentCount">
            <summary>
            Number of generic type arguments in the signature.
            </summary>
        </member>
        <member name="F:PHP.Core.Binders.PhpInvokeBinderKey.returnType">
            <summary>
            Binding flags
            </summary>
        </member>
        <member name="F:PHP.Core.Binders.PhpInvokeBinderKey.methodName">
            <summary>
            Method name
            </summary>
        </member>
        <member name="F:PHP.Core.Binders.PhpInvokeBinderKey.callerClassContext">
            <summary>
            Method name
            </summary>
        </member>
        <member name="T:PHP.Core.Binders.PhpBaseInvokeMemberBinder">
            <summary>
            
            </summary>
        </member>
        <member name="M:PHP.Core.Binders.PhpBaseInvokeMemberBinder.Create(System.String,System.Int32,System.Int32,PHP.Core.Reflection.DTypeDesc,System.Type)">
            <summary>
            Creates appropriate binder according to paramaters specified
            </summary>
            <param name="methodName">Name of the method known during binder creation.</param>
            <param name="genericParamsCount">Number of generic type arguments of the method</param>
            <param name="paramsCount">Number of arguments of the method</param>
            <param name="callerClassContext">TypeDesc of the class that is calling this method</param>
            <param name="returnType">Type which is expected from the call site to return</param>
            <returns>Return appropriate binder derived from PhpInvokeMemberBinder</returns>
        </member>
        <member name="M:PHP.Core.Binders.PhpBaseInvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Php invoke call site signature is non-standard for DLR. If the object implements IDynamicMetaObjectProvider
            a call has to be transleted to arguments that can understand. If it's object comming from Phalanger
            for now we just fallback to FallbackInvokeMember method.
            </summary>
            <remarks>
            
            CallSite&lt; Func&lt; CallSite, 
                 object /*target instance*/,
                 ScriptContext,
                 {args}*/*method call arguments*/,
                 (DTypeDesc)?/*class context,
                 iff {classContext}.IsUnknown*/,
                 (object)?/*method name,
                 iff {methodName}==null*/, {returnType} &gt; &gt;
            
            </remarks>
        </member>
        <member name="M:PHP.Core.Binders.PhpBaseInvokeMemberBinder.GetActualClassContext(System.Dynamic.DynamicMetaObject[])">
            <summary>
            Returns ClassContext that was supplied during creation of binder or if it wasn't available that time, it selects it from supplied arguments
            </summary>
            <param name="args">Arguments supplied during run time bind process</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Binders.PhpBaseInvokeMemberBinder.HandleResult(System.Linq.Expressions.Expression,System.Type,System.Boolean)">
            <summary>
            Handles the return argument of the method
            </summary>
            <remarks>
            Caller needs as returned type
            1.) void
               => result
            2.) PhpReference
               a.) if method returns PhpReference => result
               b.) otherwise => PhpVariable.MakeReference(PhpVariable.Copy(result, CopyReason.ReturnedByCopy));
            3.) otherwise
               a.) if method returns PhpReference = > result.Value
               b.) otherwise => PhpVariable.Dereference(PhpVariable.Copy(result, CopyReason.ReturnedByCopy));
            </remarks>
            <param name="result">Result to be handled</param>
            <param name="methodReturnType">Type of the return argument the method</param>
            <param name="dereference">Dereference will be generated.</param>
        </member>
        <member name="P:PHP.Core.Binders.PhpBaseInvokeMemberBinder.ReturnType">
            <summary>
            The result type of the invoke operation.
            </summary>
        </member>
        <member name="P:PHP.Core.Binders.PhpBaseInvokeMemberBinder.IsIndirect">
            <summary>
            This binder binds indirect method calls
            </summary>
        </member>
        <member name="P:PHP.Core.Binders.PhpBaseInvokeMemberBinder.ActualMethodName">
            <summary>
            Name of the method
            </summary>
        </member>
        <member name="M:PHP.Core.Binders.PhpInvokeMemberBinder.InvokePhpMethod(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],PHP.Core.Reflection.PhpRoutine,System.Dynamic.BindingRestrictions@,System.Linq.Expressions.Expression@)">
            <summary>
            This method binds rules for PhpMethod
            </summary>
        </member>
        <member name="P:PHP.Core.Binders.PhpInvokeMemberBinder.ActualMethodName">
            <summary>
            Name of the method
            </summary>
        </member>
        <member name="P:PHP.Core.Binders.PhpIndirectInvokeMemberBinder.ActualMethodName">
            <summary>
            Name of the actual method.
            </summary>
            <remarks>
            Can change in the begining of the each binding
            </remarks>
        </member>
        <member name="T:PHP.Core.IPhpComparable">
            <summary>
            Defines comparison methods which are used to compare PHP.NET types.
            </summary>
        </member>
        <member name="M:PHP.Core.IPhpComparable.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object using default comparer.
            </summary>
            <param name="obj">Object to compare with.</param>
            <returns>-1,0,+1</returns>
            <exception cref="T:System.ArgumentException">Incomparable objects have been compared.</exception>
        </member>
        <member name="M:PHP.Core.IPhpComparable.CompareTo(System.Object,System.Collections.IComparer)">
            <summary>
            Compares the current instance with another object.
            </summary>
            <param name="obj">An object to compare with this instance.</param><param name="comparer">A comparer to be used for comparing items contained in this instance.</param><returns>
      Negative integer if this instance is less than <paramref name="obj"/>,
      zero if this instance equals to <paramref name="obj"/> and positive integer
      if this instance is greater than <paramref name="obj"/>.
    </returns><remarks>
      The <paramref name="comparer"/> is used to compare items which contained in this instance (useful when the instance
      is an array or object etc.).
    </remarks>
            <exception cref="T:System.ArgumentException">Incomparable objects have been compared.</exception>
        </member>
        <member name="T:PHP.Core.IDictionaryComparer">
            <summary>
            Defines comparer which can be used to compare entries of a disctionary collection.
            </summary>
        </member>
        <member name="M:PHP.Core.IDictionaryComparer.Compare(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Compares two entries of a dictionary collection.
            </summary>
            <param name="keyA">The key of the first entry.</param><param name="valueA">The value of the first entry.</param><param name="keyB">The key of the second entry.</param><param name="valueB">The value of the second entry.</param><returns>
      Negative integer if (<paramref name="keyA"/>,<paramref name="valueA"/>) is less than (<paramref name="keyB"/>,<paramref name="valueB"/>),
      zero if (<paramref name="keyA"/>,<paramref name="valueA"/>) equals to (<paramref name="keyA"/>,<paramref name="valueA"/>) and positive integer
      if (<paramref name="keyA"/>,<paramref name="valueA"/>) is greater than (<paramref name="keyA"/>,<paramref name="valueA"/>).
    </returns>
        </member>
        <member name="T:PHP.Core.KeyComparer">
            <summary>
            Compares keys of dictionary entries by specified comparer.
            </summary>
        </member>
        <member name="F:PHP.Core.KeyComparer.Default">
            <summary>Regular comparer.</summary>
        </member>
        <member name="F:PHP.Core.KeyComparer.Numeric">
            <summary>Numeric comparer.</summary>
        </member>
        <member name="F:PHP.Core.KeyComparer.String">
            <summary>String comparer.</summary>
        </member>
        <member name="F:PHP.Core.KeyComparer.ArrayKeys">
            <summary>Array keys comparer.</summary>
        </member>
        <member name="F:PHP.Core.KeyComparer.Reverse">
            <summary>Regular comparer with reverse order.</summary>
        </member>
        <member name="F:PHP.Core.KeyComparer.ReverseNumeric">
            <summary>Numeric comparer with reverse order.</summary>
        </member>
        <member name="F:PHP.Core.KeyComparer.ReverseString">
            <summary>String comparer with reverse order.</summary>
        </member>
        <member name="F:PHP.Core.KeyComparer.ReverseArrayKeys">
            <summary>Locale string comparer with reverse order.</summary>
        </member>
        <member name="F:PHP.Core.KeyComparer.comparer">
            <summary>
            The comparer which will be used to compare keys.
            </summary>
        </member>
        <member name="F:PHP.Core.KeyComparer.reverse">
            <summary>
            Plus or minus 1 depending on whether the comparer compares reversly.
            </summary>
        </member>
        <member name="M:PHP.Core.KeyComparer.#ctor(System.Collections.IComparer,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:PHP.Core.KeyComparer"/>.
            </summary>
            <param name="comparer">The comparer which will be used to compare keys.</param>
            <param name="reverse">Whether to compare reversly.</param>
        </member>
        <member name="T:PHP.Core.ValueComparer">
            <summary>
            Compares values of dictionary entries by specified comparer.
            </summary>
        </member>
        <member name="F:PHP.Core.ValueComparer.Default">
            <summary>Regular comparer.</summary>
        </member>
        <member name="F:PHP.Core.ValueComparer.Numeric">
            <summary>Numeric comparer.</summary>
        </member>
        <member name="F:PHP.Core.ValueComparer.String">
            <summary>String comparer.</summary>
        </member>
        <member name="F:PHP.Core.ValueComparer.Reverse">
            <summary>Regular comparer with reverse order.</summary>
        </member>
        <member name="F:PHP.Core.ValueComparer.ReverseNumeric">
            <summary>Numeric comparer with reverse order.</summary>
        </member>
        <member name="F:PHP.Core.ValueComparer.ReverseString">
            <summary>String comparer with reverse order.</summary>
        </member>
        <member name="F:PHP.Core.ValueComparer.comparer">
            <summary>The comparer which will be used to compare values.</summary>
        </member>
        <member name="F:PHP.Core.ValueComparer.reverse">
            <summary>Plus or minus 1 depending on whether the comparer compares reversly.</summary>
        </member>
        <member name="M:PHP.Core.ValueComparer.#ctor(System.Collections.IComparer,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:PHP.Core.ValueComparer"/>.
            </summary>
            <param name="comparer">The comparer which will be used to compare values.</param>
            <param name="reverse">Whether to compare reversly.</param>
        </member>
        <member name="T:PHP.Core.EntryComparer">
            <summary>
            Compares dictionary entries using specified value and key comparers.
            </summary>
        </member>
        <member name="M:PHP.Core.EntryComparer.#ctor(System.Collections.IComparer,System.Boolean,System.Collections.IComparer,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:PHP.Core.EntryComparer"/> with specified value and key comparers.
            </summary>
            <param name="keyComparer">The comparer used on keys.</param>
            <param name="keyReverse">Whether the the result of the key comparer is inversed.</param>
            <param name="valueComparer">The comparer used on values.</param>
            <param name="valueReverse">Whether the the result of the value comparer is inversed</param>
        </member>
        <member name="T:PHP.Core.ObjectEqualityComparer">
            <summary>
            Implements equality comparer of objects, using given <see cref="T:System.Collections.IComparer"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.ObjectEqualityComparer.comparer">
            <summary>
            <see cref="T:System.Collections.IComparer"/> to use.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpComparer">
            <summary>
            Implements PHP regular comparison.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpComparer.#ctor">
            <summary>Prevents from creating instances of this class.</summary>
        </member>
        <member name="F:PHP.Core.PhpComparer.Default">
            <summary>
            Default comparer used to compare objects where no other comparer is provided by user.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareOp(System.Object,System.Object,System.Boolean)">
            <summary>
            Compares two objects in a manner of the PHP regular comparison.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="throws">If true, functions throws ArgumentException for incomparable objects.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareOp_Nonliterals(System.Object,System.Object)">
            <summary>
            Compare given objects, assuming they are IPhpComparable (PhpReference, PhpArray, PhpObject, PhpResource, PhpBytes). Otherwise it compares references.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If x and y are incomparable, ArgumentException is thrown.</exception>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareOp_ThrowHelper(System.Object,System.Object)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> with information about arguments type.
            </summary>
            <param name="x">Left operand.</param>
            <param name="y">Right operand.</param>
            <exception cref="T:System.ArgumentException">Always throws.</exception>
        </member>
        <member name="M:PHP.Core.PhpComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects in a manner of the PHP regular comparison.
            </summary>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareEq(System.Object,System.Object)">
            <summary>
            Compares two objects for equality in a manner of the PHP regular comparison.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns>Whether the values of operands are the same.</returns>
            <remarks>Faster than Compare(x,y) == 0.</remarks>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareEq(System.Object,System.String)">
            <summary>
            Compares two objects for equality in a manner of the PHP regular comparison.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns>Whether the values of operands are the same.</returns>
            <remarks>Faster than Compare(x,y) == 0.</remarks>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareEq(System.Object,System.Int32)">
            <summary>
            Compares two objects for equality in a manner of the PHP regular comparison.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns>Whether the values of operands are the same.</returns>
            <remarks>Faster than Compare(x,y) == 0.</remarks>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareDouble(System.Double,System.Double)">
            <summary>
            Compares two double values.
            </summary>
            <returns>(+1,0,-1)</returns>
            <remarks>We cannot used <see cref="M:System.Math.Sign(System.SByte)"/> on <c>x - y</c> since the result can be NaN.</remarks>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareInteger(System.Int32,System.Int32)">
            <summary>
            Compares two integer values.
            </summary>
            <returns>(+1,0,-1)</returns>
            <remarks>We cannot used <see cref="M:System.Math.Sign(System.SByte)"/> on <c>x - y</c> since the result can overflow.</remarks>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareLongInteger(System.Int64,System.Int64)">
            <summary>
            Compares two long integer values.
            </summary>
            <returns>(+1,0,-1)</returns>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareString(System.String,System.String)">
            <summary>
            Compares string in a manner of PHP. 
            </summary>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
            <remarks>Note that this comparison is not transitive (e.g. {"2","10","10a"} leads to a contradiction).</remarks>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareString(System.String,System.Int32)">
            <summary>
            Compares a <see cref="T:System.String"/> with <see cref="T:System.Int32"/>.
            </summary>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareString(System.String,System.Int64)">
            <summary>
            Compares a <see cref="T:System.String"/> with <see cref="T:System.Int64"/>.
            </summary>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareString(System.String,System.Double)">
            <summary>
            Compares a <see cref="T:System.String"/> with <see cref="T:System.Double"/>.
            </summary>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareStringEq(System.String,System.Int32)">
            <summary>
            Compares two objects for equality in a manner of the PHP regular comparison.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns>Whether the values of operands are the same.</returns>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareStringEq(System.String,System.Int64)">
            <summary>
            Compares two objects for equality in a manner of the PHP regular comparison.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns>Whether the values of operands are the same.</returns>
        </member>
        <member name="M:PHP.Core.PhpComparer.CompareStringEq(System.String,System.Double)">
            <summary>
            Compares two objects for equality in a manner of the PHP regular comparison.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns>Whether the values of operands are the same.</returns>
        </member>
        <member name="T:PHP.Core.PhpNumericComparer">
            <summary>
            Implements PHP numeric comparison.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpNumericComparer.#ctor">
            <summary>Prevents from creating instances of this class.</summary>
        </member>
        <member name="F:PHP.Core.PhpNumericComparer.Default">
            <summary>
            Default comparer used to compare objects where no other comparer is provided by user.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpNumericComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects in a manner of PHP numeric comparison.
            </summary>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="T:PHP.Core.PhpStringComparer">
            <summary>
            Implements PHP string comparison.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStringComparer.#ctor">
            <summary>Prevents from creating instances of this class.</summary>
        </member>
        <member name="F:PHP.Core.PhpStringComparer.Default">
            <summary>
            Default comparer used to compare objects where no other comparer is provided by user.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStringComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects in a manner of PHP string comparison.
            </summary>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="T:PHP.Core.PhpLocaleStringComparer">
            <summary>
            Implements PHP locale string comparison.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpLocaleStringComparer.#ctor(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Creates a new string comparer with a specified culture.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpLocaleStringComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects in a manner of PHP string comparison.
            </summary>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="P:PHP.Core.PhpLocaleStringComparer.Culture">
            <summary>
            A culture used for comparison.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpLocaleStringComparer.IgnoreCase">
            <summary>
            Whether the comparer is ignoring case.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpArrayKeysComparer">
            <summary>
            Implements comparison of PHP array keys.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArrayKeysComparer.#ctor">
            <summary>Prevents from creating instances of this class.</summary>
        </member>
        <member name="F:PHP.Core.PhpArrayKeysComparer.Default">
            <summary>
            Default comparer.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArrayKeysComparer.Compare(PHP.Core.IntStringKey,PHP.Core.IntStringKey)">
            <summary>
            Compares keys of an array.
            </summary>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
            <remarks>
            Keys are compared as strings if at least one of them is a string 
            otherwise they have to be integers and so they are compared as integers.
            </remarks>
        </member>
        <member name="T:PHP.Core.PhpNaturalComparer">
            <summary>
            Implements PHP natural comparison.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpNaturalComparer.caseInsensitive">
            <summary>Whether comparisons will be case insensitive.</summary>
        </member>
        <member name="F:PHP.Core.PhpNaturalComparer.Default">
            <summary>Default case sensitive comparer.</summary>
        </member>
        <member name="F:PHP.Core.PhpNaturalComparer.CaseInsensitive">
            <summary>Case insensitive comparer.</summary>
        </member>
        <member name="M:PHP.Core.PhpNaturalComparer.#ctor(System.Boolean)">
            <summary>Prevents from creating instances of this class.</summary>
            <param name="caseInsensitive">Whether comparisons will be case insensitive.</param>
        </member>
        <member name="M:PHP.Core.PhpNaturalComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects using the natural ordering.
            </summary>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="M:PHP.Core.PhpNaturalComparer.CompareStrings(System.String,System.String)">
            <summary>
            Compares two strings using the natural ordering.
            </summary>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="M:PHP.Core.PhpNaturalComparer.CompareLeft(System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            Compares two strings with left-aligned numbers, the first to have a different value wins.
            </summary>
            <param name="x">String that contains the first number.</param>
            <param name="y">String that contains the second number.</param>
            <param name="i">Index in <paramref name="x"/> where the first number begins. Is set to the index
            immediately following the number after returning from this method.</param>
            <param name="j">Index in <paramref name="y"/> where the second number begins. Is set to the index
            immediately following the number after returning from this method.</param>
            <returns>
            Negative integer if the first number is less than the second number, 
            zero if the two numbers are equal and
            positive integer if the first number is greater than the second number.</returns>
            <remarks>Assumes neither <paramref name="x"/> nor <paramref name="y"/> parameter is null.</remarks>
        </member>
        <member name="M:PHP.Core.PhpNaturalComparer.CompareRight(System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            Compares two strings with right-aligned numbers, The longest run of digits wins.
            </summary>
            <param name="x">String that contains the first number.</param>
            <param name="y">String that contains the second number.</param>
            <param name="i">Index in <paramref name="x"/> where the first number begins. Is set to the index
            immediately following the number after returning from this method.</param>
            <param name="j">Index in <paramref name="y"/> where the second number begins. Is set to the index
            immediately following the number after returning from this method.</param>
            <returns>
            Negative integer if the first number is less than the second number, 
            zero if the two numbers are equal and
            positive integer if the first number is greater than the second number.</returns>
            <remarks>Assumes neither <paramref name="x"/> nor <paramref name="y"/> parameter is null.</remarks>
        </member>
        <member name="T:PHP.Core.PhpUserComparer">
            <summary>
            Implements PHP numeric comparison.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpUserComparer.compare">
            <summary>User defined PHP method used to compare given objects.</summary>
        </member>
        <member name="M:PHP.Core.PhpUserComparer.#ctor(PHP.Core.PhpCallback)">
            <summary>
            Creates a new instance of a comparer using <see cref="T:PHP.Core.PhpCallback"/> for comparisons.
            </summary>
            <param name="compare">User callback which provides comparing functionality.</param>
            <remarks>
            <para>
            Callback should have the signature <c>object(object,object)</c> and should already be bound.
            </para>
            <para>
            The result of calback's invocation is converted to a double by <see cref="M:PHP.Core.Convert.ObjectToDouble(System.Object)"/>
            and than the sign is taken as a result of the comparison.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="compare"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="compare"/> callback is not bound.</exception>
        </member>
        <member name="M:PHP.Core.PhpUserComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects in a manner of PHP numeric comparison.
            </summary>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="T:PHP.Core.IExTypeInfo">
            <summary>
            A set of possible types that an expression can result to.
            </summary>
            <remarks>
            <para>This type is used to annotate <see cref="T:PHP.Core.AST.Expression"/>. 
            If an element is annotated with this information, we can emit more efficient code.</para>
            </remarks>
        </member>
        <member name="M:PHP.Core.IExTypeInfo.HasTypeCode(PHP.Core.PhpTypeCode)">
            <summary>
            This is a shortcut for checking whether <see cref="P:PHP.Core.IExTypeInfo.TypeCodes"/> 
            collection contains given element. Due to internal implementation details, 
            using this method might be faster, then constructing the collection in 
            <see cref="P:PHP.Core.IExTypeInfo.TypeCodes"/> getter.
            </summary>
        </member>
        <member name="M:PHP.Core.IExTypeInfo.HasType(PHP.Core.AST.TypeRef)">
            <summary>
            This is a shortcut for checking whether <see cref="P:PHP.Core.IExTypeInfo.Types"/> 
            collection contains given element. Due to internal implementation details, 
            using this method might be faster, then constructing the collection in 
            <see cref="P:PHP.Core.IExTypeInfo.Types"/> getter.
            </summary>
        </member>
        <member name="M:PHP.Core.IExTypeInfo.IsOfType(PHP.Core.PhpTypeCode)">
            <summary>
            Returns <c>true</c> if both <see cref="P:PHP.Core.IExTypeInfo.IsAnyType"/> and <see cref="P:PHP.Core.IExTypeInfo.IsTypeHint"/> 
            are <c>false</c> and <see cref="P:PHP.Core.IExTypeInfo.TypeCodes"/> contains only the given type.
            </summary>
        </member>
        <member name="M:PHP.Core.IExTypeInfo.IsOfType(PHP.Core.AST.TypeRef)">
            <summary>
            Returns <c>true</c> if both <see cref="P:PHP.Core.IExTypeInfo.IsAnyType"/> and <see cref="P:PHP.Core.IExTypeInfo.IsTypeHint"/> 
            are <c>false</c>, <see cref="P:PHP.Core.IExTypeInfo.TypeCodes"/> contains only object and <see cref="P:PHP.Core.IExTypeInfo.Types"/> 
            contains only the given object type. Does not take into account 
            class hierarchy (<see cref="P:PHP.Core.IExTypeInfo.IncludesSubclasses"/>).
            </summary>
        </member>
        <member name="P:PHP.Core.IExTypeInfo.TypeCodes">
            <summary>
            Enumeration of possible types. 
            If one of them is <see cref="F:PHP.Core.PhpTypeCode.Object"/>, 
            then <see cref="P:PHP.Core.IExTypeInfo.Types"/> contains a collection of 
            possible types of the object.
            </summary>
        </member>
        <member name="P:PHP.Core.IExTypeInfo.Types">
            <summary>
            If <see cref="P:PHP.Core.IExTypeInfo.TypeCodes"/> contains <see cref="F:PHP.Core.PhpTypeCode.Object"/>, 
            then this enumerates all the possible types of the object reference.
            </summary>
        </member>
        <member name="P:PHP.Core.IExTypeInfo.IsAnyType">
            <summary>
            If <c>true</c>, then we do not know anything about the type for sure and 
            <see cref="P:PHP.Core.IExTypeInfo.TypeCodes"/> and <see cref="P:PHP.Core.IExTypeInfo.Types"/> contain undefined data.
            </summary>
        </member>
        <member name="P:PHP.Core.IExTypeInfo.IsTypeHint">
            <summary>
            If <c>true</c>, then we don't know anything about this type, 
            like if <see cref="P:PHP.Core.IExTypeInfo.IsAnyType"/> was <c>true</c>,
            but <see cref="P:PHP.Core.IExTypeInfo.TypeCodes"/> and <see cref="P:PHP.Core.IExTypeInfo.Types"/> contain type hints.
            </summary>
            <remarks>Value of this property really makes sense once <see cref="P:PHP.Core.IExTypeInfo.IsAnyType"/> is <c>true</c>, 
            otherwise value of <see cref="P:PHP.Core.IExTypeInfo.IsTypeHint"/> should always be <c>false</c>.</remarks>
        </member>
        <member name="P:PHP.Core.IExTypeInfo.IncludesSubclasses">
            <summary>
            If <c>true</c>, then for all the <see cref="T:PHP.Core.AST.TypeRef"/> returned by <see cref="P:PHP.Core.IExTypeInfo.Types"/> we 
            have to consider all their subclasses too.
            </summary>
            <remarks>
            Value of this only makes sense when <see cref="P:PHP.Core.IExTypeInfo.TypeCodes"/> contain <see cref="F:PHP.Core.PhpTypeCode.Object"/>.
            </remarks>
        </member>
        <member name="M:PHP.Core.Evaluation.Literalize">
            <summary>
            Converts the expression to a literal if we have a value and the expression is not yet a literal.
            Returns the converted expression.
            Used when the evaluation cannot continue as some other part of the operation is not evaluable.
            </summary>
        </member>
        <member name="T:PHP.Core.Analyzer">
            <summary>
            Analyzes the AST previously built by the Parser. 
            Evaluates node attributes that can't be evaluated from down to up during building AST.
            Fills tables.
            Does some basic optimizations like constant expressions evaluating 
            and unreachable code eliminating.
            Calls compiling of included source files.
            </summary>
        </member>
        <member name="T:PHP.Core.AstVisitor">
            <summary>
            Common superclass for <see cref="T:PHP.Core.Analyzer"/> and <see cref="T:PHP.Core.CodeGenerator"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.Analyze(PHP.Core.Reflection.CompilationSourceUnit)">
            <summary>
            Analyzes the AST of the source unit.
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.BuildAst(System.Int32,System.String)">
            <summary>
            Builds AST from the given source code string.
            Returns <B>null</B> if the AST cannot be built (new declarations appears in the code).
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.BuildAst(System.Int32,System.String,PHP.Core.Parsers.Parser.ReductionsCounter)">
            <summary>
            Builds AST from the given source code string. Does not check for declarations in the source code.
            </summary>
        </member>
        <member name="F:PHP.Core.Analyzer.locationStack">
            <summary>
            Stack of locations.
            </summary>
            <remarks>
            Used to maintain information on the actual position 
            of the analyzer in the AST. It says "what I am analyzing now".
            </remarks>
        </member>
        <member name="F:PHP.Core.Analyzer.typeDeclStack">
            <summary>
            Stack of <see cref="T:PHP.Core.Analyzer.TypeDeclLocation"/> instances.
            </summary>
            <remarks>
            Represents (direct or indirect) nesting of classes declarations.
            </remarks>
        </member>
        <member name="F:PHP.Core.Analyzer.routineDeclStack">
            <summary>
            Routine stack.
            </summary>
            <remarks>
            Represents (direct or indirect) nesting of functions/method declarations.
            </remarks>
        </member>
        <member name="F:PHP.Core.Analyzer.condLevel">
            <summary>
            Level of code conditionality (zero means an unconditional code).
            </summary>
        </member>
        <member name="F:PHP.Core.Analyzer.unreachableCode">
            <summary>
            Is currently analyzed code unreachable? (TODO: too simple analysis, needs to be improved due to introduction of goto's)
            </summary>
        </member>
        <member name="F:PHP.Core.Analyzer.unreachableCodeReported">
            <summary>
            This field serves to ensure, that unreachable code warning is not reported on every 
            statement in unreachable block od statements, but only once
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.IsInsideIncompleteClass">
            <summary>
            Checks whether any of the classes that contains the code is in complete -
            this is used for resolving whether function can be declared (in incomplete class
            it must be declared later at runtime)
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Analyzer.ActParamPassedByRef">
            <summary>
            Whether the argument passing semantics is by-ref.
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.ActParamDeclIsUnknown">
            <summary>
            Whether the argument passing semantics is known for the current actual argument.
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.EnterConditionalCode">
            <summary>
            Notices the analyzer, that conditional code is entered.
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.LeaveConditionalCode">
            <summary>
            Notices the analyzer, that conditional code is leaved.
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.IsThisCodeConditional">
            <summary>
            Says if right now analyzed code is part of conditional block
            </summary>
            <returns>
            <B>true</B> if right now analyzed code is part of conditional block
            </returns>
        </member>
        <member name="M:PHP.Core.Analyzer.IsThisCodeUnreachable">
            <summary>
            Says if the right now analyzed AST node represents part of conditional code
            </summary>
            <returns>
            <B>true</B> if the right now analyzed AST node represents part of conditional code
            </returns>
        </member>
        <member name="M:PHP.Core.Analyzer.EnterUnreachableCode">
            <summary>
            Notices the Analyzer that unreachable code has been entered
            </summary>
            <remarks>
            Unreachable code is code behind <see cref="T:PHP.Core.AST.JumpStmt"/> in the same conditional block 
            but only if it is not declaration in global code.
            Unreachable code is also code in while(false) body and if(false) then statement,
            if(true)... else statement etc.
            </remarks>
        </member>
        <member name="M:PHP.Core.Analyzer.LeaveUnreachableCode">
            <summary>
            Notices the Analyzer that unreachable code has been leaved
            </summary>
            <remarks>
            This method is called only from <see cref="M:PHP.Core.Analyzer.LeaveConditionalCode"/> because unreachable code ends 
            at the end of conditional block and from <see cref="T:PHP.Core.AST.GlobalCode"/>.<c>Analyze</c>.
            because unreachable declarations in global code are valid.
            </remarks>
        </member>
        <member name="F:PHP.Core.Analyzer.constructedTypes">
            <summary>
            Stores all constructed types found in the source codes.
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.AnalyzeConstructedType(PHP.Core.Reflection.DType)">
            <summary>
            Should be called on types which are created during full analysis.
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.EnterFunctionDeclaration(PHP.Core.Reflection.PhpRoutine)">
            <summary>
            Notices the analyzer that function declaration is entered.
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.EnterMethodDeclaration(PHP.Core.Reflection.PhpMethod)">
            <summary>
            Notices the analyzer that method declaration is entered.
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.EnterTypeDecl(PHP.Core.Reflection.PhpType)">
            <summary>
            Notices the analyzer that class declaration is entered.
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.ResolveType(System.Object,PHP.Core.Reflection.PhpType,PHP.Core.Reflection.PhpRoutine,PHP.Core.Text.Span,System.Boolean)">
            <summary>
            Resolves type based on provided <paramref name="typeName"/>.
            </summary>
            <param name="typeName">Either <see cref="T:PHP.Core.GenericQualifiedName"/> or <see cref="T:PHP.Core.PrimitiveTypeName"/> or <c>null</c> reference.</param>
            <param name="referringType"></param>
            <param name="referringRoutine"></param>
            <param name="position"></param>
            <param name="mustResolve"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Analyzer.ResolveCustomAttributeType(PHP.Core.QualifiedName,PHP.Core.AST.Scope,PHP.Core.Text.Span)">
            <summary>
            Gets the type for specified attribute type name.
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.ResolveMethod(PHP.Core.Reflection.DType,PHP.Core.Name,PHP.Core.Text.Span,PHP.Core.Reflection.PhpType,PHP.Core.Reflection.PhpRoutine,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Resolves a method of given <see cref="T:PHP.Core.Reflection.DType"/> by its name.
            </summary>
            <param name="type">The type of routine being resolved.</param>
            <param name="methodName">The name of routine to be resolved.</param>
            <param name="position">Position of method call used for error reporting.</param>
            <param name="referringType">The type where the seached routine is being called. Can be <c>null</c>.</param>
            <param name="referringRoutine">The routine where the searched routine is being called. Can be <c>null</c>.</param>
            <param name="calledStatically">True if the searched routine is called statically - if it uses static method call syntax.
            This affects the __call or __callStatic method lookup.
            It affects also the error reporting, where for instance method calls, the bad visibility error is
            ignored and falls back to return <see cref="T:PHP.Core.Reflection.UnknownMethod"/>.</param>
            <param name="checkVisibilityAtRuntime">Will determine if the routine call must be checked for visibility at runtime.</param>
            <param name="isCallMethod">Will determine if __call or __callStatic magic methods were found instead.</param>
            <returns>The resolved routine. Cannot return <c>null</c>.</returns>
        </member>
        <member name="M:PHP.Core.Analyzer.ResolveConstructor(PHP.Core.Reflection.DType,PHP.Core.Text.Span,PHP.Core.Reflection.PhpType,PHP.Core.Reflection.PhpRoutine,System.Boolean@)">
            <summary>
            Resolves constructor of the specified type within the current context (location).
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.ResolveProperty(PHP.Core.Reflection.DType,PHP.Core.VariableName,PHP.Core.Text.Span,System.Boolean,PHP.Core.Reflection.PhpType,PHP.Core.Reflection.PhpRoutine,System.Boolean@)">
            <summary>
            Resolves static properties.
            </summary>
        </member>
        <member name="P:PHP.Core.Analyzer.SourceUnit">
            <summary>
            Analyzed AST.
            Must be internally modifiable in order to allow partial class declaration to change the sourceUnit during the analysis
            </summary>
        </member>
        <member name="P:PHP.Core.Analyzer.CurrentScope">
            <summary>
            Current scope. Available only during full analysis.
            </summary>
        </member>
        <member name="P:PHP.Core.Analyzer.Context">
            <summary>
            The current compilation context.
            </summary>
        </member>
        <member name="P:PHP.Core.Analyzer.ErrorSink">
            <summary>
            The current error sink.
            </summary>
        </member>
        <member name="P:PHP.Core.Analyzer.LoopNestingLevel">
            <summary>
            Gets level of right now analyzed piece of code nesting in loops
            </summary>
        </member>
        <member name="P:PHP.Core.Analyzer.CurrentVarTable">
            <summary>
            Gets the variables table for the right now analyzed scope.
            </summary>
        </member>
        <member name="P:PHP.Core.Analyzer.CurrentLabels">
            <summary>
            Gets the variables table for the right now analyzed scope.
            </summary>
        </member>
        <member name="T:PHP.Core.Analyzer.ActualParamsLocation">
            <summary>
            Represents location in some actual parameter in function call.
            </summary>
            <remarks>
            It maintains information about formal parameters
            declaration and currently analyzed actual parameter index to answer if the
            actual parameter shall be passed by reference or not.
            </remarks>
        </member>
        <member name="F:PHP.Core.Analyzer.ActualParamsLocation.signature">
            <summary>
            Says which parameter shall be passed by reference.
            </summary>
        </member>
        <member name="F:PHP.Core.Analyzer.ActualParamsLocation.actualParamCount">
            <summary>
            Actual parameters count (needn't equal to the signature's size).
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.ActualParamsLocation.MoveToNextParam">
            <summary>
            Updates information about location.
            </summary>
        </member>
        <member name="M:PHP.Core.Analyzer.ActualParamsLocation.ActParamPassedByRef">
            <summary>
            Says if the just now analyzed actual parameter shall be passed be reference
            </summary>
            <returns>
            <B>true</B> if the just now analyzed actual parameter shall be passed be reference
            </returns>
        </member>
        <member name="T:PHP.Core.Analyzer.SwitchLocation">
            <summary>
            Represents location in switch statement
            </summary>
            <remarks>
            <B>SwitchLoc</B> is used to store information about compile-time known case values
            and used default section. That is used to report some warnings.
            </remarks>
        </member>
        <member name="P:PHP.Core.CompilationParameters.Target">
            <summary>
            Targets. Valid targets from command line are "dll", "console", "web" and "winexe" (in future versions).
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.SourcePaths">
            <summary>
            Full paths to source files to be compiled.
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.SourceDirs">
            <summary>
            Full paths to directories to be recursively searched for files.
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.SkipPaths">
            <summary>
            Full paths to directories or files which should be skipped during compilation.
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.ConfigPaths">
            <summary>
            Paths to configuration files.
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.OutPath">
            <summary>
            Full path to the output file (for applications targets) or directory (for web targets).
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.DocPath">
            <summary>
            Full path to the documentation file that should be generated.
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.SourceRoot">
            <summary>
            Full path to application root directory. All source files paths are relative to this path.
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.StartupFile">
            <summary>
            Full path of the script which contains entry point 
            (only for <see cref="F:PHP.Core.ApplicationCompiler.Targets.Console"/> and <see cref="F:PHP.Core.ApplicationCompiler.Targets.WinApp"/>).
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.Debuggable">
            <summary>
            Whether to generate debugging information (.pdb files).
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.Force32Bit">
            <summary>
            Whether to force saving the resulting assembly with 32BIT+ flag.
            </summary>
            <remarks>This is useful for debuggers or deployment when 64bit execution is not supported.</remarks>
        </member>
        <member name="P:PHP.Core.CompilationParameters.Encoding">
            <summary>
            Encoding for script files.
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.Key">
            <summary>
            A key to sign the assembly with or a <B>null</B> reference.
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.Version">
            <summary>
            Version of the resuting assembly.
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.Icon">
            <summary>
            Win32 icon to include in the resulting assembly.
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.FileExtensions">
            <summary>
            Extensions (e.g. php,inc) of files included in the web application.
            Empty list means all extensions.
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.References">
            <summary>
            Full paths to referenced assemblies.
            </summary>
        </member>
        <member name="P:PHP.Core.CompilationParameters.Resources">
            <summary>
            Full paths to referenced resources.
            </summary>
            <remarks>If you want more control over resources, put <see cref="T:PHP.Core.ResourceFileReference"/> here</remarks>
        </member>
        <member name="P:PHP.Core.CompilationParameters.TreatWarningsAsErrors">
            <summary>
            Whether warnings will reported as errors, so they will cause compilation process to not finish.
            </summary>
        </member>
        <member name="T:PHP.Core.CompilationParameters.ReferenceItem">
            <summary>
            Represents referenced assembly.
            </summary>
        </member>
        <member name="T:PHP.Core.FileReference">
            <summary>General file reference</summary>
        </member>
        <member name="F:PHP.Core.FileReference.path">
            <summary>Contains value of the <see cref="P:PHP.Core.FileReference.Path"/> property</summary>
        </member>
        <member name="M:PHP.Core.FileReference.#ctor(System.String)">
            <summary>
            Creates file reference from arbitraray path <see cref="M:System.IO.Path.GetFullPath(System.String)"/>.
            </summary>
            <param name="arbitraryPath">Arbitrary path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="arbitraryPath"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.ArgumentException">Invalid path. Inner exception specifies details (see <see cref="M:System.IO.Path.GetFullPath(System.String)"/>).</exception>
        </member>
        <member name="M:PHP.Core.FileReference.#ctor(PHP.Core.FullPath)">
            <summary>CTor from <see cref="T:PHP.Core.FullPath"/></summary>
            <param name="fullPath"><see cref="T:PHP.Core.FullPath"/> to reference</param>
        </member>
        <member name="M:PHP.Core.FileReference.#ctor(System.String,PHP.Core.FullPath)">
            <summary>
            Creates file reference from relative path using <see cref="M:System.IO.Path.GetFullPath(System.String)"/>.
            </summary>
            <param name="relativePath">Arbitrary path.</param>
            <param name="root">Root for the path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="relativePath"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.ArgumentException">Invalid path. Inner exception specifies details (see <see cref="M:System.IO.Path.GetFullPath(System.String)"/>).</exception>
        </member>
        <member name="P:PHP.Core.FileReference.Path">
            <summary>Full path of file</summary>
        </member>
        <member name="T:PHP.Core.ResourceFileReference">
            <summary>Points to file that contains resource for assembly</summary>
        </member>
        <member name="M:PHP.Core.ResourceFileReference.#ctor(System.String)">
            <summary>
            Creates resource reference from arbitrary path using <see cref="M:System.IO.Path.GetFullPath(System.String)"/>.
            </summary>
            <param name="arbitraryPath">Arbitrary path.</param>
            <remarks>Created resource is public and has same name is is name of file</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="arbitraryPath"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.ArgumentException">Invalid path. Inner exception specifies details (see <see cref="M:System.IO.Path.GetFullPath(System.String)"/>).</exception>
            <exception cref="T:System.IO.FileNotFoundException">File represented by current path does not exist (or it is directory)</exception>
        </member>
        <member name="M:PHP.Core.ResourceFileReference.#ctor(PHP.Core.FullPath)">
            <summary>CTor from <see cref="T:PHP.Core.FullPath"/></summary>
            <param name="fullPath"><see cref="T:PHP.Core.FullPath"/> to reference</param>
            <remarks>Created resource is public and has same name is is name of file</remarks>
            <exception cref="T:System.IO.FileNotFoundException">File represented by current path does not exist (or it is directory)</exception>
        </member>
        <member name="M:PHP.Core.ResourceFileReference.#ctor(System.String,PHP.Core.FullPath)">
            <summary>
            Creates resource reference path from relative path using <see cref="M:System.IO.Path.GetFullPath(System.String)"/>.
            </summary>
            <param name="relativePath">Arbitrary path.</param>
            <param name="root">Root for the path.</param>
            <remarks>Created resource is public and has same name is is name of file</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="relativePath"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.ArgumentException">Invalid path. Inner exception specifies details (see <see cref="M:System.IO.Path.GetFullPath(System.String)"/>).</exception>
            <exception cref="T:System.IO.FileNotFoundException">File represented by current path does not exist (or it is directory)</exception>
        </member>
        <member name="M:PHP.Core.ResourceFileReference.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates resource reference from arbitrary path using <see cref="M:System.IO.Path.GetFullPath(System.String)"/>.
            With given name and visibility.
            </summary>
            <param name="arbitraryPath">Arbitrary path.</param>
            <param name="isPublic">Indicates if resource is public</param>
            <param name="name">Name of resource</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="arbitraryPath"/> is a <B>null</B> reference. -or- <paramref name="name"/> is null</exception>
            <exception cref="T:System.ArgumentException">Invalid path. Inner exception specifies details (see <see cref="M:System.IO.Path.GetFullPath(System.String)"/>).</exception>
            <exception cref="T:System.IO.FileNotFoundException">File represented by current path does not exist (or it is directory)</exception>
        </member>
        <member name="M:PHP.Core.ResourceFileReference.#ctor(System.String,PHP.Core.FullPath,System.String,System.Boolean)">
            <summary>
            Creates resource reference path from relative path using <see cref="M:System.IO.Path.GetFullPath(System.String)"/>.
            </summary>
            <param name="relativePath">Arbitrary path.</param>
            <param name="root">Root for the path.</param>
            <param name="isPublic">Indicates if resource is public</param>
            <param name="name">Name of resource</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="relativePath"/> is a <B>null</B> reference. -or- <paramref name="name"/> is null</exception>
            <exception cref="T:System.ArgumentException">Invalid path. Inner exception specifies details (see <see cref="M:System.IO.Path.GetFullPath(System.String)"/>).</exception>
            <exception cref="T:System.IO.FileNotFoundException">File represented by current path does not exist (or it is directory)</exception>
        </member>
        <member name="M:PHP.Core.ResourceFileReference.#ctor(PHP.Core.FullPath,System.String,System.Boolean)">
            <summary>CTor from <see cref="T:PHP.Core.FullPath"/> and attributes</summary>
            <param name="fullPath"><see cref="T:PHP.Core.FullPath"/> to reference</param>
            <exception cref="T:System.IO.FileNotFoundException">File represented by current path does not exist (or it is directory)</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null</exception>
            <param name="isPublic">Indicates if resource is public</param>
            <param name="name">Name of resource</param>
        </member>
        <member name="F:PHP.Core.ResourceFileReference.name">
            <summary>Contains value of the <see cref="P:PHP.Core.ResourceFileReference.Name"/> property</summary>
        </member>
        <member name="F:PHP.Core.ResourceFileReference.isPublic">
            <summary>Contains value of the <see cref="P:PHP.Core.ResourceFileReference.IsPublic"/> property</summary>
        </member>
        <member name="M:PHP.Core.ResourceFileReference.FromFiles(System.Collections.Generic.IEnumerable{PHP.Core.FileReference})">
            <summary>Converts list of files and directories to list of resource files</summary>
            <param name="files">Files and directories. Directories are parsed recursivelly. Files are added immediatelly. If any item is <see cref="T:PHP.Core.ResourceFileReference"/> it is preserved with no changed.</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
            <seealso cref="M:PHP.Core.FileSystemUtils.GetAllFiles(System.Collections.Generic.IEnumerable{PHP.Core.FullPath})"/>
        </member>
        <member name="P:PHP.Core.ResourceFileReference.Name">
            <summary>Gets name of the resource</summary>
        </member>
        <member name="P:PHP.Core.ResourceFileReference.IsPublic">
            <summary>Gets value indicating is this resource is public</summary>
        </member>
        <member name="M:PHP.Core.CommandLineParser.GetSupportedOptions">
            <summary>
            Displays a help.
            </summary>
        </member>
        <member name="F:PHP.Core.CommandLineParser.currentOption">
            <summary>
            Currently analyzed option.
            </summary>
        </member>
        <member name="F:PHP.Core.CommandLineParser.currentValue">
            <summary>
            Currently analyzed option's value.
            </summary>
        </member>
        <member name="M:PHP.Core.CommandLineParser.Parse(System.Collections.Generic.List{System.String})">
            <summary>
            Processes command line arguments.
            </summary>
            <param name="args">The command line arguments. The list of arguments may be extended (see @ argument).</param>
            <returns>Whether all arguments were processed.</returns>
        </member>
        <member name="M:PHP.Core.CommandLineParser.ProcessPaths(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Checks whether there are files to be compiled and modifies their paths to make them absolute.
            Doesn't check existance of that files since this is done be compiler.
            </summary>
            <exception cref="T:System.ApplicationException">Error.</exception>
        </member>
        <member name="M:PHP.Core.CommandLineParser.GetDefaultOutputFileExtension">
            <summary>
            Gets a default output file extension depending on value of <see cref="P:PHP.Core.CompilationParameters.Target"/>.
            </summary>
            <returns>The extension, e.g. ".exe".</returns>
        </member>
        <member name="M:PHP.Core.CommandLineParser.GetDefaultOutputFile">
            <summary>
            Gets a default output file name depending on the values of <see cref="P:PHP.Core.CompilationParameters.Target"/> and 
            <see cref="P:PHP.Core.CompilationParameters.SourcePaths"/>.
            </summary>
            <returns>The file name with extension (e.g. File.exe).</returns>
        </member>
        <member name="M:PHP.Core.CommandLineParser.ProcessOutOption(System.String)">
            <summary>
            Processes "out" option and sets <see cref="P:PHP.Core.CompilationParameters.OutPath"/> accordingly.
            </summary>
            <param name="value">The option's value</param>
        </member>
        <member name="M:PHP.Core.CommandLineParser.ProcessEntryPointOption(System.String)">
            <summary>
            Processes "entrypoint" option and sets <see cref="P:PHP.Core.CompilationParameters.StartupFile"/> accordingly.
            </summary>
            <param name="value">The option's value</param>
        </member>
        <member name="M:PHP.Core.CommandLineParser.ProcessFileExtensions">
            <summary>
            Checks whether file extensions are valid.
            </summary>
        </member>
        <member name="P:PHP.Core.CommandLineParser.Verbose">
            <summary>
            Level of verbosity.
            </summary>
        </member>
        <member name="T:PHP.Core.ApplicationCompiler">
            <summary>
            PHP application compiler.
            </summary>
        </member>
        <member name="F:PHP.Core.ApplicationCompiler.AppConfigFile">
            <summary>
            app.config file name.
            </summary>
        </member>
        <member name="F:PHP.Core.ApplicationCompiler.WebConfigFile">
            <summary>
            web.config file name.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationCompiler.Compile(PHP.Core.ApplicationContext,PHP.Core.CompilerConfiguration,PHP.Core.ErrorSink,PHP.Core.CompilationParameters)">
            <summary>
            Compiles an application.
            </summary>
            <param name="applicationContext">Application context.</param>
            <param name="config">Compiler configuration record.</param>
            <param name="errorSink">Error sink.</param>
            <param name="ps">Parameters.</param>
            <exception cref="T:PHP.Core.InvalidSourceException">Cannot read a source file/directory. See the inner exception for details.</exception>
        </member>
        <member name="M:PHP.Core.ApplicationCompiler.CopyApplicationConfigFile(PHP.Core.FullPath,PHP.Core.FullPath)">
            <summary>
            Copies App.config files to the target bin directory (desktop apps only).
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationCompiler.EnumerateScriptsInDirectory(System.Collections.Generic.IEnumerable{PHP.Core.FullPath},System.Collections.Generic.ICollection{System.String},PHP.Core.CompilationContext)">
            <summary>
            Compiles a specified collection of scripts within the given compilation context.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationCompiler.EnumerateScriptsRecursive(PHP.Core.FullPath,System.Collections.Generic.ICollection{System.String},PHP.Core.CompilationContext)">
            <summary>
            Recursively searches a directory for all files matching the web script file pattern.
            </summary>
            <exception cref="T:PHP.Core.InvalidSourceException">Error reading the directory.</exception>
        </member>
        <member name="M:PHP.Core.ApplicationCompiler.LoadConfiguration(PHP.Core.ApplicationContext,System.Collections.Generic.List{PHP.Core.FullPath},System.IO.TextWriter)">
            <summary>
            Loads configuration from Machine.config, phpc.exe.config, from files specified by command line arguments,
            and from command line arguments themselves.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">An error occured while loading the configuration.</exception>
        </member>
        <member name="P:PHP.Core.ApplicationCompiler.Domain">
            <summary>
            Current AppDomain. The AppDomain in which the ApplicationCompiler was created.
            </summary>
        </member>
        <member name="T:PHP.Core.ApplicationCompiler.Targets">
            <summary>
            Compilation target.
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.NodeCompilers">
            <summary>
            Container for <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/> implementations.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.CreateNodeExtensionTypes">
            <summary>
            Creates map of <see cref="T:PHP.Core.AST.AstNode"/> types corresponding to <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/> types.
            </summary>
            <returns>Dictionary of <see cref="T:PHP.Core.AST.AstNode"/> types each mapped to <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/> type.</returns>
        </member>
        <member name="T:PHP.Core.Compiler.AST.IExpressionCompiler">
            <summary>
            Base compiler <see cref="T:PHP.Core.AST.Expression"/> extension interface .
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.INodeCompiler">
            <summary>
            Base compiler <see cref="T:PHP.Core.AST.AstNode"/> extension interface.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IExpressionCompiler.HasValue(PHP.Core.AST.Expression)">
            <summary>
            Gets value indicating whether the expression has compile-time value. (literals only).
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IExpressionCompiler.GetValue(PHP.Core.AST.Expression)">
            <summary>
            Gets compile-time value of the expression. (literals only).
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IExpressionCompiler.GetValueTypeCode(PHP.Core.AST.Expression)">
            <summary>
            Gets compile-time value type code of the expression. Returns <see cref="F:PHP.Core.PhpTypeCode.Unknown"/> if the value if unknown.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IExpressionCompiler.IsCustomAttributeArgumentValue(PHP.Core.AST.Expression)">
            <summary>
            Whether the expression can be used as a value of a custom attribute argument
            (a constant expression, CLR array, CLR type object).
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IExpressionCompiler.EvaluatePriorAnalysis(PHP.Core.AST.Expression,PHP.Core.Reflection.CompilationSourceUnit)">
            <summary>
            Evaluates value of given <paramref name="node"/> before actual analysis, with no additional information provided.
            </summary>
            <param name="node"><see cref="T:PHP.Core.AST.Expression"/> instance, associated with this <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/>.</param>
            <param name="sourceUnit">Containing <see cref="T:PHP.Core.SourceUnit"/>.</param>
            <returns><see cref="T:PHP.Core.Evaluation"/> with the result of the operation.</returns>
            <remarks>This method allows compiler to resolve static inclusions before analysis,
            when application constants or literals are used within the expression.</remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IExpressionCompiler.Analyze(PHP.Core.AST.Expression,PHP.Core.Analyzer,PHP.Core.Compiler.AST.ExInfoFromParent)">
            <summary>
            Performs analysis of given expression, before actual emit.
            </summary>
            <param name="node"><see cref="T:PHP.Core.AST.Expression"/> instance, associated with this <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/>.</param>
            <param name="analyzer">Analyzer object.</param>
            <param name="info">Access information from parent node.</param>
            <returns><see cref="T:PHP.Core.Evaluation"/> containing this or new expression, as a result of this operation.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IExpressionCompiler.Emit(PHP.Core.AST.Expression,PHP.Core.CodeGenerator)">
            <summary>
            Emits given <paramref name="node"/> into IL.
            </summary>
            <param name="node"><see cref="T:PHP.Core.AST.Expression"/> instance, associated with this <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/>.</param>
            <param name="codeGenerator"><see cref="T:PHP.Core.CodeGenerator"/> object.</param>
            <returns>Whether this operation left a value on stack, the return value contains its type code. Othervise it returns <see cref="F:PHP.Core.PhpTypeCode.Void"/>.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IExpressionCompiler.Evaluate(PHP.Core.AST.Expression,System.Object)">
            <summary>
            Helper function to compute an unary operation.
            </summary>
            <param name="node"><see cref="T:PHP.Core.AST.Expression"/> instance, associated with this <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/>.</param>
            <param name="value">Operand of the operation.</param>
            <returns>Computed value.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IExpressionCompiler.Evaluate(PHP.Core.AST.Expression,System.Object,System.Object)">
            <summary>
            Helper function to compute a binary operation.
            </summary>
            <param name="node"><see cref="T:PHP.Core.AST.Expression"/> instance, associated with this <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/></param>
            <param name="leftValue">Left operand.</param>
            <param name="rightValue">Right operand.</param>
            <returns>Computed value.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IExpressionCompiler.IsDeeplyCopied(PHP.Core.AST.Expression,PHP.Core.CopyReason,System.Int32)">
            <summary>
            Whether compiler should emit deep variable copying, when passing expression as an assignment, a function parameter or as a function return value.
            </summary>
            <param name="node"><see cref="T:PHP.Core.AST.Expression"/> instance, associated with this <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/>.</param>
            <param name="reason">The reason of copying.</param>
            <param name="nestingLevel"></param>
            <returns>Whether compiler should perform variable copying.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IExpressionCompiler.StoreOnAssignment(PHP.Core.AST.Expression)">
            <summary>
            Whether an expression represented by this node should be stored to a temporary local if assigned.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.IExpressionCompiler.Access">
            <summary>
            Gets the access type of the expression.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.VarLikeConstructUseCompiler`1.DetermineAccessType(`0,PHP.Core.Compiler.AST.AccessType)">
            <summary>
            Determine the AccessType based in <c>isMemberOf</c> type and <c>AccessType</c> of parent.
            </summary>
            <param name="node">Instance.</param>
            <param name="parentInfoAccess"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ArrayExCompiler.IsDeeplyCopied(PHP.Core.AST.ArrayEx,PHP.Core.CopyReason,System.Int32)">
            <returns>It suffice to make a copy only if assignment nesting level is 1 or above (we are starting from 0).</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ItemCompiler.EmitIndex(PHP.Core.AST.Item,PHP.Core.CodeGenerator)">
            <summary>
            Emit IL instructions that load the value of array index at the stack.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ValueItemCompiler.EmitValue(PHP.Core.AST.Item,PHP.Core.CodeGenerator)">
            <summary>
            Emit IL instructions that load the value of array item at the stack and make a copy 
            of it if necessary.
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.NodeCompilers.RefItemCompiler">
            <summary>
            Reference to a variable containing the value of an array item defined by <c>array</c> constructor.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.RefItemCompiler.EmitValue(PHP.Core.AST.Item,PHP.Core.CodeGenerator)">
            <summary>
            Emit IL instructions that load the value of array item at the stack and make a copy 
            of it if necessary.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator"></param>
            <returns></returns>
            <remarks>This node represents the item x=&gt;&amp;y in PHP notation. See <see cref="T:PHP.Core.AST.ArrayEx"/>
             for more details.</remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.AssignExCompiler.StoreOnAssignment(PHP.Core.AST.AssignEx)">
            <summary>
            Whether an expression represented by this node should be stored to a temporary local if assigned.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ValueAssignExCompiler.IsDeeplyCopied(PHP.Core.AST.AssignEx,PHP.Core.CopyReason,System.Int32)">
            <summary>
      Decides whether an expression represented by this node should be copied if a certain operation is performed.
    </summary><param name="reason">Reason of copying (a kind of the operation performed).</param><param name="nestingLevel">A level of nesting. Used for optimizing copies on assignment during nested assignments (a = b = c = ...)</param><returns>Whether to make a deep copy of expression result when the expression is on rhs of operator =.</returns>
            <param name="node">Instance.</param>
            <returns>
            The copy-on-assignment value of the right hand side.
            </returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ValueAssignExCompiler.Emit(PHP.Core.AST.AssignEx,PHP.Core.CodeGenerator)">
             <summary>
             Emits assignment.
             </summary>
             <remarks>
             Pattern: a op= b
            
             PREPARE a      (prepared)
             LOAD a         (prepared,a)
             LOAD b         (prepared,a,b)
             OP             (prepared,result)
             *DUP           (prepared,result,result)
             *STORE tmp     (prepared,result)           must be this stack here!
             STORE a        ()
             *LOAD tmp      (result)
            
             * only if the resulting value needs to be propagated to the right
            
             Note: There is a possible improvement: some store operations (SetVariable) may return the value set
             which would replace DUP and second temp op.
             </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ValueAssignExCompiler.EmitSourceValRead(PHP.Core.AST.ValueAssignEx,PHP.Core.CodeGenerator)">
            <summary>
            Emits the RHS of assignment.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">A code generator.</param>
            <returns><see cref="T:PHP.Core.PhpTypeCode"/> of the RHS.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.BinaryExCompiler.IsDeeplyCopied(PHP.Core.AST.BinaryEx,PHP.Core.CopyReason,System.Int32)">
            <summary>
            Whether the result of binary expression should be deeply copied.
            </summary>
            <summary>
      Decides whether an expression represented by this node should be copied if a certain operation is performed.
    </summary><param name="reason">Reason of copying (a kind of the operation performed).</param><param name="nestingLevel">A level of nesting. Used for optimizing copies on assignment during nested assignments (a = b = c = ...)</param><returns>Whether to make a deep copy of expression result when the expression is on rhs of operator =.</returns>
            <param name="node">Instance.</param>
            <returns>All operators returns immutable values. Hence, returns <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.BinaryExCompiler.Emit(PHP.Core.AST.BinaryEx,PHP.Core.CodeGenerator)">
            <remarks>
            Nothing is expected at the evaluation stack. If AST node is read by other node,
            the operation result is left at the stack, otherwise it is poped from the stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.BinaryExCompiler.EmitBitOperation(PHP.Core.AST.BinaryEx,PHP.Core.CodeGenerator,PHP.Core.Operators.BitOp)">
            <summary>
            Emits bit operation <see cref="P:PHP.Core.AST.BinaryEx.LeftExpr"/> OP <see cref="P:PHP.Core.AST.BinaryEx.RightExpr"/>.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">A code generator.</param>
            <param name="op">The operation.</param>
            <returns>A type code of the result.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.BinaryExCompiler.EmitBinaryBooleanOperation(PHP.Core.AST.BinaryEx,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits binary boolean operation (AND or OR).
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">A code generator.</param>
            <param name="isAnd">Whether to emit AND.</param>
            <returns>A type code of the result.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.BinaryExCompiler.EmitComparison(PHP.Core.AST.BinaryEx,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits call to a default comparator method.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">A code generator.</param>
            <param name="equality">Whether to emit equality comparison (or generic comparison otherwise).</param>
            <returns>A type code of the result.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.BinaryExCompiler.EmitStrictEquality(PHP.Core.AST.BinaryEx,PHP.Core.CodeGenerator)">
            <summary>
            Emits strict equality operation.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">A code generator.</param>
            <returns>A type code of the result (boolean).</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.BinaryExCompiler.EmitEmptyArrayStrictEquality(PHP.Core.CodeGenerator,PHP.Core.AST.Expression)">
            <summary>
            Emits strict equality to empty PHP array.
            </summary>
            <param name="codeGenerator">A code generator.</param>
            <param name="expr">Expression to be compared against.</param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.BinaryExCompiler.IsEmptyArrayEx(PHP.Core.AST.Expression)">
            <summary>
            Determines whether given <paramref name="expr"/> represents an empty array (<c>array()</c> or <c>[]</c>).
            </summary>
            <param name="expr">Expression to be checked.</param>
            <returns>True if <paramref name="expr"/> is an empty array expression.</returns>
        </member>
        <member name="T:PHP.Core.Compiler.AST.IIncludingExCompiler">
            <summary>
            IncludingExCompiler members to be accessed by compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IncludingExCompiler.EmitStaticInclusion(PHP.Core.AST.IncludingEx,PHP.Core.CodeGenerator)">
            <summary>
            Emits a static inclusion.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IncludingExCompiler.EmitDynamicInclusion(PHP.Core.AST.IncludingEx,PHP.Core.CodeGenerator)">
            <summary>
            Emits dynamic inclusion.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.NodeCompilers.IncludingExCompiler.Inclusion">
            <summary>
            Static inclusion info or <B>null</B> reference if target cannot be determined statically.
            Set during inclusion graph building, before the analysis takes place.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.NodeCompilers.IncludingExCompiler.Characteristic">
            <summary>
            Set during inclusion graph building, before the analysis takes place.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.EmptyExCompiler.Emit(PHP.Core.AST.EmptyEx,PHP.Core.CodeGenerator)">
            <summary>
      Emits AST node respective IL code.
    </summary><param name="codeGenerator">A code generator which generates code of this node.</param><returns>A type code of item which has been placed on the top of the evaluation stack by this method.</returns>
            <param name="node">Instance.</param>
            <remarks>
            Nothing is expected on the evaluation stack. The result value is left on the
            evaluation stack.
            </remarks>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.AssertExCompiler._inlinedCode">
            <summary>
            Contains the code string literal that has been inlined.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.CallSignatureCompiler.AllParamsHaveValue(PHP.Core.AST.CallSignature)">
            <summary>
            Gets true if all the Parameters (after the analysis) have the value and could be evaluated during the compilation time.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.CallSignatureCompiler.BuildPhpArray(PHP.Core.AST.CallSignature)">
            <summary>
            Builds <see cref="T:PHP.Core.AST.ArrayEx"/> with call signature parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.CallSignatureCompiler.EmitLoadOnPhpStack(PHP.Core.AST.CallSignature,PHP.Core.CodeGenerator)">
            <summary>
            Emits IL instructions that load actual parameters and optionally add a new stack frame to
            current <see cref="F:PHP.Core.ScriptContext.Stack"/>.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">Code generator.</param>
            <remarks>
            Nothing is expected on the evaluation stack. Nothing is left on the evaluation stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.CallSignatureCompiler.EmitLoadOnEvalStack(PHP.Core.AST.CallSignature,PHP.Core.CodeGenerator,PHP.Core.Reflection.PhpRoutine)">
            <summary>
            Emits IL instructions that load actual parameters on the evaluation stack.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">Code generator.</param>
            <param name="routine">PHP method being called.</param>
            <remarks>
            <para>
            The function has mandatory and optional formal arguments.
            Mandatory arguments are those formal arguments which are not preceded by 
            any formal argument with default value. The others are optional.
            If a formal argument without default value is declared beyond the last mandatory argument
            it is treated as optional one by the caller. The callee checks this and throws warning.
            </para>
            Missing arguments handling:
            <list type="bullet">
              <item>missing mandatory argument - WARNING; LOAD(null);</item>
              <item>missing optional argument - LOAD(Arg.Default);</item>
              <item>superfluous arguments are ignored</item>
            </list>
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.CallSignatureCompiler.EmitLibraryLoadArgument(PHP.Core.AST.CallSignature,PHP.Core.Emit.ILEmitter,System.Int32,System.Object,System.Reflection.ParameterInfo)">
            <summary>
            Emits parameter loading.
            </summary>
            <param name="node">Instance.</param>
            <param name="il">Emitter.</param>
            <param name="index">The index of the parameter starting from 0.</param>
            <param name="codeGenerator">Code generator.</param>
            <param name="param">Target <see cref="T:System.Reflection.ParameterInfo"/>.</param>
            <returns>The type of the actual argument or its value if it is a leteral.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.CallSignatureCompiler.EmitLibraryLoadOptArguments(PHP.Core.AST.CallSignature,PHP.Core.Emit.OverloadsBuilder,System.Int32,System.Reflection.ParameterInfo,PHP.Core.Emit.IPlace)">
            <summary>
            Emits load of optional parameters array on the evaluation stack.
            </summary>
            <param name="node">Instance.</param>
            <param name="builder">An overloads builder.</param>
            <param name="start">An index of the first optional parameter to be loaded into the array (indices start from 0).</param>
            <param name="param">
            A <see cref="T:System.Reflection.ParameterInfo"/> of the formal parameter of the target method where the array will be passed.
            This information influences conversions all optional parameters.
            </param>
            <param name="optArgCount">Optional argument count (unused).</param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ConcatExCompiler.AnalyzeChunks(PHP.Core.Analyzer,System.Collections.Generic.IList{PHP.Core.AST.Expression})">
            <summary>
            Analyze the list of expressions and separate them into a list of chunks. (HasValue and !HasValue together)
            </summary>
            <returns>List of chunks - expressions chunked by that, if they are evaluable during compilation. Cannot return null.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ConcatExCompiler.ChunkExpressions(System.Collections.Generic.IEnumerable{PHP.Core.Compiler.AST.NodeCompilers.ConcatExCompiler.ConcatChunk})">
            <summary>
            Expressions from ConcatChunks, Values are transformed into corresponding literals.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ConcatExCompiler.EmitConcat(PHP.Core.CodeGenerator,PHP.Core.AST.Expression,PHP.Core.AST.Expression)">
            <summary>
            Emits concatenation of a pair of expressions.
            </summary>
            <param name="codeGenerator">A code generator.</param>
            <param name="x">The first expression.</param>
            <param name="y">The second expression.</param>
            <returns>The resulting type code.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ConcatExCompiler.EmitConcatExpressionLoad(PHP.Core.CodeGenerator,PHP.Core.AST.Expression)">
            <summary>
            Emits load of an argument of a concatenation.
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.NodeCompilers.ConcatExCompiler.ConcatChunk">
            <summary>
            Piece of analyzed ConcatEx expressions list.
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.ConcatExCompiler.ConcatChunk.Value">
            <summary>
            If HasValue is true, the Value of the chunk.
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.ConcatExCompiler.ConcatChunk.Position">
            <summary>
            Position of the <see cref="F:PHP.Core.Compiler.AST.NodeCompilers.ConcatExCompiler.ConcatChunk.Value"/> within the source code.
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.ConcatExCompiler.ConcatChunk.Expressions">
            <summary>
            If HasValue is false, list of expression to be emitted.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ConstantUseCompiler`1.IsDeeplyCopied(`0,PHP.Core.CopyReason,System.Int32)">
            <summary>
            Determines behavior on assignment.
            </summary>
            <returns>Always <B>false</B>, since constants contain immutable objects only.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.GlobalConstUseCompiler.Emit(PHP.Core.AST.GlobalConstUse,PHP.Core.CodeGenerator)">
            <summary>
      Emits AST node respective IL code.
    </summary><param name="codeGenerator">A code generator which generates code of this node.</param><returns>A type code of item which has been placed on the top of the evaluation stack by this method.</returns>
            <param name="node">Instance.</param>
            <remarks>
            Emits IL instructions to load the value of the constant. If the value is known at compile 
            time (constant is system), its value is loaded on the stack. Otherwise the value is 
            obtained at runtime by calling <see cref="M:PHP.Core.ScriptContext.GetConstantValue(System.String,System.String)"/>.
            </remarks>
        </member>
        <member name="T:PHP.Core.Compiler.AST.NodeCompilers.ClassConstUseCompiler`1">
            <summary>
            Class constant use.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.PseudoConstUseCompiler.IsEvaluable(PHP.Core.AST.PseudoConstUse.Types)">
            <summary>
            Get the value indicating if the given constant is evaluable in compile time.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.PseudoConstUseCompiler.Evaluate(PHP.Core.AST.PseudoConstUse,PHP.Core.Analyzer)">
            <summary>
            Gets value of __LINE__, __FUNCTION__, __METHOD__, __CLASS__, __NAMESPACE__ used in source code.
            Doesn't get value for __FILE__ and __DIR__. This value is combined from relative path and the current source root
            at run-time.
            </summary>
            <remarks>
            Analyzer maintains during AST walk information about its position in AST
            and that information uses (among others) to provide values of the pseudo constants.
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.PseudoConstUseCompiler.EmitToAbsoluteSourcePath(PHP.Core.CodeGenerator)">
            <summary>
            Emit
            CALL Operators.ToAbsoluteSourcePath(relative source path level, remaining relative source path);
            </summary>
            <param name="codeGenerator">Code generator.</param>
            <returns>Type code of value that is on the top of the evaluation stack as the result of call of emitted code.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.CustomAttributeCompiler.AnalyzeMembers(PHP.Core.Analyzer,PHP.Core.AST.Scope)">
            <summary>
            Analyzes the attribute type. Parameters are left to the full analysis as we want to resolve global and class 
            constants used there. Resolving attribute type during member analysis enables to them to influence the 
            member and full analysis of their respective targets.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.CustomAttributeCompiler.Analyze(PHP.Core.Analyzer,PHP.Core.Compiler.AST.IPhpCustomAttributeProvider,System.Boolean@)">
            <summary>
            Analyses attribute parameters, resolves the constructor, the fields, and the properties 
            assigned in the parameters.
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.NodeCompilers.VariableUseCompiler`1">
            <summary>
            Base class for variable uses.
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.assignmentCallback">
            <summary>
            Points to a method that emits code to be placed after the new instance field value has
            been loaded onto the evaluation stack.
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.TabledLocalAddressStorage">
            <summary>
            A holder of a temporary local variable which is used to obtain address of a variable
            stored in runtime variables table when methods from <see cref="T:PHP.Core.Operators"/>
            expecting a ref argument are invoked.
            </summary>
            <remarks>After the operator is invoked, the result should be stored back to table and this
            holder may be released. This holder does not take place in optimalized user functions and methods of
            user classes as the address of a variable shoul be obtained directly (variables are defined as
            locals).</remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.LoadTabledVariableAddress(`0,PHP.Core.CodeGenerator)">
            <summary>
            Loads the value represented by this object from the runtime variables table,
            stores it to a local variable and loads the address of this local.
            </summary>
            <param name="node">Instance.</param>
            <remarks>This method is used only in non-optimized user functions and global code.
            Specified local variable is obtained from current <see cref="T:PHP.Core.Emit.ILEmitter"/> by
            <see cref="M:PHP.Core.Emit.ILEmitter.GetTemporaryLocal(System.Type,System.Boolean)"/> and stored to <see cref="F:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.TabledLocalAddressStorage"/>
            for later use. Once the local become useless, <see cref="M:PHP.Core.Emit.ILEmitter.ReturnTemporaryLocal(System.Reflection.Emit.LocalBuilder)"/>
            should be called.
            </remarks>
            <param name="codeGenerator">Currently used <see cref="T:PHP.Core.CodeGenerator"/>.</param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.StoreTabledVariableBack(`0,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Stores the value represented by <see cref="F:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.TabledLocalAddressStorage"/> to the runtime variables table and 
            returns the <see cref="F:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.TabledLocalAddressStorage"/> back to <c>temporaryLocals</c>.
            Duplicates the value if requested.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">Currently used <see cref="T:PHP.Core.CodeGenerator"/>.</param>
            <param name="duplicate_value">If <c>true</c>, the value of specified local is left on the evaluation stack.
            </param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.EmitReadField(`0,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits IL instructions that read the value of an instance field.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">The current <see cref="T:PHP.Core.CodeGenerator"/>.</param>
            <param name="wantRef">If <B>false</B> the field value should be left on the evaluation stack,
            if <B>true</B> the <see cref="T:PHP.Core.PhpReference"/> should be left on the evaluation stack.</param>
            <returns>
            Nothing is expected on the evaluation stack. A <see cref="T:PHP.Core.PhpReference"/> (if <paramref name="wantRef"/>
            is <B>true</B>) or the field value itself (if <paramref name="wantRef"/> is <B>false</B>) is left on the
            evaluation stack.
            </returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.EmitReadFieldOfThis(`0,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits IL instructions that read the value of a field of $this instance.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">The current <see cref="T:PHP.Core.CodeGenerator"/>.</param>
            <param name="wantRef">If <B>false</B> the field value should be left on the evaluation stack,
            if <B>true</B> the <see cref="T:PHP.Core.PhpReference"/> should be left on the evaluation stack.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.EmitReadFieldOfThisInInstanceMethod(`0,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits IL instructions that read the value of a field of $this instance when we know that we
            are in an instance method and hence there's a chance of actually resolving the field being read.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">The current <see cref="T:PHP.Core.CodeGenerator"/>.</param>
            <param name="wantRef">If <B>false</B> the field value should be left on the evaluation stack,
            if <B>true</B> the <see cref="T:PHP.Core.PhpReference"/> should be left on the evaluation stack.</param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.EmitThisUsedOutOfObjectThrow(PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits error reporting call when "this" variable is used out of object context.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.EmitGetFieldOfPlace(`0,PHP.Core.Emit.IPlace,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits <see cref="M:PHP.Core.Operators.GetObjectProperty(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean)"/> or <see cref="M:PHP.Core.Operators.GetObjectPropertyRef(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc)"/>
            on a specified argument variable.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.EmitWriteField(`0,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits IL instructions that write a value to an instance field.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">The current <see cref="T:PHP.Core.CodeGenerator"/>.</param>
            <param name="writeRef">If <B>true</B> the value being written is a <see cref="T:PHP.Core.PhpReference"/>
            instance, if <B>false</B> it is an <see cref="T:System.Object"/> instance.</param>
            <returns>Delegate to a method that emits code to be executed when the actual value has been
            loaded on the evaluation stack.</returns>
            <remarks>
            If the field could be resolved at compile time (because <see cref="P:PHP.Core.AST.VarLikeConstructUse.IsMemberOf"/> is <c>$this</c> or a
            variable is proved to be of a certain type by type analysis), direct field writing code is emitted.
            Otherwise, <see cref="M:PHP.Core.Operators.SetProperty(System.Object,System.Object@,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/> or <see cref="M:PHP.Core.Operators.SetObjectProperty(PHP.Core.Reflection.DObject,System.String,System.Object,PHP.Core.Reflection.DTypeDesc)"/> call is emitted.
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.EmitWriteFieldOfThis(`0,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits IL instructions that prepare a field of $this for writing.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.SimpleVarUseCompiler`1.EmitWriteFieldOfThisInInstanceMethod(`0,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits IL instructions that write the value of a field of $this instance when we know that we
            are in an instance method and hence there's a chance of actually resolving the field being written.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">The current <see cref="T:PHP.Core.CodeGenerator"/>.</param>
            <param name="writeRef">If <B>true</B> the value being written is a <see cref="T:PHP.Core.PhpReference"/>; if
            <B>false</B> the value being written is an <see cref="T:System.Object"/>.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectVarUseCompiler.EmitUnsetField(PHP.Core.AST.DirectVarUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits IL instructions that unset an instance field.
            </summary>
            <remarks>
            Nothing is expected on the evaluation stack. Nothing is left on the evaluation stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectVarUseCompiler.EmitNodeRead(PHP.Core.AST.DirectVarUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits code for loading the variable's value onto the evaluation stack. Supports operators chaining.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">Code generator.</param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectVarUseCompiler.EmitNodeReadRef(PHP.Core.AST.DirectVarUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits code for loading the variable's value as a <see cref="T:PHP.Core.PhpReference"/>. This function is called only
            by first AST node in chain.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator"></param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectVarUseCompiler.EmitNodeReadUnknown(PHP.Core.AST.DirectVarUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits code for loading the variable's value as either <see cref="T:PHP.Core.PhpReference"/> or
            <see cref="T:PHP.Core.PhpRuntimeChain"/>.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator"></param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectVarUseCompiler.EmitName(PHP.Core.AST.DirectVarUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits IL instructions that load the name of the variable onto evaluation stack.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator"></param>
            <remarks>
            Nothing is expected on the evaluation stack. The <B>string</B> representing the 
            name of the variable is left on the evaluation stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectVarUseCompiler.EmitLoad(PHP.Core.AST.DirectVarUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits IL instructions that load the variable onto the evaluation stack.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator"></param>
            <remarks>Also handles loading of <B>$this</B>.</remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectVarUseCompiler.EmitLoad(PHP.Core.CodeGenerator,PHP.Core.VariableName)">
            <summary>
            Emit load of variable named <paramref name="varName"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectVarUseCompiler.EmitLoadThis(PHP.Core.AST.DirectVarUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits IL instructions that load the "$this" variable onto the evaluation stack.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectVarUseCompiler.EmitLoadAddress(PHP.Core.AST.DirectVarUse,PHP.Core.CodeGenerator)">
            <summary>
            Loads an address of a variable on the stack.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectVarUseCompiler.EmitLoadRef(PHP.Core.CodeGenerator,PHP.Core.VariableName)">
            <summary>
            Emit reference load of variable named <paramref name="varName"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectVarUseCompiler.EmitLoadThisRef(PHP.Core.AST.DirectVarUse,PHP.Core.CodeGenerator)">
            <summary>
            Loads a PhpReference to "this" special variable to the evaluation stack.
            If "this" is not available, loads an empty PhpReference.
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.IStatementCompiler">
            <summary>
            Base interface for <see cref="T:PHP.Core.AST.Statement"/> compiler implementation.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IStatementCompiler.Analyze(PHP.Core.AST.Statement,PHP.Core.Analyzer)">
            <summary>
            Analyzes an AST node containing a specialization of a statement.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IStatementCompiler.Emit(PHP.Core.AST.Statement,PHP.Core.CodeGenerator)">
            <summary>
            Emits AST node respective IL code.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IStatementCompiler.ReportUnreachable(PHP.Core.AST.Statement,PHP.Core.Analyzer)">
            <summary>
            Reports the statement unreachability. 
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.StatementCompiler`1.Analyze(`0,PHP.Core.Analyzer)">
            <summary>
            Analyzes an AST node containing a specialization of a statement.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.StatementCompiler`1.Emit(`0,PHP.Core.CodeGenerator)">
            <summary>
            Emits AST node respective IL code.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.StatementCompiler`1.ReportUnreachable(`0,PHP.Core.Analyzer)">
            <summary>
            Reports the statement unreachability. 
            The block statement reports the position of its first statement.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.EchoStmtCompiler.Emit(PHP.Core.AST.EchoStmt,PHP.Core.CodeGenerator)">
            <summary>
      Emits AST node respective IL code.
    </summary><param name="codeGenerator">A code generator which generates code of this node.</param><returns>A type code of item which has been placed on the top of the evaluation stack by this method.</returns>
            <param name="node">Instance.</param>
            <remarks>
            Nothing is expected on the evaluation stack. Nothing is left on the evaluation stack.
            </remarks>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.StaticFieldUseCompiler`1.assignmentCallback">
            <summary>
            Points to a method that emits code to be placed after the new static field value has
            been loaded on the evaluation stack.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectStFldUseCompiler.EmitRead(PHP.Core.AST.DirectStFldUse,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits IL instructions that read the value of a static field.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">The current <see cref="T:PHP.Core.CodeGenerator"/>.</param>
            <param name="wantRef">If <B>false</B> the field value should be left on the evaluation stack,
            if <B>true</B> the <see cref="T:PHP.Core.PhpReference"/> should be left on the evaluation stack.</param>
            <remarks>
            Nothing is expected on the evaluation stack. A <see cref="T:PHP.Core.PhpReference"/> (if <paramref name="wantRef"/>
            is <B>true</B>) or the field value itself (if <paramref name="wantRef"/> is <B>false</B>) is left on the
            evaluation stack (all PHP static fields are <see cref="T:PHP.Core.PhpReference"/>s).
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectStFldUseCompiler.EmitWrite(PHP.Core.AST.DirectStFldUse,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits IL instructions that write a value to a static field.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">The current <see cref="T:PHP.Core.CodeGenerator"/>.</param>
            <param name="writeRef">If <B>true</B> the value being written is a <see cref="T:PHP.Core.PhpReference"/>
            instance, if <B>false</B> it is an <see cref="T:System.Object"/> instance.</param>
            <returns>Delegate to a method that emits code to be executed when the actual value has been
            loaded on the evaluation stack (see <see cref="M:PHP.Core.Compiler.AST.NodeCompilers.StaticFieldUseCompiler`1.EmitAssign(`0,PHP.Core.CodeGenerator)"/>).</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectStFldUseCompiler.EmitUnset(PHP.Core.AST.DirectStFldUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits IL instructions that &quot;unset&quot; a static field.
            </summary>
            <remarks>
            <para>
            Nothing is expected on the evaluation stack. Nothing is left on the evaluation stack.
            </para>
            <para>
            An error throwing code is always emitted because static fields cannot be unset.
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectStFldUseCompiler.EmitRead(PHP.Core.AST.IndirectStFldUse,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits IL instructions that read the value of a static field.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">The current <see cref="T:PHP.Core.CodeGenerator"/>.</param>
            <param name="wantRef">If <B>false</B> the field value should be left on the evaluation stack,
            if <B>true</B> the <see cref="T:PHP.Core.PhpReference"/> should be left on the evaluation stack.</param>
            <remarks>
            Nothing is expected on the evaluation stack. A <see cref="T:PHP.Core.PhpReference"/> (if <paramref name="wantRef"/>
            is <B>true</B>) or the field value itself (if <paramref name="wantRef"/> is <B>false</B>) is left on the
            evaluation stack (all PHP static fields are <see cref="T:PHP.Core.PhpReference"/>s).
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectStFldUseCompiler.EmitWrite(PHP.Core.AST.IndirectStFldUse,PHP.Core.CodeGenerator,System.Boolean)">
            <summary>
            Emits IL instructions that write the value to a static field.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">The current <see cref="T:PHP.Core.CodeGenerator"/>.</param>
            <param name="writeRef">If <B>true</B> the value being written is a <see cref="T:PHP.Core.PhpReference"/>
            instance, if <B>false</B> it is an <see cref="T:System.Object"/> instance.</param>
            <returns>Delegate to a method that emits code to be executed when the actual value has been
            loaded on the evaluation stack (see <see cref="M:PHP.Core.Compiler.AST.NodeCompilers.StaticFieldUseCompiler`1.EmitAssign(`0,PHP.Core.CodeGenerator)"/>).</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectStFldUseCompiler.EmitUnset(PHP.Core.AST.IndirectStFldUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits IL instructions that "unset" a static field.
            </summary>
            <remarks>
            <para>
            Nothing is expected on the evaluation stack. Nothing is left on the evaluation stack.
            </para>
            <para>
            Call to the <see cref="M:PHP.Core.Operators.UnsetStaticProperty(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/> error throwing operator is always emitted because static
            fields cannot be unset.
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.FunctionCallCompiler`1.EmitReturnValueCopy(PHP.Core.Emit.ILEmitter,PHP.Core.PhpTypeCode)">
            <summary>
            Emit <see cref="M:PHP.Core.PhpVariable.Copy(System.Object,PHP.Core.CopyReason)"/> if needed. It means <see cref="P:PHP.Core.Compiler.AST.IExpressionCompiler.Access"/> has to be <see cref="F:PHP.Core.Compiler.AST.AccessType.Read"/> and <paramref name="returnType"/> has to be copiable.
            </summary>
            <param name="il">The <see cref="T:PHP.Core.Emit.ILEmitter"/>.</param>
            <param name="returnType"><see cref="T:PHP.Core.PhpTypeCode"/> of function call return value.</param>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.DirectFcnCallCompiler.isMemberOfType">
            <summary>
            Type of <see cref="P:PHP.Core.AST.VarLikeConstructUse.IsMemberOf"/> if can be resolved statically. Otherwise <c>null</c>.
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.DirectFcnCallCompiler.inlined">
            <summary>
            An inlined function represented by the node (if any).
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectFcnCallCompiler.GetIsMemberOfType(PHP.Core.AST.DirectFcnCall,PHP.Core.Analyzer)">
            <summary>
            Gets type of <see cref="P:PHP.Core.AST.VarLikeConstructUse.IsMemberOf"/> expression if can be resolved.
            </summary>
            <param name="node">Instance.</param>
            <param name="analyzer">Analyzer.</param>
            <returns><see cref="T:PHP.Core.Reflection.DType"/> or <c>null</c> reference if type could not be resolved.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectFcnCallCompiler.AnalyzeFunctionCall(PHP.Core.AST.DirectFcnCall,PHP.Core.Analyzer,PHP.Core.Compiler.AST.ExInfoFromParent@)">
            <summary>
            Analyze the function call (isMemberOf == null).
            </summary>
            <param name="node">Instance.</param>
            <param name="analyzer"></param>
            <param name="info"></param>
            <returns></returns>
            <remarks>This code fragment is separated to save the stack when too long Expression chain is being compiled.</remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectFcnCallCompiler.AnalyzeMethodCall(PHP.Core.AST.DirectFcnCall,PHP.Core.Analyzer,PHP.Core.Compiler.AST.ExInfoFromParent@)">
            <summary>
            Analyze the method call (isMemberOf != null).
            </summary>
            <param name="node">Instance.</param>
            <param name="analyzer"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectFcnCallCompiler.AnalyzeSpecial(PHP.Core.AST.DirectFcnCall,PHP.Core.Analyzer)">
            <summary>
            Modifies AST if possible, in order to generate better code.
            </summary>
            <remarks>Some well-known constructs can be modified to be analyzed and emitted better.</remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectFcnCallCompiler.TryEvaluate(PHP.Core.AST.DirectFcnCall,PHP.Core.Analyzer,System.Object@)">
            <summary>
            Tries to determine a value of the node.
            </summary>
            <returns>
            Whether the function call can be evaluated at compile time. <B>true</B>, 
            if the function is a special library one and the correct number of arguments 
            is specified in the call and all that arguments are evaluable.
            </returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectFcnCallCompiler.HandleLongChain(PHP.Core.AST.DirectFcnCall,PHP.Core.CodeGenerator)">
            <summary>
            To avoid <see cref="T:System.StackOverflowException"/> due to long <see cref="P:PHP.Core.AST.VarLikeConstructUse.IsMemberOf"/> chain,
            we will avoid recursion, and divide the chain into smaller pieces.
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.DirectFcnCallCompiler.alreadyEmittedPlace">
            <summary>
            Once function call is emitted into a local variable,
            remember it to load it next time when <see cref="M:PHP.Core.Compiler.AST.NodeCompilers.DirectFcnCallCompiler.Emit(PHP.Core.AST.DirectFcnCall,PHP.Core.CodeGenerator)"/> is called.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.DirectFcnCallCompiler.EmitInlinedFunctionCall(PHP.Core.CodeGenerator)">
            <summary>
            Emits library function that can be inlined.
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.NodeCompilers.DirectFcnCallCompiler.InlinedFunction">
            <summary>
            A list of inlined functions.
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.FormalParamCompiler.routine">
            <summary>
            Declaring routine.
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.FormalParamCompiler.index">
            <summary>
            Index in the <see cref="T:PHP.Core.AST.Signature"/> tuple.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.FormalParamCompiler.EmitTypeHintTest(PHP.Core.AST.FormalParam,PHP.Core.CodeGenerator)">
            <summary>
            Emits type hint test on the argument if specified.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IGlobalCodeCompiler.Analyze(PHP.Core.AST.GlobalCode,PHP.Core.Analyzer)">
            <summary>
            Analyzes entire AST.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.IGlobalCodeCompiler.Emit(PHP.Core.AST.GlobalCode,PHP.Core.CodeGenerator)">
            <summary>
            Emits entire AST.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.IGlobalCodeCompiler.VarTable">
            <summary>
            Global variables. Is <c>null</c> in pure mode.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.IGlobalCodeCompiler.Labels">
            <summary>
            Labels (PHP6 feature).
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.IGlobalCodeCompiler.PrependedInclusion">
            <summary>
            Prepended inclusion by compiler.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.IGlobalCodeCompiler.AppendedInclusion">
            <summary>
            Appended inclusion by compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.GlobalCodeCompiler.Emit(PHP.Core.AST.GlobalCode,PHP.Core.CodeGenerator)">
            <summary>
      Emits AST node respective IL code.
    </summary><param name="codeGenerator">A code generator which generates code of this node.</param><returns>A type code of item which has been placed on the top of the evaluation stack by this method.</returns>
            <param name="ast">Instance.</param>
        </member>
        <member name="P:PHP.Core.Compiler.AST.NodeCompilers.GlobalCodeCompiler.VarTable">
            <summary>
            Global variables. Not available in pure mode, non-null otherwise.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.NodeCompilers.GlobalCodeCompiler.Labels">
            <summary>
            Labels (PHP6 feature).
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.ConstantDeclCompiler`1.analyzed">
            <summary>
            Whether the node has been analyzed.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.EmitUnsetField(PHP.Core.AST.IndirectVarUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits IL instructions that unset an instance field.
            </summary>
            <remarks>
            Nothing is expected on the evaluation stack. Nothing is left on the evaluation stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.EmitName(PHP.Core.AST.IndirectVarUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits load of the name to the stack.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.EmitLoad(PHP.Core.AST.IndirectVarUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits IL instructions that load the variable onto the evaluation stack.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator"></param>
            <remarks><B>$this</B> cannot be accessed indirectly.</remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.EmitSwitch(PHP.Core.AST.IndirectVarUse,PHP.Core.CodeGenerator,PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.SwitchMethod)">
            <summary>
            Emits local variable switch and performs a specified operation on each case.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="method">The operation performed in each case.</param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.LoadLocal(PHP.Core.AST.IndirectVarUse,PHP.Core.CodeGenerator,PHP.Core.VariablesTable.Entry,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Loads a value of a specified variable. If the variable is of type <see cref="T:PHP.Core.PhpReference"/>, it is dereferenced.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.LoadLocalAddress(PHP.Core.AST.IndirectVarUse,PHP.Core.CodeGenerator,PHP.Core.VariablesTable.Entry,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Loads and address of a specified variable.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.LoadLocalRef(PHP.Core.AST.IndirectVarUse,PHP.Core.CodeGenerator,PHP.Core.VariablesTable.Entry,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Loads a specified reference local variable.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.UnsetLocal(PHP.Core.AST.IndirectVarUse,PHP.Core.CodeGenerator,PHP.Core.VariablesTable.Entry,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Unsets a specified variable.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.StoreLocalAssign(PHP.Core.AST.IndirectVarUse,PHP.Core.CodeGenerator,PHP.Core.VariablesTable.Entry,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Stores a value on the top of the stack to a specified variable.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.StoreLocalRefAssign(PHP.Core.AST.IndirectVarUse,PHP.Core.CodeGenerator,PHP.Core.VariablesTable.Entry,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Stores a reference on the top of the stack to a specified variable.
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.SwitchMethod">
            <summary>
            <see cref="T:PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.SwitchMethod"/> delegate instances stands as a parameter for <see cref="M:PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.EmitSwitch(PHP.Core.AST.IndirectVarUse,PHP.Core.CodeGenerator,PHP.Core.Compiler.AST.NodeCompilers.IndirectVarUseCompiler.SwitchMethod)"/> method.
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.ItemUseCompiler.indexTypeCode">
            <summary>
            Set when the index is emitted.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ItemUseCompiler.EmitNodeRead(PHP.Core.AST.ItemUse,PHP.Core.CodeGenerator,PHP.Core.Operators.GetItemKinds)">
            <summary>
            Emits code to load variable onto the evaluation stack. Supports operators chaining.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">A geenrator.</param>
            <param name="itemGetterKind">Whether to load for "get", "isset", or "empty".</param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ItemUseCompiler.EmitNodeReadRef(PHP.Core.AST.ItemUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits code to load a reference to a variable onto an evaluation stack.  Supports operators chaining.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator"></param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ItemUseCompiler.EmitNodeReadUnknown(PHP.Core.AST.ItemUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits code to load <see cref="T:PHP.Core.PhpRuntimeChain"/> onto an evaluation stack. Supports operators chaining.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator"></param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ItemUseCompiler.EmitNodeWrite(PHP.Core.AST.ItemUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits code to prepare an evaluation stack for storing a value into a variable.
            Supports operators chaining. Store is finished by calling <see cref="M:PHP.Core.Compiler.AST.NodeCompilers.ItemUseCompiler.EmitAssign(PHP.Core.AST.ItemUse,PHP.Core.CodeGenerator)"/>.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator"></param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ItemUseCompiler.EmitNodeWriteRef(PHP.Core.AST.ItemUse,PHP.Core.CodeGenerator)">
            <summary>
            Emits code to prepare an evaluation stack for storing a reference into a variable.
            Supports operators chaining. Store is finished by calling <see cref="M:PHP.Core.Compiler.AST.NodeCompilers.ItemUseCompiler.EmitAssign(PHP.Core.AST.ItemUse,PHP.Core.CodeGenerator)"/>.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator"></param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.JumpStmtCompiler.EmitReturnObject(PHP.Core.AST.Expression,PHP.Core.CodeGenerator)">
            <summary>
            Return value is not deeply copied since the deep copy takes place when the caller accesses the value.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ListExCompiler.EmitAssign(PHP.Core.AST.ListEx,PHP.Core.CodeGenerator)">
            <summary>
            Assigns items of array from the top of evaluation stack to the list.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ListExCompiler.EmitAssignList(PHP.Core.CodeGenerator,System.Collections.Generic.List{PHP.Core.AST.Expression},System.Reflection.Emit.LocalBuilder)">
            <summary>
            Use the object on the top of the stack, the object here will stay untouched.
            
            Assigns recursively into lvalues. If the object is PhpArray, assign items, otherwise assign nulls.
            </summary>
            <param name="codeGenerator"></param>
            <param name="vals">Arguments of the list expression.</param>
            <param name="o1">Temporary local variable.</param>
            <remarks>After the method finishes, the top of the stack is the same.</remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ListExCompiler.EmitAssignListNulls(PHP.Core.CodeGenerator,System.Collections.Generic.List{PHP.Core.AST.Expression})">
            <summary>
            Assigns null into given lvalues recursively.
            </summary>
            <param name="codeGenerator"></param>
            <param name="vals"></param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ForeachStmtCompiler.Emit(PHP.Core.AST.ForeachStmt,PHP.Core.CodeGenerator)">
            <author>Tomas Matousek</author>
            <remarks>
            Emits the following code:
            <code>
            IPhpEnumerable enumerable = ARRAY as IPhpEnumerable;
            if (enumerable==null)
            {
              PhpException.InvalidForeachArgument();
            }
            else
            FOREACH_BEGIN:
            {
              IDictionaryEnumerator enumerator = enumerable.GetForeachEnumerator(KEYED,ALIASED,TYPE_HANDLE);
               
              goto LOOP_TEST;
              LOOP_BEGIN:
              {
                ASSIGN(value,enumerator.Value);
                ASSIGN(key,enumerator.Key);
                
                BODY; 
              }
              LOOP_TEST:
              if (enumerator.MoveNext()) goto LOOP_BEGIN;
            } 
            FOREACH_END:
            </code>
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.ForeachStmtCompiler.MarkSequencePointHeader(PHP.Core.AST.ForeachStmt,PHP.Core.CodeGenerator)">
            <summary>
            marks foreach "header"
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.NodeCompilers.ShellExCompiler">
            <summary>
            Represents a content of backtick operator (shell command execution).
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.SwitchStmtCompiler.GetLastDefaultItem(PHP.Core.AST.SwitchStmt)">
            <summary>
            Determines the last default item in the list of switch items.
            </summary>
            <returns>The last default item or a <b>null</b> reference if there is no default item.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.CaseItemCompiler.MarkSequencePoint(PHP.Core.AST.CaseItem,PHP.Core.CodeGenerator)">
            <summary>
            Marks a sequence point "case {caseVal}".
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.TryStmtCompiler.Emit(PHP.Core.AST.TryStmt,PHP.Core.CodeGenerator)">
            <summary>
            Emits the try block and the catch blocks.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">A code generator.</param>
            <remarks>
            <code>
            try
            {
              // guarded code //
            }
            catch(E1 $e1)
            {
              // E1 //
            }
            catch(E2 $e2)
            {
              // E2 //
            } 
            </code>
            is translated as follows:
            <code>
            try
            {
              // guarded code //
            }
            catch(PhpUserException _e)
            {
              PhpObject _o = _e.UserException;
              if (_o instanceOf E1)
              {
                $e1 = _o;
                // E1 //
              }
              else if (_o instanceOf E2)
              {
                $e2 = _o;
                // E2 //
              }
              else
              {
                throw;
              }
            }
            </code> 
            </remarks>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.CatchItemCompiler.Emit(PHP.Core.AST.CatchItem,PHP.Core.CodeGenerator,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
            <summary>
            Emits the catch-block.
            </summary>
            <param name="node">Instance.</param>
            <param name="codeGenerator">A code generator.</param>
            <param name="exceptionLocal">A local variable containing an instance of <see cref="T:PHP.Library.SPL.Exception"/>.</param>
            <param name="endLabel">A label in IL stream where the processing of the try-catch blocks ends.</param>
            <param name="nextCatchLabel">A label in IL stream where the next catch block processing begins.</param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.FormalTypeParamCompiler.Emit(PHP.Core.AST.FormalTypeParam,PHP.Core.CodeGenerator)">
            <summary>
            Parameters on generic types.
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.TypeDeclCompiler.node">
            <summary>
            Type declaration node.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.TypeDeclCompiler.IsPartialMergeResiduum(PHP.Core.AST.TypeDecl)">
            <summary>
            Whether the node is partial and has been merged to another partial node (arggregate).
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.TypeDeclCompiler.typeDefinitionCode">
            <summary>
            Code of the class used when declared deferred in Eval.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.TypeDeclCompiler.PHP#Core#Reflection#IDeclarationNode#PreAnalyze(PHP.Core.Analyzer)">
            <summary>
            Invoked before member-analysis on the primary types.
            All types are known at this point.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.TypeDeclCompiler.PHP#Core#Reflection#IDeclarationNode#AnalyzeMembers(PHP.Core.Analyzer)">
            <summary>
            Invoked by analyzer after all files are parsed and before the full analysis takes place.
            Invoked only on types directly stored on the compilation unit during parsing,
            i.e. invoked only on the primary version and not on the others.
            All types and their inheritance relationships are known at this point, partial types has already been merged.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.NodeCompilers.TypeDeclCompiler.Type">
            <summary>
            Item of the table of classes. Partial classes merged to the aggregate has this field <B>null</B>ed.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.NodeCompilers.TypeMemberDeclCompiler`1.PHP#Core#Compiler#AST#ITypeMemberDeclCompiler#SourceUnit">
            <summary>
            Overrides current sourceUnit for this TypeMemberDecl. This occurres
            when partial class is declared, after preanalysis, when members are
            merged into one TypeDecl.
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.NodeCompilers.MethodDeclCompiler.method">
            <summary>
            Item in the table of methods or a <B>null</B> reference if added to the type yet or an error occured while adding.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.MethodDeclCompiler.IsDllImport(PHP.Core.AST.CustomAttributes)">
            <summary>Gets value indicating if the method is decorated with <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/></summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.NodeCompilers.FieldDeclCompiler.Field">
            <summary>
            Field representative, set by member analysis.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.TypeRefCompiler`1.Analyze(`0,PHP.Core.Analyzer)">
            <summary>
            Resolves generic arguments.
            </summary>
            <returns><B>true</B> iff all arguments are resolvable to types or constructed types (none is variable).</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.TypeRefCompiler`1.EmitMakeGenericInstantiation(PHP.Core.AST.TypeRef,PHP.Core.CodeGenerator,PHP.Core.ResolveTypeFlags)">
            <summary>
            Emits code that loads type descriptors for all generic arguments and a call to 
            <see cref="M:PHP.Core.Operators.MakeGenericTypeInstantiation(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc)"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.NodeCompilers.LiteralCompiler.Emit(PHP.Core.AST.Literal,PHP.Core.CodeGenerator)">
            <summary>
            Emits the literal. The common code for all literals.
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.FunctionCallEvaluateInfo">
            <summary>
            Evaluation info used to get some info from evaluated functions.
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.FunctionDeclCompilerHelper">
            <summary>
            Helper class for accessing function declaration compiler methods.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.StatementUtils.Analyze(System.Collections.Generic.IList{PHP.Core.AST.Statement},PHP.Core.Analyzer)">
            <summary>
            Analyze all the <see cref="T:PHP.Core.AST.Statement"/> objects in the <paramref name="statements"/> list.
            This methods replaces items in the original list if <see cref="M:PHP.Core.Compiler.AST.IStatementCompiler.Analyze(PHP.Core.AST.Statement,PHP.Core.Analyzer)"/> returns a different instance.
            </summary>
            <param name="statements">List of statements to be analyzed.</param>
            <param name="analyzer">Current <see cref="T:PHP.Core.Analyzer"/>.</param>
        </member>
        <member name="M:PHP.Core.Compiler.AST.StatementUtils.Emit(System.Collections.Generic.IEnumerable{PHP.Core.AST.Statement},PHP.Core.CodeGenerator)">
            <summary>
            Emits each <see cref="T:PHP.Core.AST.Statement"/> in given <paramref name="statements"/> list.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.TypeSignatureHelper.ToGenericParameters(PHP.Core.AST.TypeSignature,PHP.Core.Reflection.DMember)">
            <summary>
            Creates an array of generic parameters. 
            Used by generic types.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.TypeSignatureHelper.ToPhpRoutineSignature(PHP.Core.AST.TypeSignature,PHP.Core.Reflection.DMember)">
            <summary>
            Creates a <see cref="T:PHP.Core.Reflection.PhpRoutineSignature"/> partially initialized with the type parameters of this type signature. 
            Used by generic routines.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.TypeRefHelper.ResolvedTypeOrUnknown(PHP.Core.AST.TypeRef)">
            <summary>
            <see cref="M:PHP.Core.Compiler.AST.TypeRefHelper.ResolvedType(PHP.Core.AST.TypeRef)"/> or new instance of <see cref="T:PHP.Core.Reflection.UnknownType"/> if the type was not resolved.
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.AccessType">
            <summary>
            Access type - describes context within which an expression is used.
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.ExInfoFromParent">
            <summary>
            Structure used to pass inherited attributes during expression analyzis.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.ExInfoFromParent.Parent">
            <summary>
            Used only by DirectVarUse to avoid assigning to $this. 
            Can be null reference if not needed.
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.NodeCompilerAttribute">
            <summary>
            Annotates <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/> implementation with type of <see cref="T:PHP.Core.AST.AstNode"/> which is used for.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.NodeCompilerAttribute.AstNodeType">
            <summary>
            Type of <see cref="T:PHP.Core.AST.AstNode"/> which is extended by corresponding <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.NodeCompilerAttribute.Singleton">
            <summary>
            Whether we need just single instance for all the nodes of provided type.
            </summary>
            <remarks>This saves memory resources for node compilers holding no additional data.</remarks>
        </member>
        <member name="T:PHP.Core.Compiler.AST.AstNodeExtension">
            <summary>
            <see cref="T:PHP.Core.AST.AstNode"/> extension methods.
            </summary>
        </member>
        <member name="F:PHP.Core.Compiler.AST.AstNodeExtension.AstNodeCompilerKey">
            <summary>
            Key to <see cref="P:PHP.Core.AST.AstNode.Properties"/> referencing its <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.AstNodeExtension.NodeCompiler``1(PHP.Core.AST.AstNode)">
            <summary>
            Gets (or creates new) <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/> associated with given <paramref name="node"/>.
            </summary>
            <param name="node"><see cref="T:PHP.Core.AST.AstNode"/> instance.</param>
            <returns>Associuated <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/> instance.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.AstNodeExtension.CreateNodeCompiler(PHP.Core.AST.AstNode)">
            <summary>
            Creates <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/> instance for given <paramref name="node"/>.
            </summary>
            <param name="node">Corresponding <see cref="T:PHP.Core.AST.AstNode"/> instance.</param>
            <returns><see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/> instance for given <paramref name="node"/>.</returns>
        </member>
        <member name="M:PHP.Core.Compiler.AST.AstNodeExtension.ExpressionCompiler(PHP.Core.AST.Expression)">
            <summary>
            Gets (or creates) <see cref="T:PHP.Core.Compiler.AST.IExpressionCompiler"/> associatd with given expression.
            </summary>
        </member>
        <member name="M:PHP.Core.Compiler.AST.AstNodeExtension.StoreOnAssignment(PHP.Core.AST.Expression)">
            <summary>
            Whether an expression represented by this node should be stored to a temporary local if assigned.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.AstNodeExtension.AstNodeExtensionTypes">
            <summary>
            Gets map of <see cref="T:PHP.Core.AST.AstNode"/> types corresponding to <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/> types.
            </summary>
        </member>
        <member name="T:PHP.Core.Compiler.AST.AstNodeExtension.NodeCompilerInfo">
            <summary>
            Reflected information about specific node compiler.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.AstNodeExtension.NodeCompilerInfo.NodeCompilerType">
            <summary>
            Type of <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/> to be used. In case of <see cref="P:PHP.Core.Compiler.AST.AstNodeExtension.NodeCompilerInfo.IsSingleton"/>, this property is invalid.
            </summary>
        </member>
        <member name="P:PHP.Core.Compiler.AST.AstNodeExtension.NodeCompilerInfo.NodeCompilerSingleton">
            <summary>
            Instance of <see cref="T:PHP.Core.Compiler.AST.INodeCompiler"/> is case of <see cref="P:PHP.Core.Compiler.AST.AstNodeExtension.NodeCompilerInfo.IsSingleton"/> is <c>true</c>.
            </summary>
        </member>
        <member name="T:PHP.Core.CallSitesBuilder">
            <summary>
            CallSite fields manager and emitter.
            </summary>
        </member>
        <member name="F:PHP.Core.CallSitesBuilder.moduleBuilder">
            <summary>
            The module that will contain the call sites container.
            </summary>
        </member>
        <member name="F:PHP.Core.CallSitesBuilder.userFriendlyName">
            <summary>
            User-friendly call site container name.
            </summary>
        </member>
        <member name="F:PHP.Core.CallSitesBuilder.nextContainerId">
            <summary>
            The unique id to name the container class.
            </summary>
        </member>
        <member name="F:PHP.Core.CallSitesBuilder.containerClass">
            <summary>
            Lazily initialized class contained static instances of declared call sites.
            </summary>
        </member>
        <member name="F:PHP.Core.CallSitesBuilder.staticCtorEmitter">
            <summary>
            .cctor of the call sites container. Not null if <see cref="F:PHP.Core.CallSitesBuilder.containerClass"/> has been initialized.
            </summary>
        </member>
        <member name="F:PHP.Core.CallSitesBuilder.callSitesCount">
            <summary>
            Amount of emitted call sites. Used to build unique call site field name.
            </summary>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.#ctor(System.Reflection.Emit.ModuleBuilder,System.String,PHP.Core.Emit.IPlace)">
            <summary>
            Create new call sites builder.
            </summary>
            <param name="moduleBuilder">Module to contain call sites container.</param>
            <param name="userFriendlyName">User friendly name used to identify the call sites container by user.</param>
            <param name="classContextPlace">If known and if it can be emitted in static .cctor, defines the place where the class context can be loaded. Otherwise <c>null</c> if the class context will be determined in run time.</param>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.#ctor(System.Reflection.Emit.ModuleBuilder,System.String,PHP.Core.Emit.IPlace,PHP.Core.Reflection.PhpType)">
            <summary>
            Create new call sites builder.
            </summary>
            <param name="moduleBuilder">Module to contain call sites container.</param>
            <param name="userFriendlyName">User friendly name used to identify the call sites container by user.</param>
            <param name="classContextPlace">If known and if it can be emitted in static .cctor, defines the place where the class context can be loaded. Otherwise <c>null</c> if the class context will be determined in run time.</param>
            <param name="classContext">Current PHP type context.</param>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.PushClassContext(PHP.Core.Emit.IPlace,PHP.Core.Reflection.PhpType)">
            <summary>
            Change current class context. Remember the previous ones.
            </summary>
            <param name="classContextPlace">New class context place.</param>
            <param name="classContext">New class context type.</param>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.PopClassContext">
            <summary>
            Change current class context to the previous one.
            </summary>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.EnsureContainer">
            <summary>
            Ensure the call sites container is created and return the <see cref="T:System.Reflection.Emit.TypeBuilder"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.Bake">
            <summary>
            Bake the container class if any. Close the call sites builder.
            </summary>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
            <summary>
            Defines field in callsite's container type.
            </summary>
            <param name="name">Field name.</param>
            <param name="type">Field type.</param>
            <param name="attributes">Field attributes.</param>
            <returns>Instance of newly defined <see cref="T:System.Reflection.FieldInfo"/>.</returns>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.DefineCallSite(PHP.Core.Emit.ILEmitter,System.String,System.Type,System.Action{PHP.Core.Emit.ILEmitter})">
            <summary>
            Define new instance of CallSite&lt;<paramref name="delegateType"/>&gt; and initialize it with specified binder.
            </summary>
            <param name="bodyEmitter"><see cref="T:PHP.Core.Emit.ILEmitter"/> of the body that is using this call site. This method may emit initialization of the call site into this <paramref name="bodyEmitter"/>.</param>
            <param name="userFriendlyName">User friendly name used as name for the CallSite field.</param>
            <param name="delegateType">CallSite type argument.</param>
            <param name="binderInstanceEmitter">Function used to emit initialization of the binder from within the call sites container .cctor.</param>
            <returns>The <see cref="T:System.Reflection.FieldInfo"/> containing the instance of the created CallSite.</returns>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.InitializeCallSite(PHP.Core.Emit.ILEmitter,System.Type,System.Reflection.Emit.FieldBuilder,System.Action{PHP.Core.Emit.ILEmitter})">
            <summary>
            Emit the initialization code for defined call site.
            </summary>
            <param name="il"></param>
            <param name="callSiteType"></param>
            <param name="field"></param>
            <param name="binderInstanceEmitter"></param>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.MethodCallDelegateAdditionalArguments(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Helper method, returns additional type arguments for delegate used by <see cref="M:PHP.Core.CallSitesBuilder.EmitMethodCall(PHP.Core.CodeGenerator,System.Type,PHP.Core.AST.Expression,PHP.Core.Reflection.DType,System.String,PHP.Core.AST.Expression,PHP.Core.AST.CallSignature)"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.EmitMethodCallParameters(PHP.Core.CodeGenerator,PHP.Core.AST.CallSignature)">
            <summary>
            Helper method, loads parameters onto evaluation stack.
            </summary>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.EmitMethodCall(PHP.Core.CodeGenerator,System.Type,PHP.Core.AST.Expression,PHP.Core.Reflection.DType,System.String,PHP.Core.AST.Expression,PHP.Core.AST.CallSignature)">
            <summary>
            Emit call of the instance/static method. This defines the call site and call it using given parameters.
            </summary>
            <param name="cg">Current code <see cref="T:PHP.Core.CodeGenerator"/>.</param>
            <param name="returnType">Return type of the method call determined by current access of the method call.</param>
            <param name="targetExpr">The method call instance expression (the target) if it is an instance method call.</param>
            <param name="targetType">The target type if it is a static method call.</param>
            <param name="methodFullName">If known at compile time, the method name. Otherwise <c>null</c>.</param>
            <param name="methodNameExpr">If the <paramref name="methodFullName"/> is null, this will be the expression giving the method name in run time.</param>
            <param name="callSignature">The call signature of the method call.</param>
            <returns>The resulting value type code. This value will be pushed onto the evaluation stack.</returns>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.EmitMethodTargetExpr(PHP.Core.CodeGenerator,PHP.Core.AST.Expression)">
            <summary>
            Emit the target of instance method invocation.
            </summary>
            <param name="cg"></param>
            <param name="targetExpr"></param>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.MethodCallDelegateTypeArgs(PHP.Core.AST.CallSignature,System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
            Make an array containing types for CallSite generic type used for method invocation.
            </summary>
            <param name="callSignature">The method call signature.</param>
            <param name="targetType">The type of value passed as method target (object for instance method, DTypeDesc for static method).</param>
            <param name="additionalArgs">Additional arguments added after the target expression.</param>
            <param name="returnType">The return value type.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.CallSitesBuilder.EmitGetProperty(PHP.Core.CodeGenerator,System.Boolean,PHP.Core.AST.Expression,PHP.Core.Emit.IPlace,PHP.Core.Emit.IPlace,PHP.Core.Reflection.DType,System.String,PHP.Core.AST.Expression,System.Boolean)">
            <summary>
            Create and call <see cref="T:System.Runtime.CompilerServices.CallSite"/> for getting property.
            </summary>
            <param name="cg"><see cref="T:PHP.Core.CodeGenerator"/>.</param>
            <param name="wantRef">Wheter <see cref="T:PHP.Core.PhpReference"/> is expected as the result.</param>
            <param name="targetExpr">The expression representing the target (object).</param>
            <param name="targetObjectPlace">The place representing the target (<see cref="T:PHP.Core.Reflection.DObject"/>) iff <paramref name="targetExpr"/> is not provided.</param>
            <param name="targetPlace">The place representing the target (object) iff <paramref name="targetExpr"/> and <paramref name="targetObjectPlace"/> are not provided.</param>
            <param name="targetType">Type of target iff we are getting property statically.</param>
            <param name="fieldName">The name of the field. Can be null if the name is not known at compile time (indirect).</param>
            <param name="fieldNameExpr">The expression used to get field name in run time (iff <paramref name="fieldName"/> is <c>null</c>.</param>
            <param name="issetSemantics">Wheter we are only checking if the property exists. If true, no warnings are thrown during run time.</param>
            <returns>Type code of the value that is pushed onto the top of the evaluation stack.</returns>
        </member>
        <member name="P:PHP.Core.CallSitesBuilder.classContextPlace">
            <summary>
            If known and if it can be emitted in static .cctor, defines the place where the class context can be loaded.
            Otherwise <c>null</c>, the class context will be determined in run time and passed to binder.
            </summary>
        </member>
        <member name="P:PHP.Core.CallSitesBuilder.classContext">
            <summary>
            Current type declaration to emit site containers properly.
            </summary>
        </member>
        <member name="T:PHP.Core.ChainBuilder">
            <summary>
            Provides means for building operator chains.
            </summary>
        </member>
        <member name="F:PHP.Core.ChainBuilder.stack">
            <summary>
            The stack of <see cref="T:PHP.Core.ChainBuilder.Chain"/> elements which represent contexts for
            operator's chains code emmitting.
            </summary>
        </member>
        <member name="M:PHP.Core.ChainBuilder.Lengthen">
            <summary>
            Increases the length of the operators chain by one.
            </summary>
        </member>
        <member name="M:PHP.Core.ChainBuilder.Create">
            <summary>
            Creates a <see cref="T:PHP.Core.ChainBuilder.Chain"/> item for a new operators chain and pushes it on the stack.
            </summary>
        </member>
        <member name="M:PHP.Core.ChainBuilder.Begin">
            <summary>
            Begins operators chainining.
            </summary>
            <remarks>
            This method should precede by a call to <see cref="M:PHP.Core.ChainBuilder.Create"/> method.
            </remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.End">
            <summary>
            Ends current operator's chain and remove current chain context.
            </summary>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EndRef">
            <summary>
            Ends current operator's chain and remove current chain context. Handles the case when operator's chain
            is read as a reference.
            </summary>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitErrorCheck(System.Boolean)">
            <summary>
            Emits IL instructions to handle the error check after evaluating the chain operator returning 
            <see cref="T:PHP.Core.PhpArray"/>.
            </summary>           
            <param name="isArray">
            Whether the operator's result is of type <see cref="T:PHP.Core.PhpArray"/> (or <see cref="T:PHP.Core.PhpObject"/>).
            </param>
            <remarks>
            The result value of chain operator method is expected on evaluation stack.
            The value is either left on the evaluation stack or the control is branched to error label.
            </remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitGetProperty(PHP.Core.AST.SimpleVarUse)">
            <summary>
            Emits IL instructions that load a value of the specified property of an object.
            </summary>
            <param name="variable"><see cref="T:PHP.Core.AST.VariableUse"/> class determining the name of the field.</param>
            <remarks>Expects that the <see cref="T:PHP.Core.Reflection.DObject"/> whose property value should be obtained
            is loaded on the evaluation stack. The value of the property is left on the evaluation stack.</remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitGetItem(PHP.Core.AST.Expression,PHP.Core.AST.Expression,PHP.Core.Operators.GetItemKinds)">
            <summary>
            Emits IL instructions that load the value of an item of given array.
            </summary>
            <param name="array"><see cref="T:PHP.Core.AST.Expression"/> determining the array.</param>
            <param name="index"><see cref="T:PHP.Core.AST.Expression"/> determining the index whose value 
            should be obtained from the array.</param>
            <param name="kind">A kind of getter.</param>
            <remarks>Nothing is supposed on the evaluation stack. The value of the item is left
            on the evaluation stack.</remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitGetItemRef(PHP.Core.AST.SimpleVarUse,PHP.Core.AST.Expression)">
            <summary>
            Emits IL instructions that loads the value of array's item as a <see cref="T:PHP.Core.PhpReference"/>.
            </summary>
            <param name="variable">A simple variable.</param>
            <param name="index"><see cref="T:PHP.Core.AST.Expression"/> determining the index.</param> 
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitSetItem(PHP.Core.PhpTypeCode,PHP.Core.AST.Expression,System.Boolean)">
            <summary>
            Emits IL instructions that sets the value to an <see cref="T:PHP.Core.PhpArray"/> item.
            </summary>
            <remarks>This method is used to set the item of an array having the index determined (not <B>null</B>).
            This method is called only in simple cases when operators chained are <b>not</b> involved.
            See short example of PHP code below.
            Expects that the reference to the object whose item should be set, the index and the value
            are loaded on the evaluation stack. Nothing is left on the evaluation stack.
            stack. 
            </remarks>
            <example>$a[3] = "foo"; $a[] = "foo";</example>
            <example>$x[y] =&amp; p; $x[] =&amp; p;</example>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitEnsureVariableIsArray(PHP.Core.AST.SimpleVarUse)">
            <summary>
            Emits IL instructions that ensure that the specified variable is an instance of <see cref="T:PHP.Core.PhpArray"/>. 
            </summary>
            <param name="variable">Variable's name-index to a table of identifiers.</param>
            <remarks>
            This method is used in operators chains. Nothing is expected on the evaluation stack. 
            If the specified variable is an instance of <see cref="T:PHP.Core.PhpArray"/>
            it is left on the evaluation stack. Otherwise the control is transfered to the end of 
            the chain.
            </remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitEnsureVariableIsObject(PHP.Core.AST.SimpleVarUse)">
            <summary>
            Emits IL instructions that ensure that the specified variable is an instance of <see cref="T:PHP.Core.PhpObject"/>. 
            </summary>
            <param name="variable">Variable that should be examined.</param>
            <remarks>
            This method is used in operators chains. Nothing is expected on the evaluation stack. 
            If the specified variable is an instance of <see cref="T:PHP.Core.PhpObject"/>
            it is left on the evaluation stack. Otherwise the control is transfered to the end of 
            the chain.
            </remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitEnsureVariableIsObject">
            <summary>
            Emits IL instructions that ensure that the variable on the top of the evaluation stack is an instance of <see cref="T:PHP.Core.PhpObject"/>. 
            </summary>
            <remarks>
            This method is used in operators chains to ensure that the variable placed on the top of the evaluation stack by 
            a function call is of type PhpObject. The address ot the variable to check is expected on the evaluation stack. 
            If the specified variable is an instance of <see cref="T:PHP.Core.PhpObject"/>
            it is left on the evaluation stack. Otherwise the control is transfered to the end of 
            the chain.
            </remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitEnsureStaticProperty(PHP.Core.AST.TypeRef,System.Nullable{PHP.Core.VariableName},PHP.Core.AST.Expression,System.Boolean)">
            <summary>
            Emits IL instructions that ensure that a static field is of <see cref="T:PHP.Core.PhpObject"/> or <see cref="T:PHP.Core.PhpArray"/>
            type. Handles the case when field name is unknown at compile time (see <see cref="T:PHP.Core.AST.IndirectStFldUse"/>).
            </summary>
            <param name="typeRef">The class name (identifier index).</param>
            <param name="propertyName">The property name.</param>
            <param name="propertyNameExpr">The expression that evaluates to property name.</param>
            <param name="ensureArray">Whether to ensure that static field is an array (or an object).</param>
            <remarks>
            Nothing is expected on the evaluation stack. A <see cref="T:PHP.Core.PhpArray"/> or <see cref="T:PHP.Core.Reflection.DObject"/> is left on the
            evaluation stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitEnsureStaticProperty(PHP.Core.Reflection.DProperty,PHP.Core.AST.TypeRef,PHP.Core.VariableName,System.Boolean)">
            <summary>
            Emits IL instructions that ensure that a static field is of <see cref="T:PHP.Core.PhpObject"/> or <see cref="T:PHP.Core.PhpArray"/>
            type. Handles the case when field name is known at compile time (see <see cref="T:PHP.Core.AST.DirectStFldUse"/>).
            </summary>
            <param name="property">The corresponding <see cref="T:PHP.Core.Reflection.DProperty"/> or <B>null</B>.</param>
            <param name="typeRef">The class type reference (identifier index).</param>
            <param name="fieldName">The field name (identifier index).</param>
            <param name="ensureArray">Whether to ensure that static field is an array (or an object).</param>
            <remarks>
            Nothing is expected on the evaluation stack. A <see cref="T:PHP.Core.PhpObject"/> or <see cref="T:PHP.Core.Reflection.DObject"/> is left
            on the evaluation stack or the last emitted instruction is unconditional branch to <see cref="P:PHP.Core.ChainBuilder.Chain.ErrorLabel"/>.
            </remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitEnsureStaticPhpFieldDirect(PHP.Core.Reflection.PhpField,System.Boolean)">
            <summary>
            I do not like PHP-specific access code emission here. TODO: Move to PhpField
            </summary>
            <param name="phpField"></param>
            <param name="ensureArray"></param>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitEnsureItem(PHP.Core.AST.Expression,PHP.Core.AST.Expression,System.Boolean)">
            <summary>
            Emits IL instructions that ensure that the specified item of specified array is of
            type <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
            <param name="array">Array which item is examined.</param>
            <param name="index">Index determining the item which should be examined (can be <B>null</B>).</param>
            <param name="ensureArray">Whether to ensure that static field is an array (or an object).</param>
            <remarks>
            This method is used in operators chains. Nothing is expected on the evaluation stack. 
            If the item is of type <see cref="T:PHP.Core.PhpArray"/> and <see cref="T:PHP.Core.PhpObject"/> (respectively) 
            it is left on the evaluation stack. Otherwise the control is transfered to the end of chain.
            </remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitEnsureProperty(PHP.Core.AST.VarLikeConstructUse,PHP.Core.AST.SimpleVarUse,System.Boolean)">
            <summary>
            Emits IL instructions that ensure that the specified property of an object is
            of the <see cref="T:PHP.Core.PhpArray"/> type.
            </summary>
            <param name="varObject">Represents the instance whose property should be examined.</param>
            <param name="fieldName">A <see cref="T:PHP.Core.AST.SimpleVarUse"/> that evaluates to the property name.</param>
            <param name="ensureArray">Whether to ensure that static property is an array (or an object).</param>
            <remarks>Nothing is expected on the evaluation stack. If the property is of <see cref="T:PHP.Core.PhpArray"/> type
            it is left on the evaluation stack. Otherwise the control is transfered to the end of chain.</remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitEnsurePhpFieldDirect(PHP.Core.Reflection.PhpField,PHP.Core.AST.SimpleVarUse,System.Boolean)">
            <summary>
            I do not like PHP-specific access code emission here. TODO: Move to PhpField
            </summary>
            <param name="field"></param>
            <param name="fieldName"></param>
            <param name="ensureArray"></param>
        </member>
        <member name="M:PHP.Core.ChainBuilder.ResolveProperty(PHP.Core.AST.VarLikeConstructUse,PHP.Core.AST.SimpleVarUse,PHP.Core.LocationTypes@)">
            <summary>
            Tries to find an instance of <see cref="T:PHP.Core.Reflection.DProperty"/> that corresponds to an instance property given by
            <paramref name="varObject"/> and <paramref name="fieldName"/>. Currently it is possible only if
            <paramref name="varObject"/> represents <B>$this</B> and <paramref name="fieldName"/> is a compile time
            known instance property, which is surely accessible from current location.
            </summary>
            <param name="varObject">Represents the left side of <B>-&gt;</B>.</param>
            <param name="fieldName">Represents the right side of <B>-&gt;</B>.</param>
            <param name="location">Current location, valid only if the return value is <B>null</B>. Used by the caller to
            decide what kind of run time access should be emitted.</param>
            <returns>A valid non-<B>null</B> <see cref="T:PHP.Core.Reflection.PhpField"/> if the field was found, <B>null</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitCreateRTChain">
            <summary>
            Emits IL instructions that create a new empty <see cref="T:PHP.Core.PhpRuntimeChain"/>.
            </summary>
            <remarks>
            Nothing is expected on the evaluation stack, a reference to <see cref="T:PHP.Core.PhpRuntimeChain"/>
            is left on the evaluation stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitRTChainAddField(PHP.Core.AST.SimpleVarUse)">
            <summary>
            Emits IL instructions that add an object field access to the current <see cref="T:PHP.Core.PhpRuntimeChain"/>.
            </summary>
            <param name="varUse">AST node representing the field access.</param>
            <remarks>
            A reference to <see cref="T:PHP.Core.PhpRuntimeChain"/> is expected and left on the evaluation stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.EmitRTChainAddItem(PHP.Core.AST.ItemUse)">
            <summary>
            Emits IL instructions that add an array item access to the current <see cref="T:PHP.Core.PhpRuntimeChain"/>.
            </summary>
            <param name="itemUse">AST node representing the item access.</param>
            <remarks>
            A reference to <see cref="T:PHP.Core.PhpRuntimeChain"/> is expected and left on the evaluation stack.
            </remarks>
        </member>
        <member name="P:PHP.Core.ChainBuilder.TopChain">
            <summary>
            Gets a top item of the <see cref="F:PHP.Core.ChainBuilder.stack"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.ChainBuilder.IsMember">
            <summary>
            Gets a <B>bool</B> value indicating whether the variable being actually emitted 
            is a member of operator's chain.
            </summary>
        </member>
        <member name="P:PHP.Core.ChainBuilder.IsArrayItem">
            <summary>
            Whether item of the chain is contained in the array subchain.
            <code>
            -- isMemberOf -- [IU] -- isMemberOf
                              /\
                           [..] key 
                            
            </code>
            All nodes attached to the ItemUse node as children has this flag set to <B>true</B>.
            </summary>
        </member>
        <member name="P:PHP.Core.ChainBuilder.IsLastMember">
            <summary>
            Gets or sets a <B>bool</B> value indicating whether the the most bottom variable in AST 
            of actually emitted array (see <see cref="T:PHP.Core.AST.ItemUse"/>) is the last member of chain.
            </summary>
        </member>
        <member name="P:PHP.Core.ChainBuilder.EnsureWritable">
            <summary>
            Gets or sets value indicating, whether the chain must be ensured to be writable (not shared by more variables).
            This happens due to the mechanism of lazy copying (<see cref="T:PHP.Core.PhpArray"/>, <see cref="T:PHP.Core.PhpBytes"/>, etc.).
            </summary>
            <remarks>
            We have to ensure, the array is writable in case where it is marked to be lazy copied and
            we are passing it or its item to a library function parameter marked with <see cref="T:PHP.Core.PhpRwAttribute"/>.</remarks>
        </member>
        <member name="P:PHP.Core.ChainBuilder.Exists">
            <summary>
            Gets a <B>bool</B> value indicating whether operators chain exists (its length is greater than one).
            </summary>
        </member>
        <member name="P:PHP.Core.ChainBuilder.ErrorLabel">
            <summary>
            Returns the error label of the current operator chain.
            </summary>
        </member>
        <member name="P:PHP.Core.ChainBuilder.LoadAddressOfFunctionReturnValue">
            <summary>
            Gets or sets a flag indicating whether to force the FunctionCall to place the address of return value
            in the evaluation stack. 
            </summary>
        </member>
        <member name="T:PHP.Core.ChainBuilder.Chain">
            <summary>
            Represents a single chain being built. Those chains are items of the stack.
            </summary>
        </member>
        <member name="M:PHP.Core.ChainBuilder.Chain.#ctor(PHP.Core.Emit.ILEmitter)">
            <summary>
            Initializes a new empty instance of the <see cref="T:PHP.Core.ChainBuilder.Chain"/>.
            </summary>
            <param name="il">An IL emitter.</param>
        </member>
        <member name="F:PHP.Core.ChainBuilder.Chain.length">
            <summary>
            A value that represents the number of -> and [] operators in the operators chain.
            </summary>
        </member>
        <member name="F:PHP.Core.ChainBuilder.Chain.il">
            <summary>
            IL emitter used to generate code for actual operators chain.
            </summary>
        </member>
        <member name="F:PHP.Core.ChainBuilder.Chain.QuietRead">
            <summary>
            If set to <c>true</c>, no errors are genereted while emitting isset and unset.
            </summary>
        </member>
        <member name="F:PHP.Core.ChainBuilder.Chain.EnsureWritable">
            <summary>
            If set to <c>true</c>, the chain must not be shared by more variables.
            This happens due to the mechanism of lazy copying (<see cref="T:PHP.Core.PhpArray"/>, <see cref="T:PHP.Core.PhpBytes"/>, etc.).
            </summary>
        </member>
        <member name="M:PHP.Core.ChainBuilder.Chain.Lengthen">
            <summary>
            Increases the length of the operators chain by one.
            </summary>
        </member>
        <member name="M:PHP.Core.ChainBuilder.Chain.Begin">
            <summary>
            Begins a new operators chain. Handles the case when the chain is written or read.
            </summary>
        </member>
        <member name="M:PHP.Core.ChainBuilder.Chain.End">
            <summary>
            Ends the actuall operators chain. Handles the case when the chain is read and written.
            </summary>
        </member>
        <member name="M:PHP.Core.ChainBuilder.Chain.EndRef">
            <summary>
            Ends the actuall operators chain. Handles the case when the chain is read as a reference.
            </summary>
        </member>
        <member name="P:PHP.Core.ChainBuilder.Chain.IsChainMember">
            <summary>
            Gets or sets a flag indicating whether the variable being actually emitted 
            is a member of operator's chain.
            </summary>
        </member>
        <member name="P:PHP.Core.ChainBuilder.Chain.IsArrayItem">
            <summary>
            Gets or sets a flag indicating whether the variable being actually emitted 
            is an array (see <see cref="T:PHP.Core.AST.ItemUse"/>).
            </summary>
        </member>
        <member name="P:PHP.Core.ChainBuilder.Chain.IsLastChainMember">
            <summary>
            Gets or sets a flag indicating whether the the bottom most variable in AST 
            of actually emitted array (see <see cref="T:PHP.Core.AST.ItemUse"/>) is the last member of chain.
            </summary>
        </member>
        <member name="P:PHP.Core.ChainBuilder.Chain.LoadAddressOfFunctionReturnValue">
            <summary>
            Gets or sets a flag indicating whether to force the FunctionCall to place the address of return value
            in the evaluation stack. The address is consumed by an operator. E.g.:
            <code>
            Chain: $z =&amp; $x-&gt;f()-&gt;y;
            AST:
                                                        [RAE]
                                                       /  |
                                                    [DVU] |
                                                          |
            [DVU] +- member of -- [DFC] +- member of -- [DVU]
            </code>
            Property set since <see cref="M:PHP.Core.Operators.GetObjectPropertyRef(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc)"/> requires the parameter (DFC) to be an address.
            </summary>
        </member>
        <member name="P:PHP.Core.ChainBuilder.Chain.ErrorLabel">
            <summary>
            Gets or sets the target <see cref="T:System.Reflection.Emit.Label"/> where the control is transfered if an error
            occure during operators chain processing at runtime. Supports lazy intialization.
            </summary>
        </member>
        <member name="P:PHP.Core.ChainBuilder.Chain.Exist">
            <summary>
            Checks whether operators chain exists (its length is greater than one).
            </summary>
        </member>
        <member name="T:PHP.Core.ChainBuilder.ObjectFieldLazyEmitInfo">
            <summary>
            <see cref="T:PHP.Core.ChainBuilder.ObjectFieldLazyEmitInfo"/> class holds data controling lazy code generation of the
            <see cref="T:PHP.Core.AST.ItemUse"/><c>.IsMemberOf</c> object.
            </summary>
            <remarks>
            Lazy code generation takes place if <see cref="T:PHP.Core.AST.ItemUse"/><c>.IsMemberOf</c>
            is NOT equal to <B>null</B> which means that the most bottom node in <see cref="P:PHP.Core.AST.ItemUse.Array"/>
            objects path should emit <see cref="M:PHP.Core.Operators.EnsurePropertyIsArray(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc)"/> operator call.
            </remarks>
        </member>
        <member name="T:PHP.Core.ChainBuilder.ObjectFieldLazyEmitInfoCache">
            <summary>
            <see cref="T:PHP.Core.ChainBuilder.ObjectFieldLazyEmitInfoCache"/> class provides the service for reusing <see cref="T:PHP.Core.ChainBuilder.ObjectFieldLazyEmitInfo"/> objects once 
            instantialized.
            </summary>
        </member>
        <member name="M:PHP.Core.ChainBuilder.ObjectFieldLazyEmitInfoCache.GetItem(PHP.Core.AST.VarLikeConstructUse,System.Boolean,System.Boolean)">
            <summary>
            Gets the <see cref="T:PHP.Core.ChainBuilder.ObjectFieldLazyEmitInfo"/> object stored in collection.
            </summary>
            <param name="var_object"></param>
            <param name="old_IsArrayItem"></param>
            <param name="old_IsLastMember"></param>
            <returns></returns>
            <remarks>
            This method should only be called from <see cref="M:PHP.Core.ChainBuilder.GetObjectForLazyEmit"/> method.
            </remarks>
        </member>
        <member name="M:PHP.Core.ChainBuilder.ObjectFieldLazyEmitInfoCache.SetItem(PHP.Core.ChainBuilder.ObjectFieldLazyEmitInfo)">
            <summary>
            Sets the <see cref="T:PHP.Core.ChainBuilder.ObjectFieldLazyEmitInfo"/> object to the collection.
            </summary>
            <param name="info"></param>
            <remarks>
            This method should only be called from <see cref="M:PHP.Core.ChainBuilder.ReleaseObjectForLazyEmit(PHP.Core.ChainBuilder.ObjectFieldLazyEmitInfo)"/> method.
            </remarks>
        </member>
        <member name="T:PHP.Core.CodeGenerator">
            <summary>
            Manage the process of code generation.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeGenerator.ReturnsPhpReference">
            <summary>
            Whether the current function returns by reference.
            Used by return statement. Set in enter/leave declaration.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeGenerator.ExceptionBlockNestingLevel">
            <summary>
            Number of nested exception blocks (try and catch blocks are not distinguished).
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.SelectAccess(PHP.Core.Compiler.AST.AccessType)">
            <summary>
            Selects actual access type using the current value of <see cref="P:PHP.Core.CodeGenerator.AccessSelector"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeGenerator.ScriptContextPlace">
            <summary>
            A place to load <see cref="T:PHP.Core.ScriptContext"/> from.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeGenerator.TypeContextPlace">
            <summary>
            A place to load <see cref="T:PHP.Core.Reflection.DTypeDesc"/> representing current class context from.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeGenerator.LateStaticBindTypePlace">
            <summary>
            A place to load late static bind type from.
            It may be a local variable with value copied from <see cref="F:PHP.Core.PhpStack.LateStaticBindType"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitLoadNamingContext">
            <summary>
            A place to load <see cref="T:PHP.Core.NamingContext"/> representing current name context from.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeGenerator.RTVariablesTablePlace">
            <summary>
            A place to load local run-time variables table from.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeGenerator.SelfPlace">
            <summary>
            A place to load <see cref="T:PHP.Core.PhpObject"/> representing current object context from.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeGenerator.ResultPlace">
            <summary>
            Place to store routine result to.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeGenerator.ReturnLabel">
            <summary>
            Label where return statements jumps. 
            Defined lazily in the time when result place is defined.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeGenerator.callSites">
            <summary>
            Current scope CallSites.
            Will not be null within the GlobalCode and its sub-tree.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.#ctor(PHP.Core.CompilationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PHP.Core.CodeGenerator"/> class.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitConversion(PHP.Core.AST.Expression,PHP.Core.PhpTypeCode)">
            <summary>
            Emits IL instructions that convert the top of evaluation stack to a specified type.
            </summary>
            <remarks>
            Emits a call to one of <see cref="T:PHP.Core.Convert"/> methods to do the conversion.
            The method result is left on the evaluation stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitBoxing(PHP.Core.PhpTypeCode)">
            <summary>
            Emits IL instructions that box a literal value into its object representation.
            </summary>
            <param name="type"><see cref="T:PHP.Core.PhpTypeCode"/> of the top item placed on evaluation stack.</param>
            <returns>The type code of an item on the top of evaluatuion stack after call.</returns>
            <remarks>
            The <see cref="T:PHP.Core.AST.Literal"/> to be boxed is expected on the evaluation stack.
            The boxed value is left on the evaluation stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitVariableCopy(PHP.Core.CopyReason,PHP.Core.AST.Expression)">
            <summary>
            Emits IL instructions that makes a copy of variable placed on the top of evaluation stack.
            </summary>
            <param name="reason">Reason of the copy.</param>
            <param name="expression">The <see cref="T:PHP.Core.AST.Expression"/> to be copied.</param>
            <remarks>
            The variable's value is expected on the top of evaluation stack.
            Calls <see cref="M:PHP.Core.PhpVariable.Copy(System.Object,PHP.Core.CopyReason)"/> method to process the value copying.
            The result is left on the evaluation stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitDirectInstanceOf(PHP.Core.Reflection.DType)">
            <summary>
            Emits IL instructions that check whether a value on stack is an instance of the provided
            <see cref="T:PHP.Core.Reflection.DType"/>.
            </summary>
            <param name="dtype">The <see cref="T:PHP.Core.Reflection.DType"/> to check for.</param>
            <remarks>
            A value is expected on the top of the evaluation stack. Boolean value is left on the stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EnterGlobalCodeDeclaration(PHP.Core.VariablesTable,System.Collections.Generic.Dictionary{PHP.Core.VariableName,PHP.Core.AST.Statement},PHP.Core.Reflection.CompilationSourceUnit)">
            <summary>
            Called when a <see cref="T:PHP.Core.AST.GlobalCode"/> AST node is entered during the emit phase.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.LeaveGlobalCodeDeclaration">
            <summary>
            Called when a <see cref="T:PHP.Core.AST.GlobalCode"/> AST node is left during the emit phase.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EnterFunctionDeclaration(PHP.Core.Reflection.PhpFunction)">
            <summary>
            Called when a <see cref="T:PHP.Core.AST.FunctionDecl"/> AST node is entered during the emit phase.
            </summary>
            <param name="function">The function to enter.</param>
            <returns><B>true</B> if the function should be emitted, <B>false</B> if it should not be emitted
            (an error was emitted instead due to the incorrect declaration).</returns>
        </member>
        <member name="M:PHP.Core.CodeGenerator.LeaveFunctionDeclaration">
            <summary>
            Called when a <see cref="T:PHP.Core.AST.FunctionDecl"/> AST node is left during the emit phase.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EnterTypeDeclaration(PHP.Core.Reflection.PhpType)">
            <summary>
            Called when a <see cref="T:PHP.Core.AST.TypeDecl"/> AST node is entered during the emit phase.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.LeaveTypeDeclaration">
            <summary>
            Called when a <see cref="T:PHP.Core.AST.TypeDecl"/> AST node is left during the emit phase.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EnterMethodDeclaration(PHP.Core.Reflection.PhpMethod)">
            <summary>
            Called when a <see cref="T:PHP.Core.AST.MethodDecl"/> AST node is entered during the emit phase.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.LeaveMethodDeclaration">
            <summary>
            Called when a <see cref="T:PHP.Core.AST.MethodDecl"/> AST node is left during the emit phase.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.InitializeClassConstant(PHP.Core.Reflection.ClassConstant)">
            <summary>
            Called when a <see cref="T:PHP.Core.AST.ConstantDecl"/> AST node is visited during the emit phase.
            </summary>
            <param name="constant">The constant.</param>
            <remarks>
            Even interface constants are permitted in PHP. These are implemented by <B>static</B> <B>initonly</B>
            fields in the interface, which causes some complaints in the .NET Framework 1.1 verifier.
            However it is rather a verifier bug - .NET Framework 2.0 verifier is fixed and verifies it OK.
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeGenerator.InitializeField(PHP.Core.Reflection.PhpField,PHP.Core.AST.Expression)">
            <summary>
            Called when a <see cref="T:PHP.Core.AST.FieldDecl"/> AST node is visited during the emit phase.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitEchoStaticCall(PHP.Core.PhpTypeCode)">
            <summary>
            Emits IL instructions for calling the best overload of <see cref="M:PHP.Core.ScriptContext.Echo(System.Object,PHP.Core.ScriptContext)"/> static method.
            </summary>
            <param name="typecode"><see cref="T:PHP.Core.PhpTypeCode"/> of the parameter.</param>
            <remarks>Nothing is left on the evaluation stack. Emitted method call expects two parameters on the evaluation stack: (value, ScriptContext).</remarks>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitEcho(PHP.Core.AST.Expression[])">
            <summary>
            Emits IL instructions to process the <B>echo</B> and <B>print</B> commands.
            </summary>
            <param name="expressions">List of expressions to be echoed. They will be evaluated first. The list cannot be null and it must contain at least one element.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitEcho(PHP.Core.AST.Expression)">
            <summary>
            Emits IL instructions to process the <B>echo</B> and <B>print</B> commands.
            </summary>
            <param name="parameter">Expression to be sent to output.</param>
        </member>
        <member name="F:PHP.Core.CodeGenerator.OptimizedLocals">
            <summary>
            If set to <B>true</B> the optimized access to locals is emitted. If set to <B>false</B>
            the access via variables table is emitted. This flag is controled by in 
            <see cref="M:PHP.Core.CodeGenerator.EnterGlobalCodeDeclaration(PHP.Core.VariablesTable,System.Collections.Generic.Dictionary{PHP.Core.VariableName,PHP.Core.AST.Statement},PHP.Core.Reflection.CompilationSourceUnit)"/> and <see cref="M:PHP.Core.CodeGenerator.EnterFunctionDeclaration(PHP.Core.Reflection.PhpFunction)"/> methods.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitAutoGlobalOperation(PHP.Core.VariableName,System.Reflection.Emit.OpCode)">
            <summary>
            Emits an operation on auto-global variable with a specified name.
            </summary>
            <param name="name">The name of the auto-global variable.</param>
            <param name="opCode">The operation.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitRoutineOperatorCall(PHP.Core.Reflection.DType,PHP.Core.AST.Expression,System.String,System.String,PHP.Core.AST.Expression,PHP.Core.AST.CallSignature,PHP.Core.Compiler.AST.AccessType)">
            <summary>
            Emits a call to a routine with specified name using an operator.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitLoadGenericArgsArray">
            <summary>
            Pushes an array of genericArgs (object[]genericArgs) onto the evaluation stack. Can pushes null only.
            The array contains generic arguments of current PhpRoutine.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitLoadStaticTypeDesc(PHP.Core.ResolveTypeFlags)">
            <summary>
            Loads <see cref="T:PHP.Core.Reflection.DTypeDesc"/> of runtime type of current method.
            </summary>
            <param name="flags">Ignored.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitArgfullOverloadBody(PHP.Core.Reflection.PhpRoutine,System.Collections.Generic.IEnumerable{PHP.Core.AST.Statement},PHP.Core.Text.Span,System.Int32)">
            <summary>
            Emits a body of an arg-full function or method overload.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitArgsAwareCheck(PHP.Core.Reflection.PhpRoutine)">
            <summary>
            Emit check whether the argsaware routine was called properly with <see cref="T:PHP.Core.PhpStack"/> initialized.
            </summary>
            <remarks>Emitted code is equivalent to <code>context.Stack.ThrowIfNotArgsaware(routine.Name.Value);</code></remarks>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitArgfullLocalsInitialization(PHP.Core.Reflection.PhpRoutine)">
            <summary>
            Declares all locals used in a function.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitArgfullArgsInitialization(PHP.Core.Reflection.PhpRoutine)">
            <summary>
            Emits initialization of arg-full argument variables.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitArgfullLateStaticBindTypeInitialization(PHP.Core.Reflection.PhpRoutine)">
            <summary>
            Stores late static binding type information if necessary.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitArgumentCopying(System.Int32,PHP.Core.AST.FormalParam)">
            <summary>
            Emits non-reference argument deep copying.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitLoadArgumentDefaultValue(System.Int32,PHP.Core.AST.FormalParam,System.String)">
            <summary>
            Emits a default value load of a specified optional argument. 
            </summary>
            <param name="realIndex">A real index of the argument starting from 0.</param>
            <param name="param">The parameter.</param>
            <param name="calleeFullName">A name of the target function or method.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitReturnValueHandling(PHP.Core.AST.Expression,System.Boolean,PHP.Core.PhpTypeCode@)">
            <summary>
            Emits instructions to conform a required access type.
            </summary>
            <param name="callExpression">Expression emitting the call.</param>
            <param name="loadAddress">Whether to load an address of the return value.</param>
            <param name="result">The type code of a top item of the evaluation stack.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitRoutineEpilogue(PHP.Core.AST.GlobalCode,System.Boolean)">
            <summary>
            Emits a load of the value stored to the result place if available.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitReturnBranch">
            <summary>
            Emits a store of the value on the top of the eval. stack to the result place.
            Creates a local variable backing the result place if it hasn't been created yet.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitGhostStubs(PHP.Core.Reflection.PhpType)">
            <summary>
            Emits ghost stubs for methods and properties that are declared by a <paramref name="type"/>'s
            base type but need to be adapted to a particular CLR signature because of implementing an
            interface by the <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:PHP.Core.Reflection.PhpType"/> that possibly released ghosts by implementing an interface.
            </param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitOverrideAndExportStubs(PHP.Core.Reflection.PhpField)">
            <summary>
            Emits stubs for overriden/implemented properties and explicit export stubs.
            </summary>
            <param name="field">The overriding/implementing/exported field.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitOverrideStubs(System.Collections.Generic.IDictionary{System.Type,System.Reflection.Emit.PropertyBuilder},PHP.Core.Reflection.PhpField,PHP.Core.Reflection.PhpType,PHP.Core.Reflection.DMemberRef,System.Boolean)">
            <summary>
            Emits property stubs for a overriden or implemented CLR property.
            </summary>
            <param name="stubs">Already generated stubs.</param>
            <param name="target">The overriding/implementing field.</param>
            <param name="declaringType">The type where the stubs should be emitted.</param>
            <param name="template">The property being overriden/implemented.</param>
            <param name="newSlot"><B>True</B> if the stub should be assigned a new vtable slot,
            <B>false</B> otherwise.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.DefineOverrideAccessor(PHP.Core.Reflection.PhpType,PHP.Core.Reflection.PhpField,System.Reflection.MethodInfo,System.Boolean,System.Type,System.Type[])">
            <summary>
            Defines a property accessor method and installs an explicit override if necessary.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitOverrideAndExportStubs(PHP.Core.Reflection.PhpMethod)">
            <summary>
            Emits stubs for overridden/implemented methods and explicit export stubs.
            </summary>
            <param name="method">The overriding/implementing/exported method.</param>
            <remarks>
            If the <paramref name="method"/> implements or overrides a CLR method (or methods),
            appropriate stub(s) are generated and emitted to its declaring type. In addition,
            if the method is exported using the <c>Export</c> pseudo-custom attribute, stub(s)
            created according to its signature (type hints, default params, etc.) are also
            generated.
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitOverrideStubs(System.Collections.Generic.IDictionary{System.String,System.Reflection.Emit.MethodBuilder},PHP.Core.Reflection.PhpMethod,PHP.Core.Reflection.DType,PHP.Core.Reflection.PhpType,PHP.Core.Reflection.DMemberRef,System.Boolean)">
            <summary>
            Emits stubs for all overloads of one overridden or implemented method.
            </summary>
            <param name="stubs">Already generated stubs.</param>
            <param name="target">The overriding/implementing method.</param>
            <param name="targetType">The type (perhaps constructed) that declared <paramref name="target"/>.</param>
            <param name="declaringType">The type where the stubs should be emitted.</param>
            <param name="template">The method being overridden/implemented.</param>
            <param name="newSlot"><B>True</B> if the stub should be assigned a new vtable slot,
            <B>false</B> otherwise.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitOverrideStubsForPhpTemplate(System.Collections.Generic.IDictionary{System.String,System.Reflection.Emit.MethodBuilder},PHP.Core.Reflection.PhpMethod,PHP.Core.Reflection.DType,PHP.Core.Reflection.PhpType,PHP.Core.Reflection.DMemberRef,System.Boolean)">
            <summary>
            Emits stubs for one overridden or implemented PHP method.
            </summary>
            <param name="stubs">Already generated stubs.</param>
            <param name="target">The overriding/implementing method.</param>
            <param name="targetType">The type (perhaps constructed) that declared <paramref name="target"/>.</param>
            <param name="declaringType">The type where the stubs should be emitted.</param>
            <param name="template">The method being overridden/implemented (surely PHP).</param>
            <param name="newSlot"><B>True</B> if the stub should be assigned a new vtable slot,
            <B>false</B> otherwise.</param>
            <remarks>
            This method handles situations where method overriding/implementing does not work by itself because of
            the fact that method names in PHP are case insensitive.
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitExportStubs(System.Collections.Generic.IDictionary{System.String,System.Reflection.Emit.MethodBuilder},PHP.Core.Reflection.PhpMethod)">
            <summary>
            Emits stubs for all overloads of one exported method.
            </summary>
            <param name="stubs">Already generated stubs.</param>
            <param name="target">The exported method.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitPhpException(System.Reflection.MethodInfo)">
            <summary>
            Emits call to error reporting method.
            </summary>
            <param name="method">The error reporting method.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.MarkSequencePoint(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Marks a sequence point in generated code if symbol writer is defined.
            In transient scripts, a code setting special fields of <see cref="T:PHP.Core.ScriptContext"/> is emmitted.
            </summary>
            <param name="startLine">Real first line of the point.</param>
            <param name="startColumn">Real first column of the point.</param>
            <param name="endLine">Real last line of the point.</param>
            <param name="endColumn">Real last column of the point.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.MarkSequencePoint(PHP.Core.AST.Expression)">
            <summary>
            Marks a sequence point (see <see cref="M:PHP.Core.CodeGenerator.MarkSequencePoint(System.Int32,System.Int32,System.Int32,System.Int32)"/>) using position of given <paramref name="expression"/>.
            </summary>
            <param name="expression">Expression which position is used to mark sequence point.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitObjectArrayPopulation(PHP.Core.AST.Expression[],System.Reflection.Emit.LocalBuilder)">
            <summary>
            Emits code which populates an array with values of specified expressions.
            </summary>
            <param name="expressions">A list of expressions.</param>
            <param name="result">
            A local variable where to store the resulting array. 
            If <B>null</B> then a new local variable is defined.
            </param>
            <returns>The local variable where the resulting array is stored.</returns>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitObjectArrayPopulation(PHP.Core.AST.Expression[])">
            <summary>
            Emits code which populates an array with values of specified expressions.
            PUshes the array onto the top of the evaluation stack.
            </summary>
            <param name="expressions">A list of expressions.</param>
            <remarks>PUshes the resulting array onto the top of the evaluation stack.</remarks>
        </member>
        <member name="M:PHP.Core.CodeGenerator.GetLocationId">
            <summary>
            Returns a string that uniquely identifies current function, method or class, or returns <B>null</B>
            if global code is currently emitted.
            </summary>
            <returns>String ID or <B>null</B>.</returns>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitMethodCall(System.Reflection.MethodInfo)">
            <summary>
            Emits call to a method.
            </summary>
            <param name="method">A <see cref="T:System.Reflection.MethodInfo"/> of the method to be called.</param>
            <returns>A type code of return value.</returns>
            <remarks>
            Use if it is hard to keep track of types returned by emitted methods (e.g. in operators).
            Do not waste cycles when it is clear what type code the emitted method returns.
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitDeclareFunction(PHP.Core.Reflection.PhpFunction)">
            <summary>
            Emits call to <see cref="M:PHP.Core.ScriptContext.DeclareFunction(PHP.Core.Reflection.PhpRoutineDesc,System.String)"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitDeclareFunction(PHP.Core.Emit.ILEmitter,PHP.Core.Emit.IPlace,PHP.Core.Reflection.PhpFunction)">
            <summary>
            Emits call to <see cref="M:PHP.Core.ScriptContext.DeclareFunction(PHP.Core.Reflection.PhpRoutineDesc,System.String)"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitDeclareLamdaFunction(System.Reflection.MethodInfo)">
            <summary>
            Emits call to <see cref="M:PHP.Core.ScriptContext.DeclareLambda(PHP.Core.RoutineDelegate)"/>.
            </summary>
            <param name="info">A method info.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitLoadMethodInfo(PHP.Core.Emit.ILEmitter,System.Reflection.MethodInfo)">
            <summary>
            Emits load of <see cref="T:System.Reflection.MethodInfo"/> onto the top of evaluation stack.
            </summary>
            <param name="il"></param>
            <param name="mi"></param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitEval(PHP.Core.EvalKinds,PHP.Core.AST.Expression,PHP.Core.Text.Span,System.Nullable{PHP.Core.QualifiedName},System.Collections.Generic.Dictionary{System.String,PHP.Core.QualifiedName})">
            <summary>
            Emit call to <see cref="M:PHP.Core.DynamicCode.Assert(System.Object,PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.Reflection.DObject,PHP.Core.Reflection.DTypeDesc,System.String,System.Int32,System.Int32,System.Int32,PHP.Core.NamingContext)"/> or <see cref="M:PHP.Core.DynamicCode.Eval(System.String,System.Boolean,PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.Reflection.DObject,PHP.Core.Reflection.DTypeDesc,System.String,System.Int32,System.Int32,System.Int32,PHP.Core.NamingContext)"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.NeedsNamingContext(System.Nullable{PHP.Core.QualifiedName},System.Collections.Generic.Dictionary{System.String,PHP.Core.QualifiedName})">
            <summary>
            Determine if <see cref="T:PHP.Core.NamingContext"/> is needed for the current namespace and aliases.
            </summary>
            <param name="currentNamespace"></param>
            <param name="aliases"></param>
            <returns>True if current namespace is not global namespace or there are some aliases.</returns>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitNamingContext(System.Nullable{PHP.Core.QualifiedName},System.Collections.Generic.Dictionary{System.String,PHP.Core.QualifiedName},System.Int32)">
            <summary>
            Loads (cached) instance of given state of <see cref="T:PHP.Core.NamingContext"/> onto the evaluation stack.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitNewNamingContext(PHP.Core.Emit.ILEmitter,System.Nullable{PHP.Core.QualifiedName},System.Collections.Generic.Dictionary{System.String,PHP.Core.QualifiedName})">
            <summary>
            Emit instantiation and initialization of NamingContext. Leaves reference to new NamingContext on the top of evaluation stack.
            </summary>
            <param name="il"></param>
            <param name="currentNamespace">Namespace to be passed as current namespace to the new instance of <see cref="T:PHP.Core.NamingContext"/>.</param>
            <param name="aliases">Aliases to be passed to the new instance of <see cref="T:PHP.Core.NamingContext"/>.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitEnsureWritable(PHP.Core.PhpTypeCode)">
            <summary>
            Ensures the object on top of the evaluation stack is writable,
            and so not shared by more PHP variables.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitCompareEq(System.Func{PHP.Core.CodeGenerator,PHP.Core.PhpTypeCode},System.Func{PHP.Core.CodeGenerator,PHP.Core.PhpTypeCode})">
            <summary>
            Emits most efficient form of equality comparison operator.
            </summary>
            <param name="leftExprEmitter"></param>
            <param name="rightExprEmitter"></param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitLogicNegation">
            <summary>
            Emits "!= 0" operation. This method expects I4 valua on top of evaluation stack.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitObjectToBoolean(PHP.Core.AST.Expression)">
            <summary>
            Emits conversion to boolean.
            </summary>
            <param name="expr">Expression to be converted.</param>
        </member>
        <member name="M:PHP.Core.CodeGenerator.EmitObjectToBoolean(PHP.Core.AST.Expression,System.Boolean)">
            <summary>
            Emits conversion to boolean.
            </summary>
            <param name="expr">Expression to be converted.</param>
            <param name="negation">Whether the result should be logic negation of original conversion.</param>
        </member>
        <member name="P:PHP.Core.CodeGenerator.IL">
            <summary>
            <see cref="T:PHP.Core.Emit.ILEmitter"/> currently used to emit IL instructions.
            </summary>
        </member>
        <member name="P:PHP.Core.CodeGenerator.Context">
            <summary>
            The current compilation context.
            </summary>
        </member>
        <member name="P:PHP.Core.CodeGenerator.SourceUnit">
            <summary>
            Current source unit. Switched by <see cref="T:PHP.Core.AST.GlobalCode"/>.
            Internally modifiable in order to change the sourceUnit during the emission of methods/fields in partial classes.
            </summary>
        </member>
        <member name="P:PHP.Core.CodeGenerator.LocationStack">
            <summary>
            Gets a stack that stores information that has to be shared by more AST nodes.
            </summary>
        </member>
        <member name="P:PHP.Core.CodeGenerator.BranchingStack">
            <summary>
            Gets a stack used for branching statements (<B>break</B>, <B>continue</B>).
            </summary>
        </member>
        <member name="P:PHP.Core.CodeGenerator.ChainBuilder">
            <summary>
            A builder used for generating chained operators.
            </summary>
        </member>
        <member name="P:PHP.Core.CodeGenerator.CurrentVariablesTable">
            <summary>
            Gets or sets <see cref="T:PHP.Core.VariablesTable"/> currently used during code emission. 
            Holds variables defined in the current local scope.
            </summary>
        </member>
        <member name="P:PHP.Core.CodeGenerator.AccessSelector">
            <summary>
            Gets or sets the type of access operation to be performed on nodes that has multiple access types.
            </summary>
        </member>
        <member name="P:PHP.Core.CodeGenerator.CallSitesBuilder">
            <summary>
            Current scope CallSitesBuilder.
            </summary>
        </member>
        <member name="T:PHP.Core.LazyLoadSCPlace">
            <summary>
            Contains <see cref="T:PHP.Core.ScriptContext"/> loading method along with its context.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.IPlace">
            <summary>
            Interface supported by storage places.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.IPlace.EmitLoad(PHP.Core.Emit.ILEmitter)">
            <summary>
            Emits code that loads the value from this storage place.
            </summary>
            <param name="il">The <see cref="T:PHP.Core.Emit.ILEmitter"/> to emit the code to.</param>
        </member>
        <member name="M:PHP.Core.Emit.IPlace.EmitStore(PHP.Core.Emit.ILEmitter)">
            <summary>
            Emits code that stores a value to this storage place.
            </summary>
            <param name="il">The <see cref="T:PHP.Core.Emit.ILEmitter"/> to emit the code to.</param>
        </member>
        <member name="M:PHP.Core.Emit.IPlace.EmitLoadAddress(PHP.Core.Emit.ILEmitter)">
            <summary>
            Emits code that loads address of this storage place.
            </summary>
            <param name="il">The <see cref="T:PHP.Core.Emit.ILEmitter"/> to emit the code to.</param>
        </member>
        <member name="P:PHP.Core.Emit.IPlace.HasAddress">
            <summary>
            Gets whether the place has an address.
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.IPlace.PlaceType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the value stored in this storage place.
            </summary>
        </member>
        <member name="F:PHP.Core.LazyLoadSCPlace.localBuilder">
            <summary>
            Builder of the local variable in which the <see cref="T:PHP.Core.ScriptContext"/> is cached.
            </summary>
        </member>
        <member name="M:PHP.Core.LazyLoadSCPlace.EmitLoad(PHP.Core.Emit.ILEmitter)">
            <summary>
            Emits code that loads current <see cref="T:PHP.Core.ScriptContext"/> by calling
            <see cref="P:PHP.Core.ScriptContext.CurrentContext"/> and remembers it in a local.
            </summary>
            <param name="il"></param>
        </member>
        <member name="P:PHP.Core.LazyLoadSCPlace.PlaceType">
            <summary>
            Returns a type of the place.
            </summary>
        </member>
        <member name="T:PHP.Core.ExpressionPlace">
            <summary>
            <see cref="T:PHP.Core.Emit.IPlace"/> representing an <see cref="T:PHP.Core.AST.Expression"/>. Supports only loading onto the top of evaluation stack.
            </summary>
        </member>
        <member name="M:PHP.Core.ExpressionPlace.GetExpression(PHP.Core.Emit.IPlace)">
            <summary>
            Get the expression if given place represents ExpressionPlace.
            </summary>
            <param name="place"></param>
            <returns></returns>
        </member>
        <member name="T:PHP.Core.LocationTypes">
            <summary>Defines relevant location types.</summary>
        </member>
        <member name="T:PHP.Core.LocationStack">
            <summary>
            Manages a stack of source code locations along with a user-defined context.
            </summary>
        </member>
        <member name="M:PHP.Core.LocationStack.#ctor">
            <summary>
            Creates a new empty <see cref="T:PHP.Core.LocationStack"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.LocationStack.stack">
            <summary>
            The underlying <see cref="T:System.Collections.Stack"/> data structure.
            </summary>
        </member>
        <member name="M:PHP.Core.LocationStack.Push(PHP.Core.LocationTypes,System.Object)">
            <summary>
            Pushes a new <see cref="T:PHP.Core.LocationStack.Location"/> to the stack.
            </summary>
            <param name="type">A location type of the new <see cref="T:PHP.Core.LocationStack.Location"/>.</param>
            <param name="context">A context of the new <see cref="T:PHP.Core.LocationStack.Location"/>.</param>
        </member>
        <member name="M:PHP.Core.LocationStack.Pop">
            <summary>
            Pops a location context from the top of the stack.
            </summary>
            <returns>The <see cref="F:PHP.Core.LocationStack.Location.Context"/> of the element atop the stack.</returns>
            <exception cref="T:System.InvalidOperationException">The stack is empty.</exception>
        </member>
        <member name="M:PHP.Core.LocationStack.Peek">
            <summary>
            Peeks a location context at the top of the stack.
            </summary>
            <returns>The <see cref="F:PHP.Core.LocationStack.Location.Context"/> of the element atop the stack.</returns>
            <exception cref="T:System.InvalidOperationException">The stack is empty.</exception>
        </member>
        <member name="P:PHP.Core.LocationStack.InGlobalCode">
            <summary>
            Returns <B>true</B> if the element atop the stack is marked with <see cref="F:PHP.Core.LocationTypes.GlobalCode"/>,
            <B>false</B> otherwise.
            </summary>
        </member>
        <member name="P:PHP.Core.LocationStack.InFunctionDecl">
            <summary>
            Returns <B>true</B> if the element atop the stack is marked with <see cref="F:PHP.Core.LocationTypes.FunctionDecl"/>,
            <B>false</B> otherwise.
            </summary>
        </member>
        <member name="P:PHP.Core.LocationStack.InClassDecl">
            <summary>
            Returns <B>true</B> if the element atop the stack is marked with <see cref="F:PHP.Core.LocationTypes.TypeDecl"/>,
            <B>false</B> otherwise.
            </summary>
        </member>
        <member name="P:PHP.Core.LocationStack.InMethodDecl">
            <summary>
            Returns <B>true</B> if the element atop the stack is marked with <see cref="F:PHP.Core.LocationTypes.MethodDecl"/>,
            <B>false</B> otherwise.
            </summary>
        </member>
        <member name="P:PHP.Core.LocationStack.IsEmpty">
            <summary>
            Returns <B>true</B> if the <see cref="F:PHP.Core.LocationStack.stack"/> is empty, <B>false</B> otherwise.
            </summary>
        </member>
        <member name="P:PHP.Core.LocationStack.LocationType">
            <summary>
            Returns one of the <see cref="T:PHP.Core.LocationTypes"/> of current stack top or <see cref="F:PHP.Core.LocationTypes.GlobalCode"/>
            if the stack is empty.
            </summary>
        </member>
        <member name="T:PHP.Core.LocationStack.Location">
            <summary>
            Class of objects stored in the <see cref="F:PHP.Core.LocationStack.stack"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.LocationStack.Location.Type">
            <summary>
            Location type.
            </summary>
        </member>
        <member name="F:PHP.Core.LocationStack.Location.Context">
            <summary>
            User-defined context associated with this stack element.
            </summary>
        </member>
        <member name="M:PHP.Core.LocationStack.Location.#ctor(PHP.Core.LocationTypes,System.Object)">
            <summary>
            Creates a new <see cref="T:PHP.Core.LocationStack.Location"/>.
            </summary>
            <param name="type">A location type of the new <see cref="T:PHP.Core.LocationStack.Location"/>.</param>
            <param name="context">A context of the new <see cref="T:PHP.Core.LocationStack.Location"/>.</param>
        </member>
        <member name="T:PHP.Core.CompilerLocationStack">
            <summary>
            Extends the <see cref="T:PHP.Core.LocationStack"/> with functionality that is specific for the code generator.
            </summary>
        </member>
        <member name="M:PHP.Core.CompilerLocationStack.PushTypeDecl(PHP.Core.CompilerLocationStack.TypeDeclContext)">
            <summary>
            Pushes a <see cref="T:PHP.Core.CompilerLocationStack.TypeDeclContext"/> to the stack.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:PHP.Core.CompilerLocationStack.PushGlobalCode(PHP.Core.CompilerLocationStack.GlobalCodeContext)">
            <summary>
            Pushes a <see cref="T:PHP.Core.CompilerLocationStack.GlobalCodeContext"/> to the stack.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:PHP.Core.CompilerLocationStack.PushMethodDecl(PHP.Core.CompilerLocationStack.MethodDeclContext)">
            <summary>
            Pushes a <see cref="T:PHP.Core.CompilerLocationStack.MethodDeclContext"/> to the stack.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:PHP.Core.CompilerLocationStack.PushFunctionDecl(PHP.Core.CompilerLocationStack.FunctionDeclContext)">
            <summary>
            Pushes a <see cref="T:PHP.Core.CompilerLocationStack.FunctionDeclContext"/> to the stack.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:PHP.Core.CompilerLocationStack.PeekTypeDecl">
            <summary>
            Peeks a <see cref="T:PHP.Core.CompilerLocationStack.TypeDeclContext"/> at the top of the stack.
            </summary>
            <returns>The context.</returns>
            <exception cref="T:System.InvalidOperationException">The stack is empty.</exception>
        </member>
        <member name="M:PHP.Core.CompilerLocationStack.PeekGlobalCode">
            <summary>
            Peeks a <see cref="T:PHP.Core.CompilerLocationStack.GlobalCodeContext"/> at the top of the stack.
            </summary>
            <returns>The context.</returns>
            <exception cref="T:System.InvalidOperationException">The stack is empty.</exception>
        </member>
        <member name="M:PHP.Core.CompilerLocationStack.PeekMethodDecl">
            <summary>
            Peeks a <see cref="T:PHP.Core.CompilerLocationStack.MethodDeclContext"/> at the top of the stack.
            </summary>
            <returns>The context.</returns>
            <exception cref="T:System.InvalidOperationException">The stack is empty.</exception>
        </member>
        <member name="M:PHP.Core.CompilerLocationStack.PeekFunctionDecl">
            <summary>
            Peeks a <see cref="T:PHP.Core.CompilerLocationStack.FunctionDeclContext"/> at the top of the stack.
            </summary>
            <returns>The context.</returns>
            <exception cref="T:System.InvalidOperationException">The stack is empty.</exception>
        </member>
        <member name="T:PHP.Core.CompilerLocationStack.ProcedureDeclContext">
            <summary>
            Routine declaration context. A routine may be either global code, user function, or user method.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.IL">
            <summary>
            IL emitter.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.ScriptContextPlace">
            <summary>
            Place storing the current script context.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.RTVariablesTablePlace">
            <summary>
            Place where run-time local variables table is stored.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.ClassContextPlace">
            <summary>
            Place where type desc is stored.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.SelfPlace">
            <summary>
            Place where self object is stored.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.LateStaticBindTypePlace">
            <summary>
            Place where calling type is stored.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.ResultPlace">
            <summary>
            Place where result of the routine is stored when returning value from the routine.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.ReturnLabel">
            <summary>
            Label where return statements branch to.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.CurrentVariablesTable">
            <summary>
            Table of local compile-time variables.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.CurrentLabels">
            <summary>
            Table of local compile-time variables.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.OptimizedLocals">
            <summary>
            Whether local variables are optimized.
            <B>false</B> for global code.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.ReturnsPhpReference">
            <summary>
            Whether the routine returns by reference.
            <B>false</B> for global code.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.ExceptionBlockNestingLevel">
            <summary>
            Number of exception nested blocks (both try and catch blocks). 
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.ProcedureDeclContext.PhpRoutine">
            <summary>
            The PhpRoutine of the current location.
            Used for obtaining indexes of type arguments (generic functions/methods).
            Can be null in case of lambda function.
            </summary>
        </member>
        <member name="T:PHP.Core.CompilerLocationStack.GlobalCodeContext">
            <summary>
            Global code context.
            </summary>
        </member>
        <member name="T:PHP.Core.CompilerLocationStack.TypeDeclContext">
            <summary>
            Class declaration context.
            </summary>
            <remarks>
            Contains information that need to be kept when generating a class declaration.
            </remarks>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.TypeDeclContext.CallSites">
            <summary>
            CallSite manager and emitter.
            </summary>
        </member>
        <member name="T:PHP.Core.CompilerLocationStack.MethodDeclContext">
            <summary>
            GetUserEntryPoint declaration context.
            </summary>
            <remarks>
            Contains information that need to be kept when generating a method.
            </remarks>
        </member>
        <member name="T:PHP.Core.CompilerLocationStack.FunctionDeclContext">
            <summary>
            Function declaration context.
            </summary>
            <remarks>
            Contains information that need to be kept when generating a function.
            </remarks>
        </member>
        <member name="F:PHP.Core.CompilerLocationStack.FunctionDeclContext.CallSites">
            <summary>
            CallSite manager and emitter.
            </summary>
        </member>
        <member name="T:PHP.Core.BranchingStack">
            <summary>
            A stack used by <B>continue</B> and <B>break</B> statements code generation to track 
            loops and switch statements. Inner class of <see cref="T:PHP.Core.CodeGenerator"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.BranchingStack.#ctor(PHP.Core.CodeGenerator)">
            <summary>
            Creates an instance of the stack associated with a specified generator.
            </summary>
            <param name="codeGenerator">The code generator.</param>
        </member>
        <member name="F:PHP.Core.BranchingStack.codeGenerator">
            <summary>
            Owning generator.
            </summary>
        </member>
        <member name="F:PHP.Core.BranchingStack.stack">
            <summary>
            Items of the stack. We need to enumerate the stack in well defined way, so
            we cannot use <see cref="T:System.Collections.Stack"/> class as it didn't ensure the order.
            </summary>
        </member>
        <member name="M:PHP.Core.BranchingStack.BeginLoop(System.Reflection.Emit.Label,System.Reflection.Emit.Label,System.Int32)">
            <summary>
            Begins a new scope for loop (<B>for</B> and <B>while</B>) and switch statement code generation.
            </summary>
            <param name="conditionLabel">
            The target <see cref="T:System.Reflection.Emit.Label"/> for <B>continue</B> statement code generation.
            </param>
            <param name="exitLabel">
            The target <see cref="T:System.Reflection.Emit.Label"/> for <B>break</B> statement code generation.
            </param>
            <param name="exceptionBlockNestingLevel">
            Level of exception block nesting.
            </param>
            <remarks>
            This function should be called once at the beginning of each <B>for</B>, <B>while</B> or 
            <B>switch</B> statement. It adds a new <see cref="T:PHP.Core.BranchingStack.StackItem"/> item to the stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.BranchingStack.EndLoop">
            <summary>
            Ends a scope for loop (<B>for</B> and <B>while</B>) and switch statement code generation.
            </summary>
            <remarks>
            This function should be called once at the end of each <B>for</B>, <B>while</B> 
            or <B>switch</B> statement. 
            </remarks>
        </member>
        <member name="M:PHP.Core.BranchingStack.EmitBreak">
            <summary>
            Emits IL instructions that transfer the control to the target label for parametherless <B>break</B> statement.
            </summary>
            <remarks>This function is used to generate code for <B>break;</B> statement.</remarks>
        </member>
        <member name="M:PHP.Core.BranchingStack.EmitBreak(System.Int32)">
            <summary>
            Emits IL instructions that transfer the control to the target label for <B>break</B> statement having one <see cref="T:PHP.Core.AST.Literal"/> parameter.
            </summary>
        </member>
        <member name="M:PHP.Core.BranchingStack.EmitBreakRuntime">
            <summary>
            Emits IL instructions that transfer the control to the target label for <B>break</B> statement 
            having parameter that cannot be evaluated at compile time.
            </summary>
            <remarks>This function is used to generate code for <B>break v;</B> where <i>v</i> is a variable.</remarks>
        </member>
        <member name="M:PHP.Core.BranchingStack.EmitContinue">
            <summary>
            Emits IL instructions that transfer the control to the target label for parametherless <B>continue</B> statement.
            </summary>
            <remarks>This function is used to generate code for <B>continue;</B> statement.</remarks>
        </member>
        <member name="M:PHP.Core.BranchingStack.EmitContinue(System.Int32)">
            <summary>
            Emits IL instructions that transfer the control to the target label for <B>continue</B> statement
            having one <see cref="T:PHP.Core.AST.Literal"/> parameter.
            </summary>
        </member>
        <member name="M:PHP.Core.BranchingStack.EmitContinueRuntime">
            <summary>
            Emits IL instructions that transfer the control to the target label for <B>continue</B> statement 
            having parameter that cannot be evaluated at compile time.
            </summary>
            <remarks>This function is used to generate code for <B>continue v;</B> where <i>v</i> is a variable.</remarks>
        </member>
        <member name="T:PHP.Core.BranchingStack.StackItem">
            <summary>
            Represents an element of stack collection. Holds <see cref="T:System.Reflection.Emit.Label"/> items
            to manage the code generation of PHP <B>break</B> and <B>continue</B> statements inside loops and switch statement.
            </summary>
        </member>
        <member name="M:PHP.Core.BranchingStack.StackItem.#ctor(System.Reflection.Emit.Label,System.Reflection.Emit.Label,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:PHP.Core.BranchingStack.StackItem"/>.
            </summary>
            <param name="conditionLabel">
            The target <see cref="T:System.Reflection.Emit.Label"/> for <B>continue</B> statement code generation.
            </param>
            <param name="exitLabel">
            The target <see cref="T:System.Reflection.Emit.Label"/> for <B>break</B> statement code generation.
            </param>
            <param name="exceptionBlockNestingLevel">
            Level of exception block nesting.
            </param>
        </member>
        <member name="P:PHP.Core.BranchingStack.StackItem.ConditionLabel">
            <summary>
            A target label to which the control is transfered by <B>continue</B> statement.
            </summary>
        </member>
        <member name="P:PHP.Core.BranchingStack.StackItem.ExitLabel">
            <summary>
            Gets a target label to which the control is transfered by <B>break</B> statement.
            </summary>
        </member>
        <member name="P:PHP.Core.BranchingStack.StackItem.ExceptionBlockNestingLevel">
            <summary>
            A level of exception block nesting where the loop/switch is located.
            When enitting <c>break</c> or <c>continue</c> jump, we need to know
            the nesting level of the branch target which is either begin or 
            end of the loop or end of the switch.
            </summary>
        </member>
        <member name="T:PHP.Core.ApplicationCompilerManager">
            <summary>
            Manager for a single script compiler.
            </summary>
        </member>
        <member name="T:PHP.Core.ICompilerManager">
            <summary>
            Manages compiler inputs (maps source paths of scripts to modules) and outputs (creates assemblies and modules
            using compiled code and metadata).
            </summary>
        </member>
        <member name="M:PHP.Core.ICompilerManager.LockForCompiling(PHP.Core.PhpSourceFile,PHP.Core.CompilationContext)">
            <summary>
            Notifies the CompilerManager that this Compiler is going to compile the assembly, 
            so other Compilers shouldn't do it.
            </summary>
            <param name="sourceFile">Source file.</param>
            <param name="context">The current compilation context.</param>
            <returns>
            Either a loaded module which should be treated as a result of compilation of <paramref name="sourceFile"/>
            or a <B>null</B> reference if no such assembly exists. 
            </returns>
            <remarks>
            Causes that the next calling LockForCompiling on this assembly 
            will suspend the calling Compiler until the compilation of the assembly is done
            (UnlockForCompiling is called).
            </remarks>
        </member>
        <member name="M:PHP.Core.ICompilerManager.UnlockForCompiling(PHP.Core.PhpSourceFile,System.Boolean,PHP.Core.CompilationContext)">
            <summary>
            Notifies the CompilerManager that the assembly is no longer being compiled.
            </summary>
            <param name="sourceFile">Source file to unlock.</param>
            <param name="successful">Whether the assembly has been compiled successfuly.</param>
            <param name="context">The current compilation context.</param>
            <remarks>
            Causes that the next calling <see cref="M:PHP.Core.ICompilerManager.LockForCompiling(PHP.Core.PhpSourceFile,PHP.Core.CompilationContext)"/> (or calling that has been suspend)
            on this assembly will imediately return the <see cref="T:PHP.Core.Reflection.ScriptModule"/> just built
            (if success was true) or null (if succes was false). 
            </remarks>
        </member>
        <member name="M:PHP.Core.ICompilerManager.DefineModuleBuilder(PHP.Core.Reflection.CompilationUnitBase,PHP.Core.CompilationContext)">
            <summary>
            Returns a dynamic module builder prepared to be filled with emitted code and returns its builder.
            </summary>
            <param name="compiledUnit">Unit being compiled.</param>
            <param name="context">The current compilation context.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:PHP.Core.ICompilerManager.Persist(PHP.Core.Reflection.CompilationUnitBase,PHP.Core.CompilationContext)">
            <summary>
            Persists the compiled unit (if applicable).
            </summary>
            <param name="compiledUnit">Compilation unit to be persisted.</param>
            <param name="context">The current compilation context.</param>
        </member>
        <member name="M:PHP.Core.ICompilerManager.Info(PHP.Core.PhpSourceFile,PHP.Core.CompilationContext)">
            <summary>
            Informs inplementor about specific actions being performed during compilation.
            </summary>
            <param name="sourceFile">Source file.</param>
            <param name="context">The current compilation context.</param>
        </member>
        <member name="M:PHP.Core.ApplicationCompilerManager.#ctor(PHP.Core.ApplicationContext,PHP.Core.Emit.PhpAssemblyBuilder)">
            <summary>
            Creates an instance of the manager.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationCompilerManager.LockForCompiling(PHP.Core.PhpSourceFile,PHP.Core.CompilationContext)">
            <summary>
            Returns compiled module if exists.
            </summary>
            <param name="sourceFile">Source file.</param>
            <param name="ctx">A compilation context.</param>
            <returns>The <see cref="T:PHP.Core.Reflection.PhpModule"/> or a <B>null</B> reference.</returns>
            <remarks>
            Checks whether a module associated with a <paramref name="sourceFile"/> has already been compiled.
            If so returns the respective <see cref="T:PHP.Core.Reflection.PhpModule"/>. Otherwise a <B>null</B> reference is returned.
            Does no locking since application compiler is thread unsafe.
            </remarks>
        </member>
        <member name="M:PHP.Core.ApplicationCompilerManager.DefineModuleBuilder(PHP.Core.Reflection.CompilationUnitBase,PHP.Core.CompilationContext)">
            <summary>
            Adds a new module to application's assembly.
            </summary>
            <param name="compiledUnit">Unit being compiled.</param>
            <param name="ctx">A compilation context.</param>
            <returns>The builder where compiler should emit the resulting code.</returns>
        </member>
        <member name="M:PHP.Core.ApplicationCompilerManager.Persist(PHP.Core.Reflection.CompilationUnitBase,PHP.Core.CompilationContext)">
            <summary>
            Ignored. All modules are stored in a single assembly which is persisted in <see cref="M:PHP.Core.ApplicationCompilerManager.Finish(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationCompilerManager.UnlockForCompiling(PHP.Core.PhpSourceFile,System.Boolean,PHP.Core.CompilationContext)">
            <summary>
            Remembers whether compilation has been successful.
            </summary>
            <param name="sourceFile">Source file.</param>
            <param name="successful">Whether compilation was successful.</param>
            <param name="ctx">A compilation context.</param>
        </member>
        <member name="M:PHP.Core.ApplicationCompilerManager.Info(PHP.Core.PhpSourceFile,PHP.Core.CompilationContext)">
            <summary>
            Triggered by the compiler on events such are start of compilation, end of compilation etc.
            </summary>
            <param name="sourceFile">A source path to a script being processed.</param>
            <param name="ctx">A compilation context.</param>
        </member>
        <member name="P:PHP.Core.ApplicationCompilerManager.AssemblyBuilder">
            <summary>
            Assembly builder.
            </summary>
        </member>
        <member name="M:PHP.Core.CompilationContext.#ctor(PHP.Core.ApplicationContext,PHP.Core.ICompilerManager,PHP.Core.CompilerConfiguration,PHP.Core.ErrorSink,System.String)">
            <summary>
            Creates a compilation context.
            </summary>
            <param name="applicationContext">Application context.</param>
            <param name="manager">Manager.</param>
            <param name="config">Configuration.</param>
            <param name="errorSink">Error sink.</param>
            <param name="workingDirectory">Working directory.</param>
        </member>
        <member name="P:PHP.Core.CompilationContext.SaveOnlyAssembly">
            <summary>
            Resulting assembly will be only saved to the file system. It won't be loaded or reflected.
            This disallows static inclusions, but allows to recompile scripts while debugging.
            </summary>
            <remarks><see cref="T:System.Reflection.Emit.AssemblyBuilder"/> can be then created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save"/> parameter only.</remarks>
        </member>
        <member name="T:PHP.Core.VariablesTable">
            <summary>
            Table storing information about variables at compile time.
            </summary>
        </member>
        <member name="M:PHP.Core.VariablesTable.Add(PHP.Core.VariablesTable.Entry)">
            <summary>
            Adds a new entry into the table. 
            This is used for copying and merging of tables. 
            The table must not contain an entry with the same name.
            </summary>
        </member>
        <member name="M:PHP.Core.VariablesTable.Clear">
            <summary>
            Removes all the variables. This is used for copying and merging of tables.
            </summary>
        </member>
        <member name="T:PHP.Core.VariablesTable.Entry">
            <summary>
            Class for <seealso cref="T:PHP.Core.VariablesTable"/>. Instances are stored in that table.
            </summary>
        </member>
        <member name="F:PHP.Core.VariablesTable.Entry.variable">
            <summary>
            Variable place
            </summary>
        </member>
        <member name="P:PHP.Core.VariablesTable.Entry.VariableName">
            <summary>
            Get variable name.
            </summary>
        </member>
        <member name="P:PHP.Core.VariablesTable.Entry.IsPhpReference">
            <summary>
            Get or set if current variable is declared as PhpReference (<c>true</c>) or as Object (<c>false</c>).
            </summary>
        </member>
        <member name="P:PHP.Core.VariablesTable.Entry.IsParameter">
            <summary>
            Get or set if current variable is function parameter (<c>true</c>) or regular local variable (<c>false</c>).
            </summary>
        </member>
        <member name="P:PHP.Core.VariablesTable.Entry.IsDirectlyUsed">
            <summary>
            Gets or sets if this variable is directly used.
            </summary>
            <remarks>This value is always <c>true</c> for regular local variables, it can be false only if entry
            represents a parameter.</remarks>
        </member>
        <member name="P:PHP.Core.VariablesTable.Entry.TypeCode">
            <summary>
            Gets or sets the type of the variable if it can be determined. 
            Otherwise, it returns <see cref="F:PHP.Core.PhpTypeCode.Unknown"/>.
            If it returns <see cref="F:PHP.Core.PhpTypeCode.Object"/>, then the object type 
            can be retrieved from <see cref="P:PHP.Core.VariablesTable.Entry.TypeRef"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.VariablesTable.Entry.TypeRef">
            <summary>
            If <see cref="P:PHP.Core.VariablesTable.Entry.TypeCode"/> is <see cref="F:PHP.Core.PhpTypeCode.Object"/>, then this gets the type of the object 
            if it can be determined and <c>null</c> otherwise.
            </summary>
        </member>
        <member name="T:PHP.Core.WebCompilationContext">
            <summary>
            Compilation context used by the manager.
            </summary>
        </member>
        <member name="M:PHP.Core.WebCompilationContext.GetAssemblyCodedName(PHP.Core.PhpSourceFile,PHP.Core.CompilerConfiguration)">
            <summary>
            Translates a source path to an assembly coded name.
            </summary>
            <param name="sourceFile">Source file.</param>
            <param name="config">The compiler configuration.</param>
            <returns>
            The code name consisting of significant configuration hashcode and source 
            path relative to the application source root.
            Format of the name: <code>{relativized path}(~{level_count})?#{config hash}#</code>
            Backslashes and colons are replaced with underscores, underscores are doubled.
            </returns>
        </member>
        <member name="M:PHP.Core.WebCompilationContext.GetAssemblyCodedName(PHP.Core.PhpSourceFile)">
            <summary>
            Translates a source path to an assembly coded name.
            </summary>
        </member>
        <member name="M:PHP.Core.WebCompilationContext.GetAssemblyFullName(PHP.Core.PhpSourceFile)">
            <summary>
            Gets a full name of an assembly in which a specified source script is compiled.
            </summary>
            <param name="sourceFile">Source file.</param>
            <returns>The assembly full name.</returns>
            <remarks>A name of the assembly consists of a hexa-timestamp and a assembly coded name.</remarks>
        </member>
        <member name="M:PHP.Core.WebCompilationContext.ParseAssemblyFullName(System.Reflection.AssemblyName)">
            <summary>
            Extracts assembly coded name from its full name.
            </summary>
            <param name="name">The full name of the assembly.</param>
            <returns>The coded name.</returns>
        </member>
        <member name="P:PHP.Core.WebCompilationContext.RequestTimestampUtc">
            <summary>
            A timestamp of the current request.
            </summary>
        </member>
        <member name="T:PHP.Core.WebServerCompilerManager">
            <summary>
            Manager for a compiling a web aplication by multiple compilers in parallel.
            Designed to be able to work in remote appdomain, yet this feature is currently not utilized.
            </summary>
            <remarks>
            <para>
            Cache maps <I>coded assembly names</I> to <I>assembly file paths</I>.
            In addition, a set of dependencies is added to each cache item. These dependencies comprises of
            <list type="bullet">
              <item>source script file</item>
              <item>cache items representing included script</item>
            </list>
            Cache item key should be determined by script source path which is the only information
            the compiler provides to the manager. Thus, it equals to the coded name of the assembly got by
            <see cref="M:PHP.Core.WebCompilationContext.GetAssemblyCodedName(PHP.Core.PhpSourceFile,PHP.Core.CompilerConfiguration)"/>.
            </para>
            <para>
            Assembly name is composed from request timestamp and coded assembly name.
            Assembly file name equals to the assembly name suffixed with .dll extension.
            <see cref="T:PHP.Core.Emit.SingleScriptAssemblyBuilder"/> is used to build assemblies up.
            </para>
            </remarks>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:PHP.Core.WebServerCompilerManager.AttemptsToGetCompiledAssembly">
            <summary>
            The number of attepts which are made to get an assembly which is being compiled by another thread
            before this thread starts its own compilaation. Each attempt is limited in time by <see cref="F:PHP.Core.WebServerCompilerManager.CompilationTimeout"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.WebServerCompilerManager.outDir">
            <summary> Output directory. </summary>
        </member>
        <member name="F:PHP.Core.WebServerCompilerManager.events">
            <summary>
            A table of <see cref="T:System.Threading.ManualResetEvent"/>s on which threads are waiting when more than one thread 
            requires to compile one script. 
            </summary>
        </member>
        <member name="F:PHP.Core.WebServerCompilerManager.cache">
            <summary>
            Maps subnamespaces to the cache entries describing source file timestamps and state.
            </summary>
        </member>
        <member name="F:PHP.Core.WebServerCompilerManager.watcher">
            <summary>Source files watcher. Can be <c>null</c> reference if <c>WatchSourceChanges</c> is disabled.</summary>
        </member>
        <member name="F:PHP.Core.WebServerCompilerManager.reFileStamp">
            <summary>Searching for precompiled files in ASP.NET temporary files.</summary>
        </member>
        <member name="F:PHP.Core.WebServerCompilerManager.appCodeAssemblyCreatedUtc">
            <summary>
            Time of AppCode assembly was created. Any SSA compiled before this time should be recompiled.
            </summary>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.#ctor(PHP.Core.ApplicationContext)">
            <summary>
            Creates a new instance of the manager. 
            Manager can be instantiated either in dedicated domain or in web AppDomain.
            </summary>
            <param name="appContext">Application context.</param>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.LoadAppCode(System.String)">
            <summary>
            Try to load assembly containing App_Code compiled files.
            </summary>
            <param name="app_code_compiled_path"><c>App_Code.compiled</c> XML containing path to the assembly. The file is generated by ASP.NET.</param>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.LockForCompiling(PHP.Core.PhpSourceFile,PHP.Core.CompilationContext)">
            <summary>
            Checks whether a specified source file needs to be (re)compiled and if so locks 
            it so that any other compiler from the current app domain will wait until this compilation finishes.
            </summary>
            <param name="sourceFile">Source file.</param>
            <param name="ctx">Compilation context.</param>
            <returns>
            A compiled module associated with the <paramref name="sourceFile"/> or a <B>null</B> reference
            if a compilation of that file is needed.
            </returns>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.DefineModuleBuilder(PHP.Core.Reflection.CompilationUnitBase,PHP.Core.CompilationContext)">
            <summary>
            Creates a new instance of <see cref="T:PHP.Core.Emit.ScriptBuilder"/> to be used for compilation of the script's assembly.
            </summary>
            <param name="compiledUnit">Unit being compiled.</param>
            <param name="ctx">The current compilation context.</param>
            <returns>The script builder.</returns>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.Persist(PHP.Core.Reflection.CompilationUnitBase,PHP.Core.CompilationContext)">
            <summary>
            Persists a built script to a file.
            </summary>
            <param name="compilationUnit">The unit being compiled.</param>
            <param name="ctx">Compilation context.</param>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.UnlockForCompiling(PHP.Core.PhpSourceFile,System.Boolean,PHP.Core.CompilationContext)">
            <summary>
            Wakes up threads waiting for a script compilation finish.
            </summary>
            <param name="sourceFile">The compiled script's source file.</param>
            <param name="successful">Whether compilation has been successful.</param>
            <param name="ctx">A compilation context.</param>
            <remarks>Should be called after <see cref="M:PHP.Core.WebServerCompilerManager.Persist(PHP.Core.Reflection.CompilationUnitBase,PHP.Core.CompilationContext)"/>.</remarks>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.Info(PHP.Core.PhpSourceFile,PHP.Core.CompilationContext)">
            <summary>
            Called by compiler when information about compiling progress is available.
            </summary>
            <remarks>Ignored by this manager.</remarks>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.OnFileChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Invalidate cache entry for specified file
            </summary>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.OnFileRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Invalidate cache entry for specified file
            </summary>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.InvalidateCacheEntry(System.String)">
            <summary>
            Removes entry for specified script (and for all includers of this file) from cache.
            </summary>
            <param name="fullPath">Path of the modified file</param>
        </member>
        <member name="F:PHP.Core.WebServerCompilerManager.tempLoadLocks">
            <summary>
            Objects used for locking loading of single SSA from ASP.NET temp.
            </summary>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.TryLoadCachedEntry(System.String,PHP.Core.PhpSourceFile,PHP.Core.WebServerCompilerManager.CacheEntry@)">
            <summary>
            Loads script from cache (in-memory tables) or from 
            previously compiled dll in ASP.NET Temporary files.
            </summary>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.TryGetCachedEntry(System.String,PHP.Core.WebServerCompilerManager.CacheEntry@)">
            <summary>
            Get script for specified namespace from in-memory cache
            </summary>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.SetCacheEntry(System.String,PHP.Core.WebServerCompilerManager.CacheEntry,System.Boolean,System.Boolean)">
            <summary>
            Store entry in the cache
            </summary>
            <param name="ns">Key (namespace)</param>
            <param name="entry">Value (entry)</param>
            <param name="setIncludees">Set this file as included in every includer</param>
            <param name="setIncluders">Set this file as includer for every included script</param>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.UpdateCacheInclusions(System.Collections.Generic.Dictionary{System.String,System.String[]})">
            <summary>
            Updates 'Includee' fields of cache items (it is not possible
            to set includees while loading, beacause the key (script namespace) 
            of includer might not exist when the includee is loaded).
            </summary>
            <param name="inclusionDict">
            Dictionary containing list of includers for every loaded file (key)
            </param>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.CheckEntryFileTime(System.String,PHP.Core.WebServerCompilerManager.CacheEntry)">
            <summary>
            Checks whether timestamp of the file in the cache matches timestamp
            loded from the compiled assembly - this prevents us from using compiled
            assembly when the source file was modified (when the watcher was not running)
            </summary>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.TryLoadTemporaryCompiledNoLock(System.String,PHP.Core.PhpSourceFile,PHP.Core.WebServerCompilerManager.CacheEntry@)">
            <summary>
            Tries to load script from ASP.NET Temporary files - this is useful when 
            web is not precompiled (so it is compiled into SSAs) and appdomain is reloaded
            (which means that we loose the cache)
            </summary>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.LoadIncludeesRecursive(System.String,System.Type,System.Reflection.Module,System.Boolean,System.String,System.Collections.Generic.Dictionary{System.String,PHP.Core.WebServerCompilerManager.CacheEntry})">
            <summary>
            Recursive function that loads (SSA) assembly and all included assemblies
            (included assemblies are required because we need to check whether included files are up-to-date)
            </summary>
            <param name="ns">Namespace of the script to be loaded (namespace is encoded file name)</param>
            <param name="type">Type of the &lt;Script&gt; class</param>
            <param name="module">Module of the type - used for token resolving </param>
            <param name="checkStamp">Should we check timestamp?</param>
            <param name="includer">Namespace of the includer (can be null)</param>
            <param name="tempCache">Temporary cache - used only while loading</param>
            <returns>Success?</returns>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.GetPrecompiledAssemblies">
            <summary>
            Ensures MSA libraries are loaded from Bin folder.
            </summary>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.GetCompiledScript(PHP.Core.PhpSourceFile,PHP.Core.RequestContext)">
            <summary>
            Retrives a compiled script.
            
            The method check scripts in following order:
            1. Script Library database.
            2. Modified source file on the file system.
            3. Unmodified source file in precompiled WebPages.dll.
            </summary>
            <param name="sourceFile">Script source file.</param>
            <param name="requestContext">The current HTTP context. Can be <c>null</c> in case of desktop app.</param>
            <returns>The script type or a <B>null</B> reference on failure.</returns>
            <remarks>The method do check the script library database.</remarks>
        </member>
        <member name="M:PHP.Core.WebServerCompilerManager.CompileScriptNoLock(System.String,PHP.Core.PhpSourceFile,PHP.Core.RequestContext)">
            <summary>
            Compiles a script.
            Called when the script cannot be loaded from pre-compiled assembly and it should be compiled.
            </summary>
            <returns>The compiled script type.</returns>
        </member>
        <member name="P:PHP.Core.WebServerCompilerManager.SaveOnlyAssembly">
            <summary>
            Decide whether allow loading built assemblies into memory. This would disallows proper debugging.
            </summary>
        </member>
        <member name="T:PHP.Core.WebServerCompilerManager.CacheEntry">
            <summary>
            Structure that contains loaded scripts. The cache is built while application is 
            running and is lost when the AppDomain is reloaded.
            </summary>
        </member>
        <member name="P:PHP.Core.WebServerCompilerManager.CacheEntry.Includers">
            <summary>
            Collection of scripts that include this script - if the item is invalidated
            all includers must be invalidated too
            </summary>
        </member>
        <member name="P:PHP.Core.WebServerCompilerManager.CacheEntry.Includees">
            <summary>
            Collection of included scripts - after loading (from temp files or when 
            application starts) we need to check whether all included files are up-to-date
            </summary>
        </member>
        <member name="P:PHP.Core.WebServerCompilerManager.CacheEntry.FileTimeChecked">
            <summary>
            Whether the source file time-stamp has been checked. Precompiled source files need to be checked because
            thay may have been modified prior to the start of the watcher. Although it would be possible to do so during 
            assembly load, it could make the load quite slow and files that are even not used may be checked unnecessarily. 
            Therefore the check is done lazily. 
            
            Source files compiled while the watcher is active needn't to be checked. 
            </summary>
        </member>
        <member name="T:PHP.Core.LibraryConfigStore">
            <summary>
            Class that abstracts library configuration - in CLR it is wrapper over
            XmlAttributeCollection.
            </summary>
        </member>
        <member name="T:PHP.Core.IPhpConfigurationSection">
            <summary>
            Interface implemented by all configuration sections loaded from XML config file.
            </summary>
        </member>
        <member name="M:PHP.Core.IPhpConfigurationSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Parses a configuration section node having attributes "name" and "value".
            </summary>
            <param name="name">A value of the "name" attribute.</param>
            <param name="value">A value of the "value" attribute.</param>
            <param name="node">The node.</param>
            <returns>
            Whether the node has been processed by implementor. Depends usually on the <paramref name="name"/> value.
            </returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The value of <paramref name="value"/> is not valid.</exception>
        </member>
        <member name="T:PHP.Core.ConfigContextBase">
            <summary>
            A base class for configuration contexts.
            </summary>
        </member>
        <member name="F:PHP.Core.ConfigContextBase.Local">
            <summary>
            Local configuration record or a <B>null</B> if not used by the library.
            </summary>
        </member>
        <member name="F:PHP.Core.ConfigContextBase.Global">
            <summary>
            Global configuration record or a <B>null</B> if not used by the library.
            </summary>
        </member>
        <member name="M:PHP.Core.ConfigContextBase.#ctor(PHP.Core.IPhpConfiguration,PHP.Core.IPhpConfiguration)">
            <summary>
            Creates a configuration context.
            </summary>
            <param name="local">Local configuration record or a <B>null</B> reference.</param>
            <param name="global">Local configuration record or a <B>null</B> reference.</param>
        </member>
        <member name="T:PHP.Core.LocalConfiguration">
            <summary>
            The configuration record containing the configuration applicable by user code (PhpPages,ClassLibrary).
            </summary>  
            <summary>
            The configuration record containing the configuration applicable by user code (PhpPages,ClassLibrary).
            </summary>  
        </member>
        <member name="T:PHP.Core.IPhpConfiguration">
            <summary>
            Interface implemented by each configuration record.
            </summary>
        </member>
        <member name="M:PHP.Core.IPhpConfiguration.DeepCopy">
            <summary>
            Makes a deep copy of the configuration record. 
            </summary>
            <returns>The deep copy.</returns>
            <remarks>
            Immutable fields such are those of types <see cref="T:System.String"/>, <see cref="T:System.Text.RegularExpressions.Regex"/>, etc.
            needn't to be copied deeply, of course. If your configuration record contains immutable 
            fields only you may implement this method simply by <see cref="M:System.Object.MemberwiseClone"/> which 
            is the usual case.
            </remarks>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.GetLibraryConfig(PHP.Core.PhpLibraryDescriptor)">
            <summary>
            Gets a configuration associated with the specified library.
            </summary>
            <param name="descriptor">The library descriptor.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="descriptor"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.InvalidOperationException">Configuration has not been initialized yet.</exception>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.#ctor">
            <summary>
            Creates an instance of <see cref="T:PHP.Core.LocalConfiguration"/> initialized by default values.
            </summary>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.#ctor(PHP.Core.LocalConfiguration)">
            <summary>
            Creates an instance of <see cref="T:PHP.Core.LocalConfiguration"/> initialized by values 
            copied from the specified instance.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.DeepCopy">
            <summary>
            Creates a copy of the configuration.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="P:PHP.Core.LocalConfiguration.LastConfigurationModifiedTimeUtc">
            <summary>
            .config file (set of .config files) latest modification time.
            If it cannot be determined, it is equal to <see cref="F:System.DateTime.MinValue"/>.
            </summary>
        </member>
        <member name="T:PHP.Core.LocalConfiguration.OutputControlSection">
            <summary>
            Output control options.
            </summary>
            <summary>
            Output control options.
            </summary>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.OutputControlSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML node.
            </summary>
        </member>
        <member name="P:PHP.Core.LocalConfiguration.OutputControlSection.OutputBuffering">
            <summary>
            Whether to start output buffering on the beginning of each script execution. 
            </summary>
        </member>
        <member name="P:PHP.Core.LocalConfiguration.OutputControlSection.OutputHandler">
            <summary>
            A user function which will filter buffered output.
            </summary>
        </member>
        <member name="P:PHP.Core.LocalConfiguration.OutputControlSection.ImplicitFlush">
            <summary>
            Whether to send output to a client after a call of any function which generates output.
            </summary>
        </member>
        <member name="P:PHP.Core.LocalConfiguration.OutputControlSection.CharSet">
            <summary>
            Overrides <see cref="P:System.Web.HttpResponse.Charset"/> if not <c>null</c>.
            </summary>
        </member>
        <member name="P:PHP.Core.LocalConfiguration.OutputControlSection.ContentType">
            <summary>
            Overrides <see cref="P:System.Web.HttpResponse.ContentType"/> if not <c>null</c>.
            </summary>
        </member>
        <member name="T:PHP.Core.LocalConfiguration.ErrorControlSection">
            <summary>
            Error control options.
            </summary>
            <summary>
            Error control options.
            </summary>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.ErrorControlSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML node.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.ErrorControlSection.DisplayErrors">
            <summary>
            Whether to display errors as a part of the output.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.ErrorControlSection.IgnoreAtOperator">
            <summary>
            Whether to ignore operator @. <B>true</B> will cause to report errors regardless of the operator @.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.ErrorControlSection.HtmlMessages">
            <summary>
            Whether error messages are reported in HTML format or plain text.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.ErrorControlSection.DocRefRoot">
            <summary>
            <see cref="T:System.Uri"/> specifying the root of PHP manual used in error messages.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.ErrorControlSection.DocRefExtension">
            <summary>
            An extension of PHP manual documents (should start with a dot character '.').
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.ErrorControlSection.UserHandler">
            <summary>
            User defined callback which is called to handle an error.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.ErrorControlSection.UserHandlerErrors">
            <summary>
            Error which would cause calling user-defined error handler.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.ErrorControlSection.UserExceptionHandler">
            <summary>
            User defined callback which is called to handle an exception.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.ErrorControlSection.SysLog">
            <summary>
            Whether to log errors to the system Event Log if logging is enabled.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.ErrorControlSection.LogFile">
            <summary>
            A file where to log errors if logging is enabled. Empty value means errors are not logged into a file.
            </summary>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.ErrorControlSection.AbsolutizeLogFile(System.String,System.Xml.XmlNode)">
            <summary>
            Ensures the path is rooted.
            </summary>
            <param name="value">LogFile value.</param>
            <param name="node">Configuration element.</param>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.ErrorControlSection.EnableLogging">
            <summary>
            Whether to log errors.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.ErrorControlSection.ErrorPrependString">
            <summary>
            String which will be prepended to an error message if it is about to be displayed.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.ErrorControlSection.ErrorAppendString">
            <summary>
            String which will be appended to an error message if it is about to be displayed.
            </summary>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.ErrorControlSection.DeepCopy">
            <summary>
            Copies values to the target structure.
            </summary>
        </member>
        <member name="P:PHP.Core.LocalConfiguration.ErrorControlSection.ReportErrors">
            <summary>
            Which errors are reported.
            </summary>
        </member>
        <member name="T:PHP.Core.LocalConfiguration.RequestControlSection">
            <summary>
            Request control options.
            </summary>
            <summary>
            Request control options.
            </summary>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.RequestControlSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML node.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.RequestControlSection.ExecutionTimeout">
            <summary>
            Timeout in seconds for each phase of user code execution. There are up to three phases: 
            script main execution, shutdown callbacks execution, and session close handler execution.
            Each phase is aborted if the specified time elapses. The next phase is executed then (if any).
            Works also for console and Windows applications. 
            Non-positive values are treated as no timeout (<see cref="F:System.Int32.MaxValue"/>).
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.RequestControlSection.IgnoreUserAbort">
            <summary>
            Whether not to abort on client disconnection.
            </summary>
        </member>
        <member name="P:PHP.Core.LocalConfiguration.RequestControlSection.ExecutionTimeoutForTimer">
            <summary>
            Gets execution timeout in microseconds.
            </summary>
        </member>
        <member name="T:PHP.Core.LocalConfiguration.AssertionSection">
            <summary>
            Assertion options.
            </summary>
            <summary>
            Assertion options.
            </summary>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.AssertionSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML node.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.AssertionSection.Active">
            <summary>
            Whether to evaluate assertions.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.AssertionSection.ReportWarning">
            <summary>
            Whether a warning should be reported on failed assertion.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.AssertionSection.Terminate">
            <summary>
            Whether to terminate script execution on failed assertion.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.AssertionSection.Quiet">
            <summary>
            Whether assertion evaluation should report errors (including parse errors).
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.AssertionSection.Callback">
            <summary>
            User callback called on failed assertion. Should have 3 parameters. Can be a <B>null</B> reference.
            </summary>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.AssertionSection.DeepCopy">
            <summary>
            Copies values to the target structure.
            </summary>
        </member>
        <member name="T:PHP.Core.LocalConfiguration.VariablesSection">
            <summary>
            Variables handling options.
            </summary>
            <summary>
            Variables handling options.
            </summary>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.VariablesSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML node.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.VariablesSection.QuoteRuntimeVariables">
            <summary>
            Whether to quote values returned from some PHP functions.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.VariablesSection.QuoteInDbManner">
            <summary>
            Whether to quote values in Sybase DB manner, i.e. using '' instead of \'.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.VariablesSection.DeserializationCallback">
            <summary>
            User callback called on failed serialization. Can be empty.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.VariablesSection.AlwaysPopulateRawPostData">
            <summary>
            Always populate the $HTTP_RAW_POST_DATA containing the raw POST data.
            However, the preferred method for accessing the raw POST data is php://input.
            $HTTP_RAW_POST_DATA is not available with enctype="multipart/form-data". 
            </summary>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.VariablesSection.ValidateRegisteringOrder(System.String)">
            <summary>
            Checks whether a specified value is global valid variables registering order.
            </summary>
            <param name="value">The value.</param>
            <returns>Whether <paramref name="value"/> contains a permutation of "EGPCS".</returns>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.VariablesSection.DeepCopy">
            <summary>
            Copies values to the target structure.
            </summary>
        </member>
        <member name="P:PHP.Core.LocalConfiguration.VariablesSection.RegisteringOrder">
            <summary>
            The order in which global will be added to <see cref="F:PHP.Core.AutoGlobals.Globals"/> and 
            <see cref="F:PHP.Core.AutoGlobals.Request"/> arrays. Can contain only a permutation of "EGPCS" string.
            </summary>
        </member>
        <member name="T:PHP.Core.LocalConfiguration.FileSystemSection">
            <summary>
            File system functions options.
            </summary>
            <summary>
            File system functions options.
            </summary>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.FileSystemSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML node.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.FileSystemSection.AllowUrlFopen">
            <summary>
            Whether file names can be specified as URL (and thus allows to use streams).
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.FileSystemSection.UserAgent">
            <summary>
            A user agent to send when communicating as client over HTTP.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.FileSystemSection.DefaultSocketTimeout">
            <summary>
            Default timeout for socket based streams.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.FileSystemSection.DefaultFileOpenMode">
            <summary>
            A default file open mode used when it is not specified in <c>fopen</c> function explicitly. 
            You can specify either "b" for binary mode or "t" for text mode. Any other value is treated as
            if there is no default value.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.FileSystemSection.AnonymousFtpPassword">
            <summary>
            A password used when logging to FTP server as an anonymous client.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.FileSystemSection.IncludePaths">
            <summary>
            A list of semicolon-separated separated by ';' where file system functions and dynamic 
            inclusion constructs searches for files. A <B>null</B> or an empty string means empty list.
            </summary>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.FileSystemSection.DeepCopy">
            <summary>
            Copies values to the target structure.
            </summary>
        </member>
        <member name="T:PHP.Core.LocalConfiguration.SessionSection">
            <summary>
            Session management configuration independent of a particular session handler.
            </summary>
            <summary>
            Session management configuration independent of a particular session handler.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.SessionSection.handler_getter">
            <summary>
            One-time handler initializer function.
            </summary>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.SessionSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML node.
            </summary>
        </member>
        <member name="F:PHP.Core.LocalConfiguration.SessionSection.AutoStart">
            <summary>
            Whether a session is started automatically before script execution.
            </summary>
            <remarks>
            This value should rather be a part of the global configuration since it
            can't be changed BCL functions. Its potential change by another code 
            have no effect either. The value is stated here to all session handling
            settings together.
            </remarks>
        </member>
        <member name="M:PHP.Core.LocalConfiguration.SessionSection.DeepCopy">
            <summary>
            Makes a deep copy.
            </summary>
        </member>
        <member name="P:PHP.Core.LocalConfiguration.SessionSection.Handler">
            <summary>
            A handler providing persistence for session variables.
            Can't contain a <B>null</B> reference. Setting the <B>null</B> reference will assign the default handler 
            (<see cref="F:PHP.Core.AspNetSessionHandler.Default"/>).
            </summary>
        </member>
        <member name="P:PHP.Core.LocalConfiguration.SessionSection.UrlRewriterTags">
            <summary>
            url_rewriter.tags specifies which HTML tags are rewritten to include session id
            if transparent sid support is enabled.
            Defaults to a=href,area=href,frame=src,input=src,form=,fieldset=  
             
            The Dictionary contains the pair of ("HTML Element", "Attribute name").
            Keys and values are in lower case.
            
            Cannot be null.
            </summary>
        </member>
        <member name="T:PHP.Core.CompilerConfiguration">
            <summary>
            Groups configuration related to the compiler. 
            Includes <see cref="T:PHP.Core.ApplicationConfiguration.CompilerSection"/> and 
            <see cref="T:PHP.Core.ApplicationConfiguration.GlobalizationSection"/>
            sections of global configuration record. 
            Used for passing configuration for the purpose of compilation.
            </summary>
            <summary>
            Groups configuration related to the compiler. 
            Includes <see cref="T:PHP.Core.ApplicationConfiguration.CompilerSection"/> and 
            <see cref="T:PHP.Core.ApplicationConfiguration.GlobalizationSection"/>
            sections of global configuration record. 
            Used for passing configuration for the purpose of compilation.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerConfiguration.addedLibraries">
            <summary>
            Class libraries collected while parsing configuration files.
            </summary>
        </member>
        <member name="M:PHP.Core.CompilerConfiguration.LoadLibraries(PHP.Core.ApplicationContext)">
            <summary>
            Load class libraries collected while parsing configuration files.
            </summary>
            <param name="appContext"></param>
        </member>
        <member name="M:PHP.Core.CompilerConfiguration.Parse(PHP.Core.ApplicationContext,System.Xml.XmlNode,PHP.Core.LibrariesConfigurationList)">
            <summary>
            Parses a XML node and loads the configuration values from it.
            </summary>
            <param name="applicationContext">Context where to load libraries.</param>
            <param name="section">The "phpNet" section node.</param>
            <param name="addedLibraries">List of class libraries to be loaded lazily.</param>
        </member>
        <member name="M:PHP.Core.CompilerConfiguration.LoadFromFile(PHP.Core.ApplicationContext,PHP.Core.FullPath)">
            <summary>
            Loads compiler configuration values from a specified .config file into a given record.
            </summary>
            <param name="appContext">Application context where to load libraries.</param>
            <param name="path">A full path to the .config file.</param>
            <returns>The new configuration record.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">An error in configuration.</exception>
        </member>
        <member name="M:PHP.Core.CompilerConfiguration.ProcessNodes(PHP.Core.ApplicationContext,System.Xml.XmlNode,PHP.Core.LibrariesConfigurationList)">
            <summary>
            Recursively handles loading of the configuration file sections, to handle the inheritance properly
            </summary>
            <param name="appContext">Application context where to load libraries.</param>
            <param name="root">Root to parse child nodes from</param>
            <param name="addedLibraries">List of class libraries that are collected while parsing configuration node.</param>
        </member>
        <member name="F:PHP.Core.CompilerConfiguration.Compiler">
            <summary>
            Compiler section.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerConfiguration.Globalization">
            <summary>
            Globalization section.
            </summary>
        </member>
        <member name="F:PHP.Core.CompilerConfiguration.Paths">
            <summary>
            Paths section. Not modified.
            </summary>
        </member>
        <member name="M:PHP.Core.CompilerConfiguration.#ctor(PHP.Core.ApplicationConfiguration)">
            <summary>
            Creates a new compiler configuration as a shallow copy of 
            the relevant sections of the global configuration record.
            </summary>
            <param name="app">Application configuration record.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="app"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.CompilerConfiguration.Validate">
            <summary>
            Checks whether the configuration data are valid and complete and fills missing information 
            by defaults or throws an exception.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Configuration is invalid or incomplete.</exception>
        </member>
        <member name="T:PHP.Core.ApplicationConfiguration">
            <summary>
            The configuration containing per-application configuration. 
            The confguration can be defined only in Machine.config and 
            some can be changed also in Web.config files in the appliciation root directory or above.
            </summary>
            <summary>
            The configuration containing per-application configuration. 
            The confguration can be defined only in Machine.config and 
            some can be changed also in Web.config files in the appliciation root directory or above.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationConfiguration.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationConfiguration.ValidateNoLock">
            <summary>
            If extensions are installed all paths should be defined.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.IsLoaded">
            <summary>
            Whether application configuration record has been loaded.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.LastConfigurationModifiedTimeUtc">
            <summary>
            .config file (set of .config files) latest modification time.
            If it cannot be determined, it is equal to <see cref="F:System.DateTime.MinValue"/>.
            </summary>
        </member>
        <member name="T:PHP.Core.ApplicationConfiguration.CompilerSection">
            <summary>
            Compiler options.
            </summary>
            <summary>
            Compiler options.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationConfiguration.CompilerSection.AddInclusionMapping(System.String,System.String,System.String)">
            <summary>
            Adds an inclusion mapping.
            </summary>
            <param name="pattern">A pattern. Should be valid regular expression pattern.</param>
            <param name="replacement">A replacement.</param>
            <param name="name">An optional name.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> is not a valid regular expression pattern.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> or <paramref name="replacement"/> is <B>null</B>.</exception>
        </member>
        <member name="M:PHP.Core.ApplicationConfiguration.CompilerSection.RemoveInclusionMappingByName(System.String)">
            <summary>
            Removes all inclusion mappings having a specified name.
            </summary>
            <param name="name">A pattern to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <B>null</B>.</exception>
            <returns>The number of mappings that has been found and removed.</returns>
        </member>
        <member name="M:PHP.Core.ApplicationConfiguration.CompilerSection.ClearInclusionMappings">
            <summary>
            Clears the list of inclusion mappings.
            </summary>
        </member>
        <member name="F:PHP.Core.ApplicationConfiguration.CompilerSection.dirty">
            <summary>
            Whether significant options has been changed since last hash computation.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationConfiguration.CompilerSection.#ctor">
            <summary>
            Initializes fields by default values.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationConfiguration.CompilerSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML node.
            </summary>
        </member>
        <member name="F:PHP.Core.ApplicationConfiguration.CompilerSection.SourceRootSet">
            <summary>
            Whether source root was set (otherwise it has a default value).
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationConfiguration.CompilerSection.Validate">
            <summary>
            Validates configuration. Throws an exception if any option is invalid.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.WatchSourceChanges">
            <summary>
            Whether to watch source code for changes. Applicable only on web applications.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.OnlyPrecompiledCode">
            <summary>
            Whether to allow SSAs. Otherwise Phalanger will ignore physical script files completely.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.StaticIncludePaths">
            <summary>
            Paths searched for statically evaluated inclusion targets.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.ForcedDynamicInclusionPaths">
            <summary>
            Paths to script files or directories inclusions of which will be forces to be static.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.ForcedDynamicInclusionTranslatedFullPaths">
            <summary>
            ForcedDynamicInclusionPaths translated into FullPath using current SourceRoot.
            Only existing items are included in the list.
            Can be <c>null</c> if no paths are skipped.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.InclusionMappings">
            <summary>
            List of regular expressions and replacements to use when converting include expressions.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.PrependFile">
            <summary>
            File to be once-included before a script.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.AppendFile">
            <summary>
            File to be once-included after a script.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.HashCode">
            <summary>
            Gets a hash code of options significant for compilation.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.Debug">
            <summary>
            Whether to compile scripts in debug mode.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.SourceRoot">
            <summary>
            Gets a path to source root directory (cannot be empty). 
            A directory to which relative source paths hardcoded into the application IL 
            are absolutized. An application virtual directory in case of Web applications.
            The directory can be set in a console application configuration if the user
            wants to display another source path then the one used for compilation.
            </summary>
            <exception cref="T:System.Exception">A value being set is not a valid path.</exception>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.EnableStaticInclusions">
            <summary>
            Whether static inclusions are enabled.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.ShortOpenTags">
            <summary>
            Gets whether <see cref="F:PHP.Core.LanguageFeatures.ShortOpenTags"/> feature is enabled.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.AspTags">
            <summary>
            Gets whether <see cref="F:PHP.Core.LanguageFeatures.AspTags"/> feature is enabled.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.V5Keywords">
            <summary>
            Gets whether <see cref="F:PHP.Core.LanguageFeatures.V5Keywords"/> feature is enabled.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.UnicodeSemantics">
            <summary>
            Gets whether <see cref="F:PHP.Core.LanguageFeatures.UnicodeSemantics"/> feature is enabled.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.TypeKeywords">
            <summary>
            Gets whether <see cref="F:PHP.Core.LanguageFeatures.TypeKeywords"/> feature is enabled.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.ClrSemantics">
            <summary>
            Gets whether <see cref="F:PHP.Core.LanguageFeatures.ClrSemantics"/> features are enabled.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.LanguageFeatures">
            <summary>
            Enabled PHP language features.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.LanguageFeaturesSet">
            <summary>
            Whether the <see cref="P:PHP.Core.ApplicationConfiguration.CompilerSection.LanguageFeatures"/> has been set after initialized to the default value.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.DisabledWarnings">
            <summary>
            Compiler warnings which should not be reported.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.DisabledWarningNumbers">
            <summary>
            Numbers of disabled warnings.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.CompilerSection.TreatWarningsAsErrors">
            <summary>
            Whether to treat warnings as errors, so code containing warnings won't be allowed to be compiled or executed.
            </summary>
        </member>
        <member name="T:PHP.Core.ApplicationConfiguration.GlobalizationSection">
            <summary>
            Configuration related to culture.
            </summary>
            <summary>
            Configuration related to culture.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationConfiguration.GlobalizationSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML node.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.GlobalizationSection.PageEncoding">
            <summary>
            Source code encoding.
            </summary>
        </member>
        <member name="T:PHP.Core.ApplicationConfiguration.PathsSection">
            <summary>
            Paths to Phalanger directories and tools.
            </summary>
        </member>
        <member name="M:PHP.Core.ApplicationConfiguration.PathsSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads paths from XML configuration node.
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.PathsSection.DynamicWrappers">
            <summary>
            Directory path where dynamic wrappers are stored. 
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.PathsSection.Libraries">
            <summary>
            Directory path where managed libraries are stored. 
            </summary>
        </member>
        <member name="P:PHP.Core.ApplicationConfiguration.PathsSection.LastConfigurationModificationTimeUtc">
            <summary>
            Last determined modification time. Used to invalidate assemblies compiled before this time.
            </summary>
        </member>
        <member name="T:PHP.Core.GlobalConfiguration">
            <summary>
            The configuration containing script independent configuration options.
            Options are directory dependent - each application subdirectory can define settings applicable for its content.
            </summary>
            <summary>
            The configuration containing script independent configuration options.
            Options are directory dependent - each application subdirectory can define settings applicable for its content.
            </summary>
        </member>
        <member name="M:PHP.Core.GlobalConfiguration.GetLibraryConfig(PHP.Core.PhpLibraryDescriptor)">
            <summary>
            Gets a configuration associated with the specified library.
            </summary>
            <param name="descriptor">The library descriptor.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="descriptor"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.InvalidOperationException">Configuration has not been initialized yet.</exception>
        </member>
        <member name="M:PHP.Core.GlobalConfiguration.#ctor">
            <summary>
            Creates an instance of <see cref="T:PHP.Core.GlobalConfiguration"/> initialized by default values.
            </summary>		
        </member>
        <member name="M:PHP.Core.GlobalConfiguration.#ctor(PHP.Core.GlobalConfiguration)">
            <summary>
            Creates an instance of <see cref="T:PHP.Core.GlobalConfiguration"/> initialized by values 
            copied from the specified instance.
            </summary>
            <param name="source">The configuration from which to copy values.</param>
        </member>
        <member name="M:PHP.Core.GlobalConfiguration.DeepCopy">
            <summary>
            Creates a copy of the configuration.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="M:PHP.Core.GlobalConfiguration.Validate">
            <summary>
            Checks whether the configuration data are valid and complete and fills missing information 
            by defaults or throws an exception.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Configuration is invalid or incomplete.</exception>
        </member>
        <member name="P:PHP.Core.GlobalConfiguration.LastConfigurationModifiedTimeUtc">
            <summary>
            .config file (set of .config files) latest modification time.
            If it cannot be determined, it is equal to <see cref="F:System.DateTime.MinValue"/>.
            </summary>
        </member>
        <member name="T:PHP.Core.GlobalConfiguration.GlobalVariablesSection">
            <summary>
            Global variables handling options.
            </summary>
            <summary>
            Global variables handling options.
            </summary>
        </member>
        <member name="M:PHP.Core.GlobalConfiguration.GlobalVariablesSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML node.
            </summary>
        </member>
        <member name="F:PHP.Core.GlobalConfiguration.GlobalVariablesSection.RegisterGlobals">
            <summary>
            Whether or not to register the EGPCS variables as global variables.
            </summary>
        </member>
        <member name="F:PHP.Core.GlobalConfiguration.GlobalVariablesSection.RegisterArgcArgv">
            <summary>
            Whether or not to register the "argc" and "argv" variables as global variables.
            </summary>
        </member>
        <member name="F:PHP.Core.GlobalConfiguration.GlobalVariablesSection.RegisterLongArrays">
            <summary>
            Whether or not to register the "HTTP_*_VARS" arrays as global variables.
            </summary>
        </member>
        <member name="F:PHP.Core.GlobalConfiguration.GlobalVariablesSection.QuoteGpcVariables">
            <summary>
            Whether to quote GET/POST/Cookie variables' values when they are added to respective global arrays.
            </summary>
        </member>
        <member name="T:PHP.Core.GlobalConfiguration.PostedFilesSection">
            <summary>
            Options influencing posting files via HTTP.
            </summary>
        </member>
        <member name="F:PHP.Core.GlobalConfiguration.PostedFilesSection.Accept">
            <summary>
            Whether to accept HTTP posted files.
            </summary>
        </member>
        <member name="F:PHP.Core.GlobalConfiguration.PostedFilesSection.TempPath">
            <summary>
            Path where to store uploaded files to make them accessible to scripts.
            Can be a <B>null</B> reference or empty string which means that default path is used.
            </summary>
        </member>
        <member name="M:PHP.Core.GlobalConfiguration.PostedFilesSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML node.
            </summary>
        </member>
        <member name="T:PHP.Core.GlobalConfiguration.SafeModeSection">
            <summary>
            Configuration related to the safe mode.
            </summary>
        </member>
        <member name="F:PHP.Core.GlobalConfiguration.SafeModeSection.Enabled">
            <summary>
            Whether safe mode is enabled.
            </summary>
        </member>
        <member name="F:PHP.Core.GlobalConfiguration.SafeModeSection.ExecutionDirectory">
            <summary>
            Directory where programs to be executed are searched in.
            Applies only if <see cref="F:PHP.Core.GlobalConfiguration.SafeModeSection.Enabled"/> is <B>true</B>.
            </summary>
        </member>
        <member name="F:PHP.Core.GlobalConfiguration.SafeModeSection.AllowedPathPrefixes">
            <summary>
            List of directory path prefixes where file system functions can open files.
            A <B>null</B> reference mean all paths are allowed.
            Not affected by value of <see cref="F:PHP.Core.GlobalConfiguration.SafeModeSection.Enabled"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.GlobalConfiguration.SafeModeSection.IsPathAllowed(System.String)">
            <summary>
            Checks whether a path is allowed to be used by the script.
            </summary>
            <param name="path">The non-empty path to be checked.</param>
            <returns>
            <B>true</B> if the path targets a subdirectory of any directory specified in the 
            <see cref="F:PHP.Core.GlobalConfiguration.SafeModeSection.AllowedPathPrefixes"/> or the list is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> si a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.GlobalConfiguration.SafeModeSection.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML node.
            </summary>
        </member>
        <member name="F:PHP.Core.LibrariesConfigurationList.addedLibraries">
            <summary>
            Libraries to be loaded lazily at the and of parsing of all the configuration sections.
            Checks for duplicities, loads libraries using the same configuration after processing all sub-configurations.
            </summary>
        </member>
        <member name="F:PHP.Core.LibrariesConfigurationList.sections">
            <summary>
            List of class library sections to be parsed when class libraries are loaded.
            </summary>
        </member>
        <member name="M:PHP.Core.LibrariesConfigurationList.AddSection(System.Xml.XmlNode)">
            <summary>
            Add class library configuration section to the list to be processed once libraries are loaded.
            </summary>
            <param name="sectionNode"></param>
        </member>
        <member name="M:PHP.Core.LibrariesConfigurationList.AddLibrary(System.String,System.Uri,System.String,System.Xml.XmlNode)">
            <summary>
            Adds the library to the list of libraries to be loaded lazily.
            </summary>
        </member>
        <member name="M:PHP.Core.LibrariesConfigurationList.RemoveLibrary(System.String,System.Uri)">
            <summary>
            Remove given library from the list of libraries that will be loaded.
            </summary>
        </member>
        <member name="M:PHP.Core.LibrariesConfigurationList.ClearLibraries">
            <summary>
            Clear the list of libraries that will be loaded.
            </summary>
        </member>
        <member name="M:PHP.Core.LibrariesConfigurationList.LoadLibrariesNoLock(System.Func{System.String,System.Uri,System.String,System.Xml.XmlNode,System.Boolean},System.Action{System.Xml.XmlNode})">
            <summary>
            Load libraries specified by <see cref="M:PHP.Core.LibrariesConfigurationList.AddLibrary(System.String,System.Uri,System.String,System.Xml.XmlNode)"/> lazily. Also parses postponed sections.
            </summary>
        </member>
        <member name="T:PHP.Core.LibrariesConfigurationList.AddLibraryInfo">
            <summary>
            Information about library being load to be loaded lazily.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpConfigurationContext">
            <summary>
            Configuration context used when loading configuration from XML files.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpConfigurationContext.sections">
            <summary>
            Collection of defined sections. Sections can be defined only on the application level or above.
            Thus it is not necessary to make copies of this table.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpConfigurationContext.sealedSections">
            <summary>
            Collection of final sections. Final sections can be defined only on the web application directory level or above.
            Thus it is not necessary to make copies of this table. 
            </summary>
        </member>
        <member name="M:PHP.Core.PhpConfigurationContext.#ctor(PHP.Core.ApplicationContext,System.String)">
            <summary>
            Creates an empty configuration context used as a root context.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpConfigurationContext.#ctor(PHP.Core.ApplicationContext,System.String,PHP.Core.PhpConfigurationContext)">
            <summary>
            Makes a copy (child) of this instance (parent) deeply copying the confgiuration fields.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpConfigurationContext.LoadLibrariesNoLock">
            <summary>
            Actually loads libraries specified in <see cref="F:PHP.Core.PhpConfigurationContext.librariesList"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpConfigurationContext.LoadLibrary(System.String,System.Uri,System.String,System.Xml.XmlNode)">
            <summary>
            Loads a library and adds a new section to the list of sections if available.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpConfigurationContext.ParseSection(System.Xml.XmlNode)">
            <summary>
            Processes library configuration section.
            </summary>
            <param name="node">Configuration node of the section.</param>
        </member>
        <member name="M:PHP.Core.PhpConfigurationContext.ValidateNoLock">
            <summary>
            Finishes and validates the configuration. 
            Creates an array of library configurations and stores it to local and global config records.
            The first validated configuration is the global one, local ones follows in the order in which 
            the respective libraries has been loaded.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Configuration is invalid.</exception>
        </member>
        <member name="M:PHP.Core.PhpConfigurationContext.SealOption(System.String)">
            <summary>
            Makes a specified option sealed (which prevents it to be modified in lower-level Web.config files).
            </summary>
            <param name="name">A name of the option.</param>
        </member>
        <member name="M:PHP.Core.PhpConfigurationContext.IsOptionSealed(System.String)">
            <summary>
            Checks whether a specified option ha been sealed.
            </summary>
            <param name="name">A name of the option.</param>
            <returns>Whether it has been sealed.</returns>
        </member>
        <member name="M:PHP.Core.PhpConfigurationContext.GetSealingLocation(System.String)">
            <summary>
            Gets a virtual path to configuration file where a specified option has been sealed.
            </summary>
            <param name="name">A name of the option.</param>
            <returns>A virtual path to the Web.config file, "Machine.config" string, or a <B>null</B> reference if 
            the option hasn't been sealed yet.</returns>
        </member>
        <member name="M:PHP.Core.PhpConfigurationContext.IsSubApplicationConfig">
            <summary>
            Checks whether the context is associated with Web.config file located lower in hierarchy
            than one on the application level (in the web application virtual directory).
            </summary>
            <returns>Whether the configuration is specific to an application subdirectory.</returns>
        </member>
        <member name="M:PHP.Core.PhpConfigurationContext.IsMachineConfig">
            <summary>
            Checks whether the context is associated with the Machine.config file.
            </summary>
            <returns>Whether the configuration is machine wide.</returns>
        </member>
        <member name="M:PHP.Core.PhpConfigurationContext.EnsureApplicationConfig(System.Xml.XmlNode)">
            <summary>
            Ensures that the configuration is stated on at least application level since it cannot be 
            used in sub-application one.
            </summary>
            <param name="node">The node.</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">We are on sub-application level.</exception>
        </member>
        <member name="M:PHP.Core.PhpConfigurationContext.EnsureMachineConfig(System.Xml.XmlNode)">
            <summary>
            Ensures that the configuration is stated on the machine level. 
            </summary>
            <param name="node">The node.</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">We are not on machine level.</exception>
        </member>
        <member name="P:PHP.Core.PhpConfigurationContext.VirtualPath">
            <summary>
            Path to a directory containing the <c>Web.config</c> file or a <B>null</B> reference 
            meaning <c>Machine.config</c>.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpConfigurationContext.Local">
            <summary>
            Local configuration being currently loaded.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpConfigurationContext.Global">
            <summary>
            Global configuration being currently loaded.
            </summary>
        </member>
        <member name="T:PHP.Core.LibrarySection">
            <summary>
            Represents a configuration section defined in a config file. 
            </summary>
            <remarks>
            The section holds the descriptor of the library and it's configuration context.
            The in-process configuration records are contained in the context.
            </remarks>
        </member>
        <member name="F:PHP.Core.LibrarySection.Descriptor">
            <summary>
            A descriptor of the library owning the section.
            </summary>
        </member>
        <member name="F:PHP.Core.LibrarySection.UserContext">
            <summary>
            User configuration context containing values stored in the section.
            </summary>
        </member>
        <member name="T:PHP.Core.ConfigurationSectionHandler">
            <summary>
            The configuration handler used by configuration system to parse 
            the phpNet section of Machine.config and Web.config files.
            </summary>
        </member>
        <member name="F:PHP.Core.ConfigurationSectionHandler.NodePaths">
            <summary>
            Names of the top-level nodes.
            </summary>
        </member>
        <member name="M:PHP.Core.ConfigurationSectionHandler.GetConfig(PHP.Core.ApplicationContext,System.String)">
            <summary>
            Gets a configuration context from the ASP.NET cache.
            </summary>
        </member>
        <member name="M:PHP.Core.ConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            GetUserEntryPoint is called by .NET config system when a configuration is needed to be extracted from a XML config file.
            </summary>
            <param name="parent">
            The configuration settings in the parent configuration section. 
            Contains config data from already parsed sections.
            </param>
            <param name="configContext">
            An <see cref="T:System.Web.Configuration.HttpConfigurationContext"/> when called from the ASP.NET config. Otherwise, a null reference. 
            </param>
            <param name="section">Provides direct access to the XML contents of the configuration section. </param>
            <returns>Returns LocalConfiguration object with fields set.</returns>
        </member>
        <member name="T:PHP.Core.Configuration">
            <summary>
            Provides access to the current configuration records.
            </summary>
        </member>
        <member name="M:PHP.Core.Configuration.LoadDefault">
            <summary>
            Loads configuration using default <see cref="T:PHP.Core.ApplicationContext"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Configuration.Load(PHP.Core.ApplicationContext)">
            <summary>
            Loads configuration and returns configuration record.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Configuration is invalid or incomplete.</exception>
        </member>
        <member name="M:PHP.Core.Configuration.Reload(PHP.Core.ApplicationContext,System.Boolean)">
            <summary>
            Drops the configuration associated with the current thread and loads a new one.
            Doesn't reload XML data from file (cached configuration records are reused).
            The libraries listed in the <c>classLibrary</c> section are therefore not loaded into the context.
            </summary>
            <remarks>
            The current thread may have been reused to serve a different request with different configuration context.
            Therefore, the configuration associated with the thread needs to be dropped and a new one to be loaded.
            </remarks>
        </member>
        <member name="M:PHP.Core.Configuration.GetPathsNoLoad">
            <summary>
            We need the paths during configuration load (e.g. in dynamic wrapper generator).
            </summary>
        </member>
        <member name="F:PHP.Core.Configuration.IsBuildTime">
            <summary>
            Whether the application being run is a command line compiler.
            Influences a scope of configuration options during their load.
            </summary>
        </member>
        <member name="M:PHP.Core.Configuration.IsValidInCurrentScope(System.Xml.XmlNode)">
            <summary>
            Returns whether specified node's scope corresponds to the scope defined by <see cref="F:PHP.Core.Configuration.IsBuildTime"/>.
            </summary>
            <param name="node">The node.</param>
            <returns>
            <B>True</B>, if scope is "Any" or is missing, 
            <see cref="F:PHP.Core.Configuration.IsBuildTime"/> is <B>true</B> and scope is "Build", or
            <see cref="F:PHP.Core.Configuration.IsBuildTime"/> is <B>false</B> and scope is "Runtime". 
            </returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">If scope has invalid value.</exception>
        </member>
        <member name="P:PHP.Core.Configuration.Application">
            <summary>
            Gets application configuration record.
            The record is shared among all requests (threads) of the application.
            </summary>
        </member>
        <member name="P:PHP.Core.Configuration.Global">
            <summary>
            Global (script independent) configuration.
            Different requsts (threads) may have different global configurations as it depends on the 
            directory the request is targetting. Requests to the same directory share the same record.
            </summary>
        </member>
        <member name="P:PHP.Core.Configuration.DefaultLocal">
            <summary>
            Default values for local (script dependent) configuration.
            Different requsts (threads) may have different global configurations as it depends on the 
            directory the request is targetting. Requests to the same directory share the same record.
            </summary>
        </member>
        <member name="P:PHP.Core.Configuration.IsLoaded">
            <summary>
            Gets whether the current thread has loaded entire relevant configuration.
            </summary>
        </member>
        <member name="P:PHP.Core.Configuration.IsBeingLoaded">
            <summary>
            Get whether we are loading configuration right not, but it is not loaded yet.
            </summary>
        </member>
        <member name="P:PHP.Core.Configuration.Local">
            <summary>
            Gets script local configuration record, which is unique per request.
            </summary>
        </member>
        <member name="P:PHP.Core.Configuration.LastConfigurationModifiedTimeUtc">
            <summary>
            Latest configuration modification time.
            If it cannot be determined, it is equal to <see cref="F:System.DateTime.MinValue"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.LibraryConfigurationsSection._configurations">
            <summary>
            A list of library configurations. Can contain <B>null</B> references. Initialized after configuration is read.
            </summary>
        </member>
        <member name="M:PHP.Core.LibraryConfigurationsSection.GetConfig(PHP.Core.PhpLibraryDescriptor)">
            <summary>
            Gets a configuration record for a specified library.
            </summary>
            <param name="descriptor">The descriptor of the library.</param>
            <returns>The configuration record or <B>null</B> if there is no record for the library.</returns>
            <exception cref="T:System.InvalidOperationException">Configuration not loaded.</exception>
        </member>
        <member name="M:PHP.Core.LibraryConfigurationsSection.DeepCopy">
            <summary>
            Makes a deep copy of all library configurations.
            </summary>
        </member>
        <member name="T:PHP.Core.IPhpConvertible">
            <summary>
            Interface provides methods for conversion between PHP.NET types.
            </summary>
        </member>
        <member name="M:PHP.Core.IPhpConvertible.GetTypeCode">
            <summary>Returns code of type which implements this interface.</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.IPhpConvertible.ToDouble">
            <summary>Converts instance to its <see cref="T:System.Double"/> representation according to PHP conversion algorithm.</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.IPhpConvertible.ToInteger">
            <summary>Converts instance to its <see cref="T:System.Int32"/> representation according to PHP conversion algorithm.</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.IPhpConvertible.ToLongInteger">
            <summary>
			Converts instance to its <see cref="T:System.Int64"/> representation according to PHP conversion algorithm.
		</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.IPhpConvertible.ToBoolean">
            <summary>Converts instance to its <see cref="T:System.Boolean"/> representation according to PHP conversion algorithm.</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.IPhpConvertible.ToPhpBytes">
            <summary>Converts instance to its binary representation (<see cref="T:PHP.Core.PhpBytes"/>).</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.IPhpConvertible.ToNumber(System.Int32@,System.Int64@,System.Double@)">
            <summary>Converts instance to a number of type <see cref="T:System.Double"/>, <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/>.</summary><param name="intValue">
			The integer value. Valid iff <see cref="F:PHP.Core.Convert.NumberInfo.Integer"/> is returned.
		</param><param name="longValue">
			The long integer value. Valid iff <see cref="F:PHP.Core.Convert.NumberInfo.LongInteger"/> is returned.
		</param><param name="doubleValue">
			The double value. Valid iff <see cref="F:PHP.Core.Convert.NumberInfo.Double"/> is returned.
		</param><returns>Type of the conversion result.</returns>
        </member>
        <member name="M:PHP.Core.IPhpConvertible.ToString">
            <summary>
            Converts instance to its string representation according to PHP conversion algorithm.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.IPhpConvertible.ToString(System.Boolean,System.Boolean@)">
            <summary>
            Converts instance to its string representation according to PHP conversion algorithm.
            </summary>
            <param name="success">Indicates whether conversion was successful.</param>
            <param name="throwOnError">Throw out 'Notice' when conversion wasn't successful?</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:PHP.Core.Convert">
            <summary>
            Implements PHP conversions of arbitrary PHP.NET type to Framework types used as PHP.NET types.
            These are int, double, boolean and string.
            </summary>
        </member>
        <member name="M:PHP.Core.Convert.ClrLiteralToPhpLiteral(System.Object)">
            <summary>
            Converts the CLR literal object into PHP compatible representation.
            </summary>
            <param name="value">The literal to be converted.</param>
            <returns>PHP (Phalanger) representation of the CLR literal.</returns>
        </member>
        <member name="M:PHP.Core.Convert.ClrEnumToPhpLiteral(System.Object)">
            <summary>
            Converts System.Enum to proper PHP (Phalanger) literal object.
            </summary>
            <param name="value">Enum to be converted. Cannot be null, must be Enum.</param>
            <returns>Int32 or Int64 representation of the value.</returns>
            <remarks>The Enum is passed as object for easier manipulation inside the method.</remarks>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToChar(System.Object)">
            <summary>
            Converts value of an arbitrary PHP/CLR type into Unicode character.
            </summary>
            <param name="obj">The value to convert.</param>
            <returns>The converted value.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="obj"/> doesn't consist of a single character. (Warning)</exception>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToString(System.Object)">
            <summary>
            Converts value of an arbitrary PHP/CLR type into string value using the same 
            conversion algorithms as PHP.
            </summary>
            <param name="obj">The value to convert.</param>
            <returns>The converted value.</returns>
            <remarks>If <paramref name="obj"/> is null then the <see cref="F:System.String.Empty"/> is returned. This method cannot return null.</remarks>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToPhpBytes(System.Object)">
            <summary>
            Converts value of an arbitrary PHP/CLR type into <see cref="T:PHP.Core.PhpBytes"/> value using the same 
            conversion algorithms as PHP when converting to string.
            </summary>
            <param name="obj">The value to convert.</param>
            <returns>The converted value.</returns>
            <remarks>If <paramref name="obj"/> is a <B>null</B> then an empty bytes are returned.</remarks>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToBoolean(System.Object)">
            <summary>
            Converts value of an arbitrary PHP/CLR type into boolean value using the same 
            conversion algorithms as PHP.
            </summary>
            <param name="obj">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToInteger(System.Object)">
            <summary>
            Converts value of an arbitrary PHP/CLR type into integer value using the same 
            conversion algorithms as PHP.
            </summary>
            <param name="obj">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToLongInteger(System.Object)">
            <summary>
            Converts value of an arbitrary PHP/CLR type into long integer value using the same 
            conversion algorithms as PHP.
            </summary>
            <param name="obj">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToDouble(System.Object)">
            <summary>
            Converts value of an arbitrary PHP.NET type into double precision floating-point
            value using the same conversion algorithms as PHP.
            </summary>
            <param name="obj">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToPhpArray(System.Object)">
            <summary>
            Converts value of an arbitrary PHP.NET type into <see cref="T:PHP.Core.PhpArray"/> using the same conversion
            algorithms as PHP.
            </summary>
            <param name="var">The value to convert.</param>
            <returns>The converted value. Doesn't do a deep copy.</returns>
            <remarks>Variables are not implicitly converted to arrays.</remarks>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToDObject(System.Object,PHP.Core.ScriptContext)">
            <summary>
            Converts value of an arbitrary PHP.NET type into <see cref="T:PHP.Core.Reflection.DObject"/> using the same conversion
            algorithms as PHP.
            </summary>
            <param name="var">The value to convert.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>. Doesn't do a deep copy.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToCallback(System.Object)">
            <summary>
            Converts value of an arbitrary PHP.NET type into <see cref="T:PHP.Core.PhpCallback"/>. 
            </summary>
            <param name="var">The value to convert.</param>
            <returns>
            The converted value or <B>null</B> if <paramref name="var"/> is empty (<see cref="M:PHP.Core.PhpVariable.IsEmpty(System.Object)"/>)
            or could not be converted.
            </returns>
            <exception cref="T:PHP.Core.PhpException">The variable is non-empty but does not have a valid structure to be used
            as a callback (Warning).</exception>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToCallback(System.Object,System.Boolean)">
            <summary>
            Converts value of an arbitrary PHP.NET type into <see cref="T:PHP.Core.PhpCallback"/>. 
            </summary>
            <param name="var">The value to convert (real object must be wrapped).</param>
            <param name="quiet">If <B>true</B>, no warning should be thrown if <paramref name="var"/> does not have
            a valid structure.</param>
            <returns>
            Either a valid callback, an invalid callback singleton <see cref="F:PHP.Core.PhpCallback.Invalid"/>,
            or <B>null</B> if <paramref name="var"/> is empty (<see cref="M:PHP.Core.PhpVariable.IsEmpty(System.Object)"/>).
            </returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="quiet"/> is <B>false</B> and the variable is non-empty but
            does not have a valid structure to be used as a callback (Warning).</exception>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToTypeDesc(System.Object,PHP.Core.ResolveTypeFlags,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,PHP.Core.NamingContext,System.Object[])">
            <summary>
            Converts value of an arbitrary PHP.NET type to a <see cref="T:PHP.Core.Reflection.DTypeDesc"/>.
            </summary>
            <param name="var">The value to convert.</param>
            <param name="resolveFlags">
            Flags. Only <see cref="F:PHP.Core.ResolveTypeFlags.UseAutoload"/>, 
            <see cref="F:PHP.Core.ResolveTypeFlags.SkipGenericNameParsing"/> and
            <see cref="F:PHP.Core.ResolveTypeFlags.ThrowErrors"/> are valid.
            </param>
            <param name="caller">Current class context.</param>
            <param name="context">Current script context.</param>
            <param name="nameContext">Current naming context.</param>
            <param name="genericArgs">Array of function type params. Stored in pairs in a form of [(string)name1,(DTypeDescs)type1, .., ..]. Can be null.</param>
            <returns>The type desc or <B>null</B> on error.</returns>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="var"/> is not a string or empty string or not <see cref="T:PHP.Core.Reflection.DObject"/>. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The class with the given <paramref name="var"/> was not found
            (only if <paramref name="resolveFlags"/> has <see cref="F:PHP.Core.ResolveTypeFlags.ThrowErrors"/>). (Error)</exception>
        </member>
        <member name="F:PHP.Core.Convert.conversionRoutines">
            <summary>
            Stores instances of <see cref="T:PHP.Core.Convert.TryObjectToTypeDelegate`1"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Convert.TryObjectToDateTime(System.Object,System.Boolean@)">
            <summary>
            Tries to convert to <see cref="T:System.DateTime"/>.
            Conversion is successful if the object is 
            <list type="bullet">
            	<term>a number that fits the long integer; the value is treated as number of ticks</term> 
              <term>a stringified form of such number (e.g. "1023"); the value is treated as number of ticks</term>
              <term>a string encoding a valid date-time format; the value is parsed by <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)"/></term>
            </list>
            </summary>
            <param name="obj"></param>
            <param name="success"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Convert.TryObjectToDBNull(System.Object,System.Boolean@)">
            <summary>
            Converts to <see cref="T:System.DBNull"/>. 
            The conversion is always successful and results to the <see cref="F:System.DBNull.Value"/> singleton.
            </summary>
        </member>
        <member name="M:PHP.Core.Convert.TryObjectToType``1(System.Object,System.Boolean@)">
            <summary>
            Used when the type is unknown at compiler-time, e.g. it is a generic parameter.
            </summary>
        </member>
        <member name="M:PHP.Core.Convert.IsNumber(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int64@,System.Double@)">
            <summary>
            Converts a string to integer value and double value and decides whether it represents a number as a whole.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="limit">Maximum zero-based index within given <paramref name="s"/> to be proccessed.
            Must be greater than or equal <c>0</c> and less than or equal to string length.</param>
            <param name="from">
            A position where to start parsing.
            </param>
            <param name="l">
            Returns a position where long-integer-parsing ended 
            (the first character not included in the resulting double value).
            </param>
            <param name="d">
            Returns a position where double-parsing ended
            (the first character not included in the resulting double value).
            </param>
            <param name="intValue">Result of the conversion to integer.</param>
            <param name="longValue">Result of the conversion to long integer.</param>
            <param name="doubleValue">Result of the conversion to double.</param>
            <returns>
            Information about parsed number including its type, which is the narrowest one that fits.
            E.g. 
            IsNumber("10 xyz", ...) includes NumberInfo.Integer,
            IsNumber("10000000000000 xyz", ...) includes NumberInfo.LongInteger,
            IsNumber("10.9 xyz", ...) includes NumberInfo.Double,
            IsNumber("10.9", ...) includes NumberInfo.IsNumber and NumberInfo.Double.
            
            The return value always includes one of NumberInfo.Integer, NumberInfo.LongInteger, NumberInfo.Double
            and never NumberInfo.Unconvertible (as each string is convertible to a number).
            </returns>
        </member>
        <member name="M:PHP.Core.Convert.ParseDouble(System.String,System.Boolean,System.Double@)">
            <summary>
            Parses given string as a <see cref="T:System.Double"/>, using invariant culture and proper number styles.
            </summary>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToNumber(System.Object,System.Int32@,System.Int64@,System.Double@)">
            <summary>
            Converts value of an arbitrary PHP/CLR type into integer value, long integer value or double value using 
            conversion algorithms in a manner of PHP. All returned values are valid.
            </summary>
            <param name="obj">The value to convert.</param>
            <param name="doubleValue">The double value.</param>
            <param name="longValue">The long integer value.</param>
            <param name="intValue">The integer value.param></param>
            <returns>Conversion info.</returns>
        </member>
        <member name="M:PHP.Core.Convert.StringToNumber(System.String,System.Int32@,System.Int64@,System.Double@)">
            <summary>
            Converts string into integer, long integer and double value using conversion algorithm in a manner of PHP. 
            </summary>
            <param name="str">The string to convert.</param>
            <param name="intValue">The result of conversion to integer.</param>
            <param name="longValue">The result of conversion to long integer.</param>
            <param name="doubleValue">The result of conversion to double.</param>
            <returns><see cref="T:PHP.Core.Convert.NumberInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.Convert.StringToInteger(System.String)">
            <summary>
            Converts a string to integer using conversion algorithm in a manner of PHP.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The result of conversion.</returns>
        </member>
        <member name="M:PHP.Core.Convert.StringToLongInteger(System.String)">
            <summary>
            Converts a string to long integer using conversion algorithm in a manner of PHP.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The result of conversion.</returns>
        </member>
        <member name="M:PHP.Core.Convert.StringToDouble(System.String)">
            <summary>
            Converts a string to double using conversion algorithm in a manner of PHP.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The result of conversion.</returns>
        </member>
        <member name="M:PHP.Core.Convert.SubstringToLongInteger(System.String,System.Int32,System.Int32@)">
            <summary>
            Converts a part of a string starting on a specified position to a long integer.
            </summary>
            <param name="str">The string to be parsed.</param>
            <param name="length">Maximal length of the substring to parse.</param>
            <param name="position">
            The position where to start. Points to the first character after the substring storing the integer
            when returned.
            </param>
            <returns>The integer stored in the <paramref name="str"/>.</returns>
        </member>
        <member name="M:PHP.Core.Convert.SubstringToDouble(System.String,System.Int32,System.Int32@)">
            <summary>
            Converts a part of a string starting on a specified position to a double.
            </summary>
            <param name="str">The string to be parsed. Cannot be <c>null</c>.</param>
            <param name="length">Maximal length of the substring to parse.</param>
            <param name="position">
            The position where to start. Points to the first character after the substring storing the double
            when returned.
            </param>
            <returns>The double stored in the <paramref name="str"/>.</returns>
        </member>
        <member name="M:PHP.Core.Convert.SubstringToLongStrict(System.String,System.Int32,System.Int32,System.Int64,System.Int32@)">
            <summary>
            Converts a substring to almost long integer in a specified base.
            Stops parsing if result overflows unsigned integer.
            </summary>
        </member>
        <member name="M:PHP.Core.Convert.DoubleToString(System.Double)">
            <summary>
            Converts double value to a string.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>A string representation of the <paramref name="value"/>.</returns>
        </member>
        <member name="M:PHP.Core.Convert.StringToChar(System.String)">
            <summary>
            Converts string to a single character.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The first character of the string.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="str"/> doesn't consist of a single character. (Warning)</exception>
        </member>
        <member name="M:PHP.Core.Convert.StringToBoolean(System.String)">
            <summary>
            Converts string to boolean.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>Whether <paramref name="str"/> is empty or equal to "0".</returns>
            <remarks>Asserts that <paramref name="str"/> is not null.</remarks>
        </member>
        <member name="M:PHP.Core.Convert.ObjectToArrayKey(System.Object,PHP.Core.IntStringKey@)">
            <summary>
            Converts an object of arbitrary PHP.NET type to string or integer array key.
            </summary>
            <param name="obj">The object ot be converted.</param>
            <param name="key">The result. Its validity depends on the value returned.</param>
            <returns>Whether <c>obj</c> is a valid key.</returns>
            <remarks>
      <para>
        <paramref name="obj"/> is converted to <see cref="T:System.String"/> and <see cref="T:System.Int32"/>
        returned in <paramref name="key"/>.
      </para>
      <list type="table">
        <listheader>
          <term>Actual type of <paramref name="obj"/></term>
          <term>Action</term>
        </listheader>
        <item>
          <term><see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/></term>
          <description>
            Values {-?[1-9][0-9]*|0} are converted to their numeric equivalents (e.g. "2" is converted to 2)
            and returned. The others are returned unchanged.
          </description>
        </item>
        <item>
          <term>
            <see cref="T:System.Boolean"/>
          </term>
          <description>
            The <B>true</B> is converted to integer value 1, the <B>false</B> to 0.
          </description>
        </item>
        <item>
          <term>
            <see cref="T:System.Double"/>
          </term>
          <description>
            The value is converted to <see cref="T:System.Int32"/> with the overflow unchecked.
          </description>
        </item>
        <item>
          <term>
            <B>null</B>
          </term>
          <description>
            The <see cref="F:System.String.Empty"/> is returned.
          </description>
        </item>
        <item>
          <term>otherwise</term>
          <description>
            The key is considered to be invalid.
          </description>
        </item>
      </list>
    </remarks>
        </member>
        <member name="M:PHP.Core.Convert.StringToArrayKey(System.String)">
            <summary>
            Converts a string to an appropriate integer.
            </summary>
            <param name="str">The string in "{0 | -?[1-9][0-9]*}" format.</param>
            <returns>The array key (integer or string).</returns>
        </member>
        <member name="M:PHP.Core.Convert.StringByteSizeToInteger(System.String)">
            <summary>
            Converts a size specified as a string to integer. 
            </summary>
            <param name="str">The size.</param>
            <returns>The number of bytes.</returns>
            <remarks>
            Size may contain either a number of bytes or number of kilo/mega/giga bytes with suffix "K"/"M"/"G".
            The first non-white-space character from the end of the string is taken as the suffix.
            All numbers may be "PHP numbers", i.e. only a prefix containing an integer is taken.
            Suffixes are case insensitive.
            If integer overflows or underflows the maximal or minimal integer value is returned, respectively.
            </remarks>
        </member>
        <member name="M:PHP.Core.Convert.PhpArrayToDObject(PHP.Core.PhpArray,PHP.Core.ScriptContext)">
            <summary>
            Convert elements of given <see cref="T:PHP.Core.PhpArray"/> into a new instance of <see cref="T:PHP.Library.stdClass"/>.
            </summary>
            <param name="array"><see cref="T:PHP.Core.PhpArray"/> to be read.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>New instance of <see cref="T:PHP.Core.Reflection.DObject"/> containing fields from <paramref name="array"/>.</returns>
        </member>
        <member name="M:PHP.Core.Convert.Quote(System.String,PHP.Core.ScriptContext)">
            <summary>
            Quotes a string according to the current configuration.
            </summary>
            <param name="str">String to quote.</param>
            <param name="context">Script context.</param>
            <returns>Quoted or unchanged string.</returns>
        </member>
        <member name="M:PHP.Core.Convert.Quote(System.Object,PHP.Core.ScriptContext)">
            <summary>
            Quotes arbitrary data according to the current configuration converting them to a string.
            </summary>
            <param name="data">Data to quote.</param>
            <param name="context">Script context.</param>
            <returns>Quoted string or unchanged data.</returns>
        </member>
        <member name="M:PHP.Core.Convert.Unquote(System.String,PHP.Core.ScriptContext)">
            <summary>
            Unquotes a string according to the current configuration.
            </summary>
            <param name="str">String to quote.</param>
            <param name="context">Script context.</param>
            <returns>Unquoted or unchanged string.</returns>
        </member>
        <member name="M:PHP.Core.Convert.Unquote(System.Object,PHP.Core.ScriptContext)">
            <summary>
            Unquotes arbitrary data according to the current configuration converting them to a string.
            </summary>
            <param name="data">String to quote.</param>
            <param name="context">Script context.</param>
            <returns>Unquoted string or unchanged data.</returns>
        </member>
        <member name="F:PHP.Core.Convert.NumberInfo.IsPhpArray">
            <summary>
            The original object was PHP array. This has an effect on most PHP arithmetic operators.
            </summary>
        </member>
        <member name="T:PHP.Core.TypesProvider">
            <summary>
            Provides access to class and interface declarators and 
            remembers which of them were provided and so the user depends on them.
            </summary>
        </member>
        <member name="F:PHP.Core.TypesProvider.context">
            <summary>
            A current script context in which the declarations are provided.
            </summary>
        </member>
        <member name="F:PHP.Core.TypesProvider.caller">
            <summary>
            A current type context in which the declarations are provided.
            </summary>
        </member>
        <member name="M:PHP.Core.TypesProvider.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <param name="context">A script context to get declarators from.</param>
            <param name="caller">A current type context.</param>
        </member>
        <member name="M:PHP.Core.TypesProvider.ProvideType(System.String)">
            <summary>
            Provides the caller a type of a specified name. The caller is made dependent on the requested type.
            Important: the caller is made dependent also on non-existing type (i.e. if the method returns <B>null</B>)! 
            </summary>
            <param name="name">The name of requested file (case insensitive).</param>
            <returns>The requested type or <B>null</B> if the type has not been declared on the associated context.</returns>
        </member>
        <member name="M:PHP.Core.TypesProvider.IsTypeDeclared(System.String)">
            <summary>
            Determines whether a type has been declared on the current context.
            Doesn't make the caller dependent on the existance of the declarator!
            The caller mustn't use this methods if its result is used in a way establishing a dependency.
            </summary>
            <param name="name">The type name.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.TypesProvider.FindAndProvideType(System.String)">
            <summary>
            Searches for type using <see cref="M:PHP.Core.ScriptContext.ResolveType(System.String)"/>. If the type is found 
            and has a declarator (is a user type) then the caller is made dependent on it.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="M:PHP.Core.TypesProvider.LoadAndMatch(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,PHP.Core.Reflection.DTypeDesc}},PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Try to load all <paramref name="providedTypes"/>. This can invoke autoloading if necessary.
            Check if they were not modified, so calling compilation unit has to be invalidated and recompiled.
            </summary>
            <param name="providedTypes">a list of provided type declarators. Can be a <B>null</B> reference.</param>
            <param name="target">The script context to be checked.</param>
            <param name="caller">Current class context.</param>
            <returns><paramref name="providedTypes"/> are loadable and match in context of <paramref name="target"/>.</returns>
        </member>
        <member name="P:PHP.Core.TypesProvider.ProvidedTypes">
            <summary>
            A hybrid dictionary of types that has been provided since since the creation of the provider.
            </summary>
        </member>
        <member name="T:PHP.Core.EvalKinds">
            <summary>
            Kinds of eval.
            </summary>
        </member>
        <member name="T:PHP.Core.DynamicCode">
            <summary>
            Provides means for executing code (evals, asserts, lambda functions) dynamically.
            </summary>
        </member>
        <member name="F:PHP.Core.DynamicCode.LambdaFunctionIndex">
            <summary>
            An index used in lambda function name. Common for all threads, increased interlocked.
            </summary>
        </member>
        <member name="M:PHP.Core.DynamicCode.GenerateLambdaName">
            <summary>
            Generates a name for a lambda function.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:PHP.Core.DynamicCode.GenerateLambdaName(System.String,System.String)">
            <summary>
            Generates a name for a lambda function.
            </summary>
            <param name="parameters">Parameters string.</param>
            <param name="body">Function body string.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:PHP.Core.DynamicCode.GetLamdaFunctionCodePrefixes(System.String,System.String,System.String@,System.String@)">
            <summary>
            Gets prefixes of lambda function source code.
            First prefix is "function {name}(", the second is "function {name}({parameters}){".
            </summary>
        </member>
        <member name="M:PHP.Core.DynamicCode.CreateLambdaFunction(System.String,System.String,PHP.Core.ScriptContext,PHP.Core.Reflection.SourceCodeDescriptor)">
            <summary>
            Compiles a function with a specified parameters and body and adds it to dynamic module. 
            </summary>
            <param name="parameters">The function's parameters (e.g. <c>"$x, $y = 1, &amp;$z"</c>).</param>
            <param name="body">The function's body.</param>
            <param name="context">A script context.</param>
            <param name="descriptor"></param>
            <returns>A name of the created function.</returns>
            <exception cref="T:System.ArgumentNullException">Any parameter is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.DynamicCode.Assert(System.Object,PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.Reflection.DObject,PHP.Core.Reflection.DTypeDesc,System.String,System.Int32,System.Int32,System.Int32,PHP.Core.NamingContext)">
            <summary>
            Implements PHP <c>assert</c> construct. 
            </summary>
            <param name="assertion">The condition to be checked.</param>
            <param name="context">The current script context.</param>
            <param name="definedVariables">Current scope run-time variables.</param>
            <param name="self">The current <see cref="T:PHP.Core.PhpObject"/> in which method the eval is called. Can be a <B>null</B> reference.</param>
            <param name="includer">A type desc of the current type in where eval is called in its method.</param>
            <param name="containingSourcePath">Relative path to the source file of the calling script (used to evaluate __FILE__ and format error messages).</param>
            <param name="line">The line where eval is called. Used only when error is reported in debug mode.</param>
            <param name="column">The column where eval is called. Used only when error is reported in debug mode.</param>
            <param name="containerId">Id of the containing transient module.</param>
            <param name="namingContext"></param>
            <returns>Whether the <paramref name="assertion"/> doesn't evaluate to <B>false</B>.</returns>
            <remarks>
            <paramref name="assertion"/> is converted to string by <see cref="M:PHP.Core.Convert.ObjectToString(System.Object)"/>,
            evaluated by <see cref="M:PHP.Core.DynamicCode.Eval(System.String,System.Boolean,PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.Reflection.DObject,PHP.Core.Reflection.DTypeDesc,System.String,System.Int32,System.Int32,System.Int32,PHP.Core.NamingContext)"/> and finally compared by == operator (see <see cref="F:PHP.Core.PhpComparer.Default"/>)
            for equality with <B>false</B>. Actions taken before evaluation as well as if assertion fails
            are defined by the <see cref="P:PHP.Core.Configuration.Global"/>, section "assertion".
            </remarks>
        </member>
        <member name="M:PHP.Core.DynamicCode.CheckAssertion(System.Object,System.String,PHP.Core.ScriptContext,System.String,System.Int32,System.Int32,PHP.Core.NamingContext)">
            <summary>
            Ckecks the value of an assertion and performs and according action.
            </summary>
            <param name="assertion">The value of assertion.</param>
            <param name="code">The assertion condition source code.</param>
            <param name="context">A script context.</param>
            <param name="callerRelativeSourcePath">A relative path to the source file where the assertion is stated.</param>
            <param name="line">The line where the assertion is stated.</param>
            <param name="column">The column where the assertion is stated.</param>
            <param name="namingContext"></param>
            <returns>Whether the assertion succeeded.</returns>
        </member>
        <member name="M:PHP.Core.DynamicCode.Eval(System.String,System.Boolean,PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.Reflection.DObject,PHP.Core.Reflection.DTypeDesc,System.String,System.Int32,System.Int32,System.Int32,PHP.Core.NamingContext)">
            <summary>
            Implements PHP <c>eval</c> construct. 
            </summary>
            <param name="code">A code to be evaluated.</param>
            <param name="synthetic">Whether the eval is synthetic.</param>
            <param name="context">The current script context.</param>
            <param name="definedVariables">Currently defined variables.</param>
            <param name="self">The current <see cref="T:PHP.Core.PhpObject"/> in which method the eval is called. Can be a <B>null</B> reference.</param>
            <param name="referringType">A type desc of the type whose method is calling the eval.</param>
            <param name="callerRelativeSourcePath">
            Relative path to the source file of a calling script with respect to the source root 
            (used to evaluate __FILE__ and format error messages).
            </param>
            <param name="line">The line where eval is called. Used only when error is reported in debug mode.</param>
            <param name="column">The column where eval is called. Used only when error is reported in debug mode.</param>
            <param name="containerId">Id of the containing transient module.</param>
            <param name="namingContext">Naming context of the caller.</param>
            <returns>The result of evaluation.</returns>
        </member>
        <member name="M:PHP.Core.DynamicCode.EvalInternal(System.String,System.String,System.String,PHP.Core.EvalKinds,PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.Reflection.DObject,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.SourceCodeDescriptor,System.Boolean,PHP.Core.NamingContext)">
            <summary>
            Implements PHP <c>eval</c> construct with given code prefix and suffix. 
            A result of concatanation prefix + code + suffix is compiled.
            Prefix should contain no new line characters.
            </summary>
        </member>
        <member name="M:PHP.Core.DynamicCode.Dump(PHP.Core.ScriptContext,System.IO.TextWriter)">
            <summary>
            Dumps content of transient assembly.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PhpAssemblyBuilderBase.globalTypeCreated">
            <summary>
            Prevent calling of ReflectionUtils.CreateGlobalType(RealModuleBuilder) more than once.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.PhpAssemblyBuilderBase.DefineGlobalType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes the 'GlobalTypeEmitter' field.
            </summary>
            <param name="moduleBuilder"></param>
        </member>
        <member name="M:PHP.Core.Emit.PhpAssemblyBuilderBase.GenerateGlobalTypeName">
            <summary>
            Generates name for the 'global' type that stores information like
            entry-points, naming contexts etc. In transient assembly, we need to generate
            unique name for every loaded 'Transient' compilation unit.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHP.Core.Emit.PhpAssemblyBuilderBase.GlobalTypeEmitter">
            <summary>
            Global type emitter. Emits naming context definitions, entry-point, etc.
            (in transient module it is used for naming contexts only)
            </summary>
            <remarks>
            Non-null after 'DefineGlobalType' is called.
            </remarks>
        </member>
        <member name="F:PHP.Core.Emit.PhpAssemblyBuilder.resources">
            <summary>Contains value of the <see cref="P:PHP.Core.Emit.PhpAssemblyBuilder.Resources"/> property</summary>
        </member>
        <member name="M:PHP.Core.Emit.PhpAssemblyBuilder.GenerateGlobalTypeName">
            <summary>
            Returns name for the global type.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.PhpAssemblyBuilder.AddResourceFile(System.Reflection.Emit.ModuleBuilder,System.String,PHP.Core.FullPath,System.Reflection.ResourceAttributes)">
            <summary>Enbdeds resource into assembly</summary>
            <param name="builder"><see cref="T:System.Reflection.Emit.ModuleBuilder"/> to embede resource in</param>
            <param name="name">Name of the resource</param>
            <param name="path">File to obtain resource from</param>
            <param name="attributes">Defines resource visibility</param>
        </member>
        <member name="M:PHP.Core.Emit.PhpAssemblyBuilder.CreateEntryPoint">
            <summary>
            Adds an entry point as a global method.
            </summary>
            <returns>A method info representing the entry point.</returns>
        </member>
        <member name="P:PHP.Core.Emit.PhpAssemblyBuilder.Kind">
            <summary>
            A kind of assembly file.
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.PhpAssemblyBuilder.Debuggable">
            <summary>
            Whether the assembly contains debug information.
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.PhpAssemblyBuilder.Force32Bit">
            <summary>
            Whether saved assembly should be executed as 32-bit process on 64-bit environments.
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.PhpAssemblyBuilder.Resources">
            <summary>Resources to emed</summary>
        </member>
        <member name="P:PHP.Core.Emit.PhpAssemblyBuilder.IsMTA">
            <summary>
            Multi-threaded apartment.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.ScriptAssemblyBuilder">
            <summary>
            Provides a functionality common to script assembly builders.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.SingleScriptAssemblyBuilder">
            <summary>
            A builder of a script assembly which comprises of a single script module.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.SingleScriptAssemblyBuilder.#ctor(PHP.Core.ApplicationContext,System.Reflection.AssemblyName,System.String,System.String,PHP.Core.Emit.AssemblyKinds,System.Collections.Generic.ICollection{PHP.Core.ResourceFileReference},System.Boolean,System.Boolean,System.Boolean,PHP.Core.Win32IconResource)">
            <summary>
            Creates an instance of of single-script assembly builder.
            </summary>
            <param name="applicationContext">Application context.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="directory">Directory where assembly will be stored.</param>
            <param name="fileName">Name of the assembly file including an extension.</param>
            <param name="kind">Assembly kind.</param>
            <param name="debug">Whether to include debug information.</param>
            <param name="force32bit">Whether to force 32bit execution of generated assembly.</param>
            <param name="saveOnlyAssembly">Whether to not load the assembly into memory.</param>
            <param name="icon">Icon resource or a <B>null</B> reference.</param>
            <param name="resources">Resources to embed</param>
        </member>
        <member name="M:PHP.Core.Emit.SingleScriptAssemblyBuilder.#ctor(PHP.Core.ApplicationContext,System.Reflection.AssemblyName,System.String,System.String,PHP.Core.Emit.AssemblyKinds,System.Boolean,System.Boolean,System.Boolean,PHP.Core.Win32IconResource)">
            <summary>
            Creates an instance of of single-script assembly builder (without resources).
            </summary>
            <param name="applicationContext">Application context.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="directory">Directory where assembly will be stored.</param>
            <param name="fileName">Name of the assembly file including an extension.</param>
            <param name="kind">Assembly kind.</param>
            <param name="debug">Whether to include debug information.</param>
            <param name="force32bit">Whether to force 32bit execution of generated assembly.</param>
            <param name="saveOnlyAssembly">Whether to not load the assembly into memory.</param>
            <param name="icon">Icon resource or a <B>null</B> reference.</param>
        </member>
        <member name="M:PHP.Core.Emit.SingleScriptAssemblyBuilder.DefineScript(PHP.Core.Reflection.ScriptCompilationUnit)">
            <summary>
            Defines one and only script belonging to the assembly builder.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.MultiScriptAssemblyBuilder">
            <summary>
            A builder of a script assembly which comprises of multiple script modules.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.MultiScriptAssemblyBuilder.#ctor(PHP.Core.ApplicationContext,System.Reflection.AssemblyName,System.String,System.String,PHP.Core.Emit.AssemblyKinds,System.Collections.Generic.ICollection{PHP.Core.ResourceFileReference},System.Boolean,System.Boolean,PHP.Core.Win32IconResource,PHP.Core.PhpSourceFile)">
            <summary>
            Creates an instance of of multi-script assembly builder.
            </summary>
            <param name="applicationContext">Application context.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="directory">Directory where assembly will be stored.</param>
            <param name="fileName">Name of the assembly file including an extension.</param>
            <param name="kind">Assembly file kind.</param>
            <param name="debug">Whether to include debug information.</param>
            <param name="force32bit">Whether to force 32bit execution of generated assembly.</param>
            <param name="entryPoint">Entry point.</param>
            <param name="icon">Icon.</param>
            <param name="resources">Resources to embed</param>
        </member>
        <member name="M:PHP.Core.Emit.MultiScriptAssemblyBuilder.DefineModule(PHP.Core.Reflection.ScriptCompilationUnit)">
            <summary>
            Defines a new script belonging to the multiscript assembly builder.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.Enums.ToPEFileKind(PHP.Core.Emit.AssemblyKinds)">
            <summary>
            Converts assembly kind to <see cref="T:System.Reflection.Emit.PEFileKinds"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.TransientAssemblyBuilder.Build(System.String,PHP.Core.Reflection.SourceCodeDescriptor,PHP.Core.EvalKinds,PHP.Core.CompilationContext,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc,PHP.Core.NamingContext,System.Boolean)">
            <summary>
            The argument <paramref name="completeSource" /> determines whether the source code
            is complete PHP script file, which is a case in dynamic include in Silverlight
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.TransientAssemblyBuilder.GenerateGlobalTypeName">
            <summary>
            Returns name for the global type.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.ClrOverloadBuilder">
            <summary>
            </summary>
            <remarks><code>
            switch (#actuals)
            {
               case i:
            			// Conversions for the first overload
                  overload_i_1:
            				strictness_i = ImplExactMatch;
                    formal_i_1_1 = TryConvertTo{typeof(formal_i_1_1)}(actual_1, out strictness_tmp);
                    if (strictness_tmp == Failed) goto overload_i_2;
            				strictness_i += strictness_tmp;
                    formal_i_1_2 = TryConvertTo{typeof(formal_i_1_2)}(actual_2, out strictness_tmp);
                    if (strictness_tmp == Failed) goto overload_i_2;
            				strictness_i += strictness_tmp;
                    ...
                    if (strictness_i_1 == ImplExactMatch) goto call_overload_i_1;
            				best_overload = 1;
             
            			// Conversions for the second overload
                  overload_i_2:
                    formal_i = TryConvertTo{typeof(formal_i)}(actual_i, out strictness_tmp);
                    if (strictness_tmp == Failed) goto overload_i_3;
            				strictness_i_2 += strictness_tmp;
                    ...
                    if (strictness_i_2 == ImplExactMatch) goto call_overload_i_2;
            				if (strictness_i_2 &lt; strictness_i_1)
            					best_overload = 2;
            
                  // ... other overloads
            
            			// select the best overload
            			call_overload_i:
            			switch(best_overload)
            			{
            				case 1:
            					return overload_i_1(formal_i_1_1, ..., formal_i_1_k);
            				case 2:
            					return overload_i_2(formal_i_2_1, ..., formal_i_2_k);
            				// ... other calls
            			}
                   
               case less than #formals:
                  Warning(to few args);
                  --- fill missing with default values of their respective types ---
                  goto case #min_formals;
            
               case more than #formals:      
                   Warning(to many args)
                  goto case #max_formals;
            }
            
            error:
            NoSuitableOverload()
            </code></remarks>
        </member>
        <member name="F:PHP.Core.Emit.ClrOverloadBuilder.caseLabels">
            <summary>
            Case labels used during by-number resolution
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ClrOverloadBuilder.minArgOverloadTypeResolutionLabel">
            <summary>
            Marked after the argument load block of the overload with minimal arguments.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ClrOverloadBuilder.NullableType">
            <summary>
            Generic type definition of Nullable&lt;_&gt; type.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.SortOverloads(System.Collections.Generic.List{PHP.Core.Reflection.ClrMethod.Overload})">
            <summary>
            Sorts overloads in the list - so that we guarantee deterministic overload selection.
            Most important thing is to test subtypes first - because both conversions are evaluated as ImplExactMatch.
            (sorting also allows some performance tweaks)
            </summary>
            <param name="list">List to sort</param>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.CompareTypes(System.Type,System.Type)">
            <summary>
            Compares two types. Type <paramref name="t1"/> is less if it is subclass
            of <paramref name="t2"/>, or it is array of subclasses (covariant arrays).
            Otherwise the types are sorted by name in alphabetical order with an exception
            of type string which is greather than any other type (because if we allow explicit
            conversions, the conversion to string is slooow!).
            </summary>
            <param name="t1">First type</param>
            <param name="t2">Second type</param>
            <returns>-1 if first is less, 1 if second is less</returns>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitLoadInstance(PHP.Core.Emit.ILEmitter,PHP.Core.Emit.IPlace,System.Type)">
            <summary>
            Emit LOAD <paramref name="instance"/>.
            </summary>ILEmiter
            <param name="il"><see cref="T:PHP.Core.Emit.ILEmitter"/> object instance.</param>
            <param name="instance">The place where to load the instance from.</param>
            <param name="declaringType">The type of resulting instance.</param>
            <remarks>Instance of value types are wrapped in <see cref="T:PHP.Core.Reflection.ClrValue`1"/> object instance.</remarks>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitCall(PHP.Core.Reflection.ClrMethod.Overload,System.Reflection.Emit.Label,System.Reflection.Emit.LocalBuilder[])">
            <summary>
            Emits overload call
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitMissingParameterCountHandling(System.Reflection.Emit.Label)">
            <summary>
            Emits code that is invoked when function is passed not enough parameters
            </summary>
            <param name="gotoLabel">Continue execution at this label</param>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitMoreParameterCountHandling(System.Reflection.Emit.Label)">
            <summary>
            Emits code that is invoked when function is passed more parameters
            </summary>
            <param name="gotoLabel">Continue execution at this label</param>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitResolutionByNumber">
            <summary>
            Has to be chosen which method should be called.This method emits the code that 
            choses which overload to call by number of arguments. After this it calls 
            EmitResolutionByTypes.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.GetOverloadsForArgCount(System.Int32)">
            <summary>
            Returns a list of overloads that can be called with the given argument count on the stack.
            </summary>
            <remarks>
            Vararg overloads are at the end of the returned list and are sorted, so that more general 
            overloads are at the end of the list (for example: params object[] is more general than int,params object[]).
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.GetVarArgOverloads(System.Int32@)">
            <summary>
            Returns overloads including the "params" option
            </summary>
            <remarks>
            Returned overloads are sorted, so that more general overloads are at the end 
            of the list (for example: params object[] is more general than int,params object[]).
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.SortVarArgOverloads(System.Collections.Generic.List{PHP.Core.Reflection.ClrMethod.Overload},System.Int32)">
            <summary>
            This function sorts vararg overloads so that more general overloads are at the end.
            The only difference to algorithm used for sorting overloads during initialization is
            that we need overloads with MORE parameters first (because this means we have some more 
            specific type requirements declared by mandatory parameters).
            
            Assumes that input is sorted only the blocks with same parameter count needs to be reversed.
            
            We need to sort parameters like this to prevent conversions to supertypes (like object[]),
            becausethis kind of conversion is treated as ImplExactMatch.
            </summary>
            <param name="result">List to be sorted</param>
            <param name="vararg_start_index">Vararg overloads start at this index</param>
            <remarks>
            Sorting should be for example:
            #parameters = 2 + 1:
            	int, string, [params] int[]
            	int, string, [params] object[]
            #parameters = 1 + 1:
            	int, [params] object[]
            #parameters = 0 + 1:
            	[params] int[]
            	[params] object[]
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitLoadArguments(System.Int32,System.Collections.Generic.List{PHP.Core.Reflection.ClrMethod.Overload},System.Boolean)">
            <summary>
            Load arguments from stack and save them to valLocals (by-value) or refLocals (by-reference)
            </summary>
            <returns>Returned bit array specifies whether #i-th parameter is byref or by value</returns>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitDefaultCase">
            <summary>
            Default case in the by-number resolution switch
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitLoadRemainingArgs(System.Int32,System.Type,System.Reflection.Emit.Label,System.Reflection.Emit.LocalBuilder[],System.Reflection.Emit.LocalBuilder)">
            <summary>
            Emits a for loop and constructs the array to be passed as the last 'params' argument.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitResolutionByTypes(System.Int32)">
            <summary>
            Emits code that choses overload method based on argument types
            </summary>
            <param name="overloadIndex"></param>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitResolutionByTypes(System.Int32,System.Collections.Generic.List{PHP.Core.Reflection.ClrMethod.Overload})">
            <summary>
            Emits code that choses overload method based on argument types
            </summary>
            <param name="argCount">Count of the arguments</param>
            <param name="argCountOverloads">Count of overloadesd methods with <paramref name="argCount"/> count of arguments.</param>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitConvertToClrGeneric(PHP.Core.Emit.ILEmitter,System.Type,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Converts a PHP value to the given CLR type that is a generic parameter.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitConvertToClr(PHP.Core.Emit.ILEmitter,PHP.Core.PhpTypeCode,System.Type)">
            <summary>
            Converts a PHP value to the given CLR type (the caller is not interested in the success of the conversion).
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitConvertToClr(PHP.Core.Emit.ILEmitter,PHP.Core.PhpTypeCode,System.Type,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Converts a PHP value to the given CLR type (the caller passes a <paramref name="strictnessLocal"/> that will
            receive one of the <see cref="T:PHP.Core.ConvertToClr.ConversionStrictness"/> enumeration values that
            describe the conversion result (the Failed value indicates that conversion was not successful).
            </summary>
            <returns><B>True</B> if it the conversion will surely succeed.</returns>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitConvertObjectToClr(PHP.Core.Emit.ILEmitter,PHP.Core.PhpTypeCode,System.Type,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Converts object to CLR type
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ClrOverloadBuilder.EmitConvertToPhp(PHP.Core.Emit.ILEmitter,System.Type)">
            <summary>
            Converts a value of the given CLR type to PHP value.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.ClrOverloadBuilder.ParameterLoader">
            <summary>
            A delegate used to load a parameter to evaluation stack.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.ClrStubBuilder">
            <summary>
            Provides services related to building CLR stubs of PHP methods, fields, and constants.
            </summary>
            <remarks>
            Three areas that make use of CLR stubs have been identified so far:
            <list type="1">
            <item>Override/implement stubs - <see cref="M:PHP.Core.CodeGenerator.EmitOverrideStubs(System.Collections.Generic.IDictionary{System.Type,System.Reflection.Emit.PropertyBuilder},PHP.Core.Reflection.PhpField,PHP.Core.Reflection.PhpType,PHP.Core.Reflection.DMemberRef,System.Boolean)"/></item>
            <item>Dynamic delegate stubs - <see cref="T:PHP.Core.Reflection.ClrDelegateDesc.DelegateStubBuilder"/></item>
            <item>Export stubs - <see cref="M:PHP.Core.CodeGenerator.EmitExportStubs(System.Collections.Generic.IDictionary{System.String,System.Reflection.Emit.MethodBuilder},PHP.Core.Reflection.PhpMethod)"/></item>
            </list>
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.ClrStubBuilder.EmitLoadClrParameter(System.Reflection.ParameterInfo,PHP.Core.PhpTypeCode)">
            <summary>
            Emits code that loads a specified parameter on the evaluation stack.
            </summary>
            <param name="paramInfo">The parameter to load.</param>
            <param name="requiredTypeCode">Specifies whether <see cref="T:PHP.Core.PhpReference"/>
            (<see cref="F:PHP.Core.PhpTypeCode.PhpReference"/>), <see cref="T:System.Object"/> (<see cref="F:PHP.Core.PhpTypeCode.Object"/>),
            or the most fitting of these two should be loaded.</param>
        </member>
        <member name="M:PHP.Core.Emit.ClrStubBuilder.EmitStoreClrParameter(System.Reflection.ParameterInfo)">
            <summary>
            Emits code that stores a <see cref="T:PHP.Core.PhpReference"/>'s value back to a ref/out parameter.
            </summary>
            <param name="paramInfo">The parameter to store back.</param>
        </member>
        <member name="M:PHP.Core.Emit.ClrStubBuilder.DefineFieldExport(System.String,PHP.Core.Reflection.DMember)">
            <summary>
            Defines a property that "exports;" a given field or constant.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="member">A <see cref="T:PHP.Core.Reflection.PhpField"/> or <see cref="T:PHP.Core.Reflection.ClassConstant"/>.</param>
            <returns>The export property builder.</returns>
        </member>
        <member name="M:PHP.Core.Emit.ClrStubBuilder.GetNonConflictingMethodName(PHP.Core.Reflection.DTypeDesc,System.String,System.Boolean@)">
            <summary>
            Creates a name based on <paramref name="str"/> that does not clash with any methods in the given type desc.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ClrStubBuilder.EmitMethodStubBody(PHP.Core.Emit.ILEmitter,PHP.Core.Emit.IPlace,System.Reflection.ParameterInfo[],System.Type[],System.Type,PHP.Core.Reflection.PhpMethod,PHP.Core.Reflection.DType)">
            <summary>
            Emits stub for one overridden/implemented/exported CLR overload.
            </summary>
            <param name="il"></param>
            <param name="scriptContextPlace"></param>
            <param name="stubParameters">The overload parameters.</param>
            <param name="stubTypeParameters">The overload type parameters.</param>
            <param name="stubReturnType">The overload return type.</param>
            <param name="target">The overriding/implementing/exporting method.</param>
            <param name="targetType">The type (perhaps constructed) that declared <paramref name="target"/>.</param>
        </member>
        <member name="M:PHP.Core.Emit.ClrStubBuilder.DefineStubParameters(System.Reflection.Emit.MethodBuilder,PHP.Core.AST.FormalParam[],System.Reflection.ParameterInfo[])">
            <summary>
            Sets attributes of generated override/implement/export stub parameters.
            </summary>
            <param name="stub">The stub method builder.
            </param>
            <param name="formalParams">Formal parameters of the implementing PHP method.</param>
            <param name="templateParams">Parameters of the overload being overriden/implemented/exported.</param>
        </member>
        <member name="M:PHP.Core.Emit.ClrStubBuilder.DefineStubParameters(System.Reflection.Emit.ConstructorBuilder,PHP.Core.AST.FormalParam[],System.Reflection.ParameterInfo[])">
            <summary>
            Sets attributes of generated override/implement/export stub parameters.
            </summary>
            <param name="stub">The stub constructor builder.
            </param>
            <param name="formalParams">Formal parameters of the implementing PHP method.</param>
            <param name="templateParams">Parameters of the overload being overriden/implemented/exported.</param>
        </member>
        <member name="M:PHP.Core.Emit.ClrStubBuilder.DefineStubGenericParameters(System.Reflection.Emit.MethodBuilder,System.Type[],PHP.Core.Reflection.PhpRoutineSignature,System.Type[])">
            <summary>
            Defines generic parameters according to the given template and re-maps relevant parameters.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ClrStubBuilder.DefineMethodExportStubs(PHP.Core.Reflection.PhpRoutine,PHP.Core.Reflection.PhpType,System.Reflection.MethodAttributes,System.Boolean,PHP.Core.Emit.StubSignatureFilter)">
            <summary>
            Enumerates all export overloads for the given target PHP method.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.DelegateBuilder.delegateTypesCache">
            <summary>
            Cache of created delegate types.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.DelegateBuilder.GetDelegateTypeFromCache(System.Type[])">
            <summary>
            Try to find created delegate from <see cref="F:PHP.Core.Emit.DelegateBuilder.delegateTypesCache"/>.
            </summary>
            <param name="types">Delegate type args.</param>
            <returns><see cref="T:System.Type"/> matching <paramref name="types"/> or <c>null</c>.</returns>
        </member>
        <member name="M:PHP.Core.Emit.DelegateBuilder.AddDelegateTypeToCache(System.Type[],System.Type)">
            <summary>
            Add given delegate type into the <see cref="F:PHP.Core.Emit.DelegateBuilder.delegateTypesCache"/>.
            </summary>
            <param name="types"></param>
            <param name="delegateType"></param>
            <returns><paramref name="delegateType"/>.</returns>
        </member>
        <member name="M:PHP.Core.Emit.DelegateBuilder.GetDelegateType(System.Type[],System.Int64)">
            <summary>
            Gets a System.Linq.Expressions.Expression.Type object that represents a generic
            System.Func or System.Action delegate type that has specific type arguments.
            
            For <paramref name="types"/> longer than 17 items, current module's <see cref="T:System.Reflection.Emit.TypeBuilder"/> is used instead of Transient one.
            This avoids of "Unable to make a reference to a transient module from a non-transient module." exception.
            
            For less or equal than 17 items, <see cref="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])"/> is used.
            </summary>
            <param name="types">The type arguments of the delegate.</param>
            <param name="uniqueId">A number used to name new delegate.</param>
            <returns>The delegate type.</returns>
        </member>
        <member name="M:PHP.Core.Emit.DelegateBuilder.CreateDelegateType(System.Reflection.Emit.ModuleBuilder,System.Type[],System.String)">
            <summary>
            Create the delegate type.
            </summary>
            <param name="moduleBuilder"></param>
            <param name="types">Delegate type args.</param>
            <param name="delegateTypeName">Unique name of the type.</param>
            <returns>Delegate type.</returns>
        </member>
        <member name="T:PHP.Core.Emit.XmlDocFileBuilder">
            <summary>
            Implements generator of XML documentation.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.XmlDocFileBuilder.path">
            <summary>
            Full canonical path to the generated file.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.XmlDocFileBuilder.ProcessText(System.String,System.Int32@)">
            <summary>
            Reads and writes until empty line or tag appear. Processes inlined tags as well.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.FunctionBuilder">
            <summary>
            Emits PHP functions implementations.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.FunctionBuilder.ArgThis">
            <summary>
            An index of "this" argument in PHP user instance methods. 
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.FunctionBuilder.ArgContext">
            <summary>
            An index of "context" argument in PHP user functions.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.FunctionBuilder.ArgContextInstance">
            <summary>
            An index of "context" argument in PHP user instance methods.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.FunctionBuilder.ArgContextStatic">
            <summary>
            An index of "context" argument in PHP user static methods.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.FunctionBuilder.ArgStackStatic">
            <summary>
            An index of "stack" argument in arg-less static method stubs.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.FunctionBuilder.ArgStackInstance">
            <summary>
            An index of "stack" argument in PHP user instance method stubs.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.FunctionBuilder.stack">
            <summary>
            A stack place (used by arg-less overload emitter).
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.ILEmitter">
            <summary>
            <see cref="T:System.Reflection.Emit.ILGenerator"/> wrapper providing many useful services concerning MSIL emission.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:PHP.Core.Emit.ILEmitter.il">
            <summary>
            The <see cref="T:System.Reflection.Emit.ILGenerator"/> wrapped by this instance;
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ILEmitter.lastEmittedOpCode">
            <summary>
            The last <see cref="T:System.Reflection.Emit.OpCode"/> emitted by this <see cref="T:PHP.Core.Emit.ILEmitter"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ILEmitter.isPositionLabeled">
            <summary>
            <B>true</B> if a <see cref="T:System.Reflection.Emit.Label"/> was marked at the current position, <B>false</B> otherwise.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ILEmitter.temporaryLocals">
            <summary>
            Collection of temporary local variables available for reuse (lazy init).
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ILEmitter.featurePoints">
            <summary>
            Collection of <see cref="T:PHP.Core.Emit.ILEmitter.FeaturePoint"/>s marked so far (keyed by <see cref="T:System.Object"/>s, lazy init).
            </summary>
            <remarks><seealso cref="M:PHP.Core.Emit.ILEmitter.MarkFeature(System.Object)"/></remarks>
        </member>
        <member name="F:PHP.Core.Emit.ILEmitter.unresolvedBranches">
            <summary>
            Collection of <see cref="T:System.Reflection.Emit.Label"/>s - targets of branch instructions emitted so far - that have not been
            marked yet.
            </summary>
            <remarks><seealso cref="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)"/><seealso cref="M:PHP.Core.Emit.ILEmitter.MarkLabel(System.Reflection.Emit.Label,System.Boolean)"/></remarks>
        </member>
        <member name="F:PHP.Core.Emit.ILEmitter.branchTargets">
            <summary>
            Collection of <see cref="T:System.Reflection.Emit.Label"/>s marked and not forgotten so far (keyed by <see cref="T:System.Reflection.Emit.Label"/>s, values unused).
            </summary>
            <remarks><seealso cref="M:PHP.Core.Emit.ILEmitter.MarkLabel(System.Reflection.Emit.Label,System.Boolean)"/></remarks>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.#ctor(System.Reflection.Emit.ILGenerator,PHP.Core.Emit.ILEmitter.Containers)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Emit.ILEmitter"/> by wrapping an <see cref="T:System.Reflection.Emit.ILGenerator"/>
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.#ctor(System.Reflection.Emit.MethodBuilder)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Emit.ILEmitter"/> for a given <see cref="P:PHP.Core.Emit.ILEmitter.MethodBuilder"/>.
            </summary>
            <param name="methodBuilder">The <see cref="P:PHP.Core.Emit.ILEmitter.MethodBuilder"/> to emit to.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.#ctor(System.Reflection.Emit.ConstructorBuilder)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Emit.ILEmitter"/> for a given <see cref="P:PHP.Core.Emit.ILEmitter.ConstructorBuilder"/>.
            </summary>
            <param name="constructorBuilder">The <see cref="P:PHP.Core.Emit.ILEmitter.ConstructorBuilder"/> to emit to.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.#ctor(System.Reflection.Emit.DynamicMethod)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Emit.ILEmitter"/> for a given <see cref="P:PHP.Core.Emit.ILEmitter.DynamicMethod"/>.
            </summary>
            <param name="dynamicMethod">The <see cref="P:PHP.Core.Emit.ILEmitter.DynamicMethod"/> to emit to.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Emit.ILEmitter"/> for a given <see cref="P:PHP.Core.Emit.ILEmitter.MethodBuilder"/> or <see cref="P:PHP.Core.Emit.ILEmitter.DynamicMethod"/>.
            </summary>
            <param name="method">The <see cref="P:PHP.Core.Emit.ILEmitter.MethodBuilder"/> or <see cref="P:PHP.Core.Emit.ILEmitter.DynamicMethod"/> to emit to.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.BeginCatchBlock(System.Type)">
            <summary>
            Begins a catch block.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.BeginExceptFilterBlock">
            <summary>
            Begins an exception block for a filtered exception.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.BeginExceptionBlock">
            <summary>
            Begins an exception block for a non-filtered exception.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.BeginFaultBlock">
            <summary>
            Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.BeginFinallyBlock">
            <summary>
            Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.ThrowException(System.Type)">
            <summary>
            Emits an instruction to throw an exception.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.BeginScope">
            <summary>
            Begins a lexical scope.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.DefineLabel">
            <summary>
            Declares a new label.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.EndExceptionBlock">
            <summary>
            Ends an exception block.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.EndScope">
            <summary>
            Ends a lexical scope.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Marks a sequence point in the Microsoft intermediate language (MSIL) stream.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.UsingNamespace(System.String)">
            <summary>
            Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Puts the specified instruction onto the stream of instructions.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Byte)">
            <summary>
            Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL)
            stream of instructions.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
            <summary>
            Puts the specified instruction and metadata token for the specified constructor onto the Microsoft
            intermediate language (MSIL) stream of instructions.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Double)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
            stream of instructions.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <summary>
            Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate
            language (MSIL) stream of instructions.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Int16)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
            stream of instructions.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
            stream of instructions.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Int64)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
            stream of instructions.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space
            to include a label when fixes are done.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space
            to include a label when fixes are done.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the
            index of the given local variable.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the
            metadata token for the given method.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.SByte)">
            <summary>
            Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL)
            stream of instructions.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
            <summary>
            Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL)
            stream of instructions.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Single)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
            stream of instructions.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.String)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the
            metadata token for the given string.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the
            metadata token for the given type.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Puts a call or callvirt instruction onto the Microsoft intermediate language (MSIL) stream.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
            <summary>
            Puts a Calli instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged
            calling convention for the indirect call.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
            <summary>
            Puts a Calli instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling
            convention for the indirect call.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.MarkLabel(System.Reflection.Emit.Label,System.Boolean)">
            <summary>
            Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.
            </summary>
            <param name="loc">The label for which to set an index.</param>
            <param name="forget"><B>true</B> if the label should be forgotten right away, <B>false</B> otherwise.</param>
            <remarks>
            Intercepting the <see cref="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)"/> call is important for control flow analysis.
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.MarkLabel(System.Reflection.Emit.Label)">
            <summary>
            Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.
            </summary>
            <param name="loc">The label for which to set an index.</param>
            <remarks>
            Intercepting the <see cref="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)"/> call is important for control flow analysis.
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.ForgetLabel(System.Reflection.Emit.Label)">
            <summary>
            Notifies this <see cref="T:PHP.Core.Emit.ILEmitter"/> that there will be no more branches to the given label.
            </summary>
            <param name="loc">The label that is surely not going to be the target of any consequent branch instruction.
            </param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.InterceptEmit(System.Reflection.Emit.OpCode,System.Object)">
            <summary>
            Intercepts opcode emission.
            </summary>
            <param name="opcode">The <see cref="T:System.Reflection.Emit.OpCode"/> being emitted.</param>
            <param name="arg">The operand.</param>
            <returns><B>null</B> if the <paramref name="opcode"/> should be emitted, <B>false</B> otherwise.</returns>
            <remarks>
            This method is consulted before emitting any IL instruction.
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.MarkFeature(System.Object)">
            <summary>
            Marks the Microsoft intermediate language (MSIL) stream's current position as a distinguished control flow point
            related to a "feature".
            </summary>
            <param name="featureId">An arbitrary non-<B>null</B> reference.</param>
            <remarks><seealso cref="M:PHP.Core.Emit.ILEmitter.IsFeatureControlFlowPrecedent(System.Object)"/></remarks>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.IsFeatureControlFlowPrecedent(System.Object)">
            <summary>
            Determines whether the Microsoft intermediate language (MSIL) stream's current position is unconditionally
            preceded by a previously marked "feature".
            </summary>
            <param name="featureId">The feature ID passed earlier to <see cref="M:PHP.Core.Emit.ILEmitter.MarkFeature(System.Object)"/> (non-<B>null</B>).</param>
            <returns><B>null</B> if current position surely uncoditionally follows the position identified by
            <paramref name="featureId"/>, <B>false</B> otherwise.</returns>
            <remarks>
            <para>
            This method returns <B>null</B> if it is possible to prove that whenever IL execution reaches current position,
            it has already reached the position marked by <see cref="M:PHP.Core.Emit.ILEmitter.MarkFeature(System.Object)"/>(<paramref name="featureId"/>).
            </para>
            <para>
            These are the sufficient conditions used by this implementation (inclusive or):
            <list type="bullet">
            <item>All branch instructions before the feature point have their targets before the feature point, and there
            is no <see cref="F:System.Reflection.Emit.OpCodes.Leave"/> instruction between the feature point and current position.</item>
            <item>There is no branch target between the feature point and current position that is referenced before the
            feature point or left open (unforgotten) at current positionn and there is no <see cref="F:System.Reflection.Emit.OpCodes.Leave"/>
            instruction between the feature point and current position.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.GetTemporaryLocal(System.Type,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Reflection.Emit.LocalBuilder"/> of a temporary local variable of a specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The requested <see cref="T:System.Type"/> of the local.</param>
            <param name="immediateReturn"><B>True</B> to immediately return the local builder to the pool of locals
            available for reuse (no need to call <see cref="M:PHP.Core.Emit.ILEmitter.ReturnTemporaryLocal(System.Reflection.Emit.LocalBuilder)"/>).</param>
            <returns>The <see cref="T:System.Reflection.Emit.LocalBuilder"/>.</returns>
            <remarks>
            If a <see cref="T:System.Reflection.Emit.LocalBuilder"/> of the given <see cref="T:System.Type"/> has already been declared and returned
            to the pool, this local is reused. Otherwise, a new local is declared. Use this method to obtain a
            short-lived temporary local. If <paramref name="immediateReturn"/> is <B>false</B>, return the local
            to the pool of locals available for reuse by calling <see cref="M:PHP.Core.Emit.ILEmitter.ReturnTemporaryLocal(System.Reflection.Emit.LocalBuilder)"/>.
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.GetTemporaryLocal(System.Type)">
            <summary>
            Returns a <see cref="T:System.Reflection.Emit.LocalBuilder"/> of a temporary local variable of a specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The requested <see cref="T:System.Type"/> of the local.</param>
            <returns>The <see cref="T:System.Reflection.Emit.LocalBuilder"/>.</returns>
            <remarks>
            If a <see cref="T:System.Reflection.Emit.LocalBuilder"/> of the given <see cref="T:System.Type"/> has already been declared and returned
            to the pool, this local is reused. Otherwise, a new local is declared. Use this method to obtain a
            short-lived temporary local. Return the local to the pool of locals available for reuse by calling
            <see cref="M:PHP.Core.Emit.ILEmitter.ReturnTemporaryLocal(System.Reflection.Emit.LocalBuilder)"/>.
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.ReturnTemporaryLocal(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Returns a <see cref="T:System.Reflection.Emit.LocalBuilder"/> previously obtained from <see cref="M:PHP.Core.Emit.ILEmitter.GetTemporaryLocal(System.Type,System.Boolean)"/> to the
            pool of locals available for reuse.
            </summary>
            <param name="builder">The <see cref="T:System.Reflection.Emit.LocalBuilder"/> to return to the pool.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.LdcI4(System.Int32)">
            <summary>
            Emits the most efficient form of the <c>ldc_i4</c> IL instruction.
            </summary>
            <param name="i">The constant to be loaded.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.LdcI8(System.Int64)">
            <summary>
            Emits the most efficient form of loading 64bit integer on evaluation stack.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Ldloc(System.Int32)">
            <summary>
            Emits the most efficient form of <c>ldloc</c> IL instruction.
            </summary>
            <param name="i">The index of a local variable to be loaded.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Ldloc(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Emits the most efficient form of <c>ldloc</c> IL instruction.
            </summary>
            <param name="local">The local variable to be loaded.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Ldloca(System.Int32)">
            <summary>
            Emits the most efficient form of the <c>ldloca</c> IL instruction.
            </summary>
            <param name="i">The index of a local variable whose address to load.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Ldloca(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Emits the most efficient form of the <c>ldloca</c> IL instruction.
            </summary>
            <param name="local">The local variable whose address to load.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Ldarg(System.Int32)">
            <summary>
            Emits the most efficient form of the <c>ldarg</c> IL instruction.
            </summary>
            <param name="i">The index of an argument to be loaded.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Ldarga(System.Int32)">
            <summary>
            Emits the most efficient form of the <c>ldarga</c> IL instruction.
            </summary>
            <param name="i">The index of an argument whose address to load.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Starg(System.Int32)">
            <summary>
            Emits the most efficient form of the <c>starg</c> IL instruction.
            </summary>
            <param name="i">The index of argument to be stored.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Stloc(System.Int32)">
            <summary>
            Emits the most efficient form of the <c>stloc</c> IL instruction.
            </summary>
            <param name="i">The index of a local variable to be stored.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Stloc(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Emits the most efficient form of the <c>stloc</c> IL instruction.
            </summary>
            <param name="local">The local variable to be stored.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Ldind(System.Type)">
            <summary>
            Dereferences an address on the stack by emitting one of <c>Ldind</c> or <c>Ldobj</c>.
            </summary>
            <param name="type">Type of the referenced value.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Stind(System.Type)">
            <summary>
            Stores a value to an address on the stack by emitting one of <c>Stind</c> or <c>Stobj</c>.
            </summary>
            <param name="type">Type of the referenced value.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Conv(System.Type,System.Boolean)">
            <summary>
            Converts value on the stack to the provided <paramref name="type"/> using a <c>conv</c> or
            <c>conv.ovf</c> instruction variant.
            </summary>
            <param name="type">The target type.</param>
            <param name="overflow"><B>True</B> if a <c>ovf</c> variant should be used.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.LoadLiteral(System.Object)">
            <summary>
            Loads a literal to the evaluation stack.
            </summary>
            <param name="value">The value to be loaded. Should be of literal type.</param>
            <returns>The type of the <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">Invalid <paramref name="value"/> type.</exception>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.EmitLoadPhpBytes(PHP.Core.PhpBytes)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <remarks>TODO: move to CodeGenerator.</remarks>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.LoadBool(System.Boolean)">
            <summary>
            Loads a bool literal on the evaluation stack.
            </summary>
            <param name="value">The literal to load.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Load(System.Object)">
            <summary>
            Loads local variable, field, place or emits parameterless opcode.
            </summary>
            <param name="source">
            An instance of <see cref="T:System.Reflection.Emit.LocalBuilder"/>, <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:PHP.Core.Emit.IPlace"/>.
            </param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.LoadAddress(System.Object)">
            <summary>
            Loads address of local variable, field or place.
            </summary>
            <param name="source">
            An instance of <see cref="T:System.Reflection.Emit.LocalBuilder"/>, <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:PHP.Core.Emit.IPlace"/>.
            </param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.HasAddress(System.Object)">
            <summary>
            Gets whether the place has an address.
            </summary>
            <param name="source">
            An instance of <see cref="T:System.Reflection.Emit.LocalBuilder"/>, <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:PHP.Core.Emit.IPlace"/>.
            </param>
            <returns>Whether the place is addressable.</returns>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Store(System.Object)">
            <summary>
            Stores local variable, field, place or emits paramereless opcode.
            </summary>
            <param name="destination">
            An instance of <see cref="T:System.Reflection.Emit.LocalBuilder"/>, <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:PHP.Core.Emit.IPlace"/>.
            </param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.IncLoc(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Emits oprator ++ on local variable.
            </summary>
            <param name="local">The local variable builder.</param>
            <remarks>The original value of the local variable remains on the stack.</remarks>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.CmpNotNull">
            <summary>
            Emits comparison of the top of the stack (TOS) with <B>null</B>.
            </summary>
            <remarks>
            Loads a boolean <B>true</B> (TOS is not equal to <B>null</B>) or <B>false</B> 
            (TOS is equal to <B>null</B>) on the top of the stack.
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.Stelem(System.Type)">
            <summary>
            Stores an element into the array which should be on the top of the evaluation stack.
            </summary>
            <param name="type">The type of the element.</param>
            <exception cref="T:System.ArgumentException">Invalid <paramref name="type"/>.</exception>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.LoadBoxed(PHP.Core.Emit.IPlace)">
            <summary>
            Loads a value from a specified place on the evaluation stack and boxes it if it is of a value type.
            </summary>
            <param name="place">The place where to load a value from.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.EmitInitializedArray(System.Type,System.Int32,System.Action{PHP.Core.Emit.ILEmitter,System.Int32})">
            <summary>
            Emits a new vector creation and initialization. The resulting array is pushed onto the top of evaluation stack.
            </summary>
            <param name="elementType">Element type.</param>
            <param name="length">Array length.</param>
            <param name="emitItem">Action emitting an array item.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.EmitLoadInitializedArray(System.Type,System.Int32,System.Action{PHP.Core.Emit.ILEmitter,System.Int32})">
            <summary>
            Emits a new vector creation and initialization. The resulting array is on the top of the stack. Not stored in any local variable!
            </summary>
            <param name="elementType">Element type.</param>
            <param name="length">Array length.</param>
            <param name="emitItem">Action emitting an array item.</param>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.EmitOverloadedArgs(System.Type,System.Int32,System.Int32,System.Action{PHP.Core.Emit.ILEmitter,System.Int32})">
            <summary>
            Emits either an array of items or the items themselves depending on their number.
            Useful for emitting arguments of optimized overloads.
            </summary>
            <param name="elementType">Arguments type.</param>
            <param name="argCount">Number of actual arguments to be emitted.</param>
            <param name="explicitOverloads">Maximal number of arguments for which an explicit overload exists.</param>
            <param name="emitArg">Argument emitter.</param>
        </member>
        <member name="F:PHP.Core.Emit.ILEmitter.assignmentLocalBuilder">
            <summary>
            Holds a <see cref="T:System.Reflection.Emit.LocalBuilder"/> used as a storage for a source value of an assignment.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.GetAssignmentLocal">
            <summary>
            Returns a <see cref="T:System.Reflection.Emit.LocalBuilder"/> used as a storage for a source value of an assignment.
            </summary>
            <returns>The <see cref="T:System.Reflection.Emit.LocalBuilder"/>.</returns>
            <remarks>
            Returns a <see cref="T:System.Reflection.Emit.LocalBuilder"/> of type <see cref="T:System.Object"/>. The local is declared
            with the first call of this method.
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.EmitUnboxingForArg(PHP.Core.PhpTypeCode)">
            <summary>
            UnBox object containing value-type.
            </summary>
            <param name="type">Type of object to UnBox.</param>
            <remarks>Extracts the value contained within obj (of type O), it is equivalent to unbox followed by ldobj.</remarks>
        </member>
        <member name="P:PHP.Core.Emit.ILEmitter.ConstructorBuilder">
            <summary>
            GetUserEntryPoint whose body is being emitted by this emitter.
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.ILEmitter.ILOffset">
            <summary>
            Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream
            that is being emitted by the System.Reflection.Emit.ILGenerator.
            Returns the offset in the MSIL stream at which the next instruction will be emitted.
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.ILEmitter.LastEmittedOpCode">
            <summary>
            Returns the last <see cref="T:System.Reflection.Emit.OpCode"/> emitted by this <see cref="T:PHP.Core.Emit.ILEmitter"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.ILEmitter.IsPositionLabeled">
            <summary>
            Returns <B>true</B> if a <see cref="T:System.Reflection.Emit.Label"/> was marked at the current position, <B>false</B> otherwise.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.ILEmitter.FeaturePoint">
            <summary>
            Represents a distinguished position in the Microsoft intermediate language (MSIL) stream where a &quot;feature&quot;
            has been marked.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ILEmitter.FeaturePoint.branchTargets">
            <summary>
            Collection of <see cref="T:System.Reflection.Emit.Label"/>s marked and not forgotten since this <see cref="T:PHP.Core.Emit.ILEmitter.FeaturePoint"/> was created
            (keyed by <see cref="T:System.Reflection.Emit.Label"/>s, values unused).
            </summary>
            <remarks><seealso cref="M:PHP.Core.Emit.ILEmitter.FeaturePoint.MarkLabel(System.Reflection.Emit.Label)"/></remarks>
        </member>
        <member name="F:PHP.Core.Emit.ILEmitter.FeaturePoint.unresolvedBranches">
            <summary>
            Collection of <see cref="T:System.Reflection.Emit.Label"/>s - targets of branch instructions that had been emitted when this
            <see cref="T:PHP.Core.Emit.ILEmitter.FeaturePoint"/> was marked - that had not been marked at that time.
            </summary>
            <remarks>
            This is a snapshot of <see cref="F:PHP.Core.Emit.ILEmitter.unresolvedBranches"/> at the time this <see cref="T:PHP.Core.Emit.ILEmitter.FeaturePoint"/>
            was marked.
            <seealso cref="M:PHP.Core.Emit.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)"/><seealso cref="M:PHP.Core.Emit.ILEmitter.FeaturePoint.MarkLabel(System.Reflection.Emit.Label)"/>
            </remarks>
        </member>
        <member name="F:PHP.Core.Emit.ILEmitter.FeaturePoint.forwardBranchResolved">
            <summary>
            <B>null</B> if a branch target was resolved (marked) - one that was unresolved when this <see cref="T:PHP.Core.Emit.ILEmitter.FeaturePoint"/>
            - was marked.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.FeaturePoint.#ctor(System.Collections.Generic.Dictionary{System.Reflection.Emit.Label,System.Object})">
            <summary>
            Creates a new <see cref="T:PHP.Core.Emit.ILEmitter.FeaturePoint"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.FeaturePoint.MarkLabel(System.Reflection.Emit.Label)">
            <summary>
            Notifies this <see cref="T:PHP.Core.Emit.ILEmitter.FeaturePoint"/> that a <see cref="T:System.Reflection.Emit.Label"/> has been marked.
            </summary>
            <param name="loc">The label.</param>
            <remarks><seealso cref="M:PHP.Core.Emit.ILEmitter.MarkLabel(System.Reflection.Emit.Label,System.Boolean)"/></remarks>
        </member>
        <member name="M:PHP.Core.Emit.ILEmitter.FeaturePoint.ForgetLabel(System.Reflection.Emit.Label)">
            <summary>
            Notifies this <see cref="T:PHP.Core.Emit.ILEmitter.FeaturePoint"/> that a <see cref="T:System.Reflection.Emit.Label"/> has been forgotten.
            </summary>
            <param name="loc">The label.</param>
            <remarks><seealso cref="M:PHP.Core.Emit.ILEmitter.ForgetLabel(System.Reflection.Emit.Label)"/></remarks>
        </member>
        <member name="P:PHP.Core.Emit.ILEmitter.FeaturePoint.IsControlFlowPrecedent">
            <summary>
            Determines whether the Microsoft intermediate language (MSIL) stream's current position is unconditionally
            preceded by the position where this <see cref="T:PHP.Core.Emit.ILEmitter.FeaturePoint"/> was defined.
            </summary>
            <remarks><seealso cref="M:PHP.Core.Emit.ILEmitter.IsFeatureControlFlowPrecedent(System.Object)"/></remarks>
        </member>
        <member name="M:PHP.Core.Emit.LibraryBuilder.CreateDynamicWrapper(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Creates a dynamic wrapper of a specified assembly.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.LibraryBuilder.CreateDynamicWrapper(System.Type,System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Creates a dynamic wrapper of a specified assembly.
            </summary>
            <param name="assembly">The assembly which wrapper to create.</param>
            <param name="directory">A target directory. A <B>null</B> reference means CL dynamic directory.</param>
            <param name="attr">Specifies a type of the 'ImplementsFunction' attribute. If it
            ios set to null, the type from the current assembly is used.</param>
            <param name="filename">File name of the resulting dynamic wrapper.</param>
            <returns>The generated assembly file path.</returns>
            <remarks>
            <para>
            Called either by utility or when indirect call or callback is to be made but 
            target is not found in cache and dynamic wrapper doesn't exists. 
            This implies that functions table has to be populated. 
            </para>
            <para>
            Functions table is traversed and all methods declared in <paramref name="assembly"/>
            is added to a new dynamic wrapper.
            </para>
            </remarks>
            <exception cref="T:System.Exception">Something went wrong during assembly building.</exception>
        </member>
        <member name="T:PHP.Core.Reflection.DModule">
            <remarks>
            REFLECTION: Reflection should add reflected items to the compilation unit. 
            When ScriptModule is reflected, the scope in the CU's tables is set to arbitrary > 0 value for
            conditional items ($mdeclN). N may encode the scope (if useful). Thus it is not necessary to
            create any kind of Declaration instances for the reflected items.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DModule.#ctor(PHP.Core.Reflection.DAssembly)">
            <summary>
            Used by the loader.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DModule.#ctor">
            <summary>
            Used by <see cref="T:PHP.Core.Reflection.UnknownModule"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpModule.#ctor(PHP.Core.Reflection.CompilationUnitBase,PHP.Core.Reflection.PhpAssembly)">
            <summary>
            Used by the builder.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpModule.#ctor(PHP.Core.Reflection.DAssembly)">
            <summary>
            Used by the loader.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PureModule.#ctor(PHP.Core.Reflection.DAssembly)">
            <summary>
            Called by the loader. The module can be loaded to <see cref="T:PHP.Core.Reflection.PureAssembly"/> or 
            <see cref="T:PHP.Core.Reflection.PhpLibraryAssembly"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PureModule.#ctor(PHP.Core.Reflection.PureCompilationUnit,PHP.Core.Reflection.PureAssembly)">
            <summary>
            Called by the builder.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.PureModuleBuilder.EmitDeclareHelper">
            <summary>
            Emits helper declaring all single-declared functions and classes in the script being built.
            </summary>
            <remarks>
            For each function and class emits a call to <see cref="M:PHP.Core.ApplicationContext.DeclareFunction(PHP.Core.RoutineDelegate,System.String,PHP.Core.PhpMemberAttributes,System.Reflection.MethodInfo)"/> and 
            <see cref="M:PHP.Core.ApplicationContext.DeclareType(PHP.Core.Reflection.DTypeDesc,System.String)"/>, respectively, which declares it.
            The helper is called as the first instruction of Main helper. 
            </remarks>		
        </member>
        <member name="M:PHP.Core.Emit.PureModuleBuilder.EmitPhpFunctionPublicStub(System.Reflection.Emit.TypeBuilder@,PHP.Core.Reflection.PhpFunction)">
            <summary>
            Emit publically accessible stub that just calls argfull of <paramref name="function"/>.
            </summary>
            <returns><see cref="T:System.Reflection.MethodInfo"/> of newly created function stub.</returns>
        </member>
        <member name="T:PHP.Core.Emit.ScriptBuilder">
            <summary>
            Provides means for building scripts.
            </summary>
            <summary>
            Provides means for building scripts.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.ScriptModule">
            <summary>
            Represents a script virtual module.
            </summary>
            <summary>
            Represents a script virtual module.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.ScriptModule.ScriptTypeName">
            <summary>
            The name of the class containing script functions and helpers.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.ScriptModule.SkippedIncludeReturnValue">
            <summary>
            Value returned from skipped include construct.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.ScriptModule.DefaultMainReturnValue">
            <summary>
            Value returned from script's Main() method if no return value is specified.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.ScriptModule.MainHelperName">
            <summary>
            The name of the main helper method (containing global code). 
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.ScriptModule.DeclareHelperArgTypes">
            <summary>
            Declare functions helper argument types.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptModule.#ctor(PHP.Core.Reflection.CompilationUnit,PHP.Core.Reflection.ScriptAssembly,System.String)">
            <summary>
            Used by the builder.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptModule.#ctor(System.String,System.Type,PHP.Core.Reflection.ScriptAssembly,System.String)">
            <summary>
            Used by the loader.
            </summary>
            <param name="relativeSourcePath">Path to the source file which is represented by this script.</param>
            <param name="scriptType">Type which represents script. Implements IPhpScript interface.</param>
            <param name="scriptAssembly">Script assembly this script module belongs to.</param>
            <param name="subnamespace">Namespace where all types statically declared in this script are contained.</param>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptModule.CreateCompilationUnit">
            <summary>
            This method is used when module is reflected (and is not intended
            to be compiled).
            </summary>
            <returns>Returns new instance of ReflectedCompilationUnit.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptModule.GetSubnamespace(PHP.Core.RelativePath,System.Boolean)">
            <summary>
            Translates a source path to a namespace using the current source root from configuration.
            </summary>
            <returns>The namespace optionally ending with a dot.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptModule.GetPathFromSubnamespace(System.String)">
            <summary>
            Translates namespace name to file path.
            (Decodes namespace names encoded using <see cref="M:PHP.Core.Reflection.ScriptModule.GetSubnamespace(PHP.Core.RelativePath,System.Boolean)"/> method).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptModule.Reflect(System.Boolean,System.Collections.Generic.Dictionary{System.String,PHP.Core.Reflection.DTypeDesc},System.Collections.Generic.Dictionary{System.String,PHP.Core.Reflection.DRoutineDesc},PHP.Core.DualDictionary{System.String,PHP.Core.Reflection.DConstantDesc})">
            <summary>
            Reflect types, functions and constants in compiled CU
            </summary>
            <param name="full">Not used.</param>
            <param name="functions">Will contain reflected functions.</param>
            <param name="types">Will contain reflected classes.</param>
            <param name="constants">Not used.</param>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptModule.CollectIncludees(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Boolean})">
            <summary>
            Collect scripts to reflect from.
            </summary>
            <param name="scriptType">The Script type to collect.</param>
            <param name="reachedScripts">Scripts reached using static inclusions. Used also as recursion prevention.</param>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptModule.ReflectScriptTypeClasses(System.Type,System.Collections.Generic.Dictionary{System.String,PHP.Core.Reflection.DTypeDesc})">
            <summary>
            Reflect PHP classes declared statically in the given script <c>type</c>.
            </summary>
            <param name="scriptType">Script type to reflect.</param>
            <param name="types">List of types to reflect to.</param>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptModule.ReflectScriptTypeFunctions(System.Type,System.Collections.Generic.Dictionary{System.String,PHP.Core.Reflection.DRoutineDesc})">
            <summary>
            reflect global functions in &lt;Script&gt; class
            TODO: consider merging with PhpTypeDesc.FullReflectMethods
            </summary>
            <param name="functions">Dictionary for functions</param>
            <param name="scriptType">The type to reflect from.</param>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptModule.ReflectScriptTypeConstants(System.Type,PHP.Core.DualDictionary{System.String,PHP.Core.Reflection.DConstantDesc})">
            <summary>
            Reflect global constants in &lt;script&gt; class.
            </summary>
            <param name="scriptType">The type representing single script.</param>
            <param name="constants">Dictionary for constants.</param>
        </member>
        <member name="F:PHP.Core.Reflection.ScriptModule.MainHelperArgTypes">
            <summary>
            Main helper argument types.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ScriptModule.ScriptAssembly">
            <summary>
            A script assembly where the script belongs to.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ScriptModule.UserTypesNamespace">
            <summary>
            Gets a namespace where user classes and interfaces are declared in.
            Ends with a <see cref="F:System.Type.Delimiter"/> (a dot) for convenience.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ScriptModule.ScriptType">
            <summary>
            Gets the script type.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ScriptModule.ScriptInfo">
            <summary>
            Gets the script info containing the type and Main delegate.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ScriptModule.MainHelper">
            <summary>
            MainHelper method, which is called when inclusion is made.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ScriptModule.RelativeSourcePath">
            <summary>
            Gets the relative path of the source file represented by this ScriptModule.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ScriptBuilder.ArgContext">
            <summary>
            An index of "context" argument in all helpers.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ScriptBuilder.ArgVariables">
            <summary>
            An index of "variables" argument in all helpers.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ScriptBuilder.ArgSelf">
            <summary>
            An index of "self" argument used in some helpers.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ScriptBuilder.ArgIncluder">
            <summary>
            An index of "includer" argument used in some helpers.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ScriptBuilder.ArgIsMain">
            <summary>
            An index of "isMain" argument in Main helper.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ScriptBuilder.#ctor(PHP.Core.Reflection.ScriptCompilationUnit,PHP.Core.Emit.ScriptAssemblyBuilder,System.String)">
            <summary>
            Creates a new script builder.
            </summary>
            <param name="unit">Compilation unit.</param>
            <param name="assemblyBuilder">Script assembly builder.</param>
            <param name="subnamespace">The script's subnamespace ending with a type delimiter or a <B>null</B> reference.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:PHP.Core.Emit.ScriptBuilder.DefineMainHelper(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Defines script type members - helpers and constructors.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.ScriptBuilder.SetScriptAttribute(PHP.Core.Emit.ScriptBuilder.ScriptAttributes)">
            <summary>
            Emit the Script attribute with includes,includers,relativePath and timeStamp info.
            </summary>
            <param name="emitAttributes">Specifies single infos to emit.</param>
        </member>
        <member name="P:PHP.Core.Emit.ScriptBuilder.MainHelperBuilder">
            <summary>
            Gets the Main helper/Main static method builder.
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.ScriptBuilder.DeclareHelperBuilder">
            <summary>
            Gets declare helper builder.
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.ScriptBuilder.SourceTimestampUtc">
            <summary>
            Timestamp of the source file when the script builder is created.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ScriptBuilder.ScriptAttributes.Script">
            <summary>
            Time stamp and file name.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ScriptBuilder.ScriptAttributes.ScriptIncluders">
            <summary>
            List of Scripts that statically include this Script.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ScriptBuilder.ScriptAttributes.ScriptIncludees">
            <summary>
            List of Scripts that are statically included by this Script.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ScriptBuilder.ScriptAttributes.ScriptDeclares">
            <summary>
            List of PHP types fully and statically declared by this Script.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.ScriptBuilder.ScriptAttributes.All">
            <summary>
            All the available info is emitted.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.TransientModuleBuilder">
            <summary>
            Provides means for building transient modules.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.TransientModule">
            <summary>
            Represents a script virtual module.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.TransientModule.IdDelimiters">
            <summary>
            Characters separating <see cref="F:PHP.Core.Reflection.TransientModule.sourcePath"/> and <see cref="P:PHP.Core.Reflection.TransientModule.Id"/>.
            Character at <c>0</c> is for special names.
            Character at <c>1</c> is for normal names.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.TransientModule.#ctor(System.Int32,PHP.Core.EvalKinds,PHP.Core.Reflection.TransientCompilationUnit,PHP.Core.Reflection.TransientAssembly,PHP.Core.Reflection.TransientModule,System.String)">
            <summary>
            Used by the builder.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.TransientModule.GetErrorString">
            <summary>
            Gets a string appearing in error messages.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="T:PHP.Core.Emit.OverloadsBuilder">
            <summary>
            Builder of overloads-aware library functions indirect calls.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.#ctor(System.Boolean,PHP.Core.Emit.IPlace,PHP.Core.Emit.OverloadsBuilder.ParameterLoader,PHP.Core.Emit.OverloadsBuilder.ParameterLoader,PHP.Core.Emit.OverloadsBuilder.ParametersLoader)">
            <summary>
            Creates a new instance of <see cref="T:PHP.Core.Emit.OverloadsBuilder"/>.
            </summary>
            <param name="debug">
            Whether the emitted code is to be debuggable.
            </param>
            <param name="stack">
            Place where the <see cref="T:PHP.Core.PhpStack"/> instance can be loaded from.
            </param>
            <param name="loadValueParam">
            Delegate called when value parameter is to be loaded on evaluation stack.
            The target method should guarantee that a value is loaded on evaluation stack.
            </param>
            <param name="loadReferenceParam">
            Delegate called when PHP reference parameter is to be loaded on evaluation stack.
            The target method should guarantee that the object reference of type <see cref="T:PHP.Core.PhpReference"/> 
            is loaded on the evaluation stack. This object reference should not be a <B>null</B>.
            </param>
            <param name="loadOptParams">
            Delegate called when an array of optional arguments is to be loaded on evaluation stack.
            The target method should load that array on the evaluation stack.
            </param>
        </member>
        <member name="F:PHP.Core.Emit.OverloadsBuilder.overloadCallSkipEmitter">
            <summary>
            An action used to emit jump onto the end of overload call - after the overload method call.
            A value must be put onto the evaluation stack and jump must be performed.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.OverloadsBuilder.pushedArgsCount">
            <summary>
            The number of arguments that has been pushed on the evaluation stack so far.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.OverloadsBuilder.refHolders">
            <summary>
            A list of local variable builders holding values of arguments passed by reference.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.OverloadsBuilder.refReferences">
            <summary>
            A list of local variable builders where arguments passed by reference are stored.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.EmitCallSwitch(PHP.Core.Emit.IPlace,PHP.Core.Emit.IPlace,PHP.Core.Emit.IPlace,PHP.Core.Emit.IPlace,PHP.Core.Emit.IPlace,System.Collections.Generic.List{PHP.Core.Reflection.PhpLibraryFunction.Overload})">
             <summary>
             Emits calls to specified overloads and a switch statement which calls appropriate overload 
             according to the current value of <see cref="F:PHP.Core.PhpStack.ArgCount"/> field of the current stack. 
             </summary>
             <param name="thisRef">Reference to self.</param>
             <param name="script_context">Current script context.</param>
             <param name="rtVariables">
             Place where a run-time variables table can be loaded from.
             </param>
             <param name="namingContext">Naming context load-from place.</param>
             <param name="classContext">Class context load.</param>
             <param name="overloads">The overload list.</param>
             <remarks>
             Example: given overloads (2,5,7,9+), i.e. there are four overloads having 2, 5, 7 and 9 PHP parameters,
             respectively, and the last overload is marked as vararg,
             the method emits the following code:
             <code>
             switch(ArgCount - 2)                  // 2 = minimum { arg count of overload }
             {
               case 0: return call #2;             // call to the 2nd overload with appropriate arg. and return value handling
               case 1: goto case error;
               case 2: goto case error;
               case 3: return call #5;
               case 4: goto case error;
               case 5: return call #7;
               case 6: goto case error;
             
             #if vararg 
               case 7: goto default; 
               default: return call #vararg (9 mandatory args,optional args);break;
             #elif
               case 7: return call #9;
               default: goto case error;
             #endif
            
               case error: PhpException.InvalidArgumentCount(null, functionName); break;
             }
             </code>
             </remarks>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.EmitOverloadCall(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[],System.Int32,PHP.Core.Emit.IPlace,PHP.Core.Emit.IPlace,PHP.Core.Emit.IPlace,PHP.Core.Emit.IPlace,PHP.Core.Emit.IPlace,PHP.Core.Emit.IPlace,System.Boolean)">
            <summary>
            Emits call to specified overload.
            </summary>
            <param name="method">The overload implementor.</param>
            <param name="ps">Formal parameters of the <paramref name="method"/>.</param>
            <param name="phpParamCount">The number of PHP arguments of the overload.</param>
            <param name="scriptContext">A place where current script context should be loaded from.</param>
            <param name="rtVariables">A place where run-time variables table should be loaded from.</param>
            <param name="namingContext">A place where the naming can be load from.</param>
            <param name="classContext">A place where the class context can be load from.</param>
            <param name="optArgs">A place where the number of optional arguments should be loaded from.</param>
            <param name="selfRef">A place where reference to 'self' ($this) can be loaded from.</param>
            <param name="ignoringReturnValue">True if the return value of the function call is not used then.</param>
            <returns>A type of value stored on the top of the evaluation stack. In case of value type, it is NOT boxed.</returns>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.EmitMandatoryArgumentLoad(System.Int32,System.Reflection.ParameterInfo)">
            <summary>
            Emits load of a specified mandatory argument and appropriate conversions on it.
            Leaves the result on the evaluation stack so it can be later passed as an argument to a method.
            </summary>
            <param name="index">The index of the parameter counted from zero.</param>
            <param name="param">The parameter.</param>
            <remarks>
            Arguments passed by object reference (ref/out) are handled in the manner of in/out semantics.
            If the argument is passed by object reference a holder local variable of the smae type is created.
            A reference passed as the actual argument is peeked from PHP stack, converted to the target type by 
            <see cref="M:PHP.Core.Emit.OverloadsBuilder.EmitArgumentConversion(System.Type,System.Object,System.Boolean,System.Reflection.ParameterInfo,System.Int32)"/> and stored in the holder. Then the holder's address is passed
            to the overload. On the return from the overload each holder's value is stored back to 
            the actual argument by <see cref="M:PHP.Core.Emit.OverloadsBuilder.EmitReferencesLoad"/>. In order to do so holder local variable builders
            and the local variables builders storing the actual argument are added to <see cref="F:PHP.Core.Emit.OverloadsBuilder.refHolders"/> and 
            <see cref="F:PHP.Core.Emit.OverloadsBuilder.refReferences"/>, respectively, by this method.
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.EmitReferencesLoad">
            <summary>
            Emits code loading values stored in holder variables into respective references.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.EmitArgumentConversion(System.Type,System.Object,System.Boolean,System.Reflection.ParameterInfo,System.Int32)">
            <summary>
            Emits code converting argument on the evaluation stack to a specified type using PHP.NET library conversions. 
            Used for conversion of elements of params array optional arguments,
            for conversion of a content of mandatory by-ref holder, and
            for conversion of mandatory in argument.
            </summary>
            <param name="dstType">
            The type of the formal argument. Shouldn't be <see cref="P:System.Type.IsByRef"/>.
            </param>
            <param name="srcTypeOrValue">
            The type of the formal argument or its value if it is a literal.
            </param>
            <param name="allowImplicitCast">Whether to allow implicit cast of types PhpArray, PhpObject, PhpResource.</param>
            <param name="param">The formal argument description.</param>
            <param name="additionalValuesOnStackCount">Amount of values pushed on stackl, that have to be cleaned up in case of failed conversion.</param>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.EmitReturnValueConversion(System.Reflection.MethodInfo,System.Type@)">
            <summary>
            Emits code handling return value conversions. The value is on the top of the evaluation stack.
            </summary>
            <param name="method">The method which return value conversion to emit.</param>
            <param name="return_type">A type of return value (that is on the top of evaluation stack) to be converted.</param>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.EmitCastShortBranch(System.Type,System.Reflection.Emit.Label)">
            <summary>
            Emits casting to false branch. 
            </summary>
            <param name="returnType">A return type.</param>
            <param name="noCastLabel">The label where to jump if the cast doesn't take place.</param>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.EmitLoadDefault(PHP.Core.Emit.ILEmitter,System.Reflection.MethodInfo)">
            <summary>
            Emits load of default value assuming given method fails.
            </summary>
            <param name="il">ILEmitter.</param>
            <param name="method">Method which default return value have to be loaded.</param>
            <returns></returns>
        </member>
        <member name="P:PHP.Core.Emit.OverloadsBuilder.Aux">
            <summary>
            An auxiliary object which builder doesn't care about.
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.OverloadsBuilder.IL">
            <summary>
            The IL generator used to emit code.
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.OverloadsBuilder.FunctionName">
            <summary>
            The name of the function currently emitted.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.OverloadsBuilder.OverloadTreeNode">
            <summary>
            Node in overload decision tree
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.OverloadsBuilder.OverloadTreeNode.overload">
            <summary>
            Object representing overload of a library function. This is null if the node is not a leaf in the tree.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.OverloadsBuilder.OverloadTreeNode.childNodes">
            <summary>
            Dictionary of child node pairs.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.OverloadTreeNode.#ctor(PHP.Core.Reflection.PhpLibraryFunction.Overload[])">
            <summary>
            Initializes new decision tree using supplied overload array. 
            </summary>
            <param name="overloads"></param>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.OverloadTreeNode.#ctor(System.Int32,PHP.Core.Reflection.PhpLibraryFunction.Overload[])">
            <summary>
            Initializes new decisin tree using supplied overload array and decision index.
            </summary>
            <param name="index">Argument index which to start at.</param>
            <param name="overloads">Array of overloads.</param>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.OverloadTreeNode.TestDecisionPoint(System.Int32,PHP.Core.Reflection.PhpLibraryFunction.Overload[])">
            <summary>
            Tests whether an argument index is a decision point on a set of overloads.
            </summary>
            <param name="index">Argument index.</param>
            <param name="overloads">Array of overloads.</param>
            <returns>True if decision is present on the index, otherwise false.</returns>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.OverloadTreeNode.SortOverloads(System.Int32,PHP.Core.Reflection.PhpLibraryFunction.Overload[])">
            <summary>
            Topological sort of types for their partial order. Sort is in-place. Specialized types come first, generic last.
            </summary>
            <param name="index">Index of argument which will be used for sorting.</param>
            <param name="overloads">Array of overloads.</param>
            <returns>Returns the same reference as it gets in "overloads" argument.</returns>
        </member>
        <member name="M:PHP.Core.Emit.OverloadsBuilder.OverloadTreeNode.DivideOverloads(System.Int32,PHP.Core.Reflection.PhpLibraryFunction.Overload[])">
            <summary>
            Takes array of overloads and divides them into groups. Takes into account argument index (depth) of this node.
            </summary>
            <param name="index"></param>
            <param name="overloads">Array of overload descriptors.</param>
            <returns>Dictionary of </returns>
        </member>
        <member name="T:PHP.Core.Emit.OverloadsBuilder.OverloadForest">
            <summary>
            Represents collection of overload decision trees, each representing one count of arguments.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.OverloadsBuilder.ParameterLoader">
            <summary>
            A delegate used to load a parameter to evaluation stack.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.PhpObjectBuilder">
            <summary>
            Utilities for emitting PHP classes.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PhpObjectBuilder.StaticFieldInitMethodName">
            <summary>
            Name of the method that initializes (thread) static fields.
            </summary>
            <remarks>This name does not have the &lt;x&gt; format in order to be a valid C# identifier.</remarks>
        </member>
        <member name="F:PHP.Core.Emit.PhpObjectBuilder.PopulateTypeDescMethodName">
            <summary>
            Name of the method that populates the typedesc corresponding to the type.
            </summary>
            <remarks>This name does not have the &lt;x&gt; format in order to be a valid C# identifier.</remarks>
        </member>
        <member name="F:PHP.Core.Emit.PhpObjectBuilder.InstanceFieldInitMethodName">
            <summary>
            Name of the method that initializes instance fields.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PhpObjectBuilder.TypeDescFieldName">
            <summary>
            Name of the field that contains reference to the corresponding <see cref="T:PHP.Core.Reflection.PhpTypeDesc"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PhpObjectBuilder.ProxyFieldName">
            <summary>
            Name of the field that contains reference to the corresponding <see cref="T:PHP.Core.Reflection.ClrObject"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PhpObjectBuilder.ShortConstructorAttributes">
            <summary>
            Attributes used while creating the short constructor of the class.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PhpObjectBuilder.LongConstructorAttributes">
            <summary>
            Attributes used while creating the long constructor of the class.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PhpObjectBuilder.DeserializingConstructorAttributes">
            <summary>
            Attributes used while creating the deserializing constructor of the class.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PhpObjectBuilder.ShortConstructorParamTypes">
            <summary>
            Parameter types of the short constructor.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PhpObjectBuilder.LongConstructorParamTypes">
            <summary>
            Parameter types of the long constructor.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PhpObjectBuilder.DeserializingConstructorParamTypes">
            <summary>
            Parameter types of the deserializing constructor.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.EmitClassConstructors(PHP.Core.Reflection.PhpType)">
            <summary>
            Emits constructors into a class.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.EmitFinalizer(PHP.Core.Reflection.PhpType)">
            <summary>
            Emit the PhpType finalizer. The finalizer is emitted only if there is __destruct() function
            and there is no finalizer in any base class already. The finalizer calls this.Dispose() which
            calls __destruct() function directly.
            </summary>
            <param name="phpType"></param>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.EmitDeserializingConstructor(PHP.Core.Reflection.PhpType)">
            <summary>
            Emits deserializing (SerializiationInfo, StreamingContext) constructor.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.EmitShortConstructor(PHP.Core.Reflection.PhpType)">
            <summary>
            Emits (ScriptContext, bool) constructor.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.EmitLongConstructor(PHP.Core.Reflection.PhpType)">
            <summary>
            Emits (ScriptContext, DTypeDesc) constructor.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.DefineExportedConstructors(PHP.Core.Reflection.PhpType)">
            <summary>
            Defines CLR-friendly constructors based on a PHP &quot;constructor&quot; method.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.DefineDeserializingConstructor(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Generates the (<see cref="T:System.Runtime.Serialization.SerializationInfo"/>, <see cref="T:System.Runtime.Serialization.StreamingContext"/>) constructor.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <remarks>
            Part of the constructor body - containing a call to parent's deserializing constructor - is generated.
            At least a <see cref="F:System.Reflection.Emit.OpCodes.Ret"/> has to be emitted to make the constructor complete.
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.GenerateLongConstructor(System.Reflection.Emit.TypeBuilder,System.Reflection.ConstructorInfo)">
            <summary>
            Generates the (<see cref="T:PHP.Core.ScriptContext"/>, <see cref="T:PHP.Core.Reflection.DTypeDesc"/>) constructor.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="shortConstructor">This type's short constructor.</param>
            <returns>The constructor builder.</returns>
            <remarks>
            The entire constructor is generated. See <see cref="M:PHP.Core.PhpObject.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)"/>.
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.DefineShortConstructor(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Defines the (<see cref="T:PHP.Core.ScriptContext"/>) constructor.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <returns>The constructor builder.</returns>
            <remarks>
            Part of the constructor body - containing a call to parent's short constructor - is generated.
            At least an <see cref="F:System.Reflection.Emit.OpCodes.Ret"/> has to be emitted to make the constructor complete.
            </remarks>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.EmitInitFieldHelpers(PHP.Core.Reflection.PhpType)">
            <summary>
            Emits init field helpers (<c>__lastContext</c> field, <c>&lt;InitializeInstanceFields&gt;</c>
            method and <c>__InitializeStaticFields</c> into a class.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.GenerateTypeDescPopulation(PHP.Core.Reflection.PhpType)">
            <summary>
            Generates a <c>&lt;PopulateTypeDesc&gt;</c> method that populates a <see cref="T:PHP.Core.Reflection.DTypeDesc"/>
            at runtime (instead of reflecting the class).
            </summary>
            <param name="phpType">The class representation used in the compiler.</param>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.GenerateTypeDescPopulation(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.ICollection{PHP.Core.Emit.PhpObjectBuilder.InfoWithAttributes{System.Reflection.MethodInfo}},System.Collections.Generic.ICollection{PHP.Core.Emit.PhpObjectBuilder.InfoWithAttributes{System.Reflection.FieldInfo}},System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Reflection.FieldInfo,System.Object}})">
            <summary>
            Generates a <c>__PopulateTypeDesc</c> method that populates a <see cref="T:PHP.Core.Reflection.DTypeDesc"/>
            at runtime (instead of reflecting the class).
            </summary>
            <param name="typeBuilder">The target <see cref="T:System.Reflection.Emit.TypeBuilder"/>.</param>
            <param name="methods">The methods to add to the type desc.</param>
            <param name="fields">The fields to add to the type desc.</param>
            <param name="constants">The constants to add to the type desc. Together with their value. (Consts are public static literal fields)</param>
            <remarks>Used by WrapperGen.</remarks>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.DefineStaticFieldInitMethod(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Defines the <c>__InitializeStaticFields</c> static method.
            </summary>
            <param name="typeBuilder">The <see cref="T:System.Reflection.Emit.TypeBuilder"/> to define the method in.</param>
            <returns>The <see cref="T:System.Reflection.Emit.MethodBuilder"/>.</returns>
        </member>
        <member name="M:PHP.Core.Emit.PhpObjectBuilder.DefinePopulateTypeDescMethod(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Defines the <c>__PopulateTypeDesc</c> static method.
            </summary>
            <param name="typeBuilder">The <see cref="T:System.Reflection.Emit.TypeBuilder"/> to define the method in.</param>
            <returns>The <see cref="T:System.Reflection.Emit.MethodBuilder"/>.</returns>
        </member>
        <member name="T:PHP.Core.Emit.PhpObjectBuilder.InfoWithAttributes`1">
            <summary>
            Used by the <c>WrapperGen</c> to generate the <see cref="F:PHP.Core.Emit.PhpObjectBuilder.PopulateTypeDescMethodName"/> method.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.PhpStackBuilder">
            <summary>
            Methods used for emitting <see cref="T:PHP.Core.PhpStack"/> operations.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.PhpStackBuilder.EmitPeekAllArguments(PHP.Core.Emit.OverloadsBuilder,System.Int32,System.Reflection.ParameterInfo,PHP.Core.Emit.IPlace)">
            <summary>
            Emits load of an array where all optional arguments are stored.
            Each optional argument is peeked from the PHP stack and converted before stored to the array.
            The resulting array is pushed on evaluation stack so it can be later passed as an argument to a method.
            </summary>
            <param name="builder">The builder.</param>
            <param name="start">The index of the first argument to be loaded.</param>
            <param name="param">The last parameter of the overload (should be an array).</param>
            <param name="optArgCount">The place where the number of optional arguments is stored.</param>
            <remarks>Assumes that the non-negative number of optional arguments has been stored to 
            <paramref name="optArgCount"/> place.</remarks>
        </member>
        <member name="T:PHP.Core.Emit.PlaceHolder">
            <summary>
            Type of the place where a value is stored.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PlaceHolder.None">
            <summary>
            The value has no storage, it is a direct value.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PlaceHolder.Argument">
            <summary>
            The value is stored in a method argument.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PlaceHolder.Local">
            <summary>
            The value is stored in a local variable.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.PlaceHolder.Field">
            <summary>
            The value is stored in a field.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.IndexedPlace">
            <summary>
            A storage place that represents a local variable or a method argument given by their index,
            or a direct integer value.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.IndexedPlace.holder">
            <summary>
            The type of this place - can be either <see cref="F:PHP.Core.Emit.PlaceHolder.None"/>, <see cref="F:PHP.Core.Emit.PlaceHolder.Argument"/> or
            <see cref="F:PHP.Core.Emit.PlaceHolder.Local"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.IndexedPlace.index">
            <summary>
            The index/direct value.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.IndexedPlace.ThisArg">
            <summary>
            A special read-only <see cref="T:PHP.Core.Emit.IndexedPlace"/> that loads <B>this</B> (0th argument).
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.IndexedPlace.#ctor(PHP.Core.Emit.PlaceHolder,System.Int32)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Emit.IndexedPlace"/> of a given type and with a given index/direct value.
            </summary>
            <param name="holder">The place type. Should be either <see cref="F:PHP.Core.Emit.PlaceHolder.None"/>,
            <see cref="F:PHP.Core.Emit.PlaceHolder.Argument"/> or <see cref="F:PHP.Core.Emit.PlaceHolder.Local"/>.</param>
            <param name="index">The index (direct value).</param>
        </member>
        <member name="M:PHP.Core.Emit.IndexedPlace.#ctor(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Emit.IndexedPlace"/> of given local variable.
            </summary>
            <param name="local">Local variable to be used.</param>
        </member>
        <member name="M:PHP.Core.Emit.IndexedPlace.EmitLoad(PHP.Core.Emit.ILEmitter)">
            <summary>
            Emits code that loads the value from this storage place.
            </summary>
            <param name="il">The <see cref="T:PHP.Core.Emit.ILEmitter"/> to emit the code to.</param>
        </member>
        <member name="M:PHP.Core.Emit.IndexedPlace.EmitLoadAddress(PHP.Core.Emit.ILEmitter)">
            <summary>
            Emits code that loads address of this storage place.
            </summary>
            <param name="il">The <see cref="T:PHP.Core.Emit.ILEmitter"/> to emit the code to.</param>
        </member>
        <member name="M:PHP.Core.Emit.IndexedPlace.EmitStore(PHP.Core.Emit.ILEmitter)">
            <summary>
            Emits code that stores a value to this storage place.
            </summary>
            <param name="il">The <see cref="T:PHP.Core.Emit.ILEmitter"/> to emit the code to.</param>
        </member>
        <member name="P:PHP.Core.Emit.IndexedPlace.Index">
            <summary>
            Sets or gets the index (direct value).
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.IndexedPlace.HasAddress">
            <summary>
            Gets whether the place has an address.
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.IndexedPlace.PlaceType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the value stored in this storage place.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.TokenPlace">
            <summary>
            A read-only storage place that represents a metadata token.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.TokenPlace.source">
            <summary>
            Runtime representation of the token.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.TokenPlace.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Emit.TokenPlace"/> given a <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="source">The <see cref="T:System.Reflection.MemberInfo"/>.</param>
        </member>
        <member name="M:PHP.Core.Emit.TokenPlace.EmitLoad(PHP.Core.Emit.ILEmitter)">
            <summary>
            Emits code that loads the value from this storage place.
            </summary>
            <param name="il">The <see cref="T:PHP.Core.Emit.ILEmitter"/> to emit the code to.</param>
        </member>
        <member name="M:PHP.Core.Emit.TokenPlace.EmitStore(PHP.Core.Emit.ILEmitter)">
            <summary>
            Emits code that stores a value to this storage place.
            </summary>
            <param name="il">The <see cref="T:PHP.Core.Emit.ILEmitter"/> to emit the code to.</param>
        </member>
        <member name="P:PHP.Core.Emit.TokenPlace.PlaceType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the value stored in this storage place.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.Place">
            <summary>
            A storage place that represents a local variable, a field, or a property given by their
            <see cref="T:System.Reflection.Emit.LocalBuilder"/>, <see cref="T:System.Reflection.FieldInfo"/>, or <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.Place.holder">
            <summary>
            Holder of the field or a <B>null</B> reference (a local variable or a static field).
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.Place.source">
            <summary>
            The <see cref="T:System.Reflection.Emit.LocalBuilder"/>, <see cref="T:System.Reflection.FieldInfo"/>, or <see cref="T:System.Reflection.PropertyInfo"/>
            where the value is stored.
            </summary>
        </member>
        <member name="M:PHP.Core.Emit.Place.#ctor(PHP.Core.Emit.IPlace,System.Reflection.FieldInfo)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Emit.Place"/> given an <see cref="T:PHP.Core.Emit.IPlace"/> representing an instance
            and a <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
            <param name="holder">The instance <see cref="T:PHP.Core.Emit.IPlace"/> (<B>null</B> for static fields).</param>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/>.</param>
        </member>
        <member name="M:PHP.Core.Emit.Place.#ctor(PHP.Core.Emit.IPlace,System.Reflection.PropertyInfo)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Emit.Place"/> given an <see cref="T:PHP.Core.Emit.IPlace"/> representing an instance
            and a <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="holder">The instance <see cref="T:PHP.Core.Emit.IPlace"/> (<B>null</B> for static properties).</param>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/>.</param>
        </member>
        <member name="M:PHP.Core.Emit.Place.#ctor(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Emit.Place"/> given a <see cref="T:System.Reflection.Emit.LocalBuilder"/>.
            </summary>
            <param name="local">The <see cref="T:System.Reflection.Emit.LocalBuilder"/>.</param>
        </member>
        <member name="M:PHP.Core.Emit.Place.EmitLoad(PHP.Core.Emit.ILEmitter)">
            <summary>
            Emits code that loads the value from this storage place.
            </summary>
            <param name="il">The <see cref="T:PHP.Core.Emit.ILEmitter"/> to emit the code to.</param>
        </member>
        <member name="M:PHP.Core.Emit.Place.EmitStore(PHP.Core.Emit.ILEmitter)">
            <summary>
            Emits code that stores a value to this storage place.
            </summary>
            <param name="il">The <see cref="T:PHP.Core.Emit.ILEmitter"/> to emit the code to.</param>
        </member>
        <member name="M:PHP.Core.Emit.Place.EmitLoadAddress(PHP.Core.Emit.ILEmitter)">
            <summary>
            Emits code that loads address of this storage place.
            </summary>
            <param name="il">The <see cref="T:PHP.Core.Emit.ILEmitter"/> to emit the code to.</param>
        </member>
        <member name="P:PHP.Core.Emit.Place.HasAddress">
            <summary>
            Gets whether the place has an address.
            </summary>
        </member>
        <member name="P:PHP.Core.Emit.Place.PlaceType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the value stored in this storage place.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.LiteralPlace">
            <summary>
            Represents a literal.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.LiteralPlace.literal">
            <summary>
            Literal represented by the place.
            </summary>
        </member>
        <member name="F:PHP.Core.Emit.LiteralPlace.Null">
            <summary>
            A special read-only <see cref="T:PHP.Core.Emit.Place"/> that loads <B>null</B>.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.Types">
            <exclude/>
        </member>
        <member name="T:PHP.Core.Emit.Methods">
            <exclude/>
        </member>
        <member name="T:PHP.Core.Emit.Methods.ScriptContext.EchoStatic">
            <summary>
            Same as Echo.*, but methods are static and the ScriptContext argument is the second one.
            </summary>
        </member>
        <member name="T:PHP.Core.Emit.Constructors">
            <exclude/>
        </member>
        <member name="T:PHP.Core.Emit.Fields">
            <exclude/>
        </member>
        <member name="T:PHP.Core.Emit.Properties">
            <exclude/>
        </member>
        <member name="T:PHP.Core.Emit.AttributeBuilders">
            <exclude/>
        </member>
        <member name="T:PHP.Core.ConvertToClr">
            <summary>
            Implements PHP conversions of CLR types.
            </summary>
        </member>
        <member name="M:PHP.Core.ConvertToClr.TryObjectToDateTime(System.Object,PHP.Core.ConvertToClr.ConversionStrictness@)">
            <summary>
            Tries to convert to <see cref="T:System.DateTime"/>.
            Conversion is successful if the object is 
            <list type="bullet">
            	<term>a number that fits the long integer; the value is treated as number of ticks</term> 
              <term>a stringified form of such number (e.g. "1023"); the value is treated as number of ticks</term>
              <term>a string encoding a valid date-time format; the value is parsed by <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)"/></term>
            </list>
            </summary>
            <param name="obj"></param>
            <param name="strictness"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.ConvertToClr.TryObjectToDBNull(System.Object,PHP.Core.ConvertToClr.ConversionStrictness@)">
            <summary>
            Converts to <see cref="T:System.DBNull"/>. 
            The conversion is always successful and results to the <see cref="F:System.DBNull.Value"/> singleton.
            </summary>
        </member>
        <member name="M:PHP.Core.ConvertToClr.TryObjectToType``1(System.Object,PHP.Core.ConvertToClr.ConversionStrictness@)">
            <summary>
            Used when the type is unknown at compiler-time, e.g. it is a generic parameter.
            </summary>
        </member>
        <member name="M:PHP.Core.ConvertToClr.ObjectToType(System.Object,System.Type)">
            <summary>
            Used when the type is unknown at compiler-time, and must be converted during the runtime.
            </summary>
            <param name="obj"></param>
            <param name="target_type"></param>
            <returns></returns>
        </member>
        <member name="F:PHP.Core.ConvertToClr.conversionRoutines">
            <summary>
            Stores instances of <see cref="T:PHP.Core.ConvertToClr.TryObjectToTypeDelegate`1"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.ConvertToClr.GetConversionRoutine(System.Type)">
            <summary>
            Get the proper instance of conversion routine delegate for the given type.
            </summary>
            <param name="target_type">Target type of the conversion.</param>
            <returns>Proper instance of conversion routine delegate.</returns>
        </member>
        <member name="M:PHP.Core.ConvertToClr.UnwrapNullable(System.Object)">
            <summary>
            This is handled specially in ClrOverloadBuilder...
            </summary>
        </member>
        <member name="T:PHP.Core.ConvertToClr.ConversionStrictness">
            <summary>
            Represents "quality" of conversion
            </summary>
        </member>
        <member name="F:PHP.Core.ConvertToClr.ConversionStrictness.ImplExactMatch">
            <summary> Type was safely converted to matching type: int to int, long to int (in range) </summary>
        </member>
        <member name="F:PHP.Core.ConvertToClr.ConversionStrictness.ImplPercisionLost">
            <summary> Type was converted but percision may be lost: double to float, decimal to double </summary>
        </member>
        <member name="F:PHP.Core.ConvertToClr.ConversionStrictness.ImplDomainChange">
            <summary> Type was converted but value domain is diferent: string to bool, int to bool, null to (T)null</summary>
        </member>
        <member name="F:PHP.Core.ConvertToClr.ConversionStrictness.Explicit">
            <summary> Type was covnerted using explicit conversion </summary>
        </member>
        <member name="F:PHP.Core.ConvertToClr.ConversionStrictness.Failed">
            <summary> Type was not converted. </summary>
        </member>
        <member name="T:PHP.Core.HttpHeaders">
            <summary>
            Used for proper handling of setting/getting current response headers.
            
            In case of IIS Classic Mode, headers must be cached and flushed in 'PreSendRequestHeaders' event, because .NET doesn't allow this behavior.
            In case of IIS Integrated Pipeline, request headers can be accessed (set/modified/removed) within HttpRequest object in any time.
            </summary>
        </member>
        <member name="F:PHP.Core.HttpHeaders.UsingIntegratedPipeline">
            <summary>
            Equivalent to <c>HttpRuntime.UsingIntegratedPipeline</c> if this property exists. Otherwise it returns <b>false</b>.
            </summary>
        </member>
        <member name="M:PHP.Core.HttpHeaders.Create">
            <summary>
            Create proper HttpHeaders object based on the current HttpRuntime environment.
            </summary>
            <returns>Instance of HttpHeaders object.</returns>
        </member>
        <member name="M:PHP.Core.HttpHeaders.#ctor(System.Boolean)">
            <summary>
            Try to attach the Headers object into the HttpRuntime.
            Do not allow instantiating this class from outside.
            </summary>
        </member>
        <member name="F:PHP.Core.HttpHeaders.attached">
            <summary>
            Determines if the PreSendRequestHeaders event was already set.
            </summary>
        </member>
        <member name="M:PHP.Core.HttpHeaders.CreateStringEncoding">
            <summary>
            Create StringEncoding object according to the current implementation of Headers.
            </summary>
            <returns></returns>
        </member>
        <member name="F:PHP.Core.HttpHeaders.location">
            <summary>
            Current location header if set.
            </summary>
        </member>
        <member name="F:PHP.Core.HttpHeaders.contentType">
            <summary>
            Current content-type header if set.
            </summary>
        </member>
        <member name="F:PHP.Core.HttpHeaders.headers">
            <summary>
            All the other headers that was set by PHP application.
            </summary>
        </member>
        <member name="M:PHP.Core.HttpHeaders.Clear">
            <summary>
            Clear all headers if null is given.
            </summary>
        </member>
        <member name="M:PHP.Core.HttpHeaders.GetEnumerator">
            <summary>
            Returns all headers currently set by the web application.
            Including content-type, content-encoding, location, ...
            </summary>
            <returns></returns>
        </member>
        <member name="F:PHP.Core.HttpHeaders.flushed">
            <summary>
            If headers were flushed already.
            </summary>
        </member>
        <member name="M:PHP.Core.HttpHeaders.Flush(System.Web.HttpContext)">
            <summary>
            Write headers to ASP.NET HttpContext. Can be called multiple times, it will be flushed only once.
            </summary>
        </member>
        <member name="M:PHP.Core.HttpHeaders.OnLocationSet(System.String)">
            <summary>
            Update the status code when location is set.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:PHP.Core.HttpHeaders.ContentTypeEncoding(System.String)">
            <summary>
            Get content encoding depending on the content type.
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.HttpHeaders.CacheLimiter(System.Web.HttpResponse,System.String,System.Action{System.String})">
            <summary>
            Parse given cache-control header value and set it properly into the HttpContext.Response.Cache object.
            </summary>
            <param name="response">Current <see cref="P:System.Web.HttpContext.Response"/>.</param>
            <param name="newLimiter">String value of response cache-header.</param>
            <param name="invalidCacheLimiterCallback">Callback function called when invalid cache-limiter value is found. Can be null to take no action.</param>
        </member>
        <member name="M:PHP.Core.HttpHeaders.CacheLimiterInternal(System.Web.HttpResponse,System.String,System.Action{System.String},System.Globalization.CompareInfo)">
            <summary>
            Updates the cache control of the given HttpContext.
            </summary>
            <param name="response">Current HttpResponse instance.</param>
            <param name="singleLimiter">Cache limiter passed to the session_cache_limiter() PHP function.</param>
            <param name="compareInfo">The current compare info used internally.</param>
            <param name="invalidCacheLimiterCallback">Function called when invalid limiter is found.</param>
        </member>
        <member name="M:PHP.Core.HttpHeaders.SetExpires(System.Web.HttpResponse,System.String)">
            <summary>
            Set the Expires HTTP header properly. Parse the given string.
            </summary>
            <param name="response">HttpResponse to set the Expires header to.</param>
            <param name="value">The raw value of Expires header.</param>
        </member>
        <member name="P:PHP.Core.HttpHeaders.UsingIntegratedPipelineHelper">
            <summary>
            Helper that dynamically calls getter of <b>HttpRuntime</b>.<b>UsingIntegratedPipeline</b>.
            It cannot be used in compile time since .NET 2.0 (without SP) and Mono does not have this method defined at all.
            </summary>
        </member>
        <member name="P:PHP.Core.HttpHeaders.contentEncoding">
            <summary>
            Current content-encoding header if set.
            </summary>
        </member>
        <member name="P:PHP.Core.HttpHeaders.Item(System.String)">
            <summary>
            Get or Set any header to be sent within response.
            </summary>
            <param name="header">Header name, case insensitive.</param>
            <returns>The header value, or null if the header was not set.</returns>
        </member>
        <member name="T:PHP.Core.HttpHeaders.StringEncoding">
            <summary>
            Represents the current encoding that was set by string or Encoding instance.
            </summary>
        </member>
        <member name="M:PHP.Core.HttpHeaders.StringEncoding.SetEncoding(System.Web.HttpResponse)">
            <summary>
            Set the encoding into the HttpResponse object.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:PHP.Core.HttpHeaders.StringEncoding.IsSpecial(System.String)">
            <summary>
            Special encodings, that should be added as header (not via ContentEncoding property, since it is not real encoding).
            </summary>
            <param name="encodingAsString">Encoding as string.</param>
            <returns>Tru if encoding should be set via headers.</returns>
        </member>
        <member name="F:PHP.Core.HttpHeaders.IntegratedPipelineHeaders.PoweredByHeader">
            <summary>
            Value of "X-Powered-By" header.
            </summary>
        </member>
        <member name="P:PHP.Core.HttpHeaders.IntegratedPipelineHeaders.Item(System.String)">
            <summary>
            Set/remove the header in integrated pipeline mode.
            </summary>
            <param name="header">The header name. Case insensitive.</param>
            <returns>The header value.</returns>
            <exception cref="T:System.FormatException">Given expires header has invalid format.</exception>
        </member>
        <member name="T:PHP.Core.PhpLibraryDescriptor">
            <summary>
            Base class for Phalanger library descriptors.
            </summary>
            <summary>
            Base class for Phalanger library descriptors.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpLibraryDescriptor.Loaded(PHP.Core.PhpLibraryAttribute,PHP.Core.LibraryConfigStore)">
            <summary>
            Called when library loading is finished and descriptor is initialized.
            </summary>
            <param name="assemblyAttribute">
            A metadata attribute defined on library assembly or a <B>null</B> reference.
            </param>
            <param name="configStore">
            A collection of XML attributes used in configuration file to add the assembly to the Class Library
            or a <B>null</B> reference.
            </param>
            <remarks>
            Library is load when configuration reader finds out a node defining the library.
            After library is loaded the reader continues with configuration reading and calls <see cref="M:PHP.Core.PhpLibraryDescriptor.ParseConfig(PHP.Core.ConfigContextBase,PHP.Core.PhpConfigurationContext,System.Xml.XmlNode)"/>
            when it reaches the section belonging to the library.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpLibraryDescriptor.ParseConfig(PHP.Core.ConfigContextBase,PHP.Core.PhpConfigurationContext,System.Xml.XmlNode)">
            <summary>
            Parses a configuration section belonging to the library. 
            </summary>
            <param name="userContext">
            User specified configuration context. Contains a <B>null</B> reference if the method is called for the first time
            or an instance of the user configuration type partially filled with configuration values which has
            been already processed.
            </param>
            <param name="context">The Core configuration context.</param>
            <param name="section">XML node containing the configuration or its part.</param>
            <returns>
            The library configuration context which is is passed to the next iteration of the method if any.
            </returns>
            <remarks>
            The method is called for each configuration file and each XML node containing configuration of the library
            as they are processed by .NET configuration loader. Note that the method may not be called at all. 
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpLibraryDescriptor.CreateConfigContext">
            <summary>
            Creates empty library configuration context.
            </summary>
            <returns>
            An initialized configuration context. Should not be a <B>null</B> reference.
            Creates an empty context for libraries that doesn't use configuration.
            </returns>
        </member>
        <member name="M:PHP.Core.PhpLibraryDescriptor.Validate(PHP.Core.ConfigContextBase)">
            <summary>
            Validates configuration after it has been completely read.
            </summary>
            <param name="userContext">The configuration context.</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Configuration is invalid.</exception>
        </member>
        <member name="M:PHP.Core.PhpLibraryDescriptor.#ctor">
            <summary>
            Subclasses should have a parameter-less constructor.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpLibraryDescriptor.CreateInstance(System.Type)">
            <summary>
            Creates a new instance of descriptor given its type.
            </summary>
            <param name="type">The type of the descriptor to create.</param>
            <returns>The new instance.</returns>
            <exception cref="T:PHP.Core.LibraryLoadFailedException"><paramref name="type"/> is not valid descriptor type.</exception>
        </member>
        <member name="P:PHP.Core.PhpLibraryDescriptor.Module">
            <summary>
            Module representing the library. 
            Written up when the library is loaded.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpLibraryDescriptor.UniqueIndex">
            <summary>
            Unique index assigned to the library. 
            Written up when the library is loaded.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpLibraryDescriptor.ConfigurationSectionName">
            <summary>
            Name of the section in the configuration file or a <B>null</B> reference if no section is used or 
            the section name has not been set yet (e.g. during <see cref="M:PHP.Core.PhpLibraryDescriptor.Loaded(PHP.Core.PhpLibraryAttribute,PHP.Core.LibraryConfigStore)"/> callback).
            Written up when the confgiuration is loaded.
            </summary>
        </member>
        <member name="T:PHP.Core.Logger">
            <summary>
            Hanldes logging to a file and event log.
            <threadsafety static="true"/>
            </summary>
        </member>
        <member name="M:PHP.Core.Logger.AppendLine(System.String,System.String)">
            <summary>
            Appends a line into the specified log file synchronizing the access via a named mutex.
            </summary>
            <param name="fileName">The name of a log file.</param>
            <param name="message">The message to be appended.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <remarks>
            <para>If the file doesn't exists it will be created.</para>
            </remarks>
            <exception cref="T:System.IO.IOException">Unexpected IO error occured.</exception>
        </member>
        <member name="M:PHP.Core.Logger.AddToEventLog(System.String)">
            <summary>
            Adds error message to system Event log.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:PHP.Core.PhpResourceManager">
            <summary>
            Manages active <see cref="T:PHP.Core.PhpResource"/> instances across the current thread.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpResourceManager.resources">
            <summary>
            Lazily initialized list of <see cref="T:PHP.Core.PhpResource"/>s created during this web request.
            </summary>
            <remarks>
            The resources are disposed of when the request is over.
            <seealso cref="M:PHP.Core.PhpResourceManager.RegisterResource(PHP.Core.PhpResource)"/><seealso cref="M:PHP.Core.PhpResourceManager.CleanUpResources"/>
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpResourceManager.RegisterResource(PHP.Core.PhpResource)">
            <summary>
            Registers a resource that should be disposed of when the request is over.
            </summary>
            <param name="res">The resource.</param>
        </member>
        <member name="M:PHP.Core.PhpResourceManager.UnregisterResource(System.Collections.Generic.LinkedListNode{System.WeakReference})">
            <summary>
            Unregisters disposed resource.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpResourceManager.CleanUpResources">
            <summary>
            Disposes of <see cref="T:PHP.Core.PhpResource"/>s created during this web request.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpStream">
            <summary>
            Abstraction of streaming behavior for PHP.
            PhpStreams are opened by StreamWrappers on a call to fopen().
            </summary>
            <summary>
            Abstraction of streaming behavior for PHP.
            PhpStreams are opened by StreamWrappers on a call to fopen().
            </summary>
            <remarks>
            <para>
            PhpStream is a descendant of PhpResource,
            it contains a StreamContext (may be empty) and two ordered lists of StreamFilters
            (input and output filters).
            PhpStream may be cast to a .NET stream (using its RawStream property).
            </para>
            <para>
            Various stream types are defined by overriding the <c>Raw*</c> methods
            that provide direct access to the underlying physical stream.
            Corresponding public methods encapsulate these accessors with
            buffering and filtering. Raw stream access is performed at the <c>byte[]</c> level.
            ClassLibrary functions may use either the <c>Read/WriteBytes</c>
            or <c>Read/WriteString</c> depending on the nature of the PHP function.
            Data are converted using the <see cref="P:PHP.Core.ApplicationConfiguration.GlobalizationSection.PageEncoding"/>
            as necessary.
            </para>
            <para>
            When reading from a stream, the stream data is read in binary format
            in chunks of predefined size (8kB). Stream filters (if any) are then applied
            in a cascade to the whole block. Filtered blocks are stored in a
            <see cref="T:System.Collections.Queue"/> of either strings or PhpBytes depending on the last
            filter output (note that after filtering not all blocks have necessarily
            the original chunk size; when appending a filter to the filter-chain
            all the buffered data is passed through this one too). The input queue is being 
            filled until the required data length is available. The <see cref="F:PHP.Core.PhpStream.readPosition"/> 
            property holds the index into the first chunk of data. When this chunk is 
            entirely consumed it is dequeued.
            </para>
            <para>
            Writing to a stream is buffered too (unless it is disabled using <c>stream_set_write_buffer</c>). 
            When the data passes through the filter-chain it is appended to the 
            write buffer (using the <see cref="F:PHP.Core.PhpStream.writePosition"/> property). 
            When the write buffer is full it is flushed to the underlying stream.
            </para>
            </remarks>
        </member>
        <member name="T:PHP.Core.PhpResource">
            <summary>
            Base class for PHP Resources - both built-in and extension-resources.
            Resources rely on GC Finalization - override FreeManaged for cleanup.
            When printing a resource variable in PHP, "Resource id #x" prints out.
            </summary>
        </member>
        <member name="T:PHP.Core.IPhpVariable">
            <summary>
            The set of interfaces which each type used in PHP language should implement.
            </summary>
        </member>
        <member name="T:PHP.Core.IPhpPrintable">
            <summary>
            Provides methods for printing structured variable content in a several different formats.
            </summary>
        </member>
        <member name="M:PHP.Core.IPhpPrintable.Print(System.IO.TextWriter)">
            <summary>
            Prints values only.
            </summary>
            <param name="output">The output stream.</param>
            <remarks>Implementations should write an eoln after the variable's data.</remarks>
        </member>
        <member name="M:PHP.Core.IPhpPrintable.Dump(System.IO.TextWriter)">
            <summary>
            Prints types and values.
            </summary>
            <param name="output">The output stream.</param>
            <remarks>Implementations should write an eoln after the variable's data.</remarks>
        </member>
        <member name="M:PHP.Core.IPhpPrintable.Export(System.IO.TextWriter)">
            <summary>
            Prints object's definition in PHP language.
            </summary>
            <param name="output">The output stream.</param>
            <remarks>Implementations should write an eoln after the variable's data only on the top level.</remarks>
        </member>
        <member name="T:PHP.Core.IPhpCloneable">
            <summary>
            Supports cloning, which creates a deep copy of an existing instance.
            </summary>
        </member>
        <member name="M:PHP.Core.IPhpCloneable.DeepCopy">
            <summary>
            Creates a deep copy of this instance.
            </summary>
            <returns>The deep copy of this instance.</returns>
        </member>
        <member name="M:PHP.Core.IPhpCloneable.Copy(PHP.Core.CopyReason)">
            <summary>
            Creates a copy of this instance.
            </summary>
            <param name="reason">The reason why the copy is being made.</param>
            <returns>
            The copy which should contain data independent of the image ones. This often means that a deep copy
            is made, although an inplace deep copy optimization can also be used as well as other methods of copying.
            Whatever copy method takes place any changes to the image data should not cause
            a change in the result which may be identified by its user.
            </returns>
        </member>
        <member name="M:PHP.Core.IPhpVariable.IsEmpty">
            <summary>
            Defines emptiness on implementor.
            </summary>
            <returns>Whether the variable is empty.</returns>
        </member>
        <member name="M:PHP.Core.IPhpVariable.IsScalar">
            <summary>
            Defines whether implementor is a scalar.
            </summary>
            <returns>Whether the variable is a scalar.</returns>
        </member>
        <member name="M:PHP.Core.IPhpVariable.GetTypeName">
            <summary>
            Defines a PHP name of implementor.
            </summary>
            <returns>The string identification of the type.</returns>
        </member>
        <member name="T:PHP.Core.IPhpObjectGraphNode">
            <summary>
            Implemented by variable types that represent notable nodes in object graphs.
            </summary>
        </member>
        <member name="M:PHP.Core.IPhpObjectGraphNode.Walk(PHP.Core.PhpWalkCallback,PHP.Core.ScriptContext)">
            <summary>
            Walks the object graph rooted in this node. All subnodes supporting the <see cref="T:PHP.Core.IPhpObjectGraphNode"/>
            interface will be visited and <pararef name="callback"/> called.
            </summary>
            <param name="callback">Designates the method that should be invoked for each graph node.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/> (optimization).</param>
            <remarks><paramref name="callback"/> will not be called for this very object - that is its container's
            responsibility.</remarks>
        </member>
        <member name="F:PHP.Core.PhpResource.PhpTypeName">
            <summary>The name of this variable type.</summary>
        </member>
        <member name="M:PHP.Core.PhpResource.RegisterInternalInstance">
            <summary>
            Allocate a unique identifier for a resource.
            </summary>
            <remarks>
            Internal resources are given even numbers while resources
            allocated by extensions get odd numbers to minimize the communication
            between internal and external resource managers.
            </remarks>
            <returns>The unique identifier of an internal resource (even number starting from 2).</returns>
        </member>
        <member name="M:PHP.Core.PhpResource.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Create a new instance with the given Id. Used by <see cref="T:PHP.Core.PhpExternalResource"/>s.
            </summary>
            <param name="resourceId">Unique resource identifier (odd for external resources).</param>
            <param name="resourceTypeName">The type to be reported to use when dumping a resource.</param>
            <param name="registerInReqContext">Whether to register this instance in current <see cref="T:PHP.Core.RequestContext"/>. Should be <c>false</c> for static resources.</param>
        </member>
        <member name="M:PHP.Core.PhpResource.#ctor(System.Int32,System.String)">
            <summary>
            Create a new instance with the given Id. Used by <see cref="T:PHP.Core.PhpExternalResource"/>s.
            </summary>
            <param name="resourceId">Unique resource identifier (odd for external resources).</param>
            <param name="resourceTypeName">The type to be reported to use when dumping a resource.</param>
        </member>
        <member name="M:PHP.Core.PhpResource.#ctor(System.String)">
            <summary>
            Create a new instance of a given Type and Name.
            The instance Id is auto-incrementing starting from 1.
            </summary>
            <param name="resourceTypeName">The type to be reported to use when dumping a resource.</param>
        </member>
        <member name="M:PHP.Core.PhpResource.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new instance of a given Type and Name.
            The instance Id is auto-incrementing starting from 1.
            </summary>
            <param name="resourceTypeName">The type to be reported to use when dumping a resource.</param>
            <param name="registerInReqContext">Whether to register this instance in current <see cref="T:PHP.Core.RequestContext"/>. Should be <c>false</c> for static resources.</param>
        </member>
        <member name="M:PHP.Core.PhpResource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Creates an instance from deserialized data using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to receive data from.</param><param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.</param>
        </member>
        <member name="M:PHP.Core.PhpResource.#ctor">
            <summary>
            Creates a new invalid resource.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpResource.ToString">
            <summary>
            Returns a string that represents the current PhpResource.
            </summary>
            <returns>'Resource id #ID'</returns>
        </member>
        <member name="M:PHP.Core.PhpResource.Finalize">
            <summary>
            The finalizer.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpResource.Close">
            <summary>
            An alias of <see cref="M:PHP.Core.PhpResource.Dispose"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpResource.Dispose">
            <summary>
            Dosposes the resource.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpResource.Dispose(System.Boolean)">
            <summary>
            Cleans-up the resource.
            </summary>
            <remarks>
            When disposing non-deterministically, only unmanaged resources should be freed. 
            <seealso cref="M:PHP.Core.PhpResource.FreeUnmanaged"/>
            </remarks>
            <param name="disposing">Whether the resource is disposed deterministically.</param>
        </member>
        <member name="M:PHP.Core.PhpResource.UnregisterResource">
            <summary>
            Unregister this instance of <see cref="T:PHP.Core.PhpResource"/> from current <see cref="T:PHP.Core.RequestContext"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpResource.FreeManaged">
            <summary>
            Override this virtual method in your descendants to perform 
            cleanup of Managed resources - those having a Finalizer of their own.
            </summary>
            <remarks>
            Note that when Disposing explicitly, both FreeManaged and FreeUnmanaged are called.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpResource.FreeUnmanaged">
            <summary>
            Override this virtual method to cleanup the contained unmanaged objects.
            </summary>
            <remarks>
            Note that when Dispose(false) is called from the Finalizer,
            the order of finalization is random. In other words, contained
            managed objects may have been already finalized - don't reference them.
            </remarks>
        </member>
        <member name="F:PHP.Core.PhpResource.mResourceId">
            <summary>Unique resource identifier (even for internal resources, odd for external ones).</summary>
            <remarks>
            Internal resources are given even numbers while resources
            allocated by extensions get odd numbers to minimize the communication
            between internal and external resource managers.
            </remarks>
        </member>
        <member name="F:PHP.Core.PhpResource.mTypeName">
            <summary>
            Type resource name - string to be reported to user when dumping a resource.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpResource.mDisposed">
            <summary>
            Set in Dispose to avoid multiple cleanup attempts.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpResource.reqContextRegistrationNode">
            <summary>
            If this resource is registered into <see cref="T:PHP.Core.RequestContext"/>, this points into linked list containing registered resources.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpResource.ResourceIdCounter">
            <summary>Static counter for unique PhpResource instance Id's</summary>
        </member>
        <member name="F:PHP.Core.PhpResource.DisposedTypeName">
            <summary>The resources' TypeName to be displayed after call to Dispose</summary>
        </member>
        <member name="M:PHP.Core.PhpResource.IsEmpty">
            <summary>
            Defines emptiness of the <see cref="T:PHP.Core.PhpResource"/>.
            </summary>
            <returns><B>false</B>. A valid resource is never empty.</returns>
        </member>
        <member name="M:PHP.Core.PhpResource.IsScalar">
            <summary>
            Defines whether <see cref="T:PHP.Core.PhpResource"/> is a scalar.
            </summary>
            <returns><B>false</B></returns>
        </member>
        <member name="M:PHP.Core.PhpResource.GetTypeName">
            <summary>
            Returns a name of declaring type.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:PHP.Core.PhpResource.Copy(PHP.Core.CopyReason)">
            <summary>Creates a copy of this instance.</summary>
            <remarks>
            Instances of the PhpResource class are never cloned.
            When assigning a resource to another variable in a script,
            only a shallow copy is performed.
            </remarks>
            <returns>The copy of this instance.</returns>
        </member>
        <member name="M:PHP.Core.PhpResource.DeepCopy">
            <summary>Creates a copy of this instance.</summary>
            <remarks>
            Instances of the PhpResource class are never cloned.
            When assigning a resource to another variable in a script,
            only a shallow copy is performed.
            </remarks>
            <returns>The copy of this instance.</returns>
        </member>
        <member name="M:PHP.Core.PhpResource.CompareTo(System.Object)">
            <summary>
            Compares this instance with an object of arbitrary PHP.NET type.
            </summary>
            <remarks>
            When compared with other PHP variables, PhpResource behaves like 
            its integer representation, i.e. the resource ID (except of the === operator).
            </remarks>
            <param name="obj">An object to compare with this instance.</param><returns>
      Negative integer if this instance is less than <paramref name="obj"/>,
      zero if this instance equals to <paramref name="obj"/> and positive integer
      if this instance is greater than <paramref name="obj"/>.
    </returns><remarks>
      If the <paramref name="obj"/> is also if type <see cref="T:PHP.Core.PhpArray"/>
      the <see cref="F:PHP.Core.PhpComparer.Default"/> comparer is used for comparing its items. 
    </remarks>
        </member>
        <member name="M:PHP.Core.PhpResource.CompareTo(System.Object,System.Collections.IComparer)">
            <param name="obj">An object to compare with this instance.</param><param name="comparer">A comparer to be used for comparing items contained in this instance.</param><returns>
      Negative integer if this instance is less than <paramref name="obj"/>,
      zero if this instance equals to <paramref name="obj"/> and positive integer
      if this instance is greater than <paramref name="obj"/>.
    </returns><remarks>
      The <paramref name="comparer"/> is used to compare items which contained in this instance (useful when the instance
      is an array or object etc.).
    </remarks>
        </member>
        <member name="M:PHP.Core.PhpResource.Print(System.IO.TextWriter)">
            <summary>
            Prints values only.
            'Resource id #ID'
            </summary>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:PHP.Core.PhpResource.Dump(System.IO.TextWriter)">
            <summary>
            Prints types and values.
            'resource(ID) of type(TYPE)'
            </summary>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:PHP.Core.PhpResource.Export(System.IO.TextWriter)">
            <summary>
            Prints object's definition in PHP language.
            'NULL' - unexportable
            </summary>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:PHP.Core.PhpResource.GetTypeCode">
            <summary>Returns code of type which implements this interface.</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpResource.ToInteger">
            <summary>Converts instance to its <see cref="T:System.Int32"/> representation according to PHP conversion algorithm.</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpResource.ToLongInteger">
            <summary>
            Returns <c>0</c>.
            </summary>
            <returns><c>0</c></returns>
        </member>
        <member name="M:PHP.Core.PhpResource.ToDouble">
            <summary>Converts instance to its <see cref="T:System.Double"/> representation according to PHP conversion algorithm.</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpResource.ToBoolean">
            <summary>Converts instance to its <see cref="T:System.Boolean"/> representation according to PHP conversion algorithm.</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpResource.ToPhpBytes">
            <summary>Converts instance to its binary representation (<see cref="T:PHP.Core.PhpBytes"/>).</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpResource.PHP#Core#IPhpConvertible#ToString(System.Boolean,System.Boolean@)">
            <summary>
            Converts instance to its string representation according to PHP conversion algorithm.
            </summary>
            <param name="success">Indicates whether conversion was successful.</param>
            <param name="throwOnError">Throw out 'Notice' when conversion wasn't successful?</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpResource.ToNumber(System.Int32@,System.Int64@,System.Double@)">
            <summary>
            Converts instance to a number of type <see cref="T:System.Int32"/>.
            </summary>
            <param name="doubleValue">The resource id.</param>
            <param name="intValue">The resource id.</param>
            <param name="longValue">The resource id.</param>
            <returns><see cref="F:PHP.Core.Convert.NumberInfo.Integer"/>.</returns>
        </member>
        <member name="M:PHP.Core.PhpResource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:PHP.Core.PhpResource.Walk(PHP.Core.PhpWalkCallback,PHP.Core.ScriptContext)">
            <summary>
            Walks the object graph rooted in this node.
            </summary>
            <param name="callback">The callback method.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
        </member>
        <member name="P:PHP.Core.PhpResource.Id">
            <summary>Identifier of a PhpResource instance. Unique index starting at 1</summary>
        </member>
        <member name="P:PHP.Core.PhpResource.TypeName">
            <summary>Type resource name - string to be reported to user when dumping a resource.</summary>
        </member>
        <member name="P:PHP.Core.PhpResource.IsValid">
            <summary>false if the resource has been already disposed</summary>
        </member>
        <member name="T:PHP.Core.PhpResource.Deserializer">
            <summary>
            Handles deserialization of <see cref="T:PHP.Core.PhpResource"/> instances in cases when the instance was serialized
            with <see cref="F:System.Runtime.Serialization.StreamingContextStates.Persistence"/>
            </summary>
        </member>
        <member name="M:PHP.Core.PhpResource.Deserializer.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Returns the real object that should be deserialized, rather than the object that the serialized stream specifies.
	  </summary><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> from which the current object is deserialized.</param><returns>Returns the actual object that is put into the graph.</returns>
            <remarks>
            All PHP resources are deserialized as integer 0.
            </remarks>
        </member>
        <member name="F:PHP.Core.PhpStream.DefaultBufferSize">
            <summary>The default size of read/write buffers.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.PhpStreamTypeName">
            <summary>
            The type name displayed when printing a variable of type PhpStream.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStream.Stat">
            <summary>
  Gives detailed filesystem-relevant information about the stream such as 
  size, creatiion and modification dates etc.
  </summary><returns><see cref="T:PHP.Core.PhpArray"/> with the <c>stat</c> results.</returns><exception cref="T:PHP.Core.PhpException">When the stream does not support <c>stat()</c>.</exception>
        </member>
        <member name="M:PHP.Core.PhpStream.ResolvePath(System.String@,PHP.Core.StreamWrapper@,PHP.Core.CheckAccessMode,PHP.Core.CheckAccessOptions)">
            <summary>
            Merges the path with the current working directory
            to get a canonicalized absolute pathname representing the same file.
            </summary>
            <remarks>
            This method is an analogy of <c>main/safe_mode.c: php_checkuid</c>.
            Looks for the file in the <c>include_path</c> and checks for <c>open_basedir</c> restrictions.
            </remarks>
            <param name="path">An absolute or relative path to a file.</param>
            <param name="wrapper">The wrapper found for the specified file or <c>null</c> if the path resolution fails.</param>
            <param name="mode">The checking mode of the <see cref="M:PHP.Core.PhpStream.CheckAccess(System.String,PHP.Core.CheckAccessMode,PHP.Core.CheckAccessOptions)"/> method (file, directory etc.).</param>
            <param name="options">Additional options for the <see cref="M:PHP.Core.PhpStream.CheckAccess(System.String,PHP.Core.CheckAccessMode,PHP.Core.CheckAccessOptions)"/> method.</param>
            <returns><c>true</c> if all the resolution and checking passed without an error, <b>false</b> otherwise.</returns>
            <exception cref="T:PHP.Core.PhpException">Security violation - when the target file 
            lays outside the tree defined by <c>open_basedir</c> configuration option.</exception>
        </member>
        <member name="M:PHP.Core.PhpStream.CheckIncludePath(System.String,System.String@)">
            <summary>
            Check if the path lays inside of the directory tree specified 
            by the <c>open_basedir</c> configuration option and return the resulting <paramref name="absolutePath"/>.
            </summary>
            <param name="relativePath">The filename to search for.</param>
            <param name="absolutePath">The combined absolute path (either in the working directory 
            or in an include path wherever it has been found first).</param>
            <returns><c>true</c> if the file was found in an include path.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.CheckAccess(System.String,PHP.Core.CheckAccessMode,PHP.Core.CheckAccessOptions)">
            <summary>
            Performs all checks on a path passed to a PHP function.
            </summary>
            <remarks>
            <para>
            This method performs a check similar to <c>safe_mode.c: php_checkuid_ex()</c>
            together with <c>open_basedir</c> check.
            </para>
            <para>
            The <paramref name="filename"/> may be one of the following:
            <list type="bullet">
            <item>A relative path. The path is resolved regarding the <c>include_path</c> too if required
            and checking continues as in the next case.</item>
            <item>An absolute path. The file or directory is checked for existence and for access permissions<sup>1</sup>
            according to the given <paramref name="mode"/>.</item>
            </list>
            <sup>1</sup> Regarding the <c>open_basedir</c> configuration option. 
            File access permissions are checked at the time of file manipulation
            (opening, copying etc.).
            </para>
            </remarks>
            <param name="filename">A resolved path. Must be an absolute path to a local file.</param>
            <param name="mode">One of the <see cref="T:PHP.Core.CheckAccessMode"/>.</param>
            <param name="options"><c>true</c> to suppress error messages.</param>
            <returns><c>true</c> if the function may continue with file access,
            <c>false</c>to fail.</returns>
            <exception cref="T:PHP.Core.PhpException">If the file can not be accessed
            and the <see cref="F:PHP.Core.CheckAccessOptions.Quiet"/> is not set.</exception>
        </member>
        <member name="M:PHP.Core.PhpStream.Open(System.String,PHP.Core.StreamOpenMode)">
            <summary>
            Simple version of the stream opening function
            </summary>
            <param name="path">URI or filename of the resource to be opened</param>
            <param name="mode">File access mode</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.PhpStream.GetSchemeInternal(System.String,System.String@)">
            <summary>
            Checks if the given path is a filesystem path or an URL and returns the corresponding scheme.
            </summary>
            <param name="path">The path to be canonicalized.</param>
            <param name="filename">The filesystem path before canonicalization (may be both relative or absolute).</param>
            <returns>The protocol portion of the given URL or <c>"file"</c>o for local files.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.Open(System.String,System.String,PHP.Core.StreamOpenOptions,PHP.Core.StreamContext)">
            <summary>
            Openes a PhpStream using the appropriate StreamWrapper.
            </summary>
            <param name="path">URI or filename of the resource to be opened.</param>
            <param name="mode">A file-access mode as passed to the PHP function.</param>
            <param name="options">A combination of <see cref="T:PHP.Core.StreamOpenOptions"/>.</param>
            <param name="context">A valid StreamContext. Must not be <c>null</c>.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.PhpStream.Finalize">
            <summary>
            Flushes the stream before closing.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStream.#ctor(PHP.Core.StreamWrapper,PHP.Core.StreamAccessOptions,System.String,PHP.Core.StreamContext)">
            <summary>
            PhpStream is created by a StreamWrapper together with the
            encapsulated RawStream (the actual file opening is handled 
            by the wrapper).
            </summary>
            <remarks>
            This class newly implements the auto-remove behavior too
            (see <see cref="F:PHP.Core.StreamAccessOptions.Temporary"/>).
            </remarks>
            <param name="openingWrapper">The parent instance.</param>
            <param name="accessOptions">The additional options parsed from the <c>fopen()</c> mode.</param>
            <param name="openedPath">The absolute path to the opened resource.</param>
            <param name="context">The stream context passed to fopen().</param>
        </member>
        <member name="M:PHP.Core.PhpStream.FreeManaged">
            <summary>
            PhpResource.FreeManaged overridden to get rid of the contained context on Dispose.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStream.FreeUnmanaged">
            <summary>
            PhpResource.FreeUnmanaged overridden to remove a temporary file on Dispose.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStream.RawRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
  Reads raw byte data from the underlying stream to the given <paramref name="buffer"/>.
  </summary><param name="buffer">The buffer.</param><param name="offset">Starting index in the <paramref name="buffer"/>.</param><param name="count">How many bytes to read.</param><returns>The number of bytes read or <c>0</c> in case of EOF or <c>-1</c> in case of an error.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.RawWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>
  Writes the binary data from the <paramref name="buffer"/>to the underlying stream.
  </summary><param name="buffer">The buffer.</param><param name="offset">Starting index in the <paramref name="buffer"/>.</param><param name="count">How many bytes to write.</param><returns>The number of bytes written or <c>-1</c> in case of an error.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.RawFlush">
            <summary>
  Flushes the underlying stream.
  </summary><returns><c>true</c> on success, <c>false</c> on error.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.RawTell">
            <summary>
  Retreives the position in the underlying stream in bytes from the beginning.
  </summary><returns>The position or <c>-1</c> on error.</returns><exception cref="T:PHP.Core.PhpException">When seeking is not supported.</exception>
        </member>
        <member name="M:PHP.Core.PhpStream.RawSeek(System.Int32,System.IO.SeekOrigin)">
            <summary>
	Changes the offset in the underlying stream.
	</summary><param name="offset">New position from the <paramref name="whence"/> position.</param><param name="whence">Where to count the <paramref name="offset"/> from. May be one
	of the <see cref="T:System.IO.SeekOrigin"/> options.</param><returns><c>true</c> on success, <c>false</c> on error.</returns><exception cref="T:PHP.Core.PhpException">When seeking is not supported.</exception>
        </member>
        <member name="M:PHP.Core.PhpStream.RawLength">
            <summary>
            Gets the length of the stream.
            </summary>
            <returns>Count of bytes in the stream or <c>-1</c> if seek is not supported.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.SetParameter(PHP.Core.StreamParameterOptions,System.Object)">
            <summary>
  Performs additional operations on the stream. Corresponds to <c>php_stream_ops.set_option()</c>
  except of the format of the operation argument.
  </summary><param name="option">The operation identifier. One of the <see cref="T:PHP.Core.StreamParameterOptions"/>.</param><param name="value">The operation argument.</param><returns><c>true</c> if the operation is supported and was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.ReadFiltered(System.Int32)">
            <summary>
            Fills the <see cref="F:PHP.Core.PhpStream.readBuffers"/> with more data from the underlying stream
            passed through all the stream filters. 
            </summary>
            <param name="chunkSize">Maximum number of bytes to be read from the stream.</param>
            <returns>A <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> containing the 
            data as returned from the last stream filter or <b>null</b> in case of an error or <c>EOF</c>.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.EnqueueReadBuffer(System.Object)">
            <summary>
            Put a buffer at the end of the <see cref="F:PHP.Core.PhpStream.readBuffers"/>.
            </summary>
            <param name="data">The buffer to append.</param>
        </member>
        <member name="M:PHP.Core.PhpStream.DropReadBuffer">
            <summary>
            Remove the (entirely consumed) read buffer from the head of the read buffer queue.
            </summary>
            <returns><c>true</c> if there are more buffers in the queue.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.ReadTextBuffer(System.Int32)">
            <summary>
            Joins the read buffers to get at least <paramref name="length"/> characters
            in a <see cref="T:System.String"/>. 
            </summary>
            <remarks>
            It is assumed that there already is length bytes in the buffers.
            Otherwise an InvalidOperationException is raised.
            </remarks>
            <param name="length">The desired maximum result length.</param>
            <returns>A <see cref="T:System.String"/> dequeued from the buffer or <c>null</c> if the buffer is empty.</returns>
            <exception cref="T:System.InvalidOperationException">If the buffers don't contain enough data.</exception>
        </member>
        <member name="M:PHP.Core.PhpStream.ReadBinaryBuffer(System.Int32)">
            <summary>
            Joins the read buffers to get at least <paramref name="length"/> bytes
            in a <see cref="T:PHP.Core.PhpBytes"/>. 
            </summary>
            <param name="length">The desired maximum result length.</param>
            <returns>A <see cref="T:PHP.Core.PhpBytes"/> dequeued from the buffer or <c>null</c> if the buffer is empty.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.GetDataLength(System.Object)">
            <summary>
            Gets the length of a block of data (either a <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/>).
            </summary>
            <param name="data">A <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> to be measured.</param>
            <returns>The length of the block or <c>-1</c> if the type is neither <see cref="T:System.String"/> nor <see cref="T:PHP.Core.PhpBytes"/>.
            </returns>
        </member>
        <member name="M:PHP.Core.PhpStream.AsBinary(System.Object)">
            <summary>
            Casts the input parameter as <see cref="T:PHP.Core.PhpBytes"/>, converting it
            using the page encoding if necessary.
            </summary>
            <param name="input">The input passed to the filter. Must not be <c>null</c>.</param>
            <returns>The input cast to <see cref="T:PHP.Core.PhpBytes"/> or <see cref="F:PHP.Core.PhpBytes.Empty"/> for empty input.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.AsBinary(System.Object,System.Int32)">
            <summary>
            Casts the input parameter as <see cref="T:System.String"/>, converting it
            using the page encoding if necessary.
            </summary>
            <param name="input">The input passed to the filter. Must not be <c>null</c>.</param>
            <param name="count">The maximum count of input entities to convert.</param>
            <returns>The input cast to <see cref="T:PHP.Core.PhpBytes"/> or <see cref="F:PHP.Core.PhpBytes.Empty"/> for empty input.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.AsText(System.Object)">
            <summary>
            Casts the input parameter as <see cref="T:System.String"/>, converting it
            using the page encoding if necessary.
            </summary>
            <param name="input">The input passed to the filter.</param>
            <returns>The input cast to <see cref="T:System.String"/> or <see cref="F:System.String.Empty"/> for empty input.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.AsText(System.Object,System.Int32)">
            <summary>
            Casts the input parameter as <see cref="T:System.String"/>, converting it
            using the page encoding if necessary.
            </summary>
            <param name="input">The input passed to the filter.</param>
            <param name="count">The count of input entities to convert.</param>
            <returns>The input cast to <see cref="T:System.String"/> or <see cref="F:System.String.Empty"/> for empty input.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.ReadData(System.Int32,System.Boolean)">
            <summary>
            Reads a block of data from the stream up to <paramref name="length"/>
            characters or up to EOLN if <paramref name="length"/> is negative.
            </summary>
            <remarks>
            ReadData first looks for data into the <see cref="F:PHP.Core.PhpStream.readBuffers"/>. 
            While <paramref name="length"/> is not satisfied, new data from the underlying stream are processed.
            The data is buffered as either <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/>
            but consistently. The type of the first buffer thus specifies the return type.
            </remarks>
            <param name="length">The number of bytes to return, when set to <c>-1</c>
            reading carries on up to EOLN or EOF.</param>
            <param name="ending">If <c>true</c>, the buffers are first searched for \n.</param>
            <returns>A <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> containing the 
            data as returned from the last stream filter or <b>null</b> in case of an error or <c>EOF</c>.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.ReadBytes(System.Int32)">
            <summary>
            Reads binary data from the stream. First looks for data into the 
            <see cref="F:PHP.Core.PhpStream.readBuffers"/>. When <paramref name="length"/> is not
            satisfied, new data from the underlying stream are processed.
            </summary>
            <param name="length">The number of bytes to return.</param>
            <returns><see cref="T:PHP.Core.PhpBytes"/> containing the binary data read from the stream.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.ReadString(System.Int32)">
            <summary>
            Reads text data from the stream. First looks for data into the 
            <see cref="F:PHP.Core.PhpStream.readBuffers"/>. When <paramref name="length"/> is not
            satisfied, new data from the underlying stream are processed.
            </summary>
            <param name="length">The number of characters to return.</param>
            <returns><see cref="T:System.String"/> containing the text data read from the stream.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.FindEoln(System.Object,System.Int32)">
            <summary>
            Finds the '\n' in a string or PhpBytes and returns its offset or <c>-1</c>
            if not found.
            </summary>
            <param name="data">Data to scan.</param>
            <param name="from">Index of the first character to scan.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.PhpStream.SplitData(System.Object,System.Int32,System.Object@,System.Object@)">
            <summary>
            Split a <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> to "upto" bytes at left and the rest or <c>null</c> at right.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStream.GetNextDataLength">
            <summary>
            Gets the number of bytes or characters in the first read-buffer or next chunk size.
            </summary>
            <returns>The number of bytes or characters the next call to ReadMaximumData would return.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.ReadMaximumData">
            <summary>
            Most effecient access to the buffered stream consuming one whole buffer at a time.
            Performs no unnecessary conversions (although attached stream filters may do so).
            </summary>
            <remarks>
            Use the <see cref="F:PHP.Core.PhpStream.readChunkSize"/> member to affect the amount of data returned at a time.
            </remarks>
            <returns>A <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> containing data read from the stream.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.ReadMaximumBytes">
            <summary>
            Effecient access to the buffered and filtered stream consuming one whole buffer at a time.
            </summary>
            <returns>A <see cref="T:PHP.Core.PhpBytes"/> containing data read from the stream.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.ReadMaximumString">
            <summary>
            Effecient access to the buffered and filtered stream consuming one whole buffer at a time.
            </summary>
            <returns>A <see cref="T:System.String"/> containing data read from the stream.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.ReadLine(System.Int32,System.String)">
            <summary>
            Reads one line (text ending with the <paramref name="ending"/> delimiter)
            from the stream up to <paramref name="length"/> characters long.
            </summary>
            <param name="length">Maximum length of the returned <see cref="T:System.String"/> or <c>-1</c> for unlimited reslut.</param>
            <param name="ending">Delimiter of the returned line or <b>null</b> to use the system default.</param>
            <returns>A <see cref="T:System.String"/> containing one line from the input stream.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.AddFilter(PHP.Core.IFilter,PHP.Core.FilterChainOptions)">
            <summary>
            Adds a filter to one of the read or write filter chains.
            </summary>
            <param name="filter">The filter.</param>
            <param name="where">The position in the chain.</param>
        </member>
        <member name="M:PHP.Core.PhpStream.Flush">
            <summary>
            Write all the output buffer to the underlying stream and flush it.
            </summary>
            <returns><c>true</c> on success, <c>false</c> on error.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.FlushWriteBuffer">
            <summary>
            Writes all the output buffer to the underlying stream.
            </summary>
            <returns><c>true</c> on success, <c>false</c> on error.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.WriteData(System.Object)">
            <summary>
            Passes the data through output filter-chain to the output buffer. 
            When the buffer is full or buffering is disabled, passes the data to the low-level stream.
            </summary>
            <param name="data">The data to store (filters will handle the type themselves).</param>
            <returns>Number of character entities successfully written or <c>-1</c> on an error.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.WriteBytes(PHP.Core.PhpBytes)">
            <summary>
            Apppends the binary data to the output buffer passing through the output filter-chain. 
            When the buffer is full or buffering is disabled, pass the data to the low-level stream.
            </summary>
            <param name="data">The <see cref="T:PHP.Core.PhpBytes"/> to store.</param>
            <returns>Number of bytes successfully written or <c>-1</c> on an error.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.WriteString(System.String)">
            <summary>
            Apppends the text data to the output buffer passing through the output filter-chain. 
            When the buffer is full or buffering is disabled, pass the data to the low-level stream.
            </summary>
            <param name="data">The <see cref="T:System.String"/> to store.</param>
            <returns>Number of characters successfully written or <c>-1</c> on an error.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.WriteData(System.Object,System.Boolean)">
            <summary>
            Passes the data through output filter-chain to the output buffer. 
            When the buffer is full or buffering is disabled, passes the data to the low-level stream.
            </summary>
            <param name="data">The data to store (filters will handle the type themselves).</param>
            <param name="closing"><c>true</c> when this method is called from <c>close()</c>
            to prune all the pending filters with closing set to <c>true</c>.</param>
            <returns>Number of character entities successfully written or <c>-1</c> on an error.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Sets the read/write pointer in the stream to a new position.
            </summary>
            <param name="offset">The offset from the position denoted by <paramref name="whence"/>.</param>
            <param name="whence">One of the <see cref="T:System.IO.SeekOrigin"/> flags.</param>
            <returns><c>true</c> if the operation was successful.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.SeekInternal(System.Int32,System.Int32,System.IO.SeekOrigin)">
            <summary>
            Perform the actual seek on the stream. Report errors.
            </summary>
            <param name="offset">New position in the stream.</param>
            <param name="current">Current position in the stream.</param>
            <param name="whence">Where to count from.</param>
            <returns><c>true</c> if successful</returns>
            <exception cref="T:PHP.Core.PhpException">In case that Seek is not supported by this stream type.</exception>
        </member>
        <member name="M:PHP.Core.PhpStream.Tell">
            <summary>
            Gets the current position in the stream.
            </summary>
            <remarks>
            <newpara>
            The problem with tell() in PHP is that although the write offset 
            is calculated in the raw byte stream (just before buffering)
            the read one is calculated in the filtered string buffers.
            </newpara>
            <newpara>
            In other words the value returned by tell() for output streams
            is the real position in the raw stream but may differ from the
            number of characters written. On the other hand the value returned for
            input streams corresponds with the number of characters retreived 
            but not with the position in the raw stream. It is important
            to remember that seeking on a filtered stream (such as a file
            opened with a "rt" mode) has undefined behavior.
            </newpara>
            </remarks>
            <returns>The position in the filtered or raw stream depending on last 
            read or write access type respectively or -1 if the stream does not support seeking.</returns>
        </member>
        <member name="M:PHP.Core.PhpStream.GetValid(PHP.Core.PhpResource)">
            <summary>
            Check that the resource handle contains a valid
            PhpStream resource and cast the handle to PhpStream.
            </summary>
            <param name="handle">A PhpResource passed to the PHP function.</param>
            <returns>The handle cast to PhpStream.</returns>
        </member>
        <member name="F:PHP.Core.PhpStream.context">
            <summary>
            The stream context options resource.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStream.readFilters">
            <summary>The lists of StreamFilters associated with this stream.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.writeFilters">
            <summary>The lists of StreamFilters associated with this stream.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.textReadFilter">
            <summary>The text-mode conversion filter of this stream used for reading.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.textWriteFilter">
            <summary>The text-mode conversion filter of this stream used for writing.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.Wrapper">
            <summary>
            The StreamWrapper responsible for opening this stream.
            </summary>
            <remarks>
            Used for example to access the correct section of context
            and for wrapper-notifications too.
            </remarks>
        </member>
        <member name="F:PHP.Core.PhpStream.OpenedPath">
            <summary>
            The absolute path to the resource.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStream.Options">
            <summary>
            Additional stream options defined at open-time.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStream.currentAccess">
            <summary>
            Gets the type of last stream access (initialized to FileAccess.ReadWrite if not accessed yet).
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStream.fgetssState">
            <summary>For <c>fgetss()</c> to handle multiline tags.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.isPersistent">
            <summary>For future use. Persistent streams are not implemented so far.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.readChunkSize">
            <summary>The default size of a single read chunk in the readBuffers.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.isReadBuffered">
            <summary>Whether the read operations are interated for a single <c>fread</c> call.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.writeBufferSize">
            <summary>The maximum count of buffered output bytes. <c>0</c> to disable buffering.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.readBuffers">
            <summary>Store the filtered input data queued as either <see cref="T:System.String"/>s or <see cref="T:PHP.Core.PhpBytes"/>.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.writeBuffer">
            <summary>Store the filtered output data in a <c>byte[]</c> up to <see cref="F:PHP.Core.PhpStream.writeBufferSize"/> bytes.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.readOffset">
            <summary>The offset from the beginning of the raw stream to the
            first byte stored in the <see cref="F:PHP.Core.PhpStream.readBuffers"/>.</summary>
            <remarks>This offset is incremented when a consumed buffer is dropped.</remarks>
        </member>
        <member name="F:PHP.Core.PhpStream.writeOffset">
            <summary>
            The offset from the beginning of the raw stream to the
            first byte of the <see cref="F:PHP.Core.PhpStream.writeBuffer"/>.
            </summary>
            <remarks>
            This offset is incremented when the buffer is being flushed
            or the data is written to a non-buffered stream.
            </remarks>
        </member>
        <member name="F:PHP.Core.PhpStream.readPosition">
            <summary>The position in the first buffer in the <see cref="F:PHP.Core.PhpStream.readBuffers"/>.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.readFilteredCount">
            <summary>Total bytes passed through the ReadData function (after input filtering)</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.writeFilteredCount">
            <summary>Total bytes passed through the WriteData function (before output filtering)</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.writePosition">
            <summary>The actual write position in the <see cref="F:PHP.Core.PhpStream.writeBuffer"/>.</summary>
        </member>
        <member name="F:PHP.Core.PhpStream.readTimeout">
            <summary>Timeout for network-based streams in seconds.</summary>
        </member>
        <member name="P:PHP.Core.PhpStream.RawEof">
            <summary>
  <c>true</c> if the end of the stream was reached, <c>false</c> otherwise.
  </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.CanSeek">
            <summary>
  <c>true</c> if this stream implements seeking behavior (<c>Seek</c> and <c>Tell</c>).
  </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.Eof">
            <summary>
  <c>true</c> if the end of the stream was reached, <c>false</c> otherwise.
  </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.ReadBufferLength">
            <summary>
            Gets the number of <c>byte</c>s or <c>char</c>s available
            in the <see cref="F:PHP.Core.PhpStream.readBuffers"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.StreamFilters">
            <summary>
            Get enumerator of chained read/write filters.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.RawStream">
            <summary>
  Casts this instance as the <see cref="T:System.IO.Stream"/>
  (gives direct acess to the unbuffered and unfiltered raw binary data).
  </summary>
            <exception cref="T:System.InvalidCastException">When casting is not supported.</exception>
        </member>
        <member name="P:PHP.Core.PhpStream.Context">
            <summary>
            The stream context options resource.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.IsTemporary">
            <summary>
            Gets the Auto-remove option of this stream.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.IsReadBuffered">
            <summary>
            Gets or sets the read fragmentation behavior.
            </summary>
            <remarks>
            <para>
            Network and console input streams return immediately after a nonempty data is read from the underlying stream.
            Buffered streams try to fill the whole given buffer while the underlying stream is providing data
            to satisfy the caller-specified length or <see cref="F:PHP.Core.PhpStream.readChunkSize"/>.
            </para>
            <para>
            Still the input buffer may contain valid data even for unbuffered streams.
            This may happen for example when a <c>fgets</c> has to return unconsumed data
            (following the first <c>EOL</c>) back to the stream.
            </para>
            </remarks>
        </member>
        <member name="P:PHP.Core.PhpStream.IsWriteBuffered">
            <summary>
            Gets the write fragmentation behavior.
            </summary>
            <remarks>
            When the write is not buffered then all the fwrite calls
            pass the data immediately to the underlying stream.
            </remarks>
        </member>
        <member name="P:PHP.Core.PhpStream.IsReadFiltered">
            <summary>
            Gets the filtering status of this stream. 
            <c>true</c> when there is at least one input filter on the stream.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.IsWriteFiltered">
            <summary>
            Gets the filtering status of this stream. 
            <c>true</c> when there is at least one output filter on the stream.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.CurrentAccess">
            <summary>Gets or sets the current Read/Write access mode.</summary>
        </member>
        <member name="P:PHP.Core.PhpStream.WritePosition">
            <summary>Gets the writing pointer position in the buffered stream.</summary>
        </member>
        <member name="P:PHP.Core.PhpStream.ReadPosition">
            <summary>Gets the reading pointer position in the buffered stream.</summary>
        </member>
        <member name="P:PHP.Core.PhpStream.WrapperSpecificData">
            <summary>
            PHP wrapper specific data. See GetMetaData, wrapper_data array item.
            Can be null.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.CanWrite">
            <summary>
            <c>true</c> if the stream was opened for writing.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.CanRead">
            <summary>
            <c>true</c> if the stream was opened for reading.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.IsText">
            <summary>
            <c>true</c> if the stream was opened in the text access-mode.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.IsBinary">
            <summary>
            <c>true</c> if the stream was opened in the binary access-mode.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.IsPersistent">
            <summary>
            <c>true</c> if the stream persists accross multiple scripts.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStream.StripTagsState">
            <summary>
            For <c>fgetss()</c> to handle multiline tags.
            </summary>
        </member>
        <member name="T:PHP.Core.SocketStream">
            <summary>
            An implementation of <see cref="T:PHP.Core.PhpStream"/> as an encapsulation 
            of System.Net.Socket transports.
            </summary>
        </member>
        <member name="F:PHP.Core.SocketStream.socket">
            <summary>
            The encapsulated network socket.
            </summary>
        </member>
        <member name="F:PHP.Core.SocketStream.eof">
            <summary>
            Result of the last read/write operation.
            </summary>
        </member>
        <member name="M:PHP.Core.SocketStream.FreeManaged">
            <summary>
            PhpResource.FreeManaged overridden to get rid of the contained context on Dispose.
            </summary>
        </member>
        <member name="M:PHP.Core.SocketStream.RawRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
  Reads raw byte data from the underlying stream to the given <paramref name="buffer"/>.
  </summary><param name="buffer">The buffer.</param><param name="offset">Starting index in the <paramref name="buffer"/>.</param><param name="count">How many bytes to read.</param><returns>The number of bytes read or <c>0</c> in case of EOF or <c>-1</c> in case of an error.</returns>
        </member>
        <member name="M:PHP.Core.SocketStream.RawWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>
  Writes the binary data from the <paramref name="buffer"/>to the underlying stream.
  </summary><param name="buffer">The buffer.</param><param name="offset">Starting index in the <paramref name="buffer"/>.</param><param name="count">How many bytes to write.</param><returns>The number of bytes written or <c>-1</c> in case of an error.</returns>
        </member>
        <member name="M:PHP.Core.SocketStream.RawFlush">
            <summary>
  Flushes the underlying stream.
  </summary><returns><c>true</c> on success, <c>false</c> on error.</returns>
        </member>
        <member name="P:PHP.Core.SocketStream.RawEof">
            <summary>
  <c>true</c> if the end of the stream was reached, <c>false</c> otherwise.
  </summary>
        </member>
        <member name="P:PHP.Core.SocketStream.RawStream">
            <summary>
  Casts this instance as the <see cref="T:System.IO.Stream"/>
  (gives direct acess to the unbuffered and unfiltered raw binary data).
  </summary>
        </member>
        <member name="T:PHP.Core.PhpTypeCode">
            <summary>
            Type codes of Phalanger special variables.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.String">
            <summary>The type code of the <see cref="T:System.String"/> type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.Integer">
            <summary>The type code of the <see cref="T:System.Int32"/> type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.LongInteger">
            <summary>The type code of the <see cref="T:System.Int64"/> type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.Boolean">
            <summary>The type code of the <see cref="T:System.Boolean"/> type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.Double">
            <summary>The type code of the <see cref="T:System.Double"/> type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.Object">
            <summary>The type code of the <see cref="T:System.Object"/> type and of a <B>null</B> reference.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.ObjectAddress">
            <summary>The type code of the <see cref="T:System.Object"/>&amp; type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.PhpReference">
            <summary>The type code of the <see cref="T:PHP.Core.PhpReference"/> type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.PhpArray">
            <summary>The type code of the types assignable to <see cref="T:PHP.Core.PhpArray"/> type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.DObject">
            <summary>The type code of the types assignable to <see cref="T:PHP.Core.Reflection.DObject"/> type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.PhpResource">
            <summary>The type code of the types assignable to <see cref="T:PHP.Core.PhpResource"/> type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.PhpBytes">
            <summary>The type code of the <see cref="T:PHP.Core.PhpBytes"/> type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.PhpString">
            <summary>The type code of the <see cref="T:PHP.Core.PhpString"/> type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.PhpRuntimeChain">
            <summary>The type code of the <see cref="T:PHP.Core.PhpRuntimeChain"/> type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.PhpCallable">
            <summary>The type code of a callable PHP object. Used as a type hint only.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.Invalid">
            <summary>The type code of the types which are not PHP.NET ones.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.Void">
            <summary>The type code of the <see cref="T:System.Void"/> type.</summary>
        </member>
        <member name="F:PHP.Core.PhpTypeCode.Unknown">
            <summary>An unknown type. Means the type cannot or shouldn't be determined.</summary>
        </member>
        <member name="T:PHP.Core.OrderedDictionary">
            <summary>
            Dictionary preserving order of entries.
            Defines additional methods for ordering and for PHP library functions support.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.emptyBuckets">
            <summary>
            Used as intial value for <see cref="F:PHP.Core.OrderedDictionary.buckets"/> if array is empty.
            With this as buckets, all the operators work and they do not have to check whether the collection is empty.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.copiesCount">
            <summary>
            Keep track of additional references. Increased when a copy is made, decreased is a copy is released.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.owner">
            <summary>
            Additional information about this instance creator.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.#ctor(System.Object,PHP.Core.OrderedDictionary)">
            <summary>
            Initialize new instance of <see cref="T:PHP.Core.OrderedDictionary"/> as a duplicate of given <paramref name="copyfrom"/>.
            </summary>
            <param name="owner">Instance creator.</param>
            <param name="copyfrom">Instance of an existing <see cref="T:PHP.Core.OrderedDictionary"/>.</param>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._enlist_to_global_before(PHP.Core.OrderedDictionary.Entry@,System.Int32,PHP.Core.OrderedDictionary.Entry@,System.Int32)">
            <summary>
            Enlists <paramref name="element"/> before given <paramref name="p"/>.
            </summary>
            <param name="element"></param>
            <param name="elementIndex"></param>
            <param name="p"></param>
            <param name="pIndex"></param>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._do_resize">
            <summary>
            Double the size of internal structures. Rehash entries.
            </summary>
            <remarks><see cref="F:PHP.Core.OrderedDictionary.entries"/> has to be initialized already.</remarks>
            <exception cref="T:System.OverflowException">Table size cannot be doubled more.</exception>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._rehash">
            <summary>
            Rehashes all the entries according to their current key. Preserves the order.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._add_or_update(PHP.Core.IntStringKey,System.Object)">
            <summary>
            Set <paramref name="value"/> onto given <paramref name="key"/> position.
            </summary>
            <param name="key">Key of the item to be added or upudated.</param>
            <param name="value">Value of the item.</param>
            <remarks>If <paramref name="key"/> is not contained in the table yet, newly added entry is added at the end.</remarks>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._add_first(PHP.Core.IntStringKey,System.Object)">
            <summary>
            Add new entry at the begining of the array.
            </summary>
            <param name="key">Entry key.</param>
            <param name="value">Entry value.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists.</exception>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._add_last(PHP.Core.IntStringKey@,System.Object)">
            <summary>
            Add specified item at the end of the array.
            </summary>
            <param name="key">New item key.</param>
            <param name="value">New item value.</param>
            <remarks>The function does not check if the item already exists.</remarks>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._add_last(System.Int32,System.Object)">
            <summary>
            Add specified item at the end of the array.
            </summary>
            <param name="ikey">New item key.</param>
            <param name="value">New item value.</param>
            <remarks>The function does not check if the item already exists.</remarks>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._add_before(PHP.Core.IntStringKey@,System.Object,System.Int32)">
            <summary>
            Add new entry before given <paramref name="entry_index"/>. If <paramref name="entry_index"/> is invalid, new item is added at the end of the table.
            Note given <paramref name="key"/> must not exist in the table yet.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="entry_index"></param>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._del_key_or_index(PHP.Core.IntStringKey@,PHP.Core.OrderedDictionary.Enumerator)">
            <summary>
            Removes given <paramref name="key"/> from the collection.
            </summary>
            <param name="key">Key to be removed from the collection.</param>
            <param name="active_enumerators">List of active enumerators so they can be updated if they point to the item being deleted.</param>
            <returns><c>True</c> if specified key was found and the item removed.</returns>
            <remarks>This operation can invalidate an existing enumerator. You can prevent this
            by passing <paramref name="active_enumerators"/>List of active enumerators do they can be updated.</remarks>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._remove_entry(System.Int32,PHP.Core.OrderedDictionary.Enumerator)">
            <summary>
            Removes specified entry from the array.
            </summary>
            <param name="p">Index of the entry within the <see cref="F:PHP.Core.OrderedDictionary.entries"/> array.</param>
            <param name="active_enumerators">List of active enumerators so they can be updated if they point to the item being deleted.</param>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._remove_last(PHP.Core.OrderedDictionary.Enumerator)">
            <summary>
            Removes the last entry of the array and returns it.
            </summary>
            <param name="active_enumerators">List of active enumerators so they can be updated if they point to deleted item.</param>
            <returns>The last entry of the array.</returns>
            <exception cref="T:System.InvalidOperationException">The table is empty.</exception>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._remove_first(PHP.Core.OrderedDictionary.Enumerator)">
            <summary>
            Removes the first entry of the array and returns it.
            </summary>
            <param name="active_enumerators">List of active enumerators so they can be updated if they point to deleted item.</param>
            <returns>The first entry of the array.</returns>
            <exception cref="T:System.InvalidOperationException">The table is empty.</exception>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._clear">
            <summary>
            Reset internal data structure (fast).
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._shuffle_data(System.Random)">
            <summary>
            Shuffles entries order, while keys and data are preserved.
            </summary>
            <param name="generator">Random number generator used to randomize the order.</param>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._reverse">
            <summary>
            Reverses entries order.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._find_max_int_key">
            <summary>
            Iterate through the array and find the max integer key.
            </summary>
            <returns>Max integer key or <c>-1</c> if no positive integer key is found.</returns>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._merge_sort(System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{PHP.Core.IntStringKey,System.Object}},PHP.Core.OrderedDictionary.Entry[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Sort sequence of entries using merge sort. Only changes <see cref="F:PHP.Core.OrderedDictionary.Entry.listNext"/> fields, <see cref="F:PHP.Core.OrderedDictionary.Entry.listLast"/> are not modified at all.
            </summary>
            <param name="comparer">Comparer.</param>
            <param name="entries"><see cref="F:PHP.Core.OrderedDictionary.entries"/> of table being sorted.</param>
            <param name="first">Index of an entry to start sorting from.</param>
            <param name="count">Amount if entries to sort.</param>
            <param name="after">Index of the entry after the sorted sequence.</param>
            <returns>New first entry index.</returns>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._link_prevs_by_nexts">
            <summary>
            Update <see cref="F:PHP.Core.OrderedDictionary.Entry.listLast"/> and <see cref="F:PHP.Core.OrderedDictionary.listTail"/> according to <see cref="F:PHP.Core.OrderedDictionary.Entry.listNext"/>s.
            </summary>
            <remarks>Makes global list valid.</remarks>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._link_nexts_by_prevs">
            <summary>
            Update <see cref="F:PHP.Core.OrderedDictionary.Entry.listNext"/> and <see cref="F:PHP.Core.OrderedDictionary.listHead"/> according to <see cref="F:PHP.Core.OrderedDictionary.Entry.listLast"/>s.
            </summary>
            <remarks>Makes global list valid.</remarks>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._reverse_prev_links">
            <summary>
            Reverses <see cref="F:PHP.Core.OrderedDictionary.Entry.listLast"/> links.
            </summary>
            <remarks>Global list won't be valid after this operation. However this operation reverts itself when called twice.</remarks>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._deep_copy_inplace">
            <summary>
            Perform inplace deep copy of all values.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._deep_copy_inplace(System.Object,System.Object)">
            <summary>
            Perform inplace deep copy of all values.
            This overload replaces <paramref name="oldref"/> with <paramref name="newref"/>
            within <see cref="T:PHP.Core.PhpReference"/> values; only of <paramref name="oldref"/> os not <c>null</c>.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._add_or_update_preserve_ref(PHP.Core.PhpArray,PHP.Core.IntStringKey@,System.Object)">
            <summary>
            Checks if the updated entry contains <see cref="T:PHP.Core.PhpReference"/>
            and if so, it updates its value instead of entry's value.
            
            Otherwise new item is added at the end of the array.
            </summary>
            <param name="array">Caller array.</param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._add_or_update_preserve_ref(PHP.Core.PhpArray,System.Int32,System.Object)">
            <summary>
            Checks if the updated entry contains <see cref="T:PHP.Core.PhpReference"/>
            and if so, it updates its value instead of entry's value.
            
            Otherwise new item is added at the end of the array.
            </summary>
            <param name="array">Caller array.</param>
            <param name="ikey"></param>
            <param name="value"></param>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._ensure_item_ref(PHP.Core.IntStringKey@,PHP.Core.PhpArray)">
            <summary>
            Wrap specified item into <see cref="T:PHP.Core.PhpReference"/> if not yet.
            If there is no such item, new is created.
            </summary>
            <param name="key">Index of item to be checked.</param>
            <param name="array">Caller. Used to lazy copy if necessary.</param>
            <returns><see cref="T:PHP.Core.PhpReference"/> of specified item.</returns>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._ensure_item_array(PHP.Core.IntStringKey@,PHP.Core.PhpArray)">
            <summary>
            Ensures specified item is <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
            <param name="key"></param>
            <param name="array">Caler.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._set_operation(PHP.Core.SetOperations,PHP.Core.OrderedDictionary,System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{PHP.Core.IntStringKey,System.Object}},System.Int32)">
            <summary>
            Performs diff operation on the list of this instance and the other list.
            </summary>
            <param name="op">The operation.</param>
            <param name="other">The other list.</param>
            <param name="comparer">A comparer.</param>
            <param name="deleted_dummy_next">Value to be assigned to <see cref="F:PHP.Core.OrderedDictionary.Entry.listNext"/> to be marked as deleted.</param>
            <remarks>Updates only <see cref="F:PHP.Core.OrderedDictionary.Entry.listNext"/> links. <see cref="F:PHP.Core.OrderedDictionary.Entry.listLast"/>s are preserved so the operation can be reverted eventually.</remarks>
        </member>
        <member name="M:PHP.Core.OrderedDictionary._set_operation(PHP.Core.SetOperations,PHP.Core.PhpHashtable[],System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{PHP.Core.IntStringKey,System.Object}},PHP.Core.PhpArray)">
            <summary>
            Retrieves the difference of this instance elemens and elements of the specified lists.
            </summary>
            <param name="op">The operation.</param>
            <param name="arrays">Array of arrays take away from this instance.</param>
            <param name="comparer">The comparer of entries.</param>
            <param name="result">The <see cref="T:System.Collections.IDictionary"/> where to add remaining items.</param>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.Share">
            <summary>
            Marks this instance as shared (<see cref="P:PHP.Core.OrderedDictionary.IsShared"/>) and returns itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.Unshare">
            <summary>
            Release shared instance of internal data.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.ThrowIfShared">
            <summary>
            Helper method that throws if current instance is marked as shared.
            </summary>
            <exception cref="T:System.InvalidOperationException">If this instance is marked as shared.</exception>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.Clone">
            <summary>
            Perform fast clone.
            </summary>
            <returns>Clone of <c>this</c>.</returns>
        </member>
        <member name="P:PHP.Core.OrderedDictionary.IsShared">
            <summary>
            True iff the data structure is shared by more PhpHashtable instances and must not be modified.
            </summary>
        </member>
        <member name="P:PHP.Core.OrderedDictionary.InplaceCopyOnReturn">
            <summary>
            Remember whether this instance and its owner (<see cref="T:PHP.Core.PhpArray"/>) can be recycled upon returning by value from a function.
            </summary>
        </member>
        <member name="P:PHP.Core.OrderedDictionary.Values">
            <summary>
            Gets a collection of values. 
            </summary>
        </member>
        <member name="T:PHP.Core.OrderedDictionary.Entry">
            <summary>
            An element stored in the table.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.Entry.MakeValueReferenceNoCheck">
            <summary>
            Wraps <see cref="P:PHP.Core.OrderedDictionary.Entry.Value"/> into new instance of <see cref="T:PHP.Core.PhpReference"/>.
            </summary>
            <returns>New instance of <see cref="T:PHP.Core.PhpReference"/> assigned to <see cref="P:PHP.Core.OrderedDictionary.Entry.Value"/>.</returns>
        </member>
        <member name="P:PHP.Core.OrderedDictionary.Entry.Key">
            <summary>
            Key associated with the element.
            </summary>
        </member>
        <member name="P:PHP.Core.OrderedDictionary.Entry.Value">
            <summary>
            Value associated with the element.
            </summary>
        </member>
        <member name="T:PHP.Core.IPhpEnumerator">
            <summary>
            Represents enumerator which 
            </summary>
        </member>
        <member name="M:PHP.Core.IPhpEnumerator.MoveLast">
            <summary>
            Moves the enumerator to the last entry of the dictionary.
            </summary>
            <returns>Whether the enumerator has been sucessfully moved to the last entry.</returns>
        </member>
        <member name="M:PHP.Core.IPhpEnumerator.MoveFirst">
            <summary>
            Moves the enumerator to the first entry of the dictionary.
            </summary>
            <returns>Whether the enumerator has been sucessfully moved to the first entry.</returns>
        </member>
        <member name="M:PHP.Core.IPhpEnumerator.MovePrevious">
            <summary>
            Moves the enumerator to the previous entry of the dictionary.
            </summary>
            <returns>Whether the enumerator has been sucessfully moved to the previous entry.</returns>
        </member>
        <member name="P:PHP.Core.IPhpEnumerator.AtEnd">
            <summary>
            Gets whether the enumeration has ended and the enumerator points behind the last element.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.Enumerator.table">
            <summary>
            Enumerated table.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.Enumerator.hashtable">
            <summary>
            Reference to associated <see cref="T:PHP.Core.PhpHashtable"/>. Used to unregister enumerator.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.Enumerator.element">
            <summary>
            Current element index.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.Enumerator.current">
            <summary>
            Fetched element data.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.Enumerator.start">
            <summary>
            Whether enumeration is on the start.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.Enumerator.isGeneric">
            <summary>
            Whether the enumerator should return <c>KeyValuePair{K, object}</c> when used as <see cref="T:System.Collections.IEnumerator"/>.
            If <B>false</B> it will return <see cref="T:System.Collections.DictionaryEntry"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.Enumerator.next">
            <summary>
            A reference to another <see cref="T:PHP.Core.OrderedDictionary.Enumerator"/>, allows to link existing enumerators into a linked list.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.Enumerator.EntryDeleted(System.Int32,System.Int32)">
            <summary>
            Callback method caled by <see cref="M:PHP.Core.OrderedDictionary._del_key_or_index(PHP.Core.IntStringKey@,PHP.Core.OrderedDictionary.Enumerator)"/> when an entry has been deleted.
            </summary>
            <param name="entry_index">Deleted entry index.</param>
            <param name="next_entry_index">Next entry index as a replacement.</param>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.Enumerator.TableChanged">
            <summary>
            Called when underlaying table has been changed (Unshare() called).
            </summary>
        </member>
        <member name="T:PHP.Core.OrderedDictionary.EmptyEnumerator">
            <summary>
            An enumerator representing an empty collection. Single instance can be reused.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.EmptyEnumerator.SingletonInstance">
            <summary>
            Singleton instance of this class. Can be reused.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.FastEnumerator.ModifyCurrentEntryKey(PHP.Core.IntStringKey)">
            <summary>
            Modifies key of current entry in the table.
            </summary>
            <param name="newkey">New key for the current entry.</param>
            <remarks>This function does not change the <see cref="P:PHP.Core.OrderedDictionary.FastEnumerator.CurrentKey"/> and <see cref="P:PHP.Core.OrderedDictionary.FastEnumerator.Current"/>, since both there values are already fetched.
            Note the table must be rehashed manually after this operation.</remarks>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.FastEnumerator.DeleteCurrentEntryAndMove(PHP.Core.OrderedDictionary.Enumerator)">
            <summary>
            Delete current entry from the table and advances enumerator to the next entry.
            </summary>
            <param name="activeEnumerators">List of active enumerators so they can be updated.</param>
            <returns>Whether there is another entry in the table.</returns>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.FastEnumerator.InsertBeforeCurrentEntry(PHP.Core.IntStringKey,System.Object)">
            <summary>
            Insert new entry before current entry.
            </summary>
            <param name="key">New item key.</param>
            <param name="value">New item value.</param>
        </member>
        <member name="P:PHP.Core.OrderedDictionary.FastEnumerator.IsValid">
            <summary>
            Checks whether enumerator points to an entry.
            </summary>
        </member>
        <member name="P:PHP.Core.OrderedDictionary.FastEnumerator.CurrentEntryListLast">
            <summary>
            Gets or sets current entry's <see cref="F:PHP.Core.OrderedDictionary.Entry.listLast"/> field.
            </summary>
        </member>
        <member name="P:PHP.Core.OrderedDictionary.FastEnumerator.CurrentEntryListNext">
            <summary>
            Gets or sets current entry's <see cref="F:PHP.Core.OrderedDictionary.Entry.listNext"/> field or <see cref="F:PHP.Core.OrderedDictionary.listHead"/> if enumerator is not started yet.
            </summary>
        </member>
        <member name="P:PHP.Core.OrderedDictionary.FastEnumerator.CurrentEntryIndex">
            <summary>
            Gets current entry index within the <see cref="F:PHP.Core.OrderedDictionary.entries"/> array.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.sortops._sort(PHP.Core.OrderedDictionary,System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{PHP.Core.IntStringKey,System.Object}})">
            <summary>
            Sorts items according to given <paramref name="comparer"/>. This changes only the order of items.
            </summary>
            <param name="table"><see cref="T:PHP.Core.OrderedDictionary"/> instance to be sorted.</param>
            <param name="comparer">Comparer used to sort items.</param>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.sortops._multisort(System.Int32,PHP.Core.PhpHashtable[],System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{PHP.Core.IntStringKey,System.Object}}[])">
            <summary>
            Sorts multiple lists given comparer for each hashtable.
            </summary>
            <param name="count">The number of items in each and every list.</param>
            <param name="hashtables">The lists.</param>
            <param name="comparers">Comparers to be used for lexicographical comparison.</param>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.sortops.InterconnectGrid(System.Int32,PHP.Core.PhpHashtable[])">
            <summary>
            Interconnects elements of given lists into a grid using their <see cref="F:PHP.Core.OrderedDictionary.Entry.listLast"/> fields. <see cref="F:PHP.Core.OrderedDictionary.listHead"/> is preserved.
            </summary>
            <param name="count">The number of elements in each and every list.</param>
            <param name="hashtables">Lists to be interconnected.</param>
            <remarks>
            The grid: <BR/>
            <PRE>
             H H H
             | | |
            ~o~o~o~
             | | |   ~ = Prev (right to left), cyclic without a head (necessary)
            ~o~o~o~  - = Next (top to bottom), cyclic with a head (not necessary)
             | | |
            </PRE>
            </remarks>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.sortops.DisconnectGrid(System.Int32,PHP.Core.PhpHashtable[])">
            <summary>
            Disconnects elements of lists each from other.
            </summary>
            <param name="count">The number of elements in each and every list.</param>
            <param name="hashtables">The lists.</param>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.sortops.ReorderList(System.Int32,PHP.Core.OrderedDictionary,PHP.Core.OrderedDictionary)">
            <summary>
            Reorders a minor list according to the major one. "Straightens" horizontal interconnection.
            </summary>
            <param name="count">The number of elements in each and every list.</param>
            <param name="minorHead">The head of a minor list (i).</param>
            <param name="majorHead">The head of a major list (i + 1).</param>
            <remarks><paramref name="minorHead"/> is the array before <paramref name="majorHead"/>.</remarks>
        </member>
        <member name="T:PHP.Core.OrderedDictionary.ValueCollection">
            <summary>
            Auxiliary collection used for manipulating keys or values of PhpHashtable.
            </summary>
        </member>
        <member name="T:PHP.Core.OrderedDictionary.KeyCollection">
            <summary>
            Auxiliary collection used for manipulating keys or values of PhpHashtable.
            </summary>
        </member>
        <member name="T:PHP.Core.OrderedDictionary.SerializationHelper">
            <summary>
            Handles serialization and deserialization of <see cref="T:PHP.Core.OrderedDictionary"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.SerializationHelper.InfoValueName">
            <summary>
            Name of value field within <see cref="T:System.Runtime.Serialization.SerializationInfo"/> containing serialized array of keys and objects.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.SerializationHelper.instance">
            <summary>
            An instance of <see cref="T:PHP.Core.OrderedDictionary"/> lazily created.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedDictionary.SerializationHelper.array">
            <summary>
            Internal data from <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedDictionary.SerializationHelper.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Beginning of the deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:PHP.Core.Reflection.DAssembly.#ctor(PHP.Core.ApplicationContext)">
            <summary>
            Used by builders (write-up) and unknown assemblies.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DAssembly.CreateNoLock(PHP.Core.ApplicationContext,System.Reflection.Assembly,PHP.Core.LibraryConfigStore)">
            <summary>
            Called by the loader.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DAssembly.LoadCompileTimeReferencedAssemblies(PHP.Core.AssemblyLoader)">
            <summary>
            Loads assemblies that are not explicitly referenced by the metadata, yet were referenced by the compiler
            when the assembly was being built.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DAssembly.ApplicationContext">
            <summary>
            The application context which the assembly has been loaded to.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DAssembly.RealModule">
            <summary>
            Primary real module of the assembly. <B>null</B> only for unknown assembly.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DAssembly.RealAssembly">
            <summary>
            Gets the real assembly. <B>null</B> only for unknown assembly.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DAssembly.ExportModule">
            <summary>
            Gets the module containing types, functions and constants exported to the referencing assembly.
            Returns <B>null</B> if the assembly doesn't export any entries (e.g. script assembly do so).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DAssembly.Path">
            <summary>
            Path to the assembly file or <B>null</B> for transient assemblies.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpAssembly.#ctor(PHP.Core.ApplicationContext)">
            <summary>
            Used by builder.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PureAssembly.#ctor(PHP.Core.ApplicationContext,System.Reflection.Assembly,PHP.Core.PurePhpAssemblyAttribute,PHP.Core.LibraryConfigStore)">
            <summary>
            Used by the loader.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PureAssembly.#ctor(PHP.Core.ApplicationContext)">
            <summary>
            Used by the builder.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.ScriptAssembly">
            <summary>
            An abstract base class representing general script assembly.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptAssembly.#ctor(PHP.Core.ApplicationContext,System.Reflection.Module)">
            <summary>
            Used by assembly loader.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptAssembly.#ctor(PHP.Core.ApplicationContext,System.Reflection.Assembly)">
            <summary>
            Used by assembly loader.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptAssembly.#ctor(PHP.Core.ApplicationContext)">
            <summary>
            Used by builders (written-up).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptAssembly.LoadFromAssembly(PHP.Core.ApplicationContext,System.Reflection.Assembly)">
            <summary>
            Loads a script assembly using a specified CLR assembly.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptAssembly.LoadFromAssembly(PHP.Core.ApplicationContext,System.Reflection.Assembly,System.String)">
            <summary>
            Loads a script assembly using a specified CLR assembly with specified offset path.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptAssembly.GetQualifiedScriptTypeName(System.String)">
            <summary>
            Gets a type name of the script type given a subnamespace.
            </summary>
            <param name="subnamespace">The subnamespace or a <B>null</B> reference.</param>
            <returns>Full name of the type.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptAssembly.GetAttribute(System.Reflection.Assembly)">
            <summary>
            Extracts metadata information associtated with the CLR assembly.
            </summary>
            <exception cref="T:PHP.Core.Reflection.InvalidScriptAssemblyException">The assembly is invalid.</exception>
        </member>
        <member name="T:PHP.Core.Reflection.SingleScriptAssembly">
            <summary>
            Represents a script assembly comprising of a single script module.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.SingleScriptAssembly.#ctor(PHP.Core.ApplicationContext,System.Reflection.Assembly,System.String)">
            <summary>
            Used by the loader.
            </summary>
            <param name="applicationContext">Current application context.</param>
            <param name="realAssembly">Underlying real assembly.</param>
            <param name="libraryRoot">Offset path for scripts.</param>
        </member>
        <member name="M:PHP.Core.Reflection.SingleScriptAssembly.#ctor(PHP.Core.ApplicationContext)">
            <summary>
            Used by the builder, written-up.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.SingleScriptAssembly.GetModule(PHP.Core.PhpSourceFile)">
            <summary>
            Gets the script module contained in the assembly.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.SingleScriptAssembly.GetScriptType">
            <summary>
            Gets a script type stored in a specified single-script assembly.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.SingleScriptAssembly.GetModules">
            <summary>
            Gets an enumerator of script module stored in this single-script assembly.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.MultiScriptAssembly">
            <summary>
            Represents a script assembly comprising of multiple script modules.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.MultiScriptAssembly.libraryRoot">
            <summary>
            Root path to script in this library.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.MultiScriptAssembly.#ctor(PHP.Core.ApplicationContext,System.Reflection.Assembly,System.String)">
            <summary>
            Used by assembly loader.
            </summary>
            <param name="applicationContext">Current application context.</param>
            <param name="realAssembly">Underlying real assembly.</param>
            <param name="libraryRoot">Relative path of root of the library scripts.</param>
        </member>
        <member name="M:PHP.Core.Reflection.MultiScriptAssembly.#ctor(PHP.Core.ApplicationContext)">
            <summary>
            Used by the builder (real assembly is written up).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.MultiScriptAssembly.ReflectAssemblyNoLock">
            <summary>
            Reflects the assembly and creates ScriptModules.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.MultiScriptAssembly.GetModule(PHP.Core.PhpSourceFile)">
            <summary>
            Gets a script module associated with a specified source file.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.MultiScriptAssembly.AddScriptModule(PHP.Core.PhpSourceFile,PHP.Core.Reflection.ScriptModule)">
            <summary>
            Adds a new script module. Used by builder.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.MultiScriptAssembly.GetQualifiedScriptTypeName(PHP.Core.PhpSourceFile)">
            <summary>
            Gets a full qualified name of a script type given a sub-namespace.
            </summary>
            <param name="sourceFile">Source file.</param>
            <returns>The qualified name.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.MultiScriptAssembly.ScriptExists(PHP.Core.FullPath)">
            <summary>
            Determine if script specified by <paramref name="fullPath"/> is loaded in script library.
            </summary>
            <param name="fullPath">The script path.</param>
            <returns>True if given script is loaded.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.MultiScriptAssembly.GetModules">
            <summary>
            Gets an enumerator of script modules stored in this multi-script assembly.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.MultiScriptAssembly.Modules">
            <summary>
            Source files to modules mapping.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.CompilationUnit">
            <summary>
            Base class for standard PHP script compilation unit
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnitBase.MicrosoftVendorGuid">
            <summary>Identifies vendor Micorosft (used by debugger)</summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnitBase.PhalangerLanguageGuid">
            <summary>Identifies Phalanger language (used by debugger)</summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnitBase.symbolDocumentWriters">
            <summary>
            Symbol document writers for source files used in the compilation unit.
            Maps a source file name (needn't to be a PHP source file nor even a valid file name!) to the symbol document.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.CompilationUnitBase.ModuleBuilder">
            <summary>
            Module or module builder associated with the compilation unit (one-to-one).
            Filled by reflection or emission.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.CompilationUnitBase.IsTransient">
            <summary>
            Whether the unit represents an eval et. al.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.CompilationUnit.Reflect">
            <summary>
            Reflect types, functions and constants in compilation unit
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.CompilationUnit.GetVisibleTypes">
            <summary>
            Used for merging type tables (in ScriptCompilationUnit)
            </summary>
            <returns>Returns all reflected or declared types</returns>
        </member>
        <member name="M:PHP.Core.Reflection.CompilationUnit.GetVisibleFunctions">
            <summary>
            Used for merging function tables (in ScriptCompilationUnit)
            </summary>
            <returns>Returns all reflected or declared functions</returns>
        </member>
        <member name="M:PHP.Core.Reflection.CompilationUnit.GetVisibleConstants">
            <summary>
            Used for merging constant tables (in ScriptCompilationUnit)
            </summary>
            <returns>Returns all reflected or declared constants</returns>
        </member>
        <member name="P:PHP.Core.Reflection.CompilationUnit.RelativeSourcePath">
            <summary>
            Source file path to be used when emiting inclusion.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.CompilationUnit.ScriptClassType">
            <summary>
            System.Type of the main module class
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.CompilationUnit.MainHelper">
            <summary>
            MethodInfo of the main module 'Main' method
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnit.States.Initial">
            <summary>
            Compilation unit has just been created.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnit.States.Erroneous">
            <summary>
            There is an error in the unit.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnit.States.Parsed">
            <summary>
            Source files of the unit have been parsed and the AST is available.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnit.States.Processed">
            <summary>
            Tables needn't to be complete (the node may be involved in MPF).
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnit.States.Compiled">
            <summary>
            The unit has been compiled, AST is not available any more, tables are.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnit.States.Reflected">
            <summary>
            The unit has been reflected, AST is not available, tables are.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnit.States.PreAnalyzed">
            <summary>
            Pre-analysis performed.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnit.States.MembersAnalyzed">
            <summary>
            Member analysis performed.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnit.States.Analyzed">
            <summary>
            Full analysis performed.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnit.States.BuildersDefined">
            <summary>
            Builders defined.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.CompilationUnit.States.Emitted">
            <summary>
            AST emitted.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.ReflectedCompilationUnit">
            <summary>
            This compilation unit is used while reflecting compiled SSA or MSA assembly.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ReflectedCompilationUnit.#ctor(PHP.Core.Reflection.ScriptModule)">
            <summary>
            Used by reflection.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ReflectedCompilationUnit.GetVisibleTypes">
            <summary>
            Used for merging type tables (in ScriptCompilationUnit)
            </summary>
            <returns>Returns all reflected or declared types</returns>
        </member>
        <member name="M:PHP.Core.Reflection.ReflectedCompilationUnit.GetVisibleFunctions">
            <summary>
            Used for merging function tables (in ScriptCompilationUnit)
            </summary>
            <returns>Returns all reflected or declared functions</returns>
        </member>
        <member name="M:PHP.Core.Reflection.ReflectedCompilationUnit.GetVisibleConstants">
            <summary>
            Used for merging constant tables (in ScriptCompilationUnit)
            </summary>
            <returns>Returns all reflected or declared constants</returns>
        </member>
        <member name="M:PHP.Core.Reflection.ReflectedCompilationUnit.GetDeclaredTypes">
            <summary>
            Returns declared types - in reflected unit we don't return anything
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ReflectedCompilationUnit.GetDeclaredFunctions">
            <summary>
            Returns declared functions - in reflected unit we don't return anything
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ReflectedCompilationUnit.GetDeclaredConstants">
            <summary>
            Returns declared constants - in reflected unit we don't return anything
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ReflectedCompilationUnit.Reflect">
            <summary>
            Perform reflection on the compiled assembly
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ReflectedCompilationUnit.RelativeSourcePath">
            <summary>
            Source file path to be used when emiting inclusion
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ReflectedCompilationUnit.ScriptClassType">
            <summary>
            System.Type of the main module class
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ReflectedCompilationUnit.MainHelper">
            <summary>
            MethodInfo of the main module 'Main' method
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.PureCompilationUnit">
            <summary>
            Pure units: 
            no inclusions, 
            no global code except top-level statements (function decl, class decl, namespace decl, global constant decl)
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PureCompilationUnit.parsingOnly">
            <summary>
            Whether the unit is only parsed, not compiled.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PureCompilationUnit.relaxPurity">
            <summary>
            For parsed-only units, skips errors related to purity violations.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.ScriptCompilationUnit">
            <summary>
            This compilation unit is used while compiling PHP script
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.#ctor">
            <summary>
            Used by compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.GetVisibleFunction(PHP.Core.QualifiedName,System.String@,PHP.Core.AST.Scope)">
            <summary>
            Search for a declaration by its qualified name
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.GetVisibleType(PHP.Core.QualifiedName,System.String@,PHP.Core.AST.Scope,System.Boolean)">
            <summary>
            Search for a declaration by its qualified name
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.GetVisibleConstant(PHP.Core.QualifiedName,System.String@,PHP.Core.AST.Scope)">
            <summary>
            Search for a declaration by its qualified name
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.GetVisibleTypes">
            <summary>
            Used for merging type tables (in ScriptCompilationUnit)
            </summary>
            <returns>Returns all reflected or declared types</returns>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.GetVisibleFunctions">
            <summary>
            Used for merging function tables (in ScriptCompilationUnit)
            </summary>
            <returns>Returns all reflected or declared functions</returns>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.GetVisibleConstants">
            <summary>
            Used for merging constant tables (in ScriptCompilationUnit)
            </summary>
            <returns>Returns all reflected or declared constants</returns>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.GetDeclaredTypes">
            <summary>
            Return only declared types that should be emited while compiling
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.GetDeclaredFunctions">
            <summary>
            Return only declared functions that should be emited while compiling
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.GetDeclaredConstants">
            <summary>
            Return only declared constants that should be emited while compiling
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.MergeTables(PHP.Core.Reflection.StaticInclusion)">
            <summary>
            Merges the content of all tables.
            Returns the number of added items.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.MergeTable``1(PHP.Core.Reflection.StaticInclusion,System.Collections.Generic.Dictionary{PHP.Core.QualifiedName,PHP.Core.Reflection.ScopedDeclaration{``0}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{PHP.Core.QualifiedName,PHP.Core.Reflection.ScopedDeclaration{``0}}})">
            <summary>
            Merges the content of specified tables.
            Returns the number of added items.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.ResolveInclusion(PHP.Core.InclusionTypes,PHP.Core.AST.IncludingEx,PHP.Core.CompilationContext,PHP.Core.Reflection.Characteristic@,PHP.Core.PhpSourceFile@)">
            <summary>
            Determines characteristics and target source path according to the analysis of the inclusion expression.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ScriptCompilationUnit.DetermineStaticTarget(System.String,PHP.Core.AST.Expression,PHP.Core.CompilationContext)">
            <summary>
            Checks whether the file defined by the path which is about to be set exists.
            </summary>
            <param name="translatedPath">The path to set. Can be either relative or absolute, canonical or not.</param>
            <param name="target"></param>
            <param name="context">Source unit.</param>
            <returns>Target source file a <B>null</B> reference if it cannot be statically determined.</returns>
        </member>
        <member name="P:PHP.Core.Reflection.ScriptCompilationUnit.SourceUnit">
            <summary>
            Source unit or <B>null</B> for reflected units.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ScriptCompilationUnit.RelativeSourcePath">
            <summary>
            Source file path to be used when emiting inclusion
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ScriptCompilationUnit.ScriptClassType">
            <summary>
            System.Type of the main module class
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ScriptCompilationUnit.MainHelper">
            <summary>
            MethodInfo of the main module 'Main' method
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.TransientCompilationUnit.types">
            <summary>
            Stores types, functions and constants during compilation.
            Dropped when the module is being baked to free the emission resources.
            Only descriptors of the baked elements are accessible (via <c>bakedXxx</c> lists).
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.TransientCompilationUnit.bakedTypes">
            <summary>
            Baked type, function and constant descriptors and their full names. 
            Available after the compilation. Used for activations each time 
            the transient unit is executed (via eval).
            Contains only unconditionally declared entities.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.TransientCompilationUnit.PreCompile(PHP.Core.CompilationContext,PHP.Core.ScriptContext,PHP.Core.Reflection.SourceCodeDescriptor,PHP.Core.EvalKinds,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Called before 'Compile' to initialize module &amp; assembly builders, so they can be used by the caller.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.TransientCompilationUnit.Compile(PHP.Core.CompilationContext,PHP.Core.EvalKinds)">
            <summary>
            Compiles the transient unit. 'PreCompile' should be called first!
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.TransientCompilationUnit.Declare(PHP.Core.ScriptContext)">
            <summary>
            Declares types unconditionally declared in this module on the given <see cref="T:PHP.Core.ScriptContext"/>.
            Although, we can emit the Declare helper, it is not necessary as we can do it here for types 
            and functions. Only constants, which cannot be evaluated at compile time (they are dependent 
            on other eval-time evaluated constants are emitted (TODO).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.TransientCompilationUnit.IsDynamic">
            <summary>
            Whether the functions and main code of the transient module is emitted to DynamicMethods.
            Note that DMs don't support references to *Builders so if there are any declarations in the code,
            the unit cannot be dynamic.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.InclusionMapping">
            <summary>
            Defines an inclusion mapping.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.InclusionMapping.SourceRootGroupName">
            <summary>
            Group name interpreted as the source root of application, <see cref="P:PHP.Core.ApplicationConfiguration.CompilerSection.SourceRoot"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.InclusionMapping.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an inclusion mapping.
            </summary>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> is not a valid regular expression pattern.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> or <paramref name="replacement"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.Reflection.InclusionMapping.TranslateExpression(System.Collections.Generic.IEnumerable{PHP.Core.Reflection.InclusionMapping},System.String,System.String)">
            <summary>
            Translates expression (a parameter of include/require) according to the pattern specified in the configuration.
            </summary>
            <param name="expression">The expression to be translated via regexp pattern.</param>
            <param name="mappings">A list of mappings.</param>
            <param name="sourceRoot">The <see cref="P:PHP.Core.ApplicationConfiguration.CompilerSection.SourceRoot"/> used to patch <see cref="P:PHP.Core.Reflection.InclusionMapping.Replacement"/> string.</param>
        </member>
        <member name="P:PHP.Core.Reflection.InclusionMapping.Name">
            <summary>
            Name identifying the mapping.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.InclusionMapping.Replacement">
            <summary>
            Replacement.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.InclusionMapping.Pattern">
            <summary>
            Pattern.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.InclusionGraphBuilder.SelectNonReflectedUnits(System.Collections.Generic.Dictionary{PHP.Core.PhpSourceFile,PHP.Core.Reflection.CompilationUnit}.ValueCollection)">
            <summary>
            Selects only units that are in other than 'Reflected' state. This prevents us from 
            trying to build 'Reflected' units (which is of course impossible)
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.InclusionGraphBuilder.GetNode(PHP.Core.PhpSourceFile)">
            <summary>
            Gets the node of the graph associated with the specified source file.
            First, look up the table of processed nodes. 
            If not there, check compiled units maintained by the manager.
            If it is not found in the manager's cache the source file is locked so that other compilers will 
            wait until we finish compilation of the node. The new node is created if the compilation unit doesn't exist for it.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.InclusionGraphBuilder.ProcessPendingInclusions">
            <summary>
            Minimal fixpoint algorithm.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.ScopedDeclaration`1">
            <summary>
            Represents declaration in the compilation unit. 
            Declaration can be either known (when compiling) or 
            reflected (when reflecting)
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.KnownScopedDeclaration`1">
            <summary>
            Known declaration - used by ScriptCompilationUnit
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.ReflectedScopedDeclaration`1">
            <summary>
            Reflected declaration - used by ReflectedCompilationUnit
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.InclusionTypesEnum.IsOnceInclusion(PHP.Core.InclusionTypes)">
            <summary>
            Returns whether a specified inclusion is "once-inclusion".
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.InclusionTypesEnum.IsAutoInclusion(PHP.Core.InclusionTypes)">
            <summary>
            Returns whether a specified inclusion is auto-inclusion (auto-prepended/appended file).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.InclusionTypesEnum.IsMustInclusion(PHP.Core.InclusionTypes)">
            <summary>
            Returns whether a specified inclusion must succeed.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.GetMemberResult">
            <summary>
            Return type of <see cref="M:PHP.Core.Reflection.DTypeDesc.GetMember``2(PHP.Core.Reflection.DTypeDesc.GetMemberDictionary{``0,``1},``0,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc.LookupFlags,``1@)"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.GetMemberResult.OK">
            <summary>The member was found and is visible for the caller.</summary>
        </member>
        <member name="F:PHP.Core.Reflection.GetMemberResult.NotFound">
            <summary>The member was not found.</summary>
        </member>
        <member name="F:PHP.Core.Reflection.GetMemberResult.BadVisibility">
            <summary>The member was found but is invisible for the caller.</summary>
        </member>
        <member name="M:PHP.Core.Reflection.Enums.ToMethodAttributes(PHP.Core.PhpMemberAttributes)">
            <summary>
            <para>Returns <see cref="T:System.Reflection.MethodAttributes"/> that are used while emitting the method.</para>
            <para>NOTE: Combinations static/final and static/abstract can be returned. Such methods are
            not allowed in CLI, so final or abstract flag must be removed and PhpFinalAttribute or
            PhpAbstractAttribute added instead.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Reflection.Enums.GetPropertyAttributes(System.Reflection.PropertyInfo)">
            <summary>
            Determines lowest accessibility of all property accessors and other member attributes.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DMemberDesc.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes)">
            <summary>
            Used by all subclasses except for <see cref="T:PHP.Core.Reflection.GlobalTypeDesc"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DMemberDesc.Member">
            <summary>
            <B>null</B> for run-time created (or fast-reflected) descriptors.
            Doesn't trigger the reflection (only <see cref="P:PHP.Core.Reflection.DTypeDesc.Type"/> trigger the reflection).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DMemberDesc.DeclaringType">
            <summary>
            Declaring type - a global type in the case of types, functions and global constants.
            </summary>
            <remarks>
            Run-time type descriptors points to a common singleton (global type of the <see cref="T:PHP.Core.Reflection.UnknownModule"/>).
            </remarks>
        </member>
        <member name="P:PHP.Core.Reflection.DMemberDesc.DeclaringModule">
            <summary>
            Gets the <see cref="T:PHP.Core.Reflection.DModule"/> declaring the type. Forwarded to <see cref="T:PHP.Core.Reflection.GlobalTypeDesc"/>.
            Descriptors created at run-time refers to the singleton of the <see cref="T:PHP.Core.Reflection.UnknownModule"/> class.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DMember.#ctor(PHP.Core.Reflection.DMemberDesc,System.String)">
            <summary>
            Used by compiler for unknown members without descriptors (methods, functions), for generic parameters, and 
            for unknown members with descriptor.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DMember.#ctor(PHP.Core.Reflection.DMemberDesc)">
            <summary>
            Used by compiler for known members and unknown members with descriptor (types).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DMember.DeclaringType">
            <summary>
            Declaring type of the member.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DMember.IsIdentityDefinite">
            <summary>
            Whether the analyzer can be sure about the identity of the member.
            That is for types, whether the analyzer can refer to the modifiers, generic parameters
            and the members declared directly by the type (inherited members needn't to be definite).
            
            For functions, whether the analyzer can refer to the signature of the function.
            
            Class constants, fields, and methods are identity definite iff they are known (identity definiteness
            of the type's member is relative to the declaring type). The analyzer can refer to the modifiers and 
            signatures of the identity definite methods.
            
            Constructed types are identity definite iff the generic type is identity definite as the members 
            of the constructed types are same as ones of the generic types and only the type parameter substitution
            needn't to be known.
            
            Generic parameters are not identity definite as their substitute is unknown.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DMember.IsDefinite">
            <summary>
            Whether the analyzer and code generator can be sure about the entire structure of the member, i.e.
            whether the member is identity definite and all members that influences its structure (e.g. all base types) 
            are definite.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.DMemberRef">
            <summary>
            Represents a member-type pair.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DRoutineDesc.Index">
            <summary>
            Internal index used for call cache.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DRoutineDesc.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes,PHP.Core.RoutineDelegate,System.Boolean)">
            <summary>
            Used by compiler through subclasses (<paramref name="arglessStub"/> is <B>null</B> then).
            Called by a declaring helper at run-time.
            </summary>
            <param name="declaringType">The declaring type. Can be null.</param>
            <param name="memberAttributes">Attributes of the function.</param>
            <param name="arglessStub">The stub to be called. Cannot be null.</param>
            <param name="needsIndex">True to allocate <see cref="F:PHP.Core.Reflection.DRoutineDesc.Index"/>. Usable for preserved descs, for global functions that can be reused.</param>
        </member>
        <member name="P:PHP.Core.Reflection.DRoutineDesc.ArglessStubMethod">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> to be called thru .call IL OpCode.
            </summary>
            <remarks>
            By default, it is the Method of <see cref="P:PHP.Core.Reflection.DRoutineDesc.ArglessStub"/> delegate. In case of emitted <see cref="T:System.Reflection.Emit.DynamicMethod"/>,
            we need to remember the original <see cref="T:System.Reflection.Emit.DynamicMethod"/> so it can be called within DLR.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutineDesc.#ctor(PHP.Core.Reflection.DModule,PHP.Core.PhpMemberAttributes)">
            <summary>
            Used by compiler for functions.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutineDesc.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes)">
            <summary>
            Used by compiler for methods.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutineDesc.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes,PHP.Core.RoutineDelegate)">
            <summary>
            Creates a descriptor for specified PHP method at run-time if argless stub delegate is available.
            Called by declaring helper emitted on PHP types.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutineDesc.#ctor(PHP.Core.PhpMemberAttributes,PHP.Core.RoutineDelegate,System.Boolean)">
            <summary>
            Creates a descriptor for specified PHP function at run-time if argless stub delegate is available.
            Called by declaring helpers emitted on script or when a callback is created.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryFunctionDesc.#ctor(PHP.Core.Reflection.PhpLibraryModule,PHP.Core.RoutineDelegate)">
            <summary>
            Used by both fast and full reflectors.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.ClrMethodDesc">
            <summary>
            Represents a non-generic CLR method.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrMethodDesc.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes)">
            <summary>
            Used by compiler and full-reflect.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.ClrGenericMethodDesc">
            <summary>
            Represents a generic CLR method.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrGenericMethodDesc.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes)">
            <summary>
            Used by full-reflect.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrGenericMethodDesc.ArglessPreStub(System.Object,PHP.Core.PhpStack)">
            <summary>
            Dispatches the invocation to a constructed method according to type arguments on the stack.
            </summary>
            <remarks>
            Constructed methods are cached in the <see cref="F:PHP.Core.Reflection.ClrGenericMethodDesc.instantiations"/> dictionary.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.ClrGenericMethodDesc.ConstructMethodDesc(PHP.Core.Reflection.DTypeDescs)">
            <summary>
            Creates a constructed method desc for the given type arguments.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.ClrModule">
            <summary>
            Represents CLR loaded assembly (not a <see cref="T:System.Reflection.Module"/>).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrModule.#ctor(PHP.Core.Reflection.ClrAssembly)">
            <summary>
            Called by the loader via <see cref="P:PHP.Core.Reflection.ClrModule.ClrAssembly"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrModule.ReflectTypes(System.Reflection.Assembly,System.Collections.Generic.Dictionary{System.String,PHP.Core.Reflection.DTypeDesc})">
            <summary>
            Used by CLR modules and PHP pure modules.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.PhpLibraryModule">
            <summary>
            Represents loaded PHP library. Provides its configuration, implemented extensions list, etc.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpLibraryModule.DynamicAssemblySuffix">
            <summary>
            Suffix for dynamically generated wrapper assemblies.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpLibraryModule.DynamicWrapperModuleName">
            <summary>
            A name of the primary module of dynamic library wrappers.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.#ctor(PHP.Core.Reflection.PhpLibraryAssembly)">
            <summary>
            Called by the loader thru <see cref="P:PHP.Core.Reflection.PhpLibraryModule.PhpLibraryAssembly"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.ReflectArglesses(System.Collections.Generic.Dictionary{System.String,PHP.Core.Reflection.DRoutineDesc},System.Type)">
            <summary>
            Reflect argless function stubs from the given <c>type</c>.
            </summary>
            <param name="functions">Dictionary of functions where newly discovered functions will be placed.</param>
            <param name="type">The type to reflect function from.</param>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.AddArglessStub(System.Collections.Generic.Dictionary{System.String,PHP.Core.Reflection.DRoutineDesc},System.Reflection.MethodInfo,System.String)">
            <summary>
            Add the argless stub <c>method</c> into the list of functions.
            </summary>
            <param name="functions">Dictionary of functions to insert the stub into.</param>
            <param name="method">The method of the stub.</param>
            <param name="functionName">The PHP name representing the function.</param>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.ReflectArgfulls(System.Collections.Generic.Dictionary{System.String,PHP.Core.Reflection.DTypeDesc},System.Collections.Generic.Dictionary{System.String,PHP.Core.Reflection.DRoutineDesc},PHP.Core.DualDictionary{System.String,PHP.Core.Reflection.DConstantDesc},System.Type,System.Boolean)">
            <summary>
            Reflect argfull function, PHP types and constants from given <c>type</c>.
            </summary>
            <param name="types">Dictionary of types where newly discovered PHP types will be placed. (Types having [ImplementsType] attribute.)</param>
            <param name="functions">Dictionary of reflected functions.</param>
            <param name="constants">Dictionary of reflected constants.</param>
            <param name="type">The type to reflect functions from.</param>
            <param name="full">Whether to perform full function reflect.</param>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.ReflectLibraryType(System.Collections.Generic.Dictionary{System.String,PHP.Core.Reflection.DRoutineDesc},PHP.Core.DualDictionary{System.String,PHP.Core.Reflection.DConstantDesc},System.Type,System.Boolean)">
            <summary>
            Assuming the given <c>type</c> is Library type, reflect argfull function stubs, PHP types and constants from given <c>type</c>.
            </summary>
            <param name="functions">Dictionary of reflected functions.</param>
            <param name="constants">Dictionary of reflected constants.</param>
            <param name="type">The type to reflect functions from.</param>
            <param name="full">Whether to perform full function reflect.</param>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.FindArglessStub(System.Reflection.MethodInfo[],System.Collections.Generic.Dictionary{System.String,PHP.Core.Reflection.DRoutineDesc},System.Reflection.MethodInfo,PHP.Core.ImplementsFunctionAttribute)">
            <summary>
            Find the MethodInfo representing argless stub for the specified method. If the method
            is found, it will be added using <c>AddArglessStub</c>.
            </summary>
            <param name="realMethods">List of MethodInfos to search from.</param>
            <param name="functions">Dictionary of reflected functions.</param>
            <param name="method">Argfull overload which argless stub is searched.</param>
            <param name="impl_func">ImplementsFunction attribute of tjhe <c>method</c>.</param>
            <returns>DRoutineDesc of argless stub or null if it was not found.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.AddEmptyArglessStub(System.Collections.Generic.Dictionary{System.String,PHP.Core.Reflection.DRoutineDesc},System.String)">
            <summary>
            Add empty argless stub just to allow initialization without dynamic wrappers.
            </summary>
            <param name="functions"></param>
            <param name="functionName"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.FullReflectFunctions(System.Reflection.MethodInfo[],System.Collections.Generic.Dictionary{System.String,PHP.Core.Reflection.DRoutineDesc},System.Boolean)">
            <summary>
            Reflect argfull stubs from the list of given methods.
            </summary>
            <param name="realMethods">List of MethodInfos to reflect.</param>
            <param name="functions">Dictionary of reflected functions.</param>
            <param name="lookForArgless">True to look for argless stub in <c>realMethods</c> if argless stub was not found in <c>functions</c>.</param>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.IsLibraryType(System.Type)">
            <summary>
            Checks whether a specified type is valid class library type that can contain function declarations.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.LoadDynamicWrapper">
            <summary>
            Loads a dynamic wrapper of a specified library assembly.
            </summary>
            <returns>The dynamic wrapper assembly.</returns>
            <remarks>Thread safe.</remarks>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.GetImplementedExtension(System.Type)">
            <summary>
            Checks whether a specified type implements some extension in this library and returns its name if so.
            </summary>
            <param name="type">The type.</param>
            <returns>A name of the extension which is partly or entirely implemented by the <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.DynamicWrapperFileName(System.Reflection.Assembly,System.Int32)">
            <summary>
            Get the dynamic wrapper file name based on the given extension assembly.
            </summary>
            <param name="ass">Extension assembly which dynamic wrapper file is needed.</param>
            <param name="version">Wrapper version to to be appended to the file name.</param>
            <returns>Dynamic wrapper assembly file name corresponding to given <paramref name="ass"/>.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.DetermineDynamicWrapperFileName(System.String,System.Reflection.Assembly)">
            <summary>
            Determine file name to be use for dynamic wrapper. The resulting file has to not exists, be writable or up-to-date.
            </summary>
            <param name="wrappers_dir">Directory with dynamic wrappers.</param>
            <param name="ass">Class library assembly.</param>
            <returns>File name (relatively to <paramref name="wrappers_dir"/>) for dyamic wrapper.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.FileIsWritable(System.String)">
            <summary>
            Determine whether given <paramref name="filename"/> can be overwritten.
            </summary>
            <param name="filename">Full file name to be checked.</param>
            <returns><c>True</c> if file can be overwritten.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryModule.IsDynamicWrapperUpToDate(System.Reflection.Assembly,System.String)">
            <summary>
            Check wheter dynamic wrapper for given <see cref="T:System.Reflection.Assembly"/> <paramref name="ass"/> does exist and is up to date.
            </summary>
            <param name="ass">Class library assembly.</param>
            <param name="wrapper_name">Wrapper file name corresponding to the given assembly <paramref name="ass"/>.</param>
            <returns>True iff there is a valid up-to-date dynamic wrapper for given assembly.</returns>
        </member>
        <member name="P:PHP.Core.Reflection.PhpLibraryModule.DynamicWrapper">
            <summary>
            Dynamic wrapper, lazy explicit.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.PhpLibraryModule.DynamicWrapperLoadException">
            <summary>
            An exception thrown when dynamic wrapper cannot be loaded.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpError">
            <summary>
            Types of errors caused by PHP class library functions.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpError.Error">
            <summary>Error.</summary>
        </member>
        <member name="F:PHP.Core.PhpError.Warning">
            <summary>Warning.</summary>
        </member>
        <member name="F:PHP.Core.PhpError.Notice">
            <summary>Notice.</summary>
        </member>
        <member name="F:PHP.Core.PhpError.UserError">
            <summary>User error.</summary>
        </member>
        <member name="F:PHP.Core.PhpError.UserWarning">
            <summary>User warning.</summary>
        </member>
        <member name="F:PHP.Core.PhpError.UserNotice">
            <summary>User notice.</summary>
        </member>
        <member name="F:PHP.Core.PhpError.ParseError">
            <summary>Parse error.</summary>
        </member>
        <member name="F:PHP.Core.PhpError.CoreError">
            <summary>Core error.</summary>
        </member>
        <member name="F:PHP.Core.PhpError.CoreWarning">
            <summary>Core warning.</summary>
        </member>
        <member name="F:PHP.Core.PhpError.CompileError">
            <summary>Compile error.</summary>
        </member>
        <member name="F:PHP.Core.PhpError.CompileWarning">
            <summary>Compile warning.</summary>
        </member>
        <member name="F:PHP.Core.PhpError.Strict">
            <summary>Strict notice (PHP 5.0+).</summary>
        </member>
        <member name="F:PHP.Core.PhpError.RecoverableError">
            <summary>PHP 5.2+</summary>
        </member>
        <member name="F:PHP.Core.PhpError.Deprecated">
            <summary>Deprecated (PHP 5.3+)</summary>
        </member>
        <member name="T:PHP.Core.PhpErrorSet">
            <summary>
            Sets of error types.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpErrorSet.None">
            <summary>Empty error set.</summary>
        </member>
        <member name="F:PHP.Core.PhpErrorSet.Standard">
            <summary>Standard errors used by Core and Class Library.</summary>
        </member>
        <member name="F:PHP.Core.PhpErrorSet.User">
            <summary>User triggered errors.</summary>
        </member>
        <member name="F:PHP.Core.PhpErrorSet.System">
            <summary>Core system errors.</summary>
        </member>
        <member name="F:PHP.Core.PhpErrorSet.AllButStrict">
            <summary>All possible errors except for the strict ones.</summary>
        </member>
        <member name="F:PHP.Core.PhpErrorSet.All">
            <summary>All possible errors. 30719 in PHP 5.3</summary>
        </member>
        <member name="F:PHP.Core.PhpErrorSet.Handleable">
            <summary>Errors which can be handled by the user defined routine.</summary>
        </member>
        <member name="F:PHP.Core.PhpErrorSet.Fatal">
            <summary>Errors which causes termination of a running script.</summary>
        </member>
        <member name="T:PHP.Core.PhpErrorAction">
            <summary>
            Type of action being performed when PhpException static handlers (Throw, InvalidArgument, ...) are called. 
            </summary>
        </member>
        <member name="F:PHP.Core.PhpErrorAction.Default">
            <summary>An action specified by the current configuration is taken.</summary>
        </member>
        <member name="F:PHP.Core.PhpErrorAction.Throw">
            <summary>An exception is thrown.</summary>
        </member>
        <member name="F:PHP.Core.PhpErrorAction.None">
            <summary>Do nothing but setting the flag.</summary>
        </member>
        <member name="T:PHP.Core.ErrorStackInfo">
            <summary>
            Represents information about an error got from the stack.
            </summary>
        </member>
        <member name="F:PHP.Core.ErrorStackInfo.File">
            <summary>
            The name of the source file.
            </summary>
        </member>
        <member name="F:PHP.Core.ErrorStackInfo.Caller">
            <summary>
            The name of the PHP function which caused an error.
            </summary>
        </member>
        <member name="F:PHP.Core.ErrorStackInfo.LibraryCaller">
            <summary>
            Whether a caller is a library function.
            </summary>
        </member>
        <member name="F:PHP.Core.ErrorStackInfo.Line">
            <summary>
            A number of a line in a source file where an error occured.
            </summary>
        </member>
        <member name="F:PHP.Core.ErrorStackInfo.Column">
            <summary>
            A number of a column in a source file where an error occured.
            </summary>
        </member>
        <member name="M:PHP.Core.ErrorStackInfo.#ctor(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes <see cref="T:PHP.Core.ErrorStackInfo"/> by given values.
            </summary>
            <param name="file">Full path to a source file.</param>
            <param name="caller">Name of a calling PHP funcion.</param>
            <param name="line">Line in a source file.</param>
            <param name="column">Column in a source file.</param>
            <param name="libraryCaller">Whether a caller is a library function.</param>
        </member>
        <member name="T:PHP.Core.PhpException">
            <summary>
            Represents exceptions thrown by PHP class library functions.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpException.InvalidArgument(System.String)">
            <summary>
            Invalid argument error.
            </summary>
            <param name="argument">The name of the argument being invalid.</param>
        </member>
        <member name="M:PHP.Core.PhpException.InvalidArgument(System.String,System.String)">
            <summary>
            Invalid argument error with a description of a reason. 
            </summary>
            <param name="argument">The name of the argument being invalid.</param>
            <param name="message">The message - what is wrong with the argument. Must contain "{0}" which is replaced by argument's name.
            </param>
        </member>
        <member name="M:PHP.Core.PhpException.ArgumentNull(System.String)">
            <summary>
            Argument null error. Thrown when argument can't be null but it is.
            </summary>
            <param name="argument">The name of the argument.</param>
        </member>
        <member name="M:PHP.Core.PhpException.ReferenceNull(System.String)">
            <summary>
            Reference argument null error. Thrown when argument which is passed by reference is null.
            </summary>
            <param name="argument">The name of the argument.</param>
        </member>
        <member name="M:PHP.Core.PhpException.FunctionNotSupported">
            <summary>
            Called library function is not supported.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpException.FunctionNotSupported(System.String)">
            <summary>
            Called library function is not supported.
            </summary>
            <param name="function">Not supported function name.</param>
        </member>
        <member name="M:PHP.Core.PhpException.FunctionNotSupported(PHP.Core.PhpError)">
            <summary>
            Calles library function is not supported.
            </summary>
            <param name="severity">A severity of the error.</param>
        </member>
        <member name="M:PHP.Core.PhpException.FunctionDeprecated(System.String)">
            <summary>
            Called library function is deprecated.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpException.NeedsVariables">
            <summary>
            Calls by the Class Library methods which need variables but get a <b>null</b> reference.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpException.ArgumentValueNotSupported(System.String,System.Object)">
            <summary>
            The value of an argument is not invalid but unsupported.
            </summary>
            <param name="argument">The argument which value is unsupported.</param>
            <param name="value">The value which is unsupported.</param>
        </member>
        <member name="M:PHP.Core.PhpException.ArgumentNotPassedByRef(System.Int32,System.String)">
            <summary>
            Throw by <see cref="T:PHP.Core.PhpStack"/> when a peeked argument should be passed by reference but it is not.
            </summary>
            <param name="index">An index of the argument.</param>
            <param name="calleeName">A name of the function or method being called. Can be a <B>null</B> reference.</param>
        </member>
        <member name="M:PHP.Core.PhpException.MissingArgument(System.Int32,System.String)">
            <summary>
            Emitted to a user function/method call which has less actual arguments than it's expected to have.
            </summary>
            <param name="index">An index of the parameter.</param>
            <param name="calleeName">A name of the function or method being called. Can be a <B>null</B> reference.</param>
        </member>
        <member name="M:PHP.Core.PhpException.MissingTypeArgument(System.Int32,System.String)">
            <summary>
            Emitted to a user function/method call which has less actual type arguments than it's expected to have.
            </summary>
            <param name="index">An index of the type parameter.</param>
            <param name="calleeName">A name of the function or method being called. Can be a <B>null</B> reference.</param>
        </member>
        <member name="M:PHP.Core.PhpException.InvalidArgumentCount(System.String,System.String)">
            <summary>
            Emitted to a library function call which has invalid actual argument count.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpException.InvalidForeachArgument">
            <summary>
            Emitted to the foreach statement if the variable to be enumerated doesn't implement 
            the <see cref="T:PHP.Core.IPhpEnumerable"/> interface.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpException.InvalidImplicitCast(System.Object,System.String,System.String)">
            <summary>
            Emitted to the function call if an argument cannot be implicitly casted.
            </summary>
            <param name="argument">The argument which is casted.</param>
            <param name="targetType">The type to which is casted.</param>
            <param name="functionName">The name of the function called.</param>
        </member>
        <member name="M:PHP.Core.PhpException.InvalidBreakLevelCount(System.Int32)">
            <summary>
            Emitted to the code on the places where invalid number of breaking levels is used.
            </summary>
            <param name="levelCount">The number of levels.</param>
        </member>
        <member name="M:PHP.Core.PhpException.UndefinedVariable(System.String)">
            <summary>
            Reported by operators when they found that a undefined variable is acceesed.
            </summary>
            <param name="name">The name of the variable.</param>
        </member>
        <member name="M:PHP.Core.PhpException.CannotReassignThis">
            <summary>
            Emitted instead of the assignment of to the "$this" variable.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpException.InvalidArgumentType(System.String,System.String)">
            <summary>
            An argument violates a type hint.
            </summary>
            <param name="argName">The name of the argument.</param>
            <param name="typeName">The name of the hinted type.</param>
        </member>
        <member name="M:PHP.Core.PhpException.IllegalOffsetType">
            <summary>
            Array operators reports this error if an value of illegal type is used for indexation.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpException.UndefinedOffset(System.Object)">
            <summary>
            Array does not contain given <paramref name="key"/>.
            </summary>
            <param name="key">Key which was not found in the array.</param>
        </member>
        <member name="M:PHP.Core.PhpException.InternalError(System.Exception)">
            <summary>
            Emitted to the script's Main() routine. Thrown when an unexpected exception is catched.
            </summary>
            <param name="e">The catched exception.</param>
        </member>
        <member name="M:PHP.Core.PhpException.VariableMisusedAsArray(System.Object,System.Boolean)">
            <summary>
            Reports an error when a variable should be PHP array but it is not.
            </summary>
            <param name="reference">Whether a reference modifier (=&amp;) is used.</param>
            <param name="var">The variable which was misused.</param>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is <see cref="T:PHP.Core.PhpArray"/> (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is scalar type (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is a string (Warning).</exception>
        </member>
        <member name="M:PHP.Core.PhpException.VariableMisusedAsObject(System.Object,System.Boolean)">
            <summary>
            Reports an error when a variable should be PHP object but it is not.
            </summary>
            <param name="reference">Whether a reference modifier (=&amp;) is used.</param>
            <param name="var">The variable which was misused.</param>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is <see cref="T:PHP.Core.PhpArray"/> (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is scalar type (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is a string (Warning).</exception>
        </member>
        <member name="M:PHP.Core.PhpException.ThisUsedOutOfObjectContext">
            <summary>
            Thrown when "this" special variable is used out of class.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpException.ThrowCallbackOverride">
            <summary>
            Delegate used to catch any thrown PHP exception. Used in compile time to catch PHP runtime exceptions.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpException.Throw(PHP.Core.PhpError,System.String)">
            <summary>
            Reports a PHP error. 
            </summary>
            <param name="error">The error type</param>
            <param name="message">The error message.</param>    
        </member>
        <member name="M:PHP.Core.PhpException.ReportError(PHP.Core.LocalConfiguration,System.IO.TextWriter,PHP.Core.PhpError,System.Int32,PHP.Core.ErrorStackInfo,System.String)">
            <summary>
            Reports an error to log file, event log and to output (as configured).
            </summary>
        </member>
        <member name="M:PHP.Core.PhpException.CallUserErrorHandler(PHP.Core.ScriptContext,PHP.Core.PhpError,System.Func{PHP.Core.ErrorStackInfo},System.String)">
            <summary>
            Calls user error handler. 
            </summary>
            <returns>Whether to report error by default handler (determined by handler's return value).</returns>
            <exception cref="T:PHP.Core.ScriptDiedException">Error handler dies.</exception>
        </member>
        <member name="M:PHP.Core.PhpException.ThrowByEval(PHP.Core.PhpError,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Reports error thrown from inside eval.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpException.ThrowByWebCompiler(PHP.Core.PhpError,System.Int32,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Reports error thrown by compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpException.PhpErrorText(PHP.Core.PhpError,System.Int32)">
            <summary>
            Get the error type text, to be displayed on output.
            </summary>
            <param name="error"></param>
            <param name="id"></param>
            <returns>Error text.</returns>
        </member>
        <member name="M:PHP.Core.PhpException.FormatErrorCallerName(PHP.Core.ErrorStackInfo,PHP.Core.LocalConfiguration)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="config"></param>
            <returns>Returns caller name with () or null. Formatted for the current output capabilities.</returns>
        </member>
        <member name="M:PHP.Core.PhpException.FormatErrorMessageText(PHP.Core.PhpError,System.String@,System.String@)">
            <summary>
            Modifies the error message and caller display text, depends on error type.
            In case of different PHP behavior.
            </summary>
            <param name="error">error type.</param>
            <param name="message">Error message, in default without any change.</param>
            <param name="caller">Caller text, in default will be modified to "foo(): ".</param>
        </member>
        <member name="M:PHP.Core.PhpException.FormatErrorMessageOutput(PHP.Core.LocalConfiguration,PHP.Core.PhpError,System.Int32,PHP.Core.ErrorStackInfo,System.String)">
            <summary>
            Formats error message.
            </summary>
            <param name="config">A configuration.</param>
            <param name="error">A type of the error.</param>
            <param name="id">Error id or -1.</param>
            <param name="info">A stack information about the error.</param>
            <param name="message">A message.</param>
            <returns>A formatted plain text or HTML message depending on settings in <paramref name="config"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramren name="config"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.PhpException.ToErrorMessage(System.String)">
            <summary>
            Converts exception message (ending by dot) to error message (not ending by a dot).
            </summary>
            <param name="exceptionMessage">The exception message.</param>
            <returns>The error message.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exceptionMessage"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.PhpException.#ctor">
            <summary>
            Exception constructor.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpException.#ctor(PHP.Core.PhpError,System.String,PHP.Core.ErrorStackInfo)">
            <summary>
            Exception constructor.
            </summary>
            <param name="error">The type of PHP error.</param>
            <param name="message">The error message.</param>
            <param name="info">Information about an error gained from a stack.</param>
        </member>
        <member name="M:PHP.Core.PhpException.ToString">
            <summary>
            Converts the exception to a string message.
            </summary>
            <returns>The formatted message.</returns>
        </member>
        <member name="M:PHP.Core.PhpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the PhpException class with serialized data. This constructor is used
            when an exception is thrown in a remotely called method. Such an exceptions needs to be serialized,
            transferred back to the caller and then rethrown using this constructor.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception 
            being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or 
            destination.</param>
        </member>
        <member name="M:PHP.Core.PhpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception. This method is called when a skeleton
            catches PhpException thrown in a remotely called method.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or 
            destination.</param>
        </member>
        <member name="P:PHP.Core.PhpException.Error">
            <summary>
            Error seriousness.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpException.DebugInfo">
            <summary>
            Error debug info (caller, source file, line and column).
            </summary>
        </member>
        <member name="T:PHP.Core.InvalidCallContextDataException">
            <summary>
            Thrown when data are not found found in call context or are not valid.
            </summary>
        </member>
        <member name="T:PHP.Core.ScriptDiedException">
            <summary>
            Thrown by exit/die language constructs to cause immediate termination of a script being executed.
            </summary>
        </member>
        <member name="T:PHP.Core.DuplicateTypeNames">
            <summary>
            Thrown when user attempts to create two types with same name in one assembly.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpNetInternalException">
            <summary>
            Thrown when an unexpected exception is thrown during a script execution.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpNetInternalException.Message">
            <summary>
            Exception details. Contains also details of <see cref="P:System.Exception.InnerException"/> to pass this into event logs.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpUserException">
            <summary>
            Holder for an instance of <see cref="T:PHP.Library.SPL.Exception"/>.
            For internal purposes only.
            </summary>
        </member>
        <member name="T:PHP.Core.InvalidMethodImplementationException">
            <summary>
            An implementation of a method doesn't behave correctly.
            </summary>
        </member>
        <member name="T:PHP.Core.Execution">
            <summary>
            Provides functionality related to process execution.
            </summary>
        </member>
        <member name="M:PHP.Core.Execution.ShellExec(System.String)">
            <summary>
            Executes a <c>cmd.exe</c> and passes it a specified command.
            </summary>
            <param name="command">The command to be passed.</param>
            <returns>A string containing the entire output.</returns>
            <remarks>Implements backticks operator (i.e. <code>`command`</code>).</remarks>
        </member>
        <member name="M:PHP.Core.Execution.ShellExec(System.String,PHP.Core.Execution.OutputHandling,System.Collections.IList,System.String@)">
            <summary>
            Executes a <c>cmd.exe</c> and passes it a specified command.
            </summary>
            <param name="command">The command to be passed.</param>
            <param name="handling">How to handle the output.</param>
            <param name="arrayOutput">
            A list where output lines will be added if <paramref name="handling"/> is <see cref="F:PHP.Core.Execution.OutputHandling.ArrayOfLines"/>.
            </param>
            <param name="stringOutput">
            A string containing the entire output in if <paramref name="handling"/> is <see cref="F:PHP.Core.Execution.OutputHandling.String"/>
            or the last line of the output if <paramref name="handling"/> is <see cref="F:PHP.Core.Execution.OutputHandling.ArrayOfLines"/> or
            <see cref="F:PHP.Core.Execution.OutputHandling.FlushLinesToScriptOutput"/>. 
            </param>
            <returns>Exit code of the process.</returns>
        </member>
        <member name="M:PHP.Core.Execution.EscapeCommand(System.String)">
            <summary>
            Escape shell metacharacters in a specified shell command.
            </summary>
            <param name="command">The command to excape.</param>
            <para>
            On Windows platform, each occurance of a character that might be used to trick a shell command
            is replaced with space. These characters are 
            <c>", ', #, &amp;, ;, `, |, *, ?, ~, &lt;, &gt;, ^, (, ), [, ], {, }, $, \, \u000A, \u00FF, %</c>.
            </para>
        </member>
        <member name="M:PHP.Core.Execution.MakeCommandSafe(System.String@)">
            <summary>
            Makes command safe in similar way PHP does.
            </summary>
            <param name="command">Potentially unsafe command.</param>
            <returns>Safe command.</returns>
            <remarks>
            If safe mode is enabled, command is split by the first space into target path 
            and arguments (optionally) components. The target path must not contain '..' substring.
            A file name is extracted from the target path and combined with 
            <see cref="F:PHP.Core.GlobalConfiguration.SafeModeSection.ExecutionDirectory"/>.
            The resulting path is checked for invalid path characters (Phalanger specific).
            Finally, arguments are escaped by <see cref="M:PHP.Core.Execution.EscapeCommand(System.String)"/> and appended to the path.
            If safe mode is disabled, the command remains unchanged.
            </remarks>
        </member>
        <member name="T:PHP.Core.Execution.OutputHandling">
            <summary>
            How to handle external process output.
            </summary>
        </member>
        <member name="F:PHP.Core.Execution.OutputHandling.ArrayOfLines">
            <summary>
            Split the result into lines and add them to the specified collection.
            </summary>
        </member>
        <member name="F:PHP.Core.Execution.OutputHandling.String">
            <summary>
            Return entire output as a string.
            </summary>
        </member>
        <member name="F:PHP.Core.Execution.OutputHandling.FlushLinesToScriptOutput">
            <summary>
            Write each line to the current output and flush the output after each line.
            </summary>
        </member>
        <member name="F:PHP.Core.Execution.OutputHandling.RedirectToScriptOutput">
            <summary>
            Redirect all output to binary sink of the current output.
            </summary>
        </member>
        <member name="T:PHP.Core.RoutineDelegate">
            <summary>
            A delegate used to call functions and methods indirectly.
            </summary>
        </member>
        <member name="T:PHP.Core.MainRoutineDelegate">
            <summary>
            The delegate to the Script's Main helper method.
            </summary>
            <param name="context">A script context.</param>
            <param name="localVariables">A table of defined variables.</param>
            <param name="self">PHP object context.</param>
            <param name="includer">PHP class context.</param>
            <param name="isMain">Whether the target script is the main script.</param>
            <returns>The return value of the Main method.</returns>
        </member>
        <member name="T:PHP.Core.Arg">
            <summary>
            Substitutes for default arguments and default type arguments.
            </summary>
        </member>
        <member name="F:PHP.Core.Arg.DefaultType">
            <summary>
            Default type argument.
            </summary>
        </member>
        <member name="F:PHP.Core.Arg.Default">
            <summary>
            Singleton substituting default argument.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpFunctionUtils">
            <summary>
            Provides means to work with PHP functions and methods.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpFunctionUtils.DynamicStubAttributes">
            <summary>
            SpecialName should be here, but unfortunately CLR blocks it :(
            </summary>
        </member>
        <member name="F:PHP.Core.PhpFunctionUtils.AssumedMaxOverloadCount">
            <summary>
            Assumed maximal number of overloads in all libraries.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpFunctionUtils.IsParameterByAlias(System.Type)">
            <summary>
            Checks whether a mandatory parameter is passed by alias.
            </summary>
            <param name="paramType">The parameter type.</param>
            <returns>
            Returns whether the parameter is passed either by object reference (ref/out) or is <see cref="T:PHP.Core.PhpReference"/>.
            </returns>
        </member>
        <member name="M:PHP.Core.PhpFunctionUtils.GetUserRoutineSignature(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Reflects a CLR method representing user routine and extracts information about the signature.
            </summary>
            <param name="method">GetUserEntryPoint info.</param>
            <param name="parameters">Parameter infos.</param>
            <returns>Count of mandatory parameters.</returns>
        </member>
        <member name="M:PHP.Core.PhpFunctionUtils.ImpliesArgsAwareness(PHP.Core.Name)">
            <summary>
            Checks whether a specified library function implies args-aware property of the calling function.
            </summary>
            <param name="name">The name of the function.</param>
            <returns>Whether call to function <paramref name="name"/> implies args-awareness of the caller.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.PhpFunctionUtils.NeedsDefinedVariables(PHP.Core.Name)">
            <summary>
            Checks whether a specified library function needs defined variables to be passed as its first argument.
            </summary>
            <param name="name">The name of the function.</param>
            <returns>Whether call to function <paramref name="name"/> implies args-awareness of the caller.</returns>
        </member>
        <member name="M:PHP.Core.PhpFunctionUtils.IsValidName(System.String)">
            <summary>
            Checks whether a specified name is valid constant name.
            </summary>
            <param name="name">The name.</param>
            <seealso cref="M:PHP.Core.PhpVariable.IsValidName(System.String)"/>
        </member>
        <member name="M:PHP.Core.PhpFunctionUtils.IsRealConditionalDefinition(System.String)">
            <summary>
            Checks whether function name is conditionally defined.
            </summary>
            <param name="realName">Internal name of the function.</param>
            <returns>True if the function name represents conditionally defined function, otherwise false.</returns>
        </member>
        <member name="M:PHP.Core.PhpFunctionUtils.IsArglessStub(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Determines whether a specified method is an arg-less stub.
            </summary>
            <param name="method">The method.</param>
            <param name="parameters">GetUserEntryPoint parameters (optimization). Can be <B>null</B> reference.</param>
            <returns>Whether a specified method is an arg-less stub.</returns>
        </member>
        <member name="M:PHP.Core.PhpFunctionUtils.IsArgfullOverload(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Determines whether a specified method is an arg-full overload.
            </summary>
            <param name="method">The method.</param>
            <param name="parameters">GetUserEntryPoint parameters (optimization). Can be <B>null</B> reference.</param>
            <returns>Whether a specified method is an arg-full overload.</returns>
        </member>
        <member name="M:PHP.Core.PhpFunctionUtils.EnumerateRoutines(System.Reflection.MethodInfo[],PHP.Core.PhpFunctionUtils.RoutineEnumCallback)">
            <summary>
            Enumerates PHP routines contained in the specified method list. Filters out methods that
            didn't implement PHP routines (they are not argless or argfull overloads).
            </summary>
        </member>
        <member name="M:PHP.Core.PhpFunctionUtils.InvokeConstructor(PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Creates a new instance of a type by invoking its constructor.
            </summary>
            <param name="type">The type to instantiate.</param>
            <param name="context">ScriptContext to be passed to the <c>type</c> constructor.</param>
            <param name="newInstance">Bool to be passed to the <c>type</c> constructor.</param>
            <returns>New instance of <c>type</c> created using specified constructor.</returns>
            <exception cref="T:PHP.Core.PhpException">Fatal error.</exception>
            <exception cref="T:PHP.Core.PhpUserException">Uncaught user exception.</exception>
            <exception cref="T:PHP.Core.ScriptDiedException">Script died or exit.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">An internal error thrown by the target.</exception>
        </member>
        <member name="M:PHP.Core.PhpFunctionUtils.InvokeConstructor(PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates a new instance of a type by invoking its constructor.
            </summary>
            <param name="type">The type to instantiate.</param>
            <param name="context">ScriptContext to be passed to the <c>type</c> constructor.</param>
            <param name="caller">DTypeDesc to be passed to the <c>type</c> constructor.</param>
            <returns>New instance of <c>type</c> created using specified constructor.</returns>
            <exception cref="T:PHP.Core.PhpException">Fatal error.</exception>
            <exception cref="T:PHP.Core.PhpUserException">Uncaught user exception.</exception>
            <exception cref="T:PHP.Core.ScriptDiedException">Script died or exit.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">An internal error thrown by the target.</exception>
        </member>
        <member name="M:PHP.Core.PhpFunctionUtils.BuildNewObj``1(System.Type,System.Type[])">
            <summary>
            Create dynamic method that instantiates given <c>realType</c> using constructor with given <c>types</c>.
            If given <c>realType</c> does not define wanted constructor, dynamic method that throws InvalidOperationException is created.
            </summary>
            <typeparam name="D">The typed delegate the create.</typeparam>
            <param name="realType">The type to be instantiated by dynamic method.</param>
            <param name="types">Types of parameters of wanted constructor to be called.</param>
            <returns>Delegate to dynamic method that creates specified type or throws an exception. The method cannot return null.</returns>
        </member>
        <member name="T:PHP.Core.AutoGlobals">
            <summary>
            Declares auto-global variables stored in the script context.
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.Server">
            <summary>
            <para>
            If server context is available contains server variables ($_SERVER).
            Moreover, it contains <c>PHP_SELF</c> - a virtual path to the executing script and
            if <see cref="F:PHP.Core.GlobalConfiguration.GlobalVariablesSection.RegisterArgcArgv"/> is set it contains also
            <c>argv</c> (an array containing a query string as its one and only element) and 
            <c>argc</c> which is set to zero.
            </para>
            <para>
            If server context is not available contains empty array (unlike PHP which does fill it with <see cref="F:PHP.Core.AutoGlobals.Env"/>
            and then adds some empty items).
            </para>
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.Env">
            <summary>
            Environment variables ($_ENV).
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.Globals">
            <summary>
            Global variables ($GLOBALS). 
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.Request">
            <summary>
            Request variables ($_REQUEST) copied from $_GET, $_POST and $_COOKIE arrays.
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.Get">
            <summary>
            Variables passed by HTTP GET method ($_GET).
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.Post">
            <summary>
            Variables passed by HTTP POST method ($_POST).
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.Cookie">
            <summary>
            Cookies ($_COOKIE).
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.HttpRawPostData">
            <summary>
            Raw POST data ($HTTP_RAW_POST_DTA). Equivalent to file_get_contents("php://input").
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.Files">
            <summary>
            Uploaded files information ($_FILES).
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.Session">
            <summary>
            Session variables ($_SESSION). Initialized on session start.
            </summary>
        </member>
        <member name="M:PHP.Core.AutoGlobals.AddVariable(PHP.Core.PhpArray,System.String,System.Object,System.String)">
            <summary>
            Adds a variable to auto-global array.
            </summary>
            <param name="array">The array.</param>
            <param name="name">A unparsed name of variable.</param>
            <param name="value">A value to be added.</param>
            <param name="subname">A name of intermediate array inserted before the value.</param>
        </member>
        <member name="M:PHP.Core.AutoGlobals.EncodeTopLevelName(System.String)">
            <summary>
            Fixes top level variable name to not contain spaces and dots (as it is in PHP);
            </summary>
        </member>
        <member name="M:PHP.Core.AutoGlobals.UrlDecodeValue(System.String)">
            <summary>
            Returns <see cref="M:System.Web.HttpUtility.UrlDecode(System.String)"/>  of <paramref name="value"/> if it is a string.
            </summary>
        </member>
        <member name="M:PHP.Core.AutoGlobals.AddVariables(PHP.Core.PhpArray,PHP.Core.PhpArray)">
            <summary>
            Adds variables from one auto-global array to another.
            </summary>
            <param name="dst">The target array.</param>
            <param name="src">The source array.</param>
            <remarks>Variable values are deeply copied.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="dst"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="src"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.AutoGlobals.AddVariables(PHP.Core.PhpReference,PHP.Core.PhpReference)">
            <summary>
            Adds variables from one auto-global array to another.
            </summary>
            <param name="dst">A PHP reference to the target array.</param>
            <param name="src">A PHP reference to the source array.</param>
            <remarks>
            Variable values are deeply copied. 
            If either reference is a <B>null</B> reference or doesn't contain an array, no copying takes place.
            </remarks>
        </member>
        <member name="M:PHP.Core.AutoGlobals.LoadFromCollection(PHP.Core.PhpArray,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Loads variables from a collection.
            </summary>
            <param name="result">An array where to add variables stored in the collection.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:PHP.Core.AutoGlobals.Initialize(PHP.Core.LocalConfiguration,System.Web.HttpContext)">
            <summary>
            Initializes all auto-global variables.
            </summary>
        </member>
        <member name="M:PHP.Core.AutoGlobals.InitializeEnvironmentVariables(PHP.Core.LocalConfiguration)">
            <summary>
            Loads $_ENV from Environment.GetEnvironmentVariables().
            </summary>
        </member>
        <member name="M:PHP.Core.AutoGlobals.InitializeServerVariables(PHP.Core.LocalConfiguration,System.Web.HttpContext)">
            <summary>
            Loads $_SERVER from HttpRequest.ServerVariables.
            </summary>
        </member>
        <member name="M:PHP.Core.AutoGlobals.InitializeGetPostCookieRequestVariables(PHP.Core.LocalConfiguration,System.Web.HttpRequest)">
            <summary>
            Loads $_GET, $_POST, $_COOKIE, $HTTP_RAW_POST_DATA, and $_REQUEST arrays.
            </summary>
        </member>
        <member name="M:PHP.Core.AutoGlobals.InitializeGetPostVariables(PHP.Core.LocalConfiguration,System.Web.HttpRequest,PHP.Core.PhpArray@,PHP.Core.PhpArray@,System.String@)">
            <summary>
            Loads $_GET, $_POST arrays from HttpRequest.QueryString and HttpRequest.Form.
            </summary>
            <param name="config">Local configuration.</param>
            <param name="request">HTTP request instance or a <B>null</B> reference.</param>
            <param name="getArray">Resulting $_GET array.</param>
            <param name="postArray">Resulting $_POST array.</param>
            <param name="httprawpostdataBytes">$HTTP_RAW_POST_DATA variable.</param>
            <exception cref="T:System.ArgumentNullException"><paranref name="config"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.AutoGlobals.InitializeCookieVariables(PHP.Core.LocalConfiguration,System.Web.HttpRequest,PHP.Core.PhpArray@)">
            <summary>
            Loads $_COOKIE arrays from HttpRequest.Cookies.
            </summary>
            <param name="config">Local configuration.</param>
            <param name="request">HTTP request instance or a <B>null</B> reference.</param>
            <param name="cookieArray">Resulting $_COOKIE array.</param>
            <exception cref="T:System.ArgumentNullException"><paranref name="config"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.AutoGlobals.InitializeRequestVariables(System.Web.HttpRequest,System.String,PHP.Core.PhpArray,PHP.Core.PhpArray,PHP.Core.PhpArray,PHP.Core.PhpArray@)">
            <summary>
            Loads $_REQUEST from $_GET, $_POST and $_COOKIE arrays.
            </summary>
        </member>
        <member name="M:PHP.Core.AutoGlobals.InitializeFileVariables(PHP.Core.LocalConfiguration,System.Web.HttpRequest,System.Web.HttpContext)">
            <summary>
            Loads $_FILES from HttpRequest.Files.
            </summary>
            <remarks>
            <list type="bullet">
              <item>$_FILES[{var_name}]['name'] - The original name of the file on the client machine.</item>
              <item>$_FILES[{var_name}]['type'] - The mime type of the file, if the browser provided this information. An example would be "image/gif".</item>
              <item>$_FILES[{var_name}]['size'] - The size, in bytes, of the uploaded file.</item> 
              <item>$_FILES[{var_name}]['tmp_name'] - The temporary filename of the file in which the uploaded file was stored on the server.</item>
              <item>$_FILES[{var_name}]['error'] - The error code associated with this file upload.</item> 
            </list>
            </remarks>
        </member>
        <member name="M:PHP.Core.AutoGlobals.AddFileVariablesToGlobals(PHP.Core.PhpArray,PHP.Core.PhpArray)">
            <summary>
            Adds file variables from $_FILE array to $GLOBALS array.
            </summary>
            <param name="globals">$GLOBALS array.</param>
            <param name="files">$_FILES array.</param>
        </member>
        <member name="M:PHP.Core.AutoGlobals.InitializeGlobals(PHP.Core.LocalConfiguration,System.Web.HttpRequest)">
            <summary>
            Loads $GLOBALS from $_ENV, $_REQUEST, $_SERVER and $_FILES.
            </summary>
        </member>
        <member name="M:PHP.Core.AutoGlobals.GetFieldForVariable(PHP.Core.VariableName)">
            <summary>
            Returns 'FieldInfo' representing field in AutoGlobals for given global variable name.
            </summary>
        </member>
        <member name="T:PHP.Core.AutoGlobals.PostedFileError">
            <summary>
            File upload errors.
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.PostedFileError.None">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.PostedFileError.SizeExceededOnServer">
            <summary>
            The uploaded file exceeds the "upload_max_filesize" configuration option. Not supported.
            Request is not processed when exceeding maximal size of posted file set in ASP.NET config.
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.PostedFileError.SizeExceededOnClient">
            <summary>
            The uploaded file exceeds the "MAX_FILE_SIZE" value specified in the form. Not supported.
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.PostedFileError.Partial">
            <summary>
            The uploaded file was only partially uploaded. Not supported.
            </summary>
        </member>
        <member name="F:PHP.Core.AutoGlobals.PostedFileError.NoFile">
            <summary>
            No file was uploaded.
            </summary>
        </member>
        <member name="T:PHP.Core.SetOperations">
            <summary>
            Implemented operations.
            </summary>
        </member>
        <member name="T:PHP.Core.DualDictionary`2">
            <summary>
            DualDictionary contains two dictionaries that each one has its own comparer, but behaves as one dictionary
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <remarks>
            It is used for example to store constants, because some constants ignores case and others don't
            </remarks>
        </member>
        <member name="T:PHP.Core.OrderedHashtable`1">
            <summary>The hash table with an additional memory of an order in which elements have been added.</summary>
            <remarks>
            <para>
            The Enumerator enumerates through items in that order. 
            Unlike <see cref="T:System.Collections.Hashtable"/>'s enumerator this one doesn't get broken by changing 
            the underlying hashtable.
            </para>
            <para>The order of entries is maintained by a bidirectional circular list with a head.</para>
            </remarks>
        </member>
        <member name="F:PHP.Core.OrderedHashtable`1.dict">
            <summary>
            Expose the dictionary to item getters on <see cref="T:PHP.Core.PhpArray"/> to make them a little bit faster.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedHashtable`1.head">
            <summary>The head of the cyclic list.</summary>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.LinkNextsByPrevs(PHP.Core.OrderedHashtable{`0}.Element)">
            <summary>
            Links <see cref="F:PHP.Core.OrderedHashtable`1.Element.Next"/> links according to <see cref="F:PHP.Core.OrderedHashtable`1.Element.Prev"/>.
            </summary>
            <param name="head">The head of the list.</param>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.LinkPrevsByNexts(PHP.Core.OrderedHashtable{`0}.Element)">
            <summary>
            Links <see cref="F:PHP.Core.OrderedHashtable`1.Element.Prev"/> links according to <see cref="F:PHP.Core.OrderedHashtable`1.Element.Next"/>.
            </summary>
            <param name="head">The head of the list.</param>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.ReversePrevLinks(PHP.Core.OrderedHashtable{`0}.Element)">
            <summary>
            Reverses <see cref="F:PHP.Core.OrderedHashtable`1.Element.Prev"/> links.
            </summary>
            <param name="head">The head of the list.</param>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.AddBefore(PHP.Core.OrderedHashtable{`0}.Element,`0,System.Object)">
            <summary>
            Adds an entry pair into the table before a specified element. 
            </summary>
            <param name="element">The element before which to add new entry.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in this instance.</exception>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.AddAfter(PHP.Core.OrderedHashtable{`0}.Element,`0,System.Object)">
            <summary>
            Adds an entry pair into the table after a specified element. 
            </summary>
            <param name="element">The element before which to add new entry.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in this instance.</exception>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Delete(PHP.Core.OrderedHashtable{`0}.Element)">
            <summary>
            Disconnects an element from the list an marks it as deleted.
            </summary>
            <param name="element">The element to be deleted.</param>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Prepend(`0,System.Object)">
            <summary>
            Adds a key-value pair into the table at its logical beginning.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in this instance.</exception>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.GetElement(`0)">
            <summary>
            Gets an element representing the key-value pair in the table.
            </summary>
            <param name="key">The key.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.RehashElement(PHP.Core.OrderedHashtable{`0}.Element)">
            <summary>
            Sets an element representing the key-value pair in the table.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.RemoveLast">
            <summary>
            Removes the last entry of the array and returns it.
            </summary>
            <returns>The last entry of the array.</returns>
            <exception cref="T:System.InvalidOperationException">The table is empty.</exception>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.RemoveFirst">
            <summary>
            Removes the first entry of the array and returns it.
            </summary>
            <returns>The first entry of the array.</returns>
            <exception cref="T:System.InvalidOperationException">The table is empty.</exception>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Clone">
            <summary>
            Creates a shallow copy of this instance.
            </summary>
            <returns>The new hashtable.</returns>
            <remarks>This instance should not be interconnected with the other.</remarks>
            <exception cref="T:System.InvalidOperationException">This table is interconnected with the other.</exception>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Add(`0,System.Object)">
            <summary>
            Adds an entry into the table at its logical end. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in this instance.</exception>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Remove(`0)">
            <summary>
            Removes an entry pair from the table.
            </summary>
            <param name="key">The key.</param>
            <returns>Whether the key was contained in the dictionary prior removal.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Clear">
            <summary>
            Removes all elements from the table.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies values stored in this table and the interconnected table to a given array.
            </summary>
            <param name="array">The array where to copy values. The array is expected to be already allocated.</param>
            <param name="index">The index to the <paramref name="array"/> where the first value stored in the hashtable will be copied to.</param>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Creates an instance from deserialized data using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to receive data from.</param><param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.</param>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.MergeSortRecursive(System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,System.Object}},PHP.Core.OrderedHashtable{`0}.Element,System.Int32,PHP.Core.OrderedHashtable{`0}.Element,PHP.Core.OrderedHashtable{`0}.Element@)">
            <remarks>
            Stably sorts a portion of a list of <see cref="T:PHP.Core.OrderedHashtable`1.Element"/>s.
            </remarks>
            <param name="comparer">The comparer used to sort elements.</param>
            <param name="count">The length of the portion of elements to sort.</param>
            <param name="first">The first element in the portion.</param>
            <param name="next">The element following the last element of the portion before a call is made.</param>
            <param name="successor">The element which will be set as successor of the last element of the list.</param>
            <returns>The sorted portion. Reference to the first element of unidirectional list.</returns>
            <remarks>
            <para>The list's first element is referenced by the <paramref name="first"/> parameter.</para>
            <para>The portion is <paramref name="count"/> elements long. A reference to an element which has immediately 
            followed the last element of the sorted portion before the method had been called will be returned 
            in the <paramref name="next"/>.</para>
            <para>The portion is sorted and the resulting unidirectional list is returned. Elements
            are joined only in one direction - <see cref="F:PHP.Core.OrderedHashtable`1.Element.Next"/> fields of elements are connected. 
            <see cref="F:PHP.Core.OrderedHashtable`1.Element.Prev"/> fields have to be connected subsequently as well as the head of the list.</para>
            <para>The sort is stable, key-value associations are preserved as well as <see cref="F:PHP.Core.OrderedHashtable`1.Element.Prev"/> references.</para>
            </remarks>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.InterconnectGrid(System.Int32,PHP.Core.OrderedHashtable{`0}.Element[])">
            <summary>
            Interconnects elements of given lists into a grid using their <see cref="F:PHP.Core.OrderedHashtable`1.Element.Prev"/> fields.
            </summary>
            <param name="iterators">Elements referencing heads of the lists at the beginning and at the end as well.</param>
            <param name="count">The number of elements in each and every list.</param>
            <remarks>
            The grid: <BR/>
            <PRE>
             H H H
             | | |
            ~o~o~o~
             | | |   ~ = Prev (right to left), cyclic without a head (necessary)
            ~o~o~o~  - = Next (top to bottom), cyclic with a head (not necessary)
             | | |
            </PRE>
            </remarks>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.DisconnectGrid(System.Int32,PHP.Core.OrderedHashtable{`0}.Element[])">
            <summary>
            Disconnects elements of lists each from other.
            </summary>
            <param name="count">The number of elements in each and every list.</param>
            <param name="iterators">Elements referencing heads of the lists at the beginning and at the end as well.</param>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.ReorderList(System.Int32,PHP.Core.OrderedHashtable{`0}.Element,PHP.Core.OrderedHashtable{`0}.Element)">
            <summary>
            Reorders a minor list according to the major one. "Straightens" horizontal interconnection.
            </summary>
            <param name="count">The number of elements in each and every list.</param>
            <param name="minorHead">The head of a minor list.</param>
            <param name="majorHead">The head of a major list.</param>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Sort(System.Int32,PHP.Core.OrderedHashtable{`0}.Element[],System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,System.Object}}[])">
            <summary>
            Sorts multiple lists given comparer for each hashtable.
            </summary>
            <param name="count">The number of items in each and every list.</param>
            <param name="heads">Heads of lists.</param>
            <param name="comparers">Comperers to be used for lexicographical comparison.</param>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Sort(System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,System.Object}})">
            <summary>
            Sorts elements of the hashtable.
            </summary>
            <param name="comparer">The comparer used for sorting.</param>
            <remarks>
            Changes only the prev/next references of elements contained. 
            Entries are neither copied nor modified.
            Affects interconnected table's items as well.
            </remarks>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.SetOperation(PHP.Core.SetOperations,PHP.Core.OrderedHashtable{`0}.Element,System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,System.Object}})">
            <summary>
            Performs diff operation on the list of this instance and the other list.
            </summary>
            <param name="op">The operation.</param>
            <param name="otherHead">A head of the other list.</param>
            <param name="comparer">A comparer.</param>
            <remarks>Updates only <see cref="F:PHP.Core.OrderedHashtable`1.Element.Next"/> link. <see cref="F:PHP.Core.OrderedHashtable`1.Element.Prev"/> is preserved so the operation can be eventually reverted.</remarks>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.SetOperation(PHP.Core.SetOperations,System.Collections.Generic.IEnumerable{PHP.Core.OrderedHashtable{`0}.Element},System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,System.Object}},System.Collections.Generic.IDictionary{`0,System.Object})">
            <summary>
            Retrieves the difference of this instance elemens and elements of the specified lists.
            </summary>
            <param name="op">The operation.</param>
            <param name="heads">The <see cref="T:System.Collections.IEnumerator"/> of heads of lists to take away from this instance.</param>
            <param name="comparer">The comparer of entries.</param>
            <param name="result">The <see cref="T:System.Collections.IDictionary"/> where to add remaining items.</param>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Shuffle(System.Random)">
            <summary>
            Shuffles order of elements in the hashtable at random.
            </summary>
            <param name="generator">Some initialized random number generator.</param>
            <remarks>
            Changes only the prev/next references of elements contained. 
            Entries are neither copied nor modified.
            Affects interconnected table's items as well.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is a <b>null</b> reference.</exception>
        </member>
        <member name="P:PHP.Core.OrderedHashtable`1.Item(`0)">
            <summary>
            Gets or sets a value associated with a key.
            </summary>
            <param name="key">The key whose value to get or set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="P:PHP.Core.OrderedHashtable`1.Keys">
            <summary>
            Gets a collection of keys.
            </summary>
        </member>
        <member name="P:PHP.Core.OrderedHashtable`1.Values">
            <summary>
            Gets a collection of values. 
            </summary>
        </member>
        <member name="T:PHP.Core.OrderedHashtable`1.Element">
            <summary>
            An element stored in the table.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Element.MakeValueReference">
            <summary>
            Boxes the value to a reference if it is not already a reference.
            </summary>
            <returns>The boxed value.</returns>
        </member>
        <member name="P:PHP.Core.OrderedHashtable`1.Element.Key">
            <summary>
            Key associated with the element. <see cref="T:PHP.Core.InvalidItem"/> in head.
            </summary>
        </member>
        <member name="P:PHP.Core.OrderedHashtable`1.Element.Value">
            <summary>
            Value associated with the element.
            </summary>
        </member>
        <member name="P:PHP.Core.OrderedHashtable`1.Element.IsHead">
            <summary>
            Gets whether the element is a head of the list.
            </summary>
            <exception cref="T:System.NullReferenceException">When called on a deleted element.</exception>
        </member>
        <member name="P:PHP.Core.OrderedHashtable`1.Element.IsDeleted">
            <summary>
            Gets whether the element was deleted from the array.
            </summary>
        </member>
        <member name="T:PHP.Core.OrderedHashtable`1.Enumerator">
            <summary>
            Unbreakable enumerator which iterates through a hashtable in the order in which elements were added.
            </summary>
            <remarks>
            <para>
            If the enumerator reaches a head of a list it stops enumeration (<see cref="M:PHP.Core.OrderedHashtable`1.Enumerator.MoveNext"/> 
            returns <b>false</b>) and 
            has to be restarted in order to enumerate the list again from the beginning.
            Before it is done so both <c>Value</c> and <c>Key</c> properties return a reference to 
            <see cref="T:PHP.Core.InvalidItem"/> internal singleton which cannot be accessed except for checinkg its type.
            Note, a key of an entry can never be a <B>null</B> reference. 
            </para>
            <para>
            Items can be deleted from an underlying Ordered Hashtable during an enumeration.
            When an item is removed is is immediately deleted from the underlying 
            hashtable and remains only connected to the list to allow enumeration continuation.
            Since deleted items are skipped by all enumerator's operations (<see cref="P:PHP.Core.OrderedHashtable`1.Enumerator.Current"/>, 
            <see cref="M:PHP.Core.OrderedHashtable`1.Enumerator.MoveNext"/>, ...) such an item cannot be accessed once it is deleted.
            </para>
            <para>
            Thanks to above two properties there is no exception thrown by this enumerator.
            </para>
            </remarks>
        </member>
        <member name="F:PHP.Core.OrderedHashtable`1.Enumerator.head">
            <summary>
            Reference to head of the list.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedHashtable`1.Enumerator.current">
            <summary>
            Reference to the current element in the list.
            </summary>
        </member>
        <member name="F:PHP.Core.OrderedHashtable`1.Enumerator.starting">
            <summary>
            Whether the enumertor is starting a new enumeration of the list.
            </summary>
            <remarks>
            Set on construction and by <see cref="M:PHP.Core.OrderedHashtable`1.Enumerator.Reset"/> and unset by each <see cref="M:PHP.Core.OrderedHashtable`1.Enumerator.MoveNext"/>.
            Allows to distinguish two different states of enumerator in both of which the <c>current</c>
            element is a head of a list.
            </remarks>
        </member>
        <member name="F:PHP.Core.OrderedHashtable`1.Enumerator.isGeneric">
            <summary>
            Whether the enumerator should return <c>KeyValuePair{K, object}</c> when used as <see cref="T:System.Collections.IEnumerator"/>.
            If <B>false</B> it will return <see cref="T:System.Collections.DictionaryEntry"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Enumerator.SkipDeletedForward">
            <summary>
            Move <see cref="F:PHP.Core.OrderedHashtable`1.Enumerator.current"/> iterator over the deleted element (follows Next reference).
            </summary>
            <returns>The <see cref="F:PHP.Core.OrderedHashtable`1.Enumerator.current"/> iterator.</returns>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Enumerator.SkipDeletedForwardInternal">
            <summary>
            Second part of <see cref="M:PHP.Core.OrderedHashtable`1.Enumerator.SkipDeletedForward"/>. The method is separated to enhance
            the call to <see cref="M:PHP.Core.OrderedHashtable`1.Enumerator.SkipDeletedForward"/>, the code contained in this method is rarely called.
            </summary>
            <returns>The <see cref="F:PHP.Core.OrderedHashtable`1.Enumerator.current"/> iterator.</returns>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Enumerator.SkipDeletedBackward">
            <summary>
            Move <see cref="F:PHP.Core.OrderedHashtable`1.Enumerator.current"/> iterator over the deleted element backwards (follows Prev reference).
            </summary>
            <returns>The <see cref="F:PHP.Core.OrderedHashtable`1.Enumerator.current"/> iterator.</returns>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Enumerator.MoveLast">
            <summary>
            Moves enumerator to the last element in the list if exists. 
            </summary>
            <returns>Whether there is any item in the list.</returns>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Enumerator.MoveFirst">
            <summary>
            Moves enumerator to the first element in the list if exists. 
            </summary>
            <returns>Whether there is any item in the list.</returns>
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Enumerator.MovePrevious">
            <summary>
            Moves the enumerator to the previous element of the hashtable's list.
            </summary>
            <return>
            <B>true</B> if the enumerator was successfully moved to the previous element; 
            <B>false</B> if the enumerator has passed the beginning or end of the list.
            </return>       
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the hashtable's list.
            </summary>
            <return>
            <B>true</B> if the enumerator was successfully advanced to the next element; 
            <B>false</B> if the enumerator has passed the end or the beginning of the list.
            </return>  
        </member>
        <member name="M:PHP.Core.OrderedHashtable`1.Enumerator.Reset">
            <summary>
            Moves the enumerator to the head of the list (i.e. before the first element) and enables new iteration.
            </summary>
        </member>
        <member name="P:PHP.Core.OrderedHashtable`1.Enumerator.Current">
            <summary>
            Gets current pair.
            </summary>
        </member>
        <member name="P:PHP.Core.OrderedHashtable`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets current key-value pair or dictionary entry.
            </summary>
        </member>
        <member name="T:PHP.Core.OrderedHashtable`1.ValueCollection">
            <summary>
            Auxiliary collection used for manipulating keys or values of PhpHashtable.
            </summary>
        </member>
        <member name="F:PHP.Core.IntStringKey.EmptyStringKey">
            <summary>
            <pre>new IntStringKey( "" )</pre>
            </summary>
        </member>
        <member name="M:PHP.Core.IntStringKey.StringKeyToArrayIndex(System.String)">
            <summary>
            Computes the hash code of the given string. The function returns the same result on all platforms.
            Resulting value is different using different string keys as it is in case of string.GetHashCode().
            </summary>
            <param name="s">The string key to be used to compute the hash.</param>
            <returns>The unique integer value corresponsing to the given string key.</returns>
            <remarks>Unsafe x64 implementation of String.GetHashCode(). But it returns the same results on all platforms.
            Phalanger needs the same results in case of compiling on one platform (and .NET version) and running on another platform.
            Phalanger computes the hashes during compilation time to speedup the runtime.</remarks>
        </member>
        <member name="M:PHP.Core.IntStringKey.#ctor(System.String,System.Int32)">
            <summary>
            Initialize the IntStringKey with precomputed hashCode.
            </summary>
            <param name="key">The string key.</param>
            <param name="hashcode">The hashCode computed using Convert.StringKeyToArrayIndex(key) method !</param>
        </member>
        <member name="P:PHP.Core.IntStringKey.Integer">
            <summary>
            Integer value iff <see cref="P:PHP.Core.IntStringKey.IsString"/> return <B>false</B>.
            </summary>
        </member>
        <member name="P:PHP.Core.IntStringKey.String">
            <summary>
            String value iff <see cref="P:PHP.Core.IntStringKey.IsString"/> return <B>true</B>.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpHashtable">
            <summary>
            The hashtable storing entries with <see cref="T:System.String"/> and <see cref="T:System.Int32"/> keys in a manner of PHP.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpHashtable.recursiveEnumerator">
            <summary>
            A field used by <see cref="T:PHP.Core.PhpHashtable.RecursiveEnumerator"/> to store an enumerator of respective recursion level.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpHashtable.table">
            <summary>
            Ordered hashtable where integers are stored.
            </summary>
            <remarks>
            Expose the table to item getters on <see cref="T:PHP.Core.PhpArray"/> to make them a little bit faster.
            </remarks>
        </member>
        <member name="F:PHP.Core.PhpHashtable.nextNewIndex">
            <summary>
            Index for next new element when key is not specified.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpHashtable.activeEnumerators">
            <summary>
            Callback methods for entry deletion event.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpHashtable.RegisterEnumerator(PHP.Core.OrderedDictionary.Enumerator)">
            <summary>
            Add given <paramref name="enumerator"/> into <see cref="F:PHP.Core.PhpHashtable.activeEnumerators"/> list.
            </summary>
            <param name="enumerator">New enumerator.</param>
        </member>
        <member name="M:PHP.Core.PhpHashtable.UnregisterEnumerator(PHP.Core.OrderedDictionary.Enumerator)">
            <summary>
            Remove given <paramref name="enumerator"/> from <see cref="F:PHP.Core.PhpHashtable.activeEnumerators"/> list.
            </summary>
            <param name="enumerator"><see cref="T:PHP.Core.OrderedDictionary.Enumerator"/> to be removed from the list of active enumerators.</param>
        </member>
        <member name="M:PHP.Core.PhpHashtable.EnsureWritable">
            <summary>
            Ensures the internal <see cref="T:PHP.Core.OrderedDictionary"/> will be writable (not shared).
            </summary>
        </member>
        <member name="M:PHP.Core.PhpHashtable.#ctor">
            <summary>
            Initializes a new instance of the <c>PhpHashtable</c> class.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpHashtable.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>PhpHashtable</c> class.
            </summary>
            <param name="capacity">Initial capacity.</param>
        </member>
        <member name="M:PHP.Core.PhpHashtable.#ctor(System.Array)">
            <summary>
            Initializes a new instance of the <c>PhpHashtable</c> class filled by values from specified array. 
            </summary>
            <param name="values">Values to be added.</param>
            <remarks>
            Adds all pairs key-value where the value is an item of <v>values</v> array 
            and the key is its index in the array.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpHashtable.#ctor(System.Array,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>PhpHashtable</c> class filled by values from specified array. 
            </summary>
            <param name="values">Values to be added.</param>
            <param name="index">The starting index.</param>
            <param name="length">The number of items to add.</param>
            <remarks>
            Adds at most <c>length</c> pairs key-value where the value is an item of <v>values</v> array 
            and the key is its index in the array starting from the <c>index</c>.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpHashtable.#ctor(System.Int32[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PHP.Core.PhpHashtable"/> class filled by values from specified array.
            </summary>
            <param name="values">An array of values to be added to the table.</param>
            <param name="start">An index of the first item from <paramref name="values"/> to add.</param>
            <param name="length">A number of items to add.</param>
            <param name="value">A value to be filtered.</param>
            <param name="doFilter">Wheter to add all items but <paramref name="value"/> (<b>true</b>) or 
            all items with the value <paramref name="value"/> (<b>false</b>).</param>
        </member>
        <member name="M:PHP.Core.PhpHashtable.#ctor(PHP.Core.PhpHashtable,System.Boolean)">
            <summary>
            Creates PhpHashtable that shares internal <see cref="F:PHP.Core.PhpHashtable.table"/> with another array.
            </summary>
            <param name="array">The table to be shared.</param>
            <param name="preserveMaxInt">True to copy the <see cref="P:PHP.Core.PhpHashtable.MaxIntegerKey"/> from <paramref name="array"/>.
            Otherwise the value will be recomputed when needed.</param>
        </member>
        <member name="M:PHP.Core.PhpHashtable.ThrowIfNotPhpArrayHelper">
            <summary>
            Throw an exception if this instance is not <see cref="T:PHP.Core.PhpArray"/> or <see cref="T:PHP.Core.PhpHashtable"/>.
            This should avoid using features that are not available in special derived arrays yet.
            </summary>
            <exception cref="T:System.NotImplementedException">This instance does not support the operation yet. Method has to be marked as virtual, and functionality has to be implemented in derived type.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.GetRecursiveEnumerator(System.Boolean,System.Boolean)">
            <summary>
            Retrieves a recursive enumerator of this instance.
            </summary>
            <param name="followReferences">Whether <see cref="T:PHP.Core.PhpReference"/>s are followed by recursion.</param>
            <param name="readOnly">True if the array items will be read only. Lazy copy is not necessary.</param>
            <returns>The <see cref="T:PHP.Core.PhpHashtable.RecursiveEnumerator"/>.</returns>
        </member>
        <member name="M:PHP.Core.PhpHashtable.GetFastEnumerator">
            <summary>
            Get fast enumerator structure to be used internally.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.PhpHashtable.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the <see cref="T:PHP.Core.PhpHashtable"/> or a portion of it to a one-dimensional array.
            </summary>
            <param name="array">The one-dimensional array.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:PHP.Core.PhpHashtable.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an enumerator which iterates through values in this instance in order as they were added in it.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Clear">
            <summary>
            Removes all elements from this instance.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Contains(System.Object)">
            <summary>
            Determines whether an element with the specified key is in this instance.
            </summary>
            <param name="key">The key.</param>
            <returns>Whether an element with the <paramref name="key"/> key is in the table.</returns>
            <exception cref="T:System.InvalidCastException">The <paramref name="key"/> is neither <see cref="T:System.Int32"/> nor <see cref="T:System.String"/>.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Add(System.Object,System.Object)">
            <summary>
            Adds an entry into the table at its logical end. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in this instance.</exception>
            <exception cref="T:System.InvalidCastException">The <paramref name="key"/> is neither <see cref="T:System.Int32"/> nor not null <see cref="T:System.String"/>.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Remove(System.Object)">
            <summary>
            Removes an entry having the specified key.
            </summary>
            <param name="key">The key.</param>
            <exception cref="T:System.InvalidCastException">The <paramref name="key"/> is neither <see cref="T:System.Int32"/> nor not null <see cref="T:System.String"/>.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Add(System.Object)">
            <summary>
            Adds an entry into the table at its logical end. The key is generated automatically.
            </summary>
            <param name="value">The value to be added.</param>
            <return>
            1 if the entry has been added, 0 otherwise. Note, this differs from <see cref="M:System.Collections.IList.Add(System.Object)"/>
            because <see cref="T:PHP.Core.PhpHashtable"/> doesn't support fast retrieval of the element's index.
            </return>
            <remarks>
            The key will be the maximal value of an integer key ever added into this instance plus one
            provided the result of addition fits into an 32-bit integer. Otherwise, the entry is not added
            and <b>false</b> is returned.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpHashtable.KeyAdded(PHP.Core.IntStringKey)">
            <summary>
            Simple wrapper to allow call KeyAdded without ref.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:PHP.Core.PhpHashtable.KeyAdded(PHP.Core.IntStringKey@)">
            <summary>
            Called when new item is added into the collection. It just updates the <see cref="F:PHP.Core.PhpHashtable.stringCount"/> or <see cref="F:PHP.Core.PhpHashtable.intCount"/> and <see cref="F:PHP.Core.PhpHashtable.nextNewIndex"/>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:PHP.Core.PhpHashtable.ContainsKey(System.String)">
            <summary>
            Determines whether an element with the specified key is in this instance.
            </summary>
            <param name="key">The key.</param>
            <returns>Whether an element with the <paramref name="key"/> key is in the table.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.ContainsKey(System.Int32)">
            <summary>
            Determines whether an element with the specified key is in this instance.
            </summary>
            <param name="key">The key.</param>
            <returns>Whether an element with the <paramref name="key"/> key is in the table.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.AddToEnd(System.Object)">
            <summary>
            Add an item onto the end of this array.
            </summary>
            <param name="value">Value to be added.</param>
            <remarks>This method is supposed to be called on newly created arrays. Several checks are not performed to enhance performance of arrays initialization.</remarks>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Add(System.Int32,System.Object)">
            <summary>
            Adds an entry into the table at its logical end. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in this instance.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Add(System.String,System.Object)">
            <summary>
            Adds an entry into the table at its logical end. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in this instance.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Prepend(System.String,System.Object)">
            <summary>
            Adds an entry into the table at its logical beginning. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in this instance.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Prepend(System.Int32,System.Object)">
            <summary>
            Adds an entry into the table at its logical beginning. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in this instance.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Prepend(PHP.Core.IntStringKey,System.Object)">
            <summary>
            Adds an entry into the table at its logical beginning. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in this instance.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Prepend(System.Object,System.Object)">
            <summary>
            Adds an entry into the table at its logical beginning. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in this instance.</exception>
            <exception cref="T:System.InvalidCastException">The <paramref name="key"/> is neither <see cref="T:System.Int32"/> nor <see cref="T:System.String"/>.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.RemoveLast">
            <summary>
            Removes the last entry of the array and returns it.
            </summary>
            <returns>The last entry of the array.</returns>
            <exception cref="T:System.InvalidOperationException">The table is empty.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.RemoveFirst">
            <summary>
            Removes the first entry of the array and returns it.
            </summary>
            <returns>The first entry of the array.</returns>
            <exception cref="T:System.InvalidOperationException">The table is empty.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Clone">
            <summary>
            Creates a shallow copy of the hashtable.
            </summary>
            <returns>A copy of the hashtable.</returns>
        </member>
        <member name="M:PHP.Core.PhpHashtable.InplaceDeepCopy">
            <summary>
            Replaces values in the table with their deep copies.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpHashtable.AddTo(PHP.Core.PhpHashtable,System.Boolean)">
            <summary>
            Adds items of this instance to a specified instance resetting integer keys.
            </summary>
            <param name="dst">Destination table.</param>
            <param name="deepCopy">Whether to make deep copies of added items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dst"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.CopyValuesTo(System.Object[],System.Int32)">
            <summary>
            Copy values of this array into 
            </summary>
            <param name="dst"></param>
            <param name="offset"></param>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Sort(System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{PHP.Core.IntStringKey,System.Object}})">
            <summary>
            Sorts this instance using specified comparer.
            </summary>
            <param name="comparer">The comparer to be used to compare array items.</param>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Sort(PHP.Core.PhpHashtable[],System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{PHP.Core.IntStringKey,System.Object}}[])">
            <summary>
            Sorts multiple hashtables given comparer for each hashtable.
            </summary>
            <param name="hashtables">
            The <see cref="T:System.Collections.ICollection"/> of <see cref="T:PHP.Core.PhpHashtable"/>s. 
            All these tables has to be of the same length which has to be .
            </param> 
            <param name="comparers">
            An array of <see cref="T:PHP.Core.IDictionaryComparer"/>s.
            The number of comparers has to be the same as the number of <paramref name="hashtables"/>.
            </param>
            <remarks>
            Sorts lexicographically all <paramref name="hashtables"/> from the first to the last one using 
            <paramref name="comparers"/> successively. Changes only order of entries in <paramref name="hashtables"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hashtables"/> or <paramref name="comparers"/> is a <B>null</B>reference.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.SetOperation(PHP.Core.SetOperations,PHP.Core.PhpHashtable[],System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{PHP.Core.IntStringKey,System.Object}},PHP.Core.PhpArray)">
            <summary>
            Performs a set operation <see cref="T:PHP.Core.PhpHashtable"/>s.
            </summary>
            <param name="op">The operation.</param>
            <param name="hashtables">The <see cref="T:System.Collections.ICollection"/> of <see cref="T:PHP.Core.PhpHashtable"/>s.</param>
            <param name="comparer">The <see cref="T:PHP.Core.IDictionaryComparer"/> used to compare entries of <paramref name="hashtables"/>.</param>
            <param name="result">The <see cref="T:System.Collections.IDictionary"/> where to add remaining elements.</param>
            <remarks>
            Entries that will remain in this instance if a difference was made are stored into 
            the <paramref name="result"/> in the same order they are stored in this instance. 
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hashtables"/> or <paramref name="comparer"/> or <paramref name="result"/> is a <B>null</B> reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="result"/> references this instance.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Reverse">
            <summary>
            Reverses order of entries in this instance.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Shuffle(System.Random)">
            <summary>
            Shuffles order of elements in the hashtable at random.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is a <b>null</b> reference.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.Unite(PHP.Core.PhpHashtable)">
            <summary>
            Unites an <paramref name="array"/> with this instance.
            </summary>
            <param name="array">An <see cref="T:PHP.Core.PhpArray"/> of items to be united with this instance.</param>
            <returns>Reference to this instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="array"/> is null reference.</exception>
            <remarks>
            All keys are preserved. Values associated with existing string keys will not be overwritten.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpHashtable.RefreshMaxIntegerKey">
            <summary>
            Ensure the internal maximal key value will be updated.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpHashtable.RefreshMaxIntegerKeyInternal">
            <summary>
            Recalculates <see cref="F:PHP.Core.PhpHashtable.nextNewIndex"/> value.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpHashtable.ReindexAll">
            <summary>
            Sets all keys to increasing integers according to their respective order in the list.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpHashtable.ReindexIntegers(System.Int32)">
            <summary>
            Sets all keys to increasing integers according to their respective order in the list.
            </summary>
            <param name="startIndex">An index from which to start indexing.</param>
            <remarks>If indexing overflows a capacity of integer type it continues with <see cref="F:System.Int32.MinValue"/>.</remarks>
        </member>
        <member name="M:PHP.Core.PhpHashtable.ReindexAndReplace(System.Int32,System.Int32,System.Collections.IEnumerable,PHP.Core.PhpHashtable)">
            <summary>
            Replaces a part of the hashtable with specified item(s) and reindexes all integer keys in result.
            </summary>
            <param name="offset">
            The ordinary number of the first item to be replaced. 
            <paramref name="offset"/> should be at least zero and at most equal as the number of items in the array.
            </param>
            <param name="length">
            The number of items to be replaced. Should be at least zero and at most equal 
            to the number of items in the array.
            </param>
            <param name="replacementValues">
            The enumerable collection of values by which items in the range specified by
            <paramref name="offset"/> and <paramref name="length"/> is replaced.
            </param>
            <param name="replaced">
            The hashtable where removed values will be placed. Keys are successive integers starting from zero.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><pararef name="offset"/> or <paramref name="length"/> has invalid value.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="replaced"/> is a <b>null</b> reference.</exception>
        </member>
        <member name="P:PHP.Core.PhpHashtable.Visited">
            <summary>
            Whether this instance has been visited during recursive pass of some structure containing <see cref="T:PHP.Core.PhpArray"/>s.
            </summary>
            <remarks>
            Must be set to <B>false</B> immediately after the pass.
            </remarks>
        </member>
        <member name="P:PHP.Core.PhpHashtable.MaxIntegerKey">
            <summary>
            Max integer key in the array.
            Returns <c>-1</c> if there are no integer keys.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpHashtable.IntegerCount">
            <summary>
            Retrieves the number of items with integer keys in this instance.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpHashtable.StringCount">
            <summary>
            Retrieves the number of items with string keys in this instance.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpHashtable.Count">
            <summary>Retrieves the number of items in this instance.</summary>
        </member>
        <member name="P:PHP.Core.PhpHashtable.IsSynchronized">
            <summary>This property is always false.</summary>
        </member>
        <member name="P:PHP.Core.PhpHashtable.SyncRoot">
            <summary>This property always refers to this instance.</summary>
        </member>
        <member name="P:PHP.Core.PhpHashtable.IsFixedSize">
            <summary>This property is always false.</summary>
        </member>
        <member name="P:PHP.Core.PhpHashtable.IsReadOnly">
            <summary>This property is always false.</summary>
        </member>
        <member name="P:PHP.Core.PhpHashtable.Item(System.Object)">
            <summary>
            Gets or sets a value associated with a key.
            </summary>
            <remarks>If the key doesn't exist in table the new entry is added.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">The <paramref name="key"/> is neither <see cref="T:System.Int32"/> nor not null <see cref="T:System.String"/>.</exception>
        </member>
        <member name="P:PHP.Core.PhpHashtable.Item(System.String)">
            <summary>
            Gets or sets a value associated with a key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <remarks>If the key doesn't exist in table the new entry is added.</remarks>
        </member>
        <member name="P:PHP.Core.PhpHashtable.Item(System.Int32)">
            <summary>
            Gets or sets a value associated with a key.
            </summary>
            <param name="key">The <see cref="T:System.Int32"/> key.</param>
            <remarks>If the key doesn't exist in table the new entry is added.</remarks>
        </member>
        <member name="P:PHP.Core.PhpHashtable.Item(PHP.Core.IntStringKey)">
            <summary>
            Gets or sets a value associated with a key.
            </summary>
            <param name="key">The <see cref="T:System.Int32"/> key.</param>
            <remarks>If the key doesn't exist in table the new entry is added.</remarks>
        </member>
        <member name="T:PHP.Core.PhpHashtable.RecursiveEnumerator">
            <summary>
            Recursively enumerates <see cref="T:PHP.Core.PhpHashtable"/>.
            </summary>
            <remarks>
            <para>
            Enumerator starts enumeration with a <see cref="T:PHP.Core.PhpHashtable"/> specified in its constructor and 
            enumerates its items by instance of <see cref="T:System.Collections.IDictionaryEnumerator"/> retrieved via 
            <see cref="M:PHP.Core.PhpHashtable.GetEnumerator"/>. This enumerator is supposed to be unbreakable.
            If an enumerated item value is <see cref="T:PHP.Core.PhpHashtable"/>  (or <see cref="T:PHP.Core.PhpReference"/> and its 
            <see cref="F:PHP.Core.PhpReference.value"/> is <see cref="T:PHP.Core.PhpHashtable"/> and <see cref="P:PHP.Core.PhpHashtable.RecursiveEnumerator.FollowReferences"/>
            property is <B>true</B>) then this item is returned by Current and Entry
            like any other item but the enumerator continues with enumeration of that item when it is moved by
            <see cref="M:PHP.Core.PhpHashtable.RecursiveEnumerator.MoveNext"/>. The <see cref="P:PHP.Core.PhpHashtable.RecursiveEnumerator.Level"/> of recursion is increased and the previous hashtable
            is pushed in the internal stack. When enumerator finishes the enumeration of the current level hashtable
            and the level of recursion is not zero it pops hashtable stored in the stack and continues with
            enumeration on the item immediately following the item which caused the recursion.
            </para>
            <para>
            Before the level of recursion is raised enumerator checks whether the next level hashtable
            was not already visited by any recursive enumerator. If that is the case such hashtable is skipped to
            prevent infinite recursion. Note, that you should not use more than one <see cref="T:PHP.Core.PhpHashtable.RecursiveEnumerator"/>
            on the same <see cref="T:PHP.Core.PhpHashtable"/>. This is not checked automatically but it is left to the user
            to avoid such usage. One can check whether the current item will cause a recursion by inspecting
            <see cref="P:PHP.Core.PhpHashtable.RecursiveEnumerator.InfiniteRecursion"/> property.
            </para>
            <para>
            <B>Warning</B>: Enumerator should be disposed!
            It temporarily stores information to each hashtable pushed 
            on the stack. This information is needed to prevent the recursion and it is cleared immediately after
            the return from the respective level of recursion (when popping a hashtable).
            Hence, if enumeration ends when the level of recursion is greater than zero (i.e. stack is non-empty),  
            some information may remain in visited arrays and the next enumeration will skip them.
            That's why it is recommanded to call <see cref="M:PHP.Core.PhpHashtable.RecursiveEnumerator.Dispose"/> method whenever an enumeration ends using
            the following pattern:
            <code>
              using(PhpHashtable.RecursiveEnumerator e = ht.GetRecursiveEnumerator())
              {
                while (e.MoveNext()) 
                { 
                  /* do something useful */
                }
              }
            </code>
            </para>
            <para>
            Enumerator is unbreakable (i.e. enumerated hashtables may be changed while enumerating them).
            </para>
            </remarks>
        </member>
        <member name="F:PHP.Core.PhpHashtable.RecursiveEnumerator.stack">
            <summary>
            A stack for visited arrays. The currently enumerated array is not there.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpHashtable.RecursiveEnumerator.current">
            <summary>
            The current level hashtable enumerator.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpHashtable.RecursiveEnumerator.readsOnly">
            <summary>
            Wheter the enumerator is used to read the array items only.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpHashtable.RecursiveEnumerator.#ctor(PHP.Core.PhpHashtable,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:PHP.Core.PhpHashtable.RecursiveEnumerator"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpHashtable.RecursiveEnumerator.ReturnFromRecursion(System.Int32)">
            <summary>
            Returns from recursion on a specified level.
            </summary>
            <param name="targetLevel">The level where to continue with enumeration.</param>
            <exception cref="T:System.NullReferenceException">If enumerator has been disposed.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.RecursiveEnumerator.ReturnFromRecursionAtEnd">
            <summary>
            Returns from recursion while the current enumerator is at the end of the list it enumerates.
            </summary>
            <returns>Whether we are not at the definite end of enumeration.</returns>
        </member>
        <member name="M:PHP.Core.PhpHashtable.RecursiveEnumerator.Reset">
            <summary>
            Resets enumerator i.e. returns from recursion to the top level and resets top level enumerator.
            </summary>
            <exception cref="T:System.NullReferenceException">If enumerator has been disposed.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.RecursiveEnumerator.MoveNext">
            <summary>
            Moves to the next element recursively.
            </summary>
            <returns>Whether an enumeration has ended.</returns>
            <exception cref="T:System.NullReferenceException">If enumerator has been disposed.</exception>
        </member>
        <member name="M:PHP.Core.PhpHashtable.RecursiveEnumerator.Dispose">
            <summary>
            Clears information stored in each array on the stack.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpHashtable.RecursiveEnumerator.CurrentTable">
            <summary>
            The currently enumerated array.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpHashtable.RecursiveEnumerator.Level">
            <summary>
            The level of recursion starting from zero (the top level).
            </summary>
        </member>
        <member name="P:PHP.Core.PhpHashtable.RecursiveEnumerator.FollowReferences">
            <summary>
            Whether to follow <see cref="T:PHP.Core.PhpReference"/>s when resolving next level of recursion.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpHashtable.RecursiveEnumerator.InfiniteRecursion">
            <summary>
            Whether the current value causes infinite recursion.
            </summary>
            <exception cref="T:System.NullReferenceException">If enumerator has been disposed.</exception>
        </member>
        <member name="P:PHP.Core.PhpHashtable.RecursiveEnumerator.System#Collections#IDictionaryEnumerator#Key">
            <summary>
            The current key.
            </summary>
            <exception cref="T:System.NullReferenceException">If enumerator has been disposed.</exception>
        </member>
        <member name="P:PHP.Core.PhpHashtable.RecursiveEnumerator.System#Collections#IDictionaryEnumerator#Value">
            <summary>
            The current value.
            </summary>
            <exception cref="T:System.NullReferenceException">If enumerator has been disposed.</exception>
        </member>
        <member name="P:PHP.Core.PhpHashtable.RecursiveEnumerator.System#Collections#IDictionaryEnumerator#Entry">
            <summary>
            The current entry.
            </summary>
            <exception cref="T:System.NullReferenceException">If enumerator has been disposed.</exception>
        </member>
        <member name="P:PHP.Core.PhpHashtable.RecursiveEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current entry.
            </summary>
            <exception cref="T:System.NullReferenceException">If enumerator has been disposed.</exception>
        </member>
        <member name="F:PHP.Core.PhpHashtable.IDictionaryAdapter.enumerator">
            <summary>
            Currently pointed element.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpNetInfo">
            <summary>
            Manages displaying of information about Phalanger and external PHP modules.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.Write(PHP.Core.PhpNetInfo.Sections,System.IO.TextWriter)">
            <summary>
            Writes all information about Phalanger and external PHP modules to output.
            </summary>
            <param name="output">An output where to write information.</param>
            <param name="sections">A mask of sections which to write.</param>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.HtmlRow(System.Boolean,System.String[])">
            <summary>
            Makes a table row containing given <c>cells</c>.
            </summary>
            <param name="doEscape">Do escape HTML entities (tag markers etc.)?</param>
            <param name="cells">The content of cells of the written row.</param>
            <returns>The row in HTML.</returns>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.HtmlVarRow(System.IO.TextWriter,System.String,System.Object,System.Object)">
            <summary>
            Outputs a table row containing a variable dump.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.HtmlHeaderRow(System.String[])">
            <summary>
            Makes a table header row containing given <c>cells</c>.
            </summary>
            <param name="cells">The content of cells of the written row.</param>
            <returns>The row in HTML.</returns>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.OptionValueToString(System.Object)">
            <summary>
            Converts option's value to string to be displayed.
            </summary>
            <param name="value">The value of the option.</param>
            <returns>String representation of the option's value.</returns>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.WriteConfiguration(System.IO.TextWriter)">
            <summary>
            Writes core configuration to given output.
            </summary>
            <param name="output">The output.</param>
            <remarks>
            Configuration is traversed by reflection methods and all fields and its values are formatted to table.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.PrintSectionCaption(System.Boolean,System.String)">
            <summary>
            Prints the section caption. 
            </summary>
            <param name="print">If true, the section caption is sent to output and returned, if false,
            the section caption is returned.</param>
            <param name="caption">The caption.</param>
            <returns>The section caption.</returns>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.PrintTableStart(System.Boolean)">
            <summary>
            Prints the table starting tag.
            </summary>
            <param name="print"> If true, the tag is sent to output and returned, if false, the tag
            is returned.</param>
            <returns>The table starting tag.</returns>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.PrintTableEnd(System.Boolean)">
            <summary>
            Prints the table ending tag.
            </summary>
            <param name="print"> If true, the tag is sent to output and returned, if false, the tag
            is returned.</param>
            <returns>The table ending tag.</returns>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.PrintBoxStart(System.Boolean,System.Int32)">
            <summary>
            Prints table row (tr) starting tag and the first column starting tag (td).
            </summary>
            <param name="print"> If true, the tags are sent to output and returned, if false, 
            the tags are returned.</param>
            <param name="isHeader">Nonzero if the row is a header row.</param>
            <returns>Table row (tr) starting tag and the first column starting tag (td).</returns>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.PrintBoxEnd(System.Boolean)">
            <summary>
            Prints td and tr ending tags.
            </summary>
            <param name="print"> If true, the tags are sent to output and returned, if false, 
            the tags are returned.</param>
            <returns>Td and tr ending tags.</returns>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.PrintHr(System.Boolean)">
            <summary>
            Prints horizontal line (hr) tag.
            </summary>
            <param name="print"> If true, the tag is sent to output and returned, if false, the tag
            is returned.</param>
            <returns>Horizontal line (hr) tag.</returns>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.PrintTableColspanHeader(System.Boolean,System.Int32,System.String)">
            <summary>
            Prints table header occupying given number of columns.
            </summary>
            <param name="print">If true, the header is sent to output and returned, if false, the
            header is returned.</param>
            <param name="columnCount">The number of columns.</param>
            <param name="caption">The caption printed.</param>
            <returns>The table header.</returns>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.PrintTableHeader(System.Boolean,System.String[])">
            <summary>
            Prints table header having several columns. 
            </summary>
            <param name="print">If true, the header is sent to output and returned, if false, the
            header is returned.</param>
            <param name="cells">Captions of columns.</param>
            <returns>The table header.</returns>
        </member>
        <member name="M:PHP.Core.PhpNetInfo.PrintTableRow(System.Boolean,System.String[])">
            <summary>
            Prints table row having several columns. 
            </summary>
            <param name="print">If true, the row is sent to output and returned, if false, the
            row is returned.</param>
            <param name="cells">Cells' content.</param>
            <returns>The table row.</returns>
        </member>
        <member name="T:PHP.Core.PhpNetInfo.Sections">
            <summary>
            Sections of Phalanger information. 
            </summary>
        </member>
        <member name="T:PHP.Core.PhalangerVersion">
            <summary>
            Provides version information of Phalanger runtime.
            </summary>
        </member>
        <member name="F:PHP.Core.PhalangerVersion.Current">
            <summary>
            Current Phalanger version obtained from <see cref="T:System.Reflection.AssemblyFileVersionAttribute"/> or version of this assembly.
            </summary>
        </member>
        <member name="F:PHP.Core.PhalangerVersion.ProductName">
            <summary>
            Phalanger name obtained from <see cref="T:System.Reflection.AssemblyProductAttribute"/>.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpVersion">
            <summary>
            Provides means for working with PHP version as well as the currently supported version.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVersion.Major">
            <summary>
            Currently supported PHP major version.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVersion.Minor">
            <summary>
            Currently supported PHP minor version.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVersion.Release">
            <summary>
            Currently supported PHP release version.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVersion.Extra">
            <summary>
            Extra version string.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVersion.Zend">
            <summary>
            Currently supported Zend Engine version.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVersion.Current">
            <summary>
            Currently supported PHP version.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpVersion.CompareParts(System.String,System.String)">
            <summary>
            Compares parts of varsions delimited by '.'.
            </summary>
            <param name="part1">A part of the first version.</param>
            <param name="part2">A part of the second version.</param>
            <returns>The result of parts comparison (-1,0,+1).</returns>
        </member>
        <member name="M:PHP.Core.PhpVersion.VersionToArray(System.String)">
            <summary>
            Parses a version and splits it into an array of parts.
            </summary>
            <param name="version">The version to be parsed (can be a <B>null</B> reference).</param>
            <returns>An array of parts.</returns>
            <remarks>
            Non-alphanumeric characters are eliminated.
            The version is split in between a digit following a non-digit and by   
            characters '.', '-', '+', '_'. 
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpVersion.Compare(System.String,System.String)">
            <summary>
            Compares two PHP versions.
            </summary>
            <param name="ver1">The first version.</param>
            <param name="ver2">The second version.</param>
            <returns>The result of comparison (-1,0,+1).</returns>
        </member>
        <member name="M:PHP.Core.PhpVersion.Compare(System.String,System.String,System.String)">
            <summary>
            Compares two PHP versions using a specified operator.
            </summary>
            <param name="ver1">The first version.</param>
            <param name="ver2">The second version.</param>
            <param name="op">
            The operator (supported are: "&lt;","lt";"&lt;=","le";"&gt;","gt";"&gt;=","ge";"==","=","eq";"!=","&lt;&gt;","ne").
            </param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="T:PHP.Core.Namespaces">
            <summary>
            Namespaces used by Phalanger.
            </summary>
        </member>
        <member name="F:PHP.Core.Namespaces.Library">
            <summary>
            Library functions, classes, and interfaces (including extensions).
            </summary>
        </member>
        <member name="F:PHP.Core.Namespaces.LibraryStubs">
            <summary>
            Arg-less stubs of library functions.
            </summary>
        </member>
        <member name="F:PHP.Core.Namespaces.Core">
            <summary>
            Core.
            </summary>
        </member>
        <member name="F:PHP.Core.Namespaces.CoreAst">
            <summary>
            Core subnamespace containing AST nodes.
            </summary>
        </member>
        <member name="F:PHP.Core.Namespaces.CoreEmit">
            <summary>
            Core subnamespace containing code emitting stuff.
            </summary>
        </member>
        <member name="F:PHP.Core.Namespaces.ExtManager">
            <summary>
            Extensions manager.
            </summary>
        </member>
        <member name="T:PHP.Core.Operators">
            <summary>
            Operators used by PHP language.
            </summary>
            <remarks>
            <para>
            The compiler keeps track of whether or not a variable is a reference but doesn't do so in
            the case of a property or an array item. Moreover, a <see cref="T:PHP.Core.PhpReference"/> variable cannot be <B>null</B>.
            Thus
            <list type="bullet">
              <item>an operator returning an item of an array or a property of an object dereferences return value itself,</item>
              <item>operands of type <see cref="T:System.Object"/> should not be of type <see cref="T:PHP.Core.PhpReference"/>,</item>
              <item>an operator returning a <see cref="T:PHP.Core.PhpReference"/> should never return a <B>null</B> reference.</item>
            </list>
            </para>
            
            <para>
            In the following tables <c>p</c>, <c>q</c> are references while <c>x</c>, <c>y</c>, <c>z</c>, <c>u</c>, <c>v</c> 
            are not (if a corresponding variable is a <see cref="T:PHP.Core.PhpReference"/> then <see cref="F:PHP.Core.PhpReference.value"/> 
            is used instead). The <c>context</c> is the current <see cref="T:PHP.Core.ScriptContext"/> and the 
            <c>type</c> is the current <see cref="T:PHP.Core.Reflection.DTypeDesc"/> as described in the following paragraph.
            </para>
            <para>
            Operators working on <see cref="T:PHP.Core.Reflection.DObject"/> have a <see cref="T:PHP.Core.Reflection.DTypeDesc"/> parameter named 
            <c>caller</c>. When such an operator is used in a PHP function, <B>null</B> is supplied.
            When the operator is used in a PHP method, the <see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the class
            this method belongs to is supplied.
            Finally, when the operator is used in a script's Main() method,
            the <see cref="T:PHP.Core.Reflection.DTypeDesc"/> that comes as one of Main()'s parameters is supplied.
            </para>
            
            <!-- simple operators ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            
            <para>
            <list type="table">
            <listheader><term>Simple operators</term><term>Implementation</term></listheader>
              <item><term><c>x &amp;&amp; y</c></term><term><c><see cref="M:PHP.Core.Convert.ObjectToBoolean(System.Object)"/>(x) &amp;&amp; <see cref="M:PHP.Core.Convert.ObjectToBoolean(System.Object)"/>(y)</c></term></item>
              <item><term><c>x || y</c></term><term><c><see cref="M:PHP.Core.Convert.ObjectToBoolean(System.Object)"/>(x) || <see cref="M:PHP.Core.Convert.ObjectToBoolean(System.Object)"/>(y)</c></term></item>
              <item><term><c>x xor y</c></term><term><c><see cref="M:PHP.Core.Convert.ObjectToBoolean(System.Object)"/>(x) xor <see cref="M:PHP.Core.Convert.ObjectToBoolean(System.Object)"/>(y)</c></term></item>
              <item><term><c>!x</c></term><term><c>!<see cref="M:PHP.Core.Convert.ObjectToBoolean(System.Object)"/>(x);</c></term></item>
              <item><term><c>x &amp; y</c></term><term><c><see cref="M:PHP.Core.Operators.BitOperation(System.Object,System.Object,PHP.Core.Operators.BitOp)"/>(x,y,BitOp.<see cref="F:PHP.Core.Operators.BitOp.And"/>)</c></term></item>
              <item><term><c>x | y</c></term><term><c><see cref="M:PHP.Core.Operators.BitOperation(System.Object,System.Object,PHP.Core.Operators.BitOp)"/>(x,y,BitOp.<see cref="F:PHP.Core.Operators.BitOp.Or"/>)</c></term></item>
              <item><term><c>x ^ y</c></term><term><c><see cref="M:PHP.Core.Operators.BitOperation(System.Object,System.Object,PHP.Core.Operators.BitOp)"/>(x,y,BitOp.<see cref="F:PHP.Core.Operators.BitOp.Xor"/>)</c></term></item>
              <item><term><c>~x</c></term><term><c><see cref="M:PHP.Core.Operators.BitNot(System.Object)"/>(x)</c></term></item>
              <item><term><c>x++</c></term><term><c>x = <see cref="M:PHP.Core.Operators.Increment(System.Object)"/>(x)</c></term></item>
              <item><term><c>x--</c></term><term><c>x = <see cref="M:PHP.Core.Operators.Decrement(System.Object)"/>(x)</c></term></item>
              <item><term><c>x + y</c></term><term><c><see cref="M:PHP.Core.Operators.Add(System.Object,System.Object)"/>(x,y)</c></term></item>
              <item><term><c>x - y</c></term><term><c><see cref="M:PHP.Core.Operators.Subtract(System.Object,System.Object)"/>(x,y)</c></term></item>
              <item><term><c>x * y</c></term><term><c><see cref="M:PHP.Core.Operators.Multiply(System.Object,System.Object)"/>(x,y)</c></term></item>
              <item><term><c>x / y</c></term><term><c><see cref="M:PHP.Core.Operators.Divide(System.Object,System.Object)"/>(x,y)</c></term></item>
              <item><term><c>x % y</c></term><term><c><see cref="M:PHP.Core.Operators.Remainder(System.Object,System.Object)"/>(x,y)</c></term></item>
              <item><term><c>x &lt;&lt; y</c></term><term><c><see cref="M:PHP.Core.Operators.ShiftLeft(System.Object,System.Object)"/>(x,y)</c></term></item>
              <item><term><c>x &gt;&gt; y</c></term><term><c><see cref="M:PHP.Core.Operators.ShiftRight(System.Object,System.Object)"/>(x,y)</c></term></item>
              <item><term><c>-x</c></term><term><c><see cref="M:PHP.Core.Operators.Minus(System.Object)"/>(x)</c></term></item>
              <item><term><c>+x</c></term><term><c><see cref="M:PHP.Core.Operators.Plus(System.Object)"/>(x)</c></term></item>
              <item><term><c>x . y</c></term><term><c><see cref="M:PHP.Core.Operators.Concat(System.Object,System.Object)"/>(x,y)</c></term></item>
              <item><term><c>a . </c>...<c> . z</c></term><term><c><see cref="M:PHP.Core.Operators.Concat(System.Object,System.Object)"/>(<B>new</B> object[] {a,...,z})</c></term></item>
              <item><term><c>x == y</c></term><term><c>PhpComparer.Default.<see cref="M:PHP.Core.PhpComparer.CompareEq(System.Object,System.Object)"/>(x,y)</c></term></item>
              <item><term><c>x != y</c></term><term><c>!PhpComparer.Default.<see cref="M:PHP.Core.PhpComparer.CompareEq(System.Object,System.Object)"/>(x,y)</c></term></item>
              <item><term><c>x === y</c></term><term><c><see cref="M:PHP.Core.Operators.StrictEquality(System.Object,System.Object)"/>(x,y)</c></term></item>
              <item><term><c>x !== y</c></term><term><c>!<see cref="M:PHP.Core.Operators.StrictEquality(System.Object,System.Object)"/>(x,y)</c></term></item>
              <item><term><c>x &lt;= y</c></term><term><c>PhpComparer.Default.<see cref="M:PHP.Core.PhpComparer.Compare(System.Object,System.Object)"/>(x,y) &lt;= 0</c></term></item>
              <item><term><c>x &gt;= y</c></term><term><c>PhpComparer.Default.<see cref="M:PHP.Core.PhpComparer.Compare(System.Object,System.Object)"/>(x,y) &gt;= 0</c></term></item>
              <item><term><c>x &lt; y</c></term><term><c>PhpComparer.Default.<see cref="M:PHP.Core.PhpComparer.Compare(System.Object,System.Object)"/>(x,y) &lt; 0</c></term></item>
              <item><term><c>x &gt; y</c></term><term><c>PhpComparer.Default.<see cref="M:PHP.Core.PhpComparer.Compare(System.Object,System.Object)"/>(x,y) &gt; 0</c></term></item>
              <item><term><c>x = y</c></term><term><c>x = PhpVariable.<see cref="M:PHP.Core.PhpVariable.Copy(System.Object,PHP.Core.CopyReason)"/>(y,CopyReason.<see cref="F:PHP.Core.CopyReason.Assigned"/>);</c></term></item>
              <item><term><c>p =&amp; q</c></term><term><c>p = q</c></term></item>
              <item><term><c>isset(x)</c></term><term><c>x != <B>null</B></c><SUP>1</SUP></term></item>
              <item><term><c>unset(x)</c></term><term><c>x = <B>null</B></c></term></item>
              <item><term><c>unset(p)</c></term><term><c>p.value = <B>null</B></c></term></item>
              <item><term><c>({int|integer})x</c></term><term><c><see cref="M:PHP.Core.Convert.ObjectToInteger(System.Object)"/>(x)</c></term></item>
              <item><term><c>({bool|boolean})x</c></term><term><c><see cref="M:PHP.Core.Convert.ObjectToBoolean(System.Object)"/>(x)</c></term></item>
              <item><term><c>({float|real|double})x</c></term><term><c><see cref="M:PHP.Core.Convert.ObjectToDouble(System.Object)"/>(x)</c></term></item>
              <item><term><c>(string)x</c></term><term><c><see cref="M:PHP.Core.Convert.ObjectToString(System.Object)"/>(x)</c></term></item>
              <item><term><c>(array)x</c></term><term><c><see cref="M:PHP.Core.Convert.ObjectToPhpArray(System.Object)"/>(x)</c></term></item>
              <item><term><c>(object)x</c></term><term><c><see cref="M:PHP.Core.Convert.ObjectToDObject(System.Object,PHP.Core.ScriptContext)"/>(x,context)</c></term></item>
              <item><term><c>(unset)x</c></term><term><c><B>null</B></c></term></item>
              <item><term><c>`x`</c></term><term><c>Execution.<see cref="M:PHP.Core.Execution.ShellExec(System.String)"/>(x)</c></term></item>
              <item><term><c>@s</c></term><term><c>context.<see cref="M:PHP.Core.ScriptContext.DisableErrorReporting"/>(); s; context.<see cref="M:PHP.Core.ScriptContext.EnableErrorReporting"/>();</c></term></item>
              <item><term><c>new A</c></term><term><c><see cref="M:PHP.Core.Operators.New(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,PHP.Core.NamingContext)"/>("A",type_handle,context)</c></term></item>
              <item><term><c>c?s:t</c></term><term><c>if (c) {s} else {t};</c></term></item>
              <item><term><c>clone(x)</c></term><term><c><see cref="M:PHP.Core.Operators.Clone(System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>(x)</c></term></item>
              <item><term><c>x instanceOf A</c></term><term><c><see cref="M:PHP.Core.Operators.InstanceOf(System.Object,PHP.Core.Reflection.DTypeDesc)"/>(x,"A",type_handle,context)</c></term></item>
            </list>
            <SUP>1</SUP> <c>isset</c> doesn't distinguish between a <b>null</b> and uninitialized variable<BR/>
            </para>
            
            <!-- item and property operators ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            
            <para>
            <list type="table">
            <listheader><term>Item and property operators<SUP>2</SUP></term><term>Implementation</term></listheader>
              <item><term><c>x[] = z</c></term><term><c><see cref="M:PHP.Core.Operators.SetItem(System.Object,System.Object@)"/>(PhpVariable.<see cref="M:PHP.Core.PhpVariable.Copy(System.Object,PHP.Core.CopyReason)"/>(z,CopyReason.<see cref="F:PHP.Core.CopyReason.Assigned"/>),<B>ref</B> x)</c></term></item>    
              <item><term><c>x[] =&amp; p</c></term><term><c><see cref="M:PHP.Core.Operators.SetItem(System.Object,System.Object@)"/>(p,<B>ref</B> x)</c></term></item>
              <item><term><c>p =&amp; x[]</c></term><term><c><see cref="M:PHP.Core.Operators.SetItem(System.Object,System.Object@)"/>(p = <B>new</B> PhpReference(),<B>ref</B> x)</c></term></item>
              <item><term><c>x[y]</c></term><term><c><see cref="M:PHP.Core.Operators.GetItem(System.Object,System.Object,PHP.Core.Operators.GetItemKinds)"/>(x,y,<B>false</B>)</c></term></item>
              <item><term><c>x[y] = z</c></term><term><c><see cref="M:PHP.Core.Operators.SetItem(System.Object,System.Object@)"/>(y,PhpVariable.<see cref="M:PHP.Core.PhpVariable.Copy(System.Object,PHP.Core.CopyReason)"/>(z,CopyReason.<see cref="F:PHP.Core.CopyReason.Assigned"/>),<B>ref</B> x)</c></term></item>
              <item><term><c>x[y] =&amp; p</c></term><term><c><see cref="M:PHP.Core.Operators.SetItemRef(PHP.Core.PhpReference,System.Object,System.Object@)"/>(y,p,<B>ref</B> x)</c></term></item>
              <item><term><c>p =&amp; x[y]</c></term><term><c>p = <see cref="M:PHP.Core.Operators.GetItemRef(System.Object@)"/>(y,<B>ref</B> x)</c></term></item>
              <item><term><c>isset(x[])</c></term><term><c>error - operator [] without key cannot be used for reading</c></term></item>
              <item><term><c>isset(x[y])</c></term><term><c><see cref="M:PHP.Core.Operators.GetItem(System.Object,System.Object,PHP.Core.Operators.GetItemKinds)"/>(x,y,<B>true</B>)!=<B>null</B></c></term></item>
              <item><term><c>unset(x[y])</c></term><term><c><see cref="M:PHP.Core.Operators.UnsetItem(System.Object,System.Object)"/>(x,y)</c></term></item>
              <item><term><c>x-&gt;y</c></term><term><c><see cref="M:PHP.Core.Operators.GetProperty(System.Object,System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean)"/>(x,y,type_handle,<B>false</B>)</c></term></item>
              <item><term><c>x-&gt;y = z</c></term><term><c><see cref="M:PHP.Core.Operators.SetProperty(System.Object,System.Object@,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>(z,<B>ref</B> x,y,PhpVariable.<see cref="M:PHP.Core.PhpVariable.Copy(System.Object,PHP.Core.CopyReason)"/>(y,CopyReason.<see cref="F:PHP.Core.CopyReason.Assigned"/>),type_handle,context)</c></term></item>
              <item><term><c>x-&gt;y =&amp; p</c></term><term><c><see cref="M:PHP.Core.Operators.SetProperty(System.Object,System.Object@,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>(p,<B>ref</B> x,y,type_handle,context)</c><SUP>3</SUP></term></item>
              <item><term><c>p =&amp; x-&gt;y</c></term><term><c><see cref="M:PHP.Core.Operators.GetPropertyRef(System.Object@,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>(<B>ref</B> x,y,type_handle,context)</c></term></item>
              <item><term><c>isset(x-&gt;y)</c></term><term><c><see cref="M:PHP.Core.Operators.GetProperty(System.Object,System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean)"/>(x,y,type_handle,<B>true</B>)</c></term></item>
              <item><term><c>unset(x-&gt;y)</c></term><term><c><see cref="M:PHP.Core.Operators.UnsetProperty(System.Object,System.String,PHP.Core.Reflection.DTypeDesc)"/>(x,y,type_handle)</c></term></item>
              <item><term><c>A::$y</c></term><term><c><see cref="M:PHP.Core.Operators.GetStaticProperty(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,System.Boolean)"/>("A",y,type_handle,context,<B>false</B>)</c></term></item>
              <item><term><c>A::$y = z</c></term><term><c><see cref="M:PHP.Core.Operators.SetStaticProperty(PHP.Core.Reflection.DTypeDesc,System.Object,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>("A",PhpVariable.<see cref="M:PHP.Core.PhpVariable.Copy(System.Object,PHP.Core.CopyReason)"/>(y,CopyReason.<see cref="F:PHP.Core.CopyReason.Assigned"/>),type_handle,context)</c></term></item>
              <item><term><c>A::$y =&amp; p</c></term><term><c><see cref="M:PHP.Core.Operators.SetStaticProperty(PHP.Core.Reflection.DTypeDesc,System.Object,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>("A",y,p,type_handle,context)</c></term></item>
              <item><term><c>p =&amp; A::$y</c></term><term><c><see cref="M:PHP.Core.Operators.GetStaticPropertyRef(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>("A",y,type_handle,context)</c></term></item>
              <item><term><c>isset(A::$y)</c></term><term><c><see cref="M:PHP.Core.Operators.GetStaticProperty(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,System.Boolean)"/>("A",y,type_handle,context,<B>true</B>)</c></term></item>
              <item><term><c>unset(A::$y)</c></term><term><c><see cref="M:PHP.Core.Operators.UnsetStaticProperty(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>("A",y,type_handle,context)</c><SUP>4</SUP></term></item>
              <item><term><c>A::x</c></term><term><c><see cref="M:PHP.Core.Operators.GetClassConstant(PHP.Core.Reflection.DTypeDesc,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>("A",x,type_handle,context)</c></term></item>
            </list>
            <SUP>2</SUP> Note, operator <c>x{y}</c> is implemented in the same way as <c>x[y]</c>.<BR/>
            <SUP>3</SUP> Note, there is no -Ref suffix here.<BR/>
            <SUP>4</SUP> It is an error to unset static property.
            </para>
            
            <!-- function and method calls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            
            <para>
            <list type="table">
            <listheader><term>Function and method calls</term><term>Implementation</term></listheader>
              <item><term><c>x-&gt;f(args)</c></term><term><c><see cref="M:PHP.Core.Operators.InvokeMethod(System.Object,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>(x,"f",type_handle)</c></term></item>
              <item><term><c>A::f(args)</c></term><term><c><see cref="M:PHP.Core.Operators.InvokeStaticMethod(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DObject,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>("A","f",type_handle)</c></term></item>
              <item><term><c>$f(args)</c></term><term><c>PhpFunction.<see cref="M:PHP.Core.ScriptContext.Call(System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.NamingContext,System.Object,System.String,PHP.Core.Reflection.DRoutineDesc@,PHP.Core.ScriptContext)"/>("f",context)</c></term></item>
            </list>
            Before a function or a method is called arguments are pushed <c>context.<see cref="F:PHP.Core.ScriptContext.Stack"/></c>
            by <see cref="M:PHP.Core.PhpStack.AddFrame"/>. Operators stated in the table above are used only if the function/method
            being called is not known at the compile time. Otherwise, direct call to the function/method is emitted.
            </para>
            
            <!-- chained operators ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            
            <B>Chained operators</B>
            
            <para>
            Several patterns are possible:
            <list type="number">
              <item><c>x = chain</c> - chain is <I>read</I>,</item>
              <item><c>chain = y</c> - chain is <I>written</I>,</item>
              <item><c>x =&amp; chain</c> - chain is <I>written</I>,</item>
              <item><c>chain =&amp; y</c> - chain is <I>written</I>,</item>
            </list>
            where <c>chain</c> is a sequence of item and/or member operators <c>[u]</c>, <c>[]</c>, <c>{u}</c>, <c>-&gt;v</c>
            at least 2 operators long. The first operator can also be a function call operator or a static property access 
            operator. The last operator can be method call operator.
            As of PHP 5 method call operator <c>()</c> can be also chained and a static method call can be the first
            operation in the chain.
            </para>
            
            <para>
            It's suitable to decompose a chain into three parts for its compilation.
            </para>
            
            Possible occurences of operators in the chain:
            <DIV class="tablediv" id="">
            <TABLE class="dtTABLE" cellspacing="0">
              <TR>
                <TH></TH>
                <TH>Chain is <I>read</I></TH>
                <TH>Chain is <I>written</I></TH>
              </TR>
              <TR>
                <TD>first</TD>
                <TD><c>x[y], x{y}, x-&gt;y, x-&gt;f(), f(), A::$x, A::f()</c></TD>
                <TD><c>x[], x[y], x{y}, x-&gt;y, x-&gt;f(), f(), A::$x, A::f()</c></TD>
              </TR>    
              <TR>
                <TD>middle</TD>
                <TD><c>x[y], x{y}, x-&gt;y, x-&gt;f()</c></TD>
                <TD><c>x[], x[y], x{y}, x-&gt;y, x-&gt;f()</c></TD>
              </TR>    
              <TR>
                <TD>last</TD>
                <TD><c>x[y], x{y}, x-&gt;y, x-&gt;f()</c></TD>
                <TD><c>x[], x[y], x{y}, x-&gt;y</c></TD>
              </TR>    
            </TABLE>
            </DIV>
            
            <para>
            Example 1: <code>a[k1][k2]-&gt;k3-&gt;k4</code>
            Example 2: <code>a[k1][]-&gt;k2-&gt;k3[k4]</code>
            Example 3: <code>A::$x[k1]-&gt;f(arg)-&gt;x</code>
            Example 4: <code>g()-&gt;x-&gt;h()</code>
            </para>
            
            <para>
            If a chain is <I>read</I> and if any item/property listed doesn't exist in the appropriate array/object the result 
            will be a <B>null</B> reference. In the case the chain is <I>written</I> and some item or property should 
            be an array (bacause it is followed by <c>[]</c> or <c>{}</c> operator in the chain) but it is 
            empty in the terms of <see cref="M:PHP.Core.Operators.IsEmptyForEnsure(System.Object)"/> then such item/property is replaced by a new empty array.
            If some item or property should be a PHP object (bacause it is followed by <c>-&gt;</c> operator in the chain) but it is 
            empty in the terms of <see cref="M:PHP.Core.Operators.IsEmptyForEnsure(System.Object)"/> then such item/property is replaced by a new instance of 
            <see cref="T:PHP.Library.stdClass"/>. However, a static property is not created if doesn't exist (an error is reported).
            </para>
            
            <!-- chain reading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            
            Chain reading:
            <para>
            It is a fatal error if there is a [] operator without a key in a chain which is read.
            If the chain doesn't contain any such operator it is compiled as a sequence of <see cref="M:PHP.Core.Operators.GetItem(System.Object,System.Object,PHP.Core.Operators.GetItemKinds)"/>, 
            <see cref="M:PHP.Core.Operators.GetProperty(System.Object,System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean)"/>, <see cref="M:PHP.Core.Operators.GetStaticProperty(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,System.Boolean)"/> operators and function and method calls.
            </para>
            
            The chain from the first example will be compiled as follows (<c>x = a[k1][k2]-&gt;k3-&gt;k4</c>):
            <code>
            x = PhpVariable.Copy(
                GetProperty(
                GetProperty(
                GetItem(
                GetItem(a,k1,false),k2,false),k3,type_handle,false),k4,type_handle,false),CopyReason.Assigned);
            </code>
            
            The chain in the fourth example stated above is compiled as follows (<c>x = g()-&gt;x-&gt;h()</c>,
            assuming declarations <c>function g() {...}</c> and <c>function h() {...}</c> for example):
            <code>
            x = PhpVariable.Copy(
                Operators.InvokeMethod(
                Operators.GetProperty(
                g(),"x",type_handle),"h",type_handle),CopyReason.Assigned);
            </code>
            
            <!-- chain writting ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            
            Chain writing:
            <para>
            Chain which is written and contains function/method calls can be divided into subchains which 
            doesn't contain function calls in the middle. Subchaines are compiled separately as described below.
            Because subchains and chains not containing function/method calls are compiled in the same way,
            only the compilation of chains is described below.
            </para>
            
            <para>
            Lets follow the chain decomposition:
            <list type="bullet">
              <item>
                The first operator in the chain ensures that a variable or a static property which it is applied on is 
                an array or an object. It is implemented by <see cref="M:PHP.Core.Operators.EnsureVariableIsArray(System.Object@)"/>, 
                <see cref="M:PHP.Core.Operators.EnsureVariableIsObject(System.Object@,PHP.Core.ScriptContext)"/>, <see cref="M:PHP.Core.Operators.EnsureStaticPropertyIsArray(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/> or 
                <see cref="M:PHP.Core.Operators.EnsureStaticPropertyIsObject(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>.
              </item>
              <item>
                The next operators up to the last but one ensures that an item or a property on which it is used is an 
                array or an object and is implemented by <see cref="M:PHP.Core.PhpArray.EnsureItemIsArray"/>, <see cref="M:PHP.Core.PhpArray.EnsureItemIsObject(PHP.Core.ScriptContext)"/>,
                <see cref="M:PHP.Core.Operators.EnsurePropertyIsArray(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc)"/>, or <see cref="M:PHP.Core.Operators.EnsurePropertyIsObject(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>. 
              </item>
              <item>
                The last operator sets or gets the resulting value of the chain. It is implemented by 
                <see cref="M:PHP.Core.PhpArray.GetArrayItem(System.Object,System.Boolean)"/>, <see cref="M:PHP.Core.PhpArray.GetArrayItemRef"/>, <see cref="M:PHP.Core.Operators.GetObjectProperty(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean)"/>, 
                <see cref="M:PHP.Core.Operators.GetObjectPropertyRef(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc)"/>, <see cref="M:PHP.Core.PhpArray.SetArrayItem(System.Object)"/>, <see cref="M:PHP.Core.PhpArray.SetArrayItemRef(System.Object,PHP.Core.PhpReference)"/>, 
                <see cref="M:PHP.Core.Operators.SetObjectProperty(PHP.Core.Reflection.DObject,System.String,System.Object,PHP.Core.Reflection.DTypeDesc)"/>, by a function/method call.
                These methods takes an argument of a particular type which is determined by the previous operator.
              </item>
            </list>
            </para>
            
            <para>
            Each "Ensure" operator returns the requested item/property (possibly creates a new one if not exists or the existing 
            is empty in the terms of <see cref="M:PHP.Core.Operators.IsEmptyForEnsure(System.Object)"/>). This returned value is passed to the next operator 
            in the chain. PhpArray.<see cref="M:PHP.Core.PhpHashtable.Add(System.Object)"/> operator always adds a new item to an array on 
            which is applied. The result passed to the next is the item added. The pattern is 
            <code>array.Add({result} = new PhpArray());</code>
            </para>
            
            <para>
            The chain in the second example stated above is compiled as follows (<c>a[k1][]-&gt;k2-&gt;k3[k4] = x</c>):
            <code>
            PhpArray a1,a2; 
            DObject o1,o2;
            a1 = Operators.EnsureVariableIsArray(ref a);       
            if (a1 == null) goto end;
            a1 = Operators.EnsureItemIsArray(a1,k1);
            if (a1 == null) goto end;
            a1.Add(o2 = stdClass.CreateDefaultObject(context));  
            o1 = Operators.EnsurePropertyIsObject(o2,k2,context);
            if (o1 == null) goto end;
            a2 = Operators.EnsurePropertyIsArray(o1,k3);
            if (a2 == null) goto end;
            Operators.SetArrayItem(a2,k4,PhpVariable.Copy(x,CopyReason.Assignment));
            end:
            </code>
            </para>
            
            <para>
            The chain in the third example stated above is compiled as follows (<c>A::$x[k1]-&gt;f(arg)-&gt;x =&amp; x</c>,
            assuming declaration <c>function&amp; f($a) {...}</c> for example):
            <code>
            // the first subchain:
            PhpArray a1;
            DObject o1;
            a1 = Operators.EnsureStaticPropertyIsArray("A","x",type_handle,context);
            if (a1 == null) goto end;
            o1 = a1.EnsureItemIsObject(k1,context);
            if (o1 == null) goto end;
            
            // an ordinary PHP method call:
            PhpReference r1;
            context.Stack.AddFrame(arg);
            r1 = Operators.InvokeMethod(o1,"f",type_handle);
            
            // the second subchain:
            DObject o2;
            o2 = Operators.EnsureVariableIsObject(ref r1.value,context);
            if (o2 == null) goto end;
            Operators.SetObjectProperty(o2,"x",x,type_handle);
            end:
            </code>
            </para> 
            
            <!-- array ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            
            <B>Array construction</B>
            <para>
            The array keyword is used to create a new instance of PHP array (<see cref="T:PHP.Core.PhpArray"/>).
            It takes a sequence of key-value pairs and/or single values. Both keys and values 
            can be expressions. Moreover, a value can be preceded by the reference modifier (&amp;) 
            allowing values to be added to the resulting array as references.
            </para>
            
            <para>
            The <c>array</c> construct is implemented by construction a new <see cref="T:PHP.Core.PhpArray"/> <c>a</c> in which
            entries are added as described in the following table.
            <list type="table">
            <listheader><term>Array construction element</term><description>Implementation</description></listheader>
              <item><term><c>x =&gt; y</c></term><term><c><see cref="M:PHP.Core.PhpArray.SetArrayItem(System.Object)"/>(a,x,PhpVariable.<see cref="M:PHP.Core.PhpVariable.Copy(System.Object,PHP.Core.CopyReason)"/>(y,CopyReason.<see cref="F:PHP.Core.CopyReason.Assigned"/>))</c></term></item>
              <item><term><c>x =&gt;&amp; p</c></term><term><c><see cref="M:PHP.Core.PhpArray.SetArrayItemRef(System.Object,PHP.Core.PhpReference)"/>(a,x,p)</c></term></item>
              <item><term><c>x</c></term><term><c>a.<see cref="M:PHP.Core.PhpHashtable.Add(System.Object)"/>(PhpVariable.<see cref="M:PHP.Core.PhpVariable.Copy(System.Object,PHP.Core.CopyReason)"/>(x,CopyReason.<see cref="F:PHP.Core.CopyReason.Assigned"/>))</c></term></item>
            </list> 
            </para>
            
            <!-- list ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            
            <B>List language construct</B>
            <para>
            The <c>list</c> language construct is a shorthand for several assignments of array items.
            It can be used only on the left hand side of the = operator.
            Statement 
            <code>list(&lt;rw_expr_1&gt;,...,&lt;rw_expr_k&gt;) = &lt;expression&gt;</code>
            is implemented as a sequence of <see cref="M:PHP.Core.PhpArray.GetArrayItem(System.Object,System.Boolean)"/> and 
            PHP assignments if the rhs is an array (see operators = on variable, array item and object property in tables above).
            Otherwise, a <B>null</B> reference is assigned to each expression on the lhs.
            Sequence is in reverse order then it is stated in the list "arguments", i.e. the first
            item assigned is the last one in the list. Right hand side expression is evaluated
            once before assignments take place.
            </para>
            
            <!-- $$x ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            
            <para>
            <list type="table">
            <listheader><term>Indirect variable access</term><description>Implementation</description></listheader>
              <item><term><c>$$x</c></term><term><c><see cref="M:PHP.Core.Operators.GetVariable(PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)"/>(variables_table,x)</c></term></item>
              <item><term><c>$$x = y</c></term><term><c><see cref="M:PHP.Core.Operators.SetVariable(PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object)"/>(variables_table,x,PhpVariable.<see cref="M:PHP.Core.PhpVariable.Copy(System.Object,PHP.Core.CopyReason)"/>(y,CopyReason.<see cref="F:PHP.Core.CopyReason.Assigned"/>))</c></term></item>
              <item><term><c>$$x =&amp; p</c></term><term><c><see cref="M:PHP.Core.Operators.SetVariableRef(PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,PHP.Core.PhpReference)"/>(variables_table,x,p)</c></term></item>
              <item><term><c>p =&amp; $$x</c></term><term><c>p = <see cref="M:PHP.Core.Operators.GetVariableRef(PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)"/>(variables_table,x)</c></term></item>
              <item><term><c>isset($$x)</c></term><term><c><see cref="M:PHP.Core.Operators.GetVariableUnchecked(PHP.Core.ScriptContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)"/>(variables_table,x) != null</c></term></item>
              <item><term><c>unset($$x)</c></term><term><c>variables_table.<see cref="M:System.Collections.IDictionary.Remove(System.Object)"/>(x)</c></term></item>
            </list>
            </para>
                
            </remarks>
        </member>
        <member name="F:PHP.Core.Operators.LONG_SIGN_MASK">
            <summary>
            Bit mask corresponding to the sign in <see cref="T:System.Int64"/> value.
            </summary>
        </member>
        <member name="M:PHP.Core.Operators.Add(System.Object,System.Object)">
            <summary>
            Implements '+' operator.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>
            The result of type <see cref="T:PHP.Core.PhpArray"/>, <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.
            If both operands are of type <see cref="T:PHP.Core.PhpArray"/> the result is their union made by 
            <see cref="M:PHP.Core.PhpHashtable.Unite(PHP.Core.PhpHashtable)"/> on deep copies. 
            </returns>
            <exception cref="T:PHP.Core.PhpException">Addition is not supported on the types of operands specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Add(System.Object,System.Int32)">
            <summary>
            Implements '+' operator optimized for addition with integer literal.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>
            The result of type <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.
            </returns>
            <exception cref="T:PHP.Core.PhpException">Addition is not supported on the types of operands specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Add(System.Object,System.Double)">
            <summary>
            Implements '+' operator optimized for addition with double literal.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>
            The result of addition.
            </returns>
            <exception cref="T:PHP.Core.PhpException">Addition is not supported on the types of operands specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Add(System.Double,System.Object)">
            <summary>
            Implements '+' operator optimized for addition with double literal.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>
            The result of addition.
            </returns>
            <exception cref="T:PHP.Core.PhpException">Addition is not supported on the types of operands specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Subtract(System.Object,System.Object)">
            <summary>
            Implements binary '-' operator.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>The result of type <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.</returns>
            <exception cref="T:PHP.Core.PhpException">Subtraction is not supported on the types of operands specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Subtract(System.Object,System.Int32)">
            <summary>
            Implements binary '-' operator.
            </summary>
            <param name="x">The first operand.</param>
            <param name="iy">The second operand.</param>
            <returns>The result of type <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.</returns>
            <exception cref="T:PHP.Core.PhpException">Subtraction is not supported on the types of operands specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Subtract(System.Int32,System.Object)">
            <summary>
            Implements binary '-' operator optimized for subtraction from an integer literal.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>The result of type <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.</returns>
            <exception cref="T:PHP.Core.PhpException">Subtraction is not supported on the types of operands specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Subtract(System.Double,System.Object)">
            <summary>
            Implements binary '-' operator optimized for subtraction from a double literal.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <exception cref="T:PHP.Core.PhpException">Subtraction is not supported on the types of operands specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Minus(System.Object)">
            <summary>
            Implements unary '-' operator.
            </summary>
            <param name="x">The operand.</param>
            <returns>The result of type <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.</returns>
            <exception cref="T:PHP.Core.PhpException">The operator is not supported on the type of operand specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Plus(System.Object)">
            <summary>
            Implements unary '+' operator.
            </summary>
            <param name="x">The operand.</param>
            <returns>The result of type <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.</returns>
            <exception cref="T:PHP.Core.PhpException">The operator is not supported on the type of operand specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Divide(System.Object,System.Object)">
            <summary>
            Implements the binary '/' operator.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>The result of type <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.</returns>
            <exception cref="T:PHP.Core.PhpException">Division is not supported on the types of operands specified.</exception>
            <exception cref="T:PHP.Core.PhpException">Division by zero.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Divide(System.Object,System.Int32)">
            <summary>
            Implements the binary '/' operator optimized for division by an integer literal.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>The result of type <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.</returns>
            <exception cref="T:PHP.Core.PhpException">Division is not supported on the types of operands specified.</exception>
            <exception cref="T:System.DivideByZeroException">Division by zero.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Divide(System.Object,System.Double)">
            <summary>
            Implements the binary '/' operator optimized for division by a double literal.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>The result of division.</returns>
            <exception cref="T:PHP.Core.PhpException">Division is not supported on the types of operands specified.</exception>
            <exception cref="T:PHP.Core.PhpException">Division by zero.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Divide(System.Int32,System.Object)">
            <summary>
            Implements the binary '/' operator optimized for division of an integer literal.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>The result of type <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.</returns>
            <exception cref="T:PHP.Core.PhpException">Division is not supported on the types of operands specified.</exception>
            <exception cref="T:PHP.Core.PhpException">Division by zero.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Divide(System.Double,System.Object)">
            <summary>
            Implements the binary '/' operator optimized for division of a double literal.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <exception cref="T:PHP.Core.PhpException">Division is not supported on the types of operands specified.</exception>
            <exception cref="T:PHP.Core.PhpException">Division by zero.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Multiply(System.Object,System.Object)">
            <summary>
            Implements binary '*' operator.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>The result of type <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.</returns>
            <exception cref="T:PHP.Core.PhpException">The operator is not supported on the type of operand specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Multiply(System.Object,System.Int32)">
            <summary>
            Implements binary '*' operator optimized for multiplication with an integer literal.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>The result of type <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.</returns>
            <exception cref="T:PHP.Core.PhpException">The operator is not supported on the type of operand specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Multiply(System.Object,System.Double)">
            <summary>
            Implements binary '*' operator.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>The result.</returns>
            <exception cref="T:PHP.Core.PhpException">The operator is not supported on the type of operand specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Multiply(System.Double,System.Object)">
            <summary>
            Implements binary '*' operator.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>The result.</returns>
            <exception cref="T:PHP.Core.PhpException">The operator is not supported on the type of operand specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Remainder(System.Object,System.Object)">
            <summary>
            Implements binary % operator.
            </summary>
            <param name="x">The first operand of an arbitrary Phalanger type except for <see cref="T:PHP.Core.PhpArray"/> and <see cref="T:PHP.Core.Reflection.DObject"/>.</param>
            <param name="y">The second operand of an arbitrary Phalanger type except for <see cref="T:PHP.Core.PhpArray"/> and <see cref="T:PHP.Core.Reflection.DObject"/>.</param>
            <returns>The result.</returns>
            <remarks>
            Both operands are converted to integers by <see cref="M:PHP.Core.Convert.ObjectToInteger(System.Object)"/> and then the remainder is computed.
            </remarks>
            <exception cref="T:PHP.Core.PhpException">The operator is not supported on the type of operand specified.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Remainder(System.Object,System.Int32)">
            <summary>
            Implements binary '%' operator optimized for division by an integer literal.
            </summary>
            <param name="x">The first operand of an arbitrary Phalanger type except for <see cref="T:PHP.Core.PhpArray"/> and <see cref="T:PHP.Core.Reflection.DObject"/>.</param>
            <param name="y">The second operand of an arbitrary Phalanger type except for <see cref="T:PHP.Core.PhpArray"/> and <see cref="T:PHP.Core.Reflection.DObject"/>.</param>
            <returns>Both operands are converted to integers by <see cref="M:PHP.Core.Convert.ObjectToInteger(System.Object)"/> and then the remainder is computed.</returns>
            <exception cref="T:PHP.Core.PhpException">The operator is not supported on the type of operand specified.</exception>
            <exception cref="T:System.DivideByZeroException"><paramref name="y"/> is 0.</exception>
        </member>
        <member name="M:PHP.Core.Operators.Increment(System.Object)">
            <summary>
            Implements '++' unary operator.
            </summary>
            <param name="x">The operand.</param>
            <returns>
            The incremented value of type <see cref="T:System.Int32"/>, <see cref="T:System.Double"/> or <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:PHP.Core.PhpException">Incrementing is not supported on the type of operand specified. (Error)</exception>
            <remarks>
            Split to fast path (int32) and other types (<see cref="M:PHP.Core.Operators.IncrementNonInt(System.Object)"/>) to be small enough
            to be inlined by JIT.
            </remarks>
        </member>
        <member name="M:PHP.Core.Operators.IncrementNonInt(System.Object)">
            <summary>
            Increments an operand which is surely not <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Operators.Decrement(System.Object)">
            <summary>
            Implements '--' unary operator.
            </summary>
            <param name="x">The operand.</param>
            <returns>
            The incremented value of type <see cref="T:System.Int32"/>, <see cref="T:System.Double"/> or <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:PHP.Core.PhpException">Decrementing is not supported on the type of operand specified. (Error)</exception>
        </member>
        <member name="M:PHP.Core.Operators.DecrementString(System.String)">
            <summary>
            Decrements a string.
            </summary>
            <param name="s">The string to decrement.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:PHP.Core.Operators.BitOperation(System.Object,System.Object,PHP.Core.Operators.BitOp)">
            <summary>
            Performs bitwise binary operators.
            </summary>
            <param name="x">The first operand of an arbitrary PHP.NET type.</param>
            <param name="y">The sencond operand of an arbitrary PHP.NET type.</param>
            <param name="op">The type of the operation.</param>
            <returns>See the following table.</returns>
            <exception cref="T:System.ArgumentException">
            If the type of any operand is neither <see cref="T:System.String"/> nor <see cref="T:System.Byte"/>[] and it isn't convertible to an integer.
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.BitOperation(System.Byte[],System.Byte[],System.Byte[],PHP.Core.Operators.BitOp)">
            <summary>
            Performs specified binary operation on arrays of bytes.
            </summary>
            <param name="result">An array where to store the result. Data previously stored here will be overwritten.</param>
            <param name="x">The first operand.</param>
            <param name="y">The second operand</param>
            <param name="op">The operation to perform.</param>
            <returns>The reference to the the <paramref name="result"/> array.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="op"/> has invalid value.</exception>
        </member>
        <member name="M:PHP.Core.Operators.BitNot(System.Object)">
            <summary>
            Performs the '~' unary operator.
            </summary>
            <param name="x">The operand of type <see cref="T:System.Double"/>, <see cref="T:System.Int32"/>, <see cref="T:System.String"/> or <see cref="T:System.Byte"/>[].</param>
            <returns>See the following table.</returns>
            <remarks>
      <list type="table">
        <listheader>
          <term>The type of the <paramref name="x"/></term>
          <description>The action and the result</description>
        </listheader>
        <item>
          <term>
            <see cref="T:System.Int32"/>
          </term>
          <description>
            The standard ~ operator is applied on <paramref name="x"/> integer. The result is of type <see cref="T:System.Int32"/>.
          </description>
        </item>
        <item>
          <term>
            <see cref="T:System.Double"/>
          </term>
          <description>
            <paramref name="x"/> is converted to <see cref="T:System.Int32"/> and than the standard ~ operator is applied. 
            The result is of type <see cref="T:System.Int32"/>.
          </description>
        </item>
        <item>
          <term><see cref="T:System.Byte"/>[]</term>
          <description>
            The standard ~ operator is applied on each byte of that array. The result is of type <see cref="T:System.Byte"/>[].
          </description>
        </item>
        <item>
          <term>
            <see cref="T:System.String"/>
          </term>
          <description>
            <paramref name="x"/> is converted to <see cref="T:System.Byte"/>[] and standard ~ operator is applied on each 
            byte of that array. The result is of type <see cref="T:System.Byte"/>[].
          </description>
        </item>
      </list>
    </remarks>
            <exception cref="T:PHP.Core.PhpException">If <paramref name="x"/> has illegal type.</exception>
        </member>
        <member name="M:PHP.Core.Operators.ShiftLeft(System.Object,System.Object)">
            <summary>
            Performs shift left binary operation.
            </summary>
            <param name="x">The first argument of an arbitrary PHP.NET type.</param>
            <param name="y">The second argument of an arbitrary PHP.NET type.</param>
            <returns>The <paramref name="x"/> shifted by <paramref name="y"/> modulo 32 bits.</returns>
        </member>
        <member name="M:PHP.Core.Operators.ShiftRight(System.Object,System.Object)">
            <summary>
            Performs shift right binary operation.
            </summary>
            <param name="x">The first argument of an arbitrary PHP.NET type.</param>
            <param name="y">The second argument of an arbitrary PHP.NET type.</param>
            <returns>The <paramref name="x"/> shifted by <paramref name="y"/> modulo 32 bits.</returns>
        </member>
        <member name="M:PHP.Core.Operators.AsAnyString(System.Object)">
            <summary>
            Converts <paramref name="x"/> to most suitable PHP representation of string.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Operators.Concat(System.Object,System.Object)">
            <summary>
            Concatenates two strings or strings of bytes.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>A concatenation of the <paramref name="x"/> and <paramref name="y"/> (no copy needed).</returns>
        </member>
        <member name="M:PHP.Core.Operators.Concat(System.Object,System.String)">
            <summary>
            Concatenates strings or strings of bytes optimized for concatenation with a string.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>
            A concatenation of the <paramref name="x"/> and <paramref name="y"/> (no copy needed).
            </returns>
        </member>
        <member name="M:PHP.Core.Operators.Concat(System.String,System.Object)">
            <summary>
            Concatenates two strings or strings of bytes optimized for concatenation with a string.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>
            A concatenation of the <paramref name="x"/> and <paramref name="y"/> (no copy needed).
            </returns>
        </member>
        <member name="M:PHP.Core.Operators.Concat(System.Object[])">
            <summary>
            Concatenates objects contained in a specified array.
            </summary>
            <param name="args">An array of objects to concatenate.</param>
            <returns>
            If any of the arguments are of type <see cref="T:PHP.Core.PhpBytes"/> the result is also of type <see cref="T:PHP.Core.PhpBytes"/>, 
            otherwise each argument is converted to a string by <see cref="M:PHP.Core.Convert.ObjectToString(System.Object)"/> and 
            the result is a string.
            </returns>
        </member>
        <member name="M:PHP.Core.Operators.Append(System.Object,System.Object)">
            <summary>
            Concatenates two strings or strings of bytes.
            </summary>
            <param name="x">The first operand which will be appended to.</param>
            <param name="y">The second operand.</param>
            <returns>
            A single-referenced concatenation of the <paramref name="x"/> and <paramref name="y"/> (no copy needed).
            </returns>
        </member>
        <member name="M:PHP.Core.Operators.Append(System.Object,System.String)">
            <summary>
            Concatenates two strings or strings of bytes optimized for concatenation with a string.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>
            The single-referenced concatenation of the <paramref name="x"/> and <paramref name="y"/> (no copy needed).
            </returns>
        </member>
        <member name="M:PHP.Core.Operators.Prepend(System.Object,System.Object)">
            <summary>
            Prepends one value with the other.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>
            A single-referenced concatenation of the <paramref name="y"/> and <paramref name="x"/> (no copy needed).
            </returns>
        </member>
        <member name="M:PHP.Core.Operators.Prepend(System.Object,System.String)">
            <summary>
            Prepends one value with the other.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>
            The single-referenced concatenation of the <paramref name="y"/> and <paramref name="x"/> (no copy needed).
            </returns>
        </member>
        <member name="M:PHP.Core.Operators.IsEmptyForEnsure(System.Object)">
            <summary>
            Decides whether a variable is empty i.e. should be replaced by new array or object.
            </summary>
            <remarks>
            A variable is considered to be empty for ensure routines and item and property operators if 
            it is either <B>null</B> reference, an empty string, an empty string of bytes,
            <B>false</B>, 0 or 0.0 (PHP5 treats 0 and 0.0 as non-empty-for-ensure but it will probably change).
            </remarks>
        </member>
        <member name="M:PHP.Core.Operators.IsCallable(System.Object,PHP.Core.Reflection.DTypeDesc,System.Boolean)">
            <summary>
            Verifies that the contents of a variable can be called as a function.
            </summary>
            <param name="caller">Current class context.</param>
            <param name="variable">The variable.</param>
            <param name="syntaxOnly">If <B>true</B>, it is only checked that has <pararef name="variable"/>
            a valid structure to be used as a callback. if <B>false</B>, the existence of the function (or
            method) is also verified.</param>
            <returns><B>true</B> if <paramref name="variable"/> denotes a function, <B>false</B>
            otherwise.</returns>
        </member>
        <member name="M:PHP.Core.Operators.GetItem(System.Object,System.Object,PHP.Core.Operators.GetItemKinds)">
            <summary>
            Gets an item of an array or a character of a string. Used in the read context chain.
            </summary>
            <param name="var">The variable which item to get.</param>
            <param name="key">The index of the item.</param>
            <param name="kind">The kind of operator.</param>
            <returns>The item.</returns>
            <remarks><para>Pattern: ... = var[index]</para></remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is a string and <paramref name="key"/> is negative integer (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is an array and <paramref name="key"/> is an illegal (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is an array and <paramref name="key"/> is not contained in it (Notice).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is a string and <paramref name="key"/> is greater or equal to its length (Notice).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is an <see cref="T:PHP.Core.Reflection.DObject"/> (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is a scalar (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is empty (Notice).</exception>
            <remarks>
      <list type="table">
        <listheader>
          <term>Actual type of <paramref name="var"/></term>
          <term>Action</term>
        </listheader>
        <item>
          <term><see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/></term>
          <description>
            The <paramref name="key"/> is converted to an integer by <see cref="M:PHP.Core.Convert.ObjectToInteger(System.Object)"/>.
            If the result of the conversion is negative or points beyond the last character/byte of the <paramref name="var"/>
            the <B>null</B> is returned (this is slightly different behavior from the PHP but more consistent
            paying attention to the "isset" PHP function implementation).
            Otherwise, the <paramref name="key"/>-th character and byte is wrapped into a new string and <see cref="T:PHP.Core.PhpBytes"/>
            instance, respectively, and returned.
          </description>
        </item>
        <item>
          <term><see cref="T:PHP.Core.PhpArray"/></term>
          <description>
            The value associated with <paramref name="key"/> is returned.
          </description>
        </item>
        <item>
          <term><see cref="T:PHP.Core.PhpObject"/></term>
          <description>
            It is a fatal error to apply the operator to an instance of <see cref="T:PHP.Core.PhpObject"/>.
          </description>
        </item>
        <item>
          <term>otherwise</term>
          <description>
            <B>null</B> is returned.
          </description>
        </item>
      </list>
    </remarks>
        </member>
        <member name="M:PHP.Core.Operators.GetItemRef(System.Object@)">
            <summary>
            Adds a new reference item to the array. 
            Implements key-less [] operator applied on a variable in read reference context.
            </summary>
            <param name="var">The variable.</param>
            <returns>The new reference item added to the array.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is neither <see cref="T:PHP.Core.PhpArray"/> nor empty (Error).</exception>
        </member>
        <member name="M:PHP.Core.Operators.GetItemRef(System.Object,System.Object@)">
            <summary>
            Retrieves a reference on keyed item of an array.
            </summary>
            <param name="var">The variable.</param>
            <param name="key">The index.</param>
            <returns>The reference.</returns>
            <remarks>
            <para>Retrieves an instance of <see cref="T:PHP.Core.PhpReference"/> which is an item of the array.
            If respective item doesn't exist or is empty in a meaning of <see cref="M:PHP.Core.Operators.IsEmptyForEnsure(System.Object)"/> 
            a new instance of <see cref="T:PHP.Core.PhpReference"/> is created in its place.</para>
            <para>Pattern: ... =&amp; var[index]</para></remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is neither <see cref="T:PHP.Core.PhpArray"/> nor empty (Error).</exception>
        </member>
        <member name="M:PHP.Core.Operators.SetItem(System.Object,System.Object@)">
            <summary>
            Adds a new item (value or reference) to an array or sets a character of a string.
            </summary>
            <param name="var">The array.</param>
            <param name="value">The value or reference of added item.</param>
            <remarks>
            <para>Patterns: var[] = value, var[] =&amp; value</para>
            <para>If <paramref name="var"/> is empty in a meaning of <see cref="M:PHP.Core.Operators.IsEmptyForEnsure(System.Object)"/> 
            its value is replaced by a new instance of <see cref="T:PHP.Core.PhpArray"/>.</para>
            </remarks>
            <exception cref="T:PHP.Core.PhpException">A new key cannot be generated because it reached maximal value (<see cref="F:System.Int32.MaxValue"/>).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is neither <see cref="T:PHP.Core.PhpArray"/> nor empty (Error).</exception>
        </member>
        <member name="M:PHP.Core.Operators.SetItem(System.Object,System.Object,System.Object@)">
            <summary>
            Sets an item of an array or a character of a string.
            </summary>
            <param name="var">The variable whose item to set.</param>
            <param name="key">The index of the item.</param>
            <param name="value">The new value of item.</param>
            <remarks>
            <para>Pattern: var[index] = value, var{index} = value.</para>
            <para>If <paramref name="var"/> is empty in a meaning of <see cref="M:PHP.Core.Operators.IsEmptyForEnsure(System.Object)"/> 
            its value is replaced by a new instance of <see cref="T:PHP.Core.PhpArray"/>.</para>
            </remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is <see cref="T:PHP.Core.Reflection.DObject"/> (Error).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is a scalar (Error).</exception>
        </member>
        <member name="M:PHP.Core.Operators.SetStringItem(PHP.Core.PhpString,System.Int32,System.Object)">
            <summary>
            Implements oprators [],{} on a string.
            </summary>
            <param name="str">The string builder which character to set.</param>
            <param name="index">The index of an item.</param>
            <param name="value">The new value of an item.</param>
            <exception cref="T:PHP.Core.PhpException"><paramref name="index"/> converted to integer by <see cref="M:PHP.Core.Convert.ObjectToInteger(System.Object)"/> is negative. (Warning)</exception>
            <remarks>
      <para>The <paramref name="index"/> is converted to an integer by <see cref="M:PHP.Core.Convert.ObjectToInteger(System.Object)"/>.
      If the resulting index is greater than the length of the <paramref name="str"/> string then the 
      empty space between the last character of the <paramref name="str"/> and such index is filled by spaces.</para>
      <para><paramref name="value"/> is converted to a string by <see cref="M:PHP.Core.Convert.ObjectToString(System.Object)"/>.
      The <paramref name="index"/>-th character is set to the first character of that conversion result
      or the '\0' character if the conversion leads to an empty string.</para>
    </remarks>
        </member>
        <member name="M:PHP.Core.Operators.SetBytesItem(PHP.Core.PhpBytes,System.Int32,System.Object)">
            <summary>
            Implements oprators [],{} on a byte array.
            </summary>
            <param name="bytes">The variable which item to set.</param>
            <param name="index">The index of an item.</param>
            <param name="value">The new value of an item.</param>
            <exception cref="T:PHP.Core.PhpException"><paramref name="index"/> converted to integer by <see cref="M:PHP.Core.Convert.ObjectToInteger(System.Object)"/> is negative. (Warning)</exception>
            <remarks>
      <para><paramref name="value"/> is converted to a bytes array via the current <see cref="T:System.Text.Encoding"/>.
      The new byte which is an item set to is the first byte of the result of that conversion
      or the 0 byte if the conversion leads to an empty array.</para>
      <para>The <paramref name="index"/> is converted to an integer by <see cref="M:PHP.Core.Convert.ObjectToInteger(System.Object)"/>.
      If the resulting index is greater than the length of the <paramref name="bytes"/> array then the 
      empty space between the last byte of the <paramref name="bytes"/> and such index is filled by 0x20 bytes.</para>
    </remarks>
        </member>
        <member name="M:PHP.Core.Operators.SetItemRef(PHP.Core.PhpReference,System.Object,System.Object@)">
            <summary>
            Sets a reference keyed item of an array.
            </summary>
            <param name="var">The variable.</param>
            <param name="key">The index.</param>
            <param name="value">The reference to be assigned to the item.</param>
            <remarks>
            <para>Pattern: var[index] =&amp; value</para>
            <para>If <paramref name="var"/> is empty in a meaning of <see cref="M:PHP.Core.Operators.IsEmptyForEnsure(System.Object)"/> 
            its value is replaced by a new instance of <see cref="T:PHP.Core.PhpArray"/>.</para>
            <para>This method provides no more functionality than <see cref="M:PHP.Core.Operators.SetItem(System.Object,System.Object@)"/> for arrays.
            However, if applied on strings its behavior is different.</para>
            </remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is neither <see cref="T:PHP.Core.PhpArray"/> nor empty (Error).</exception>
        </member>
        <member name="M:PHP.Core.Operators.UnsetItem(System.Object,System.Object)">
            <summary>
            Implements <c>unset</c> construct used along with [] operator.
            </summary>
            <param name="var">The object which item to unset.</param>
            <param name="index">The index of an item ot unset.</param>
            <remarks>
            <para>Pattern: unset(var[index])</para>
            <para>
            If <paramref name="var"/> is of type <see cref="T:PHP.Core.PhpArray"/> then the <paramref name="index"/>
            is converted to array key by <see cref="M:PHP.Core.Convert.ObjectToArrayKey(System.Object,PHP.Core.IntStringKey@)"/> and an entry with such key is 
            removed from the <paramref name="var"/> array.
            </para>
            </remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is <see cref="T:PHP.Core.PhpArray"/> and <paramref name="index"/> is an illegal array key (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is <see cref="T:System.String"/> or <see cref="T:PHP.Core.Reflection.DObject"/> (Error).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is neither <see cref="T:System.String"/> nor <see cref="T:PHP.Core.Reflection.DObject"/> nor <see cref="T:PHP.Core.PhpArray"/> (Notice).</exception>
        </member>
        <member name="M:PHP.Core.Operators.EnsureVariableIsArray(System.Object@)">
            <summary>
            Ensures specified variable is an instance of <see cref="T:PHP.Core.PhpArray"/>. 
            </summary>
            <param name="var">The variable which should be an array.</param>
            <returns>The <paramref name="var"/>, its new value or <b>null</b> on error.</returns>
            <remarks>A new instance of <see cref="T:PHP.Core.PhpArray"/> is assigned to the item if it is empty in a meaning of <see cref="M:PHP.Core.Operators.IsEmptyForEnsure(System.Object)"/>.</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is neither <see cref="T:PHP.Core.PhpArray"/> nor empty (Error).</exception>
        </member>
        <member name="M:PHP.Core.Operators.EnsureVariableIsObject(System.Object@,PHP.Core.ScriptContext)">
            <summary>
            Ensures that a variable is an instance of <see cref="T:PHP.Core.Reflection.DObject"/>.
            </summary>
            <param name="var">Address of the variable to check.</param>
            <param name="context">The <see cref="T:PHP.Core.ScriptContext"/> in which potential new object will be created.</param>
            <returns>The <paramref name="var"/>, its new value or <B>null</B> on error.</returns>
            <remarks>A new instance of <see cref="T:PHP.Library.stdClass"/> is assigned to the item if it is empty in a meaning of <see cref="M:PHP.Core.Operators.IsEmptyForEnsure(System.Object)"/>.</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is neither <see cref="T:PHP.Core.Reflection.DObject"/> nor empty (Error).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is empty and new <see cref="T:PHP.Library.stdClass"/> instance is created (Strict).</exception>
        </member>
        <member name="M:PHP.Core.Operators.EnsureItemIsArraySimple(PHP.Core.PhpArray,System.String)">
            <summary>
            Ensures a specified array item is an instance of <see cref="T:PHP.Core.PhpArray"/>. 
            </summary>
            <param name="array">The <see cref="T:PHP.Core.PhpArray"/> which item should be an array.</param>
            <param name="key">The key identifying which item should be an array.</param>
            <remarks>
            A new instance of <see cref="T:PHP.Core.PhpArray"/> is assigned to the item if it is not an array yet.
            Array is expected to contain no <see cref="T:PHP.Core.PhpReference"/>.
            Treats empty key as a missing key.
            </remarks>
        </member>
        <member name="M:PHP.Core.Operators.EnsurePropertyIsArrayInternal(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc,System.Object@)">
            <summary>
            Ensures that a property value is of <see cref="T:PHP.Core.PhpArray"/> type.
            </summary>
            <param name="obj">The object whose property is to be checked.</param>
            <param name="name">The property name.</param>
            <param name="caller"><see cref="T:System.Type"/> of the object that request the operation.</param>
            <param name="propValue">The property value (might get updated).</param>
            <returns>The new property value (dereferenced) or <B>null</B> if evaluation of this compound
            statement should not proceed.</returns>
        </member>
        <member name="M:PHP.Core.Operators.EnsurePropertyIsArray(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Ensures that an instance property is of <see cref="T:PHP.Core.PhpArray"/> type.
            </summary>
            <param name="obj">The object whose property is to be checked.</param>
            <param name="name">The property name.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that request the operation.</param>
            <returns>The new value of the <paramref name="name"/> property or <B>null</B> if evaluation of this compound
            statement should not proceed.</returns>
            <remarks>PHP also allows <B>false</B> to be converted to an empty <see cref="T:PHP.Core.PhpArray"/> but we consider this behavior
            to be inconsistent.</remarks>
            <exception cref="T:PHP.Core.PhpException">The property is neither <see cref="T:PHP.Core.PhpArray"/> nor empty (Error).</exception>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
            <exception cref="T:PHP.Core.PhpException">The property is undefined and <c>__get</c> or <c>__set</c> exists in <paramref name="obj"/>
            (Error).</exception>
        </member>
        <member name="M:PHP.Core.Operators.EnsurePropertyIsObjectInternal(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc,System.Object@,PHP.Core.ScriptContext)">
            <summary>
            Ensures that a property value is of <see cref="T:PHP.Core.Reflection.DObject"/> type.
            </summary>
            <param name="obj">The object whose property is to be checked.</param>
            <param name="name">The property name.</param>
            <param name="caller"><see cref="T:System.Type"/> of the object that request the operation.</param>
            <param name="propValue">The property value (might get updated).</param>
            <param name="context">The current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The new property value (dereferenced) or <B>null</B> if evaluation of this compound
            statement should not proceed.</returns>
        </member>
        <member name="M:PHP.Core.Operators.EnsurePropertyIsObject(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Ensures that an instance property is of <see cref="T:PHP.Core.Reflection.DObject"/> type.
            </summary>
            <param name="obj">The object whose property is to be checked.</param>
            <param name="name">The property name.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that requests the operation.</param>
            <param name="context">The context in which a new instance of <see cref="T:PHP.Library.stdClass"/> is possibly created.</param>
            <returns>The new value of the <paramref name="name"/> property or <B>null</B> if evaluation of this
            compound statement should not proceed.</returns>
            <remarks>PHP also allows <B>false</B> to be converted to an empty <see cref="T:PHP.Library.stdClass"/> but we consider
            this behavior to be inconsistent.</remarks>
            <exception cref="T:PHP.Core.PhpException">The property is neither <see cref="T:PHP.Core.Reflection.DObject"/> nor empty (Error).
            </exception>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
            <exception cref="T:PHP.Core.PhpException">The property is undefined and <c>__get</c> or <c>__set</c> exists in <paramref name="obj"/>
            (Error).</exception>
            <exception cref="T:PHP.Core.PhpException">The property is empty and new <see cref="T:PHP.Library.stdClass"/> instance is created (Strict).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.EnsureStaticPropertyIsArray(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Ensures that a static property is of <see cref="T:PHP.Core.PhpArray"/> type.
            </summary>
            <param name="type">Represents the type whose property is to be checked.</param>
            <param name="propertyName">The property name.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that request the operation.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The new value of the <paramref name="propertyName"/> property or <B>null</B> if evaluation of this compound
            statement should not proceed.</returns>
            <remarks>PHP also allows <B>false</B> to be converted to an empty <see cref="T:PHP.Core.PhpArray"/> but we consider this behavior
            to be inconsistent.</remarks>
            <exception cref="T:PHP.Core.PhpException">The property denoted by <paramref name="propertyName"/> was not found. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The property is neither <see cref="T:PHP.Core.PhpArray"/> nor empty (Error).</exception>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.EnsureStaticPropertyIsObject(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Ensures that a static property is of <see cref="T:PHP.Core.Reflection.DObject"/> type.
            </summary>
            <param name="type">Represents the type whose property is to be checked.</param>
            <param name="propertyName">The property name.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that request the operation.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The new value of the <paramref name="propertyName"/> property or <B>null</B> if evaluation of this compound
            statement should not proceed.</returns>
            <remarks>PHP also allows <B>false</B> to be converted to an empty <see cref="T:PHP.Library.stdClass"/> but we consider this
            behavior to be inconsistent.</remarks>
            <exception cref="T:PHP.Core.PhpException">The property denoted by <paramref name="propertyName"/> was not found. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The property is neither <see cref="T:PHP.Core.Reflection.DObject"/> nor empty (Error).</exception>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.EnsureObjectIsArray(System.Object,System.Object@)">
            <summary>
            Wraps <c>null</c>, <see cref="T:System.String"/>, <see cref="T:PHP.Core.PhpString"/>, <see cref="T:PHP.Core.PhpBytes"/>, <c>EmptyForEnsure</c> and others into an instance assignable to <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
            <param name="obj">An object which has to be accessed as <see cref="T:PHP.Core.PhpArray"/>.</param>
            <param name="convertedobj">In case <paramref name="obj"/> was converted (upgraded, e.g. from read-only to read/write), contains an instance of new object.
            Can be <c>null</c> reference if <paramref name="obj"/> was not changed.</param>
            <remarks>Note <c>null</c> reference is converted to new instance of <see cref="T:PHP.Core.PhpArray"/>.</remarks>
        </member>
        <member name="M:PHP.Core.Operators.EnsureObjectIsWritable(System.Object)">
            <summary>
            Ensures the object is writeable,
            and so not shared by more PHP variables.
            </summary>
        </member>
        <member name="M:PHP.Core.Operators.GetProperty(System.Object,System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean)">
            <summary>
            Gets the value of an instance property of an object.
            </summary>
            <param name="var">The variable to get the property of.</param>
            <param name="name">The property name.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that request the retrieval.</param>
            <param name="quiet">Disables notices reporting. Used for implementation of <c>isset</c> operator.</param>
            <returns>The value of the instance property.</returns>
            <exception cref="T:PHP.Core.PhpReference">If <paramref name="var"/> is not an instance of <see cref="T:PHP.Core.Reflection.DObject"/> (Notice).</exception>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is empty (Notice).</exception>
        </member>
        <member name="M:PHP.Core.Operators.GetPropertyRef(System.Object@,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Retrieves a reference on a property of an object.
            </summary>
            <param name="var">The variable to get the property of.</param>
            <param name="name">The property name.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that requests the operation.</param>
            <param name="context">The context in which a new instance of <see cref="T:PHP.Library.stdClass"/> is possibly created.</param>
            <returns>The reference.</returns>
            <remarks>Retrieves the instance of <see cref="T:PHP.Core.PhpReference"/> which is the property of a <see cref="T:PHP.Core.Reflection.DObject"/>
            if already exists and is of type <see cref="T:PHP.Core.PhpReference"/>, otherwise replaces the property by a new
            instance of <see cref="T:PHP.Core.PhpReference"/> referencing the original property.</remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is neither <see cref="T:PHP.Core.Reflection.DObject"/> nor empty (Error).</exception>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
            <exception cref="T:PHP.Core.PhpException">The property is undefined and <c>__get</c> or <c>__set</c> exists in <paramref name="var"/>
            (Error).</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is empty and a new <see cref="T:PHP.Library.stdClass"/> instance is
            created (Strict).</exception>
        </member>
        <member name="M:PHP.Core.Operators.GetObjectProperty(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean)">
            <summary>
            Gets the value of an instance property of an object.
            </summary>
            <param name="obj">The object.</param>
            <param name="name">The property name.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that request the retrieval.</param>
            <param name="quiet">Disables reporting errors. Used for implementation of <c>isset</c> operator.</param>
            <returns>The value of the instance property (eventual <see cref="T:PHP.Core.PhpReference"/> is dereferenced).</returns>
            <remarks>Assumes that <paramref name="obj"/> is not null.</remarks>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.GetObjectPropertyRef(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Retrieves a reference on a property of an object.
            </summary>
            <param name="obj">The object to get the property of.</param>
            <param name="name">The property name.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that requests the operation.</param>
            <returns>The reference.</returns>
            <remarks>Assumes that <paramref name="obj"/> is not null.</remarks>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.SetProperty(System.Object,System.Object@,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Sets the value of an instance property of an object.
            </summary>
            <param name="var">The variable to set the property of.</param>
            <param name="name">The property name.</param>
            <param name="value">The new property value (can be a <see cref="T:PHP.Core.PhpReference"/>).</param>
            <param name="context">The context in which a new instance of <see cref="T:PHP.Library.stdClass"/> is possibly created.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that requests the operation.</param>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is neither <see cref="T:PHP.Core.Reflection.DObject"/> nor empty (Error).</exception>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="var"/> is empty and new <see cref="T:PHP.Library.stdClass"/> instance is created
            (Strict).</exception>
        </member>
        <member name="M:PHP.Core.Operators.SetObjectProperty(PHP.Core.Reflection.DObject,System.String,System.Object,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Sets the value of an instance property of an object.
            </summary>
            <param name="obj">The object.</param>
            <param name="name">The property name.</param>
            <param name="value">The new property value (can be a <see cref="T:PHP.Core.PhpReference"/>).</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that requests the operation.</param>
            <remarks>Assumes that <paramref name="obj"/> is not null.</remarks>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.UnsetProperty(System.Object,System.String,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Unsets an instance property.
            </summary>
            <param name="x">The variable to unset the property of.</param>
            <param name="name">The property name.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that requests the operation.</param>
            <remarks><para>Pattern: unset(x-&gt;name)</para></remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="x"/> is non-null and is not <see cref="T:PHP.Core.Reflection.DObject"/> (Error).
            </exception>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.InvokeMethod(System.Object,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Performs the "instance style" invocation (<c>$x-&gt;f()</c>) of a method.
            </summary>
            <param name="x">The object to invoke the method on.</param>
            <param name="methodName">The name of the method.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that request the invocation.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The method's return value (always a <see cref="T:PHP.Core.PhpReference"/>).</returns>
            <remarks>
            Invokes both <c>instance</c> and <c>static</c> methods on a given object.
            </remarks>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="methodName"/> is not a string. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="x"/> is not an instance of <see cref="T:PHP.Core.Reflection.DObject"/>. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The method is inaccessible due to its protected or private visibility level (Error).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.InvokeMethod(System.Object,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Performs the "instance style" invocation (<c>$x-&gt;f()</c>) of a method (optimized version to be used
            when the name is surely a string).
            </summary>
            <param name="x">The object to invoke the method on.</param>
            <param name="methodName">The name of the method.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that request the invocation.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The method's return value (always a <see cref="T:PHP.Core.PhpReference"/>).</returns>
            <remarks>
            Invokes both <c>instance</c> and <c>static</c> methods on a given object.
            </remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="x"/> is not an instance of <see cref="T:PHP.Core.Reflection.DObject"/>. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The method is inaccessible due to its protected or private visibility level (Error).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.Clone(System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Implementation of the <c>clone</c> operator.
            </summary>
            <param name="x">The object to clone.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that requests the operation.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The clone or <B>null</B> on an error.</returns>
            <exception cref="T:PHP.Core.PhpException">If <paramref name="x"/> is not an instance of <see cref="T:PHP.Core.Reflection.DObject"/>. (Warning)</exception>
        </member>
        <member name="M:PHP.Core.Operators.GetClassConstant(PHP.Core.Reflection.DTypeDesc,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Gets the value of a constant of a class or interface.
            </summary>
            <param name="type">Represents the type to get the constant of.</param>
            <param name="constantName">The constant name</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that request the access.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The value of the constant.</returns>
            <remarks>
            Note that this operator is used only when it is impossible to resolve the constant at
            compile time. Otherwise, the appropriate direct access IL instructions are directly emitted.
            </remarks>
            <exception cref="T:PHP.Core.PhpException">The constant denoted by <paramref name="constantName"/> was not found. (Error)</exception>
        </member>
        <member name="M:PHP.Core.Operators.GetStaticPropertyDesc(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Gets the <see cref="T:PHP.Core.Reflection.DPropertyDesc"/> of a static property of a class.
            </summary>
            <param name="type">The class to get the property of.</param>
            <param name="propertyName">The property name.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that request the retrieval.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="quiet">If <B>true</B>, the "property not found" exception should not be thrown.</param>
            <returns>The <see cref="T:PHP.Core.Reflection.DPropertyDesc"/> representing the static property or <B>null</B> if an error occurs.</returns>
            <exception cref="T:PHP.Core.PhpException">The property denoted by <paramref name="propertyName"/> was not found. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.GetStaticProperty(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Gets the value of a static property of a class.
            </summary>
            <param name="type">Represents the type to get the property of.</param>
            <param name="propertyName">The property name.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that request the retrieval.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="quiet">If <B>true</B>, the "property not found" exception should not be thrown.</param>
            <returns>The value of the static property.</returns>
            <remarks>
            Note that this operator is used only when it is impossible to resolve the property or the calling type desc at
            compile time. Otherwise, appropriate IL instructions that access the property directly are emitted.
            </remarks>
            <exception cref="T:PHP.Core.PhpException">The property denoted by <paramref name="propertyName"/> was not found. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.GetStaticPropertyRef(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Retrieves a reference to a static property of a class.
            </summary>
            <param name="type">Represents the type to get the property of.</param>
            <param name="propertyName">The property name.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that requests the operation.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The reference.</returns>
            <remarks>
            Note that this operator is used only when it is impossible to resolve the property or the calling type desc at
            compile time. Otherwise, appropriate IL instructions that access the property directly are emitted.
            </remarks>
            <exception cref="T:PHP.Core.PhpException">The property denoted by <paramref name="propertyName"/> was not found. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.SetStaticProperty(PHP.Core.Reflection.DTypeDesc,System.Object,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Sets the value of a static property of a class.
            </summary>
            <param name="type">Represents the type to set the property of.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The new property value (can be a <see cref="T:PHP.Core.PhpReference"/>).</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that requests the operation.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <remarks>
            Note that this operator is used only when it is impossible to resolve the property or the calling type desc at
            compile time. Otherwise, appropriate IL instructions that access the property directly are emitted.
            </remarks>
            <exception cref="T:PHP.Core.PhpException">The property denoted by <paramref name="propertyName"/> was not found. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The property is inaccessible due to its protected or private visibility level (Error).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.UnsetStaticProperty(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Throws the "Attempt to unset static property" error.
            </summary>
            <param name="type">Represents the type to "unset" the property of.</param>
            <param name="propertyName">The property name.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that requests the operation.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <remarks>
            Note that this operator is used only when it is impossible to resolve the property or the calling type desc at
            compile time. Otherwise, the error throwing code is directly emitted.
            </remarks>
            <exception cref="T:PHP.Core.PhpException">Static properties cannot be unset (Error).</exception>
        </member>
        <member name="M:PHP.Core.Operators.GetStaticMethodDesc(PHP.Core.Reflection.DTypeDesc,System.String,PHP.Core.Reflection.DObject@,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Attemps to find a method desc according to a given class name and method name. Used when
            a non-virtual dispatch is about to be performed and when a <c>array(class, method)</c>
            callback is being bound.
            </summary>
            <param name="requestedType">The type whose method should be returned.</param>
            <param name="methodName">The method name.</param>
            <param name="self">Current <c>$this</c>. Will be set to an instance, on which the resulting
            CLR method should be invoked (<B>null</B> if the CLR method is static).</param>
            <param name="caller"><see cref="T:System.Type"/> of the object that request the lookup.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="quiet">If <B>true</B>, no exceptions will be thrown if an error occurs.</param>
            <param name="removeFrame">If <B>true</B>, <see cref="M:PHP.Core.PhpStack.RemoveFrame"/> will be called
            before throwing an exception.</param>
            <param name="isCallerMethod">Will be set to true, if required method was not found but __callStatic was.</param>
            <returns>The <see cref="T:PHP.Core.Reflection.DRoutineDesc"/> or <B>null</B> on error.</returns>
        </member>
        <member name="M:PHP.Core.Operators.InvokeStaticMethod(PHP.Core.Reflection.DTypeDesc,System.Object,PHP.Core.Reflection.DObject,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Performs the "static style" invocation (<c>A::f()</c>) of a method.
            </summary>
            <param name="type"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> representing the type to invoke the method on.</param>
            <param name="methodName">The method name.</param>
            <param name="self">Current object context. If an instance method is invoked in another instance method statically,
            it is passed current <c>$this</c> and no notice is thrown.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that request the invocation. Should not be unknown.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The method's return value (always a <see cref="T:PHP.Core.PhpReference"/>).</returns>
            <remarks>
            Note that this operator is used only when it is impossible to resolve the method or the calling type desc at
            compile time. Otherwise, the <c>OpCodes.Call</c> IL instruction is directly emitted.
            </remarks>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="methodName"/> is not a string. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The method denoted by <paramref name="methodName"/> was not found. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The method is inaccessible due to its protected or private visibility level (Error).
            </exception>
            <exception cref="T:PHP.Core.PhpException">The method is abstract (Error).</exception>
            <exception cref="T:PHP.Core.PhpException">The method is not static (Error or Strict).</exception>
        </member>
        <member name="M:PHP.Core.Operators.New(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,PHP.Core.NamingContext)">
            <summary>
            Creates a new instance of a given type.
            </summary>
            <param name="type"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> representing the type to instantiate.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that requests the instantiation.
            </param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="nameContext">Current <see cref="T:PHP.Core.NamingContext"/>.</param>
            <returns>The new instance or <B>null</B> if an error occurs.</returns>
            <remarks>
            <para>
            This operator expects that constructor parameters have been pushed onto <see cref="F:PHP.Core.ScriptContext.Stack"/>.
            </para>
            <para>
            Note that this operator is used only when it is impossible to resolve the class at compile time. Otherwise,
            the <c>OpCodes.Newobj</c> IL instruction is directly emitted.
            </para>
            </remarks>
            <exception cref="T:PHP.Core.PhpException"><paramref name="type"/> denotes an interface. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException"><paramref name="type"/> denotes an abstract class. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">A constructor is inaccessible due to its protected or private visibility level (Error).
            </exception>
        </member>
        <member name="M:PHP.Core.Operators.NewClr(PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Creates a new instance of a given CLR type.
            </summary>
            <param name="clrType"><see cref="T:PHP.Core.Reflection.ClrTypeDesc"/> representing the type to instantiate.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The new instance or <B>null</B> if an error occurs.</returns>
        </member>
        <member name="M:PHP.Core.Operators.InstanceOf(System.Object,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Determines whether a variable is an instance of a given type.
            </summary>
            <param name="var">The variable to check.</param>
            <param name="type"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> representing the given type.</param>
            <returns><B>true</B> if <paramref name="var"/> is an instance of a class or interface given by
            <paramref name="type"/>, <B>false</B> otherwise.</returns>
            <remarks>
            Note that this operator is used only when it is impossible to resolve the class at compile time. Otherwise,
            the <c>OpCodes.Isinst</c> IL instruction is directly emitted.
            </remarks>
        </member>
        <member name="M:PHP.Core.Operators.GetFullyQualifiedName(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Gets fully qualified class name.
            </summary>
        </member>
        <member name="M:PHP.Core.Operators.StrictEquality(System.Object,System.Object)">
            <summary>
            Compares two objects for strict equality in a manner of the PHP.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns>Whether the values and types of operands are the same.</returns>
        </member>
        <member name="M:PHP.Core.Operators.StrictEmptyPhpArrayEquality(System.Object)">
            <summary>
            Compares given object for strict equality with empty PHP array.
            </summary>
            <param name="x">Object to compare.</param>
            <returns>Whether <paramref name="x"/> is an empty PHP array.</returns>
        </member>
        <member name="M:PHP.Core.Operators.StrictEmptyPhpArrayEquality(PHP.Core.PhpArray)">
            <summary>
            Compares given array for strict equality with empty PHP array.
            </summary>
            <param name="x">Object to compare.</param>
            <returns>Whether <paramref name="x"/> is an empty PHP array.</returns>
        </member>
        <member name="M:PHP.Core.Operators.Throw(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Throws an exception.
            </summary>
            <param name="context">A script context.</param>
            <param name="variable">An object representing the exception to throw.</param>
            <exception cref="T:PHP.Core.PhpException"><paramref name="variable"/> is not valid exception object (Error).</exception>
            <exception cref="T:PHP.Core.PhpUserException">The required exception thrown.</exception>
        </member>
        <member name="M:PHP.Core.Operators.ToAbsoluteSourcePath(System.SByte,System.String)">
            <summary>
            Converts relative path to absolute using source root. For internal use only.
            </summary>
        </member>
        <member name="T:PHP.Core.Operators.BitOp">
            <summary>
            Type of bitwise operation.
            </summary>
        </member>
        <member name="F:PHP.Core.Operators.BitOp.And">
            <summary>Bitwise and binary operation.</summary>
        </member>
        <member name="F:PHP.Core.Operators.BitOp.Or">
            <summary>Bitwise or binary operation.</summary>
        </member>
        <member name="F:PHP.Core.Operators.BitOp.Xor">
            <summary>Bitwise xor binary operation.</summary>
        </member>
        <member name="T:PHP.Core.Operators.GetItemKinds">
            <summary>
            Kinds of <see cref="M:PHP.Core.Operators.GetItem(System.Object,System.Object,PHP.Core.Operators.GetItemKinds)"/> operator.
            </summary>
        </member>
        <member name="F:PHP.Core.Operators.GetItemKinds.Get">
            <summary>Item getter with notice reporting.</summary>
        </member>
        <member name="F:PHP.Core.Operators.GetItemKinds.QuietGet">
            <summary>Quite item getter.</summary>
        </member>
        <member name="F:PHP.Core.Operators.GetItemKinds.Isset">
            <summary>Item is loaded to be checked by "isset".</summary>
        </member>
        <member name="F:PHP.Core.Operators.GetItemKinds.Empty">
            <summary>Item is loaded to be checked by "empty".</summary>
        </member>
        <member name="T:PHP.Core.BufferedOutput">
            <summary>
            Provides output buffering functionality. 
            </summary>
        </member>
        <member name="F:PHP.Core.BufferedOutput.minBufferSize">
            <summary>
            Minimal sizes of buffers. 
            </summary>
        </member>
        <member name="M:PHP.Core.BufferedOutput.#ctor(System.Boolean,System.IO.TextWriter,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates buffered output with specified sinks.
            </summary>
            <param name="enableBuffering">Whether to immediately enable buffering, i.e. increase the level.</param>
            <param name="charSink">A writer through which character data will be written.</param>
            <param name="byteSink">A stream through which binary data will be written.</param>
            <param name="encoding">A encoding used to transform binary data to strings.</param>
        </member>
        <member name="M:PHP.Core.BufferedOutput.#ctor">
            <summary>
            Creates an instance of <see cref="T:PHP.Core.BufferedOutput"/> having enabled buffering and with sinks set to null sinks.
            </summary>
        </member>
        <member name="M:PHP.Core.BufferedOutput.AllocateBuffer(System.Int32,System.Boolean,System.Array@,System.Int32@)">
            <summary>
            Gets a buffer where data of requested size and type can be stored. 
            </summary>
            <param name="sizeNeeded">The number of characters or bytes to be allocated.</param>
            <param name="binary">Whether allocated data are bytes or chars.</param>
            <param name="buffer">Returns the buffer where data can be written to.</param>
            <param name="position">Returns the position where data can be written on.</param>
            <returns>The number of allocated characters or bytes.</returns>
            <remarks>
            The buffer may already exist or new one may be created.
            Works on the current level of buffering.
            </remarks>
        </member>
        <member name="M:PHP.Core.BufferedOutput.IncreaseLevel">
            <summary>
            Adds a new level of buffering on the top of the levels stack.
            </summary>
            <remarks>Returns the new level index.</remarks>
        </member>
        <member name="M:PHP.Core.BufferedOutput.DecreaseLevel(System.Boolean)">
            <summary>
            Destroys the top level of buffering. 
            </summary>
            <param name="flush">Whether to flush data on the current level. Data will be discarded if not set.</param>
            <remarks>Returns the current level index after decreasing.</remarks>
        </member>
        <member name="M:PHP.Core.BufferedOutput.SetUserData(System.Object,System.Int32)">
            <summary>
            Assignes an arbitrary data to the specified level of buffering.
            </summary>
            <param name="data">Null reference clears assigned data.</param>
            <param name="levelIndex">The level of buffering which the filter to associate with.</param>
            <remarks>Data are filtered when flushed.</remarks>
        </member>
        <member name="M:PHP.Core.BufferedOutput.SetUserData(System.Object)">
            <summary>
            Assignes the arbitrary data to the current level of buffering. 
            </summary>
            <param name="data">The reference to data.</param>
            <remarks>Data are filtered when flushed.</remarks>
        </member>
        <member name="M:PHP.Core.BufferedOutput.SetFilter(PHP.Core.PhpCallback,System.Int32)">
            <summary>
            Assignes the filtering callback to the specified level of buffering.
            </summary>
            <param name="filter">The filter. Null reference means no filter.</param>
            <param name="levelIndex">The level of buffering which the filter to associate with.</param>
            <remarks>Data are filtered when flushed.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="levelIndex"/> is out of range.</exception>
        </member>
        <member name="M:PHP.Core.BufferedOutput.SetFilter(PHP.Core.PhpCallback)">
            <summary>
            Assignes the filtering callback to the current level of buffering. 
            </summary>
            <param name="filter">The filter. Null reference means no filter.</param>
            <remarks>Data are filtered when flushed.</remarks>
            <exception cref="T:System.InvalidOperationException">Output buffering is disabled.</exception>
        </member>
        <member name="M:PHP.Core.BufferedOutput.GetFilter(System.Int32)">
            <summary>
            Gets the filtering callback defined on the specified level of buffering.
            </summary>
            <param name="levelIndex">The level of buffering which the filter to associate with.</param>
            <returns>The callback or <B>null</B> if no filter has been defined.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="levelIndex"/> is out of range.</exception>
        </member>
        <member name="M:PHP.Core.BufferedOutput.GetFilter">
            <summary>
            Gets the filtering callback defined on the current level of buffering.
            </summary>
            <returns>The callback or <B>null</B> if no filter has been defined.</returns>
            <exception cref="T:System.InvalidOperationException">Output buffering is disabled.</exception>
        </member>
        <member name="M:PHP.Core.BufferedOutput.SetLevelName(System.Int32,System.String)">
            <summary>
            Set the level name.
            </summary>
            <param name="levelIndex">Index of the level from 1.</param>
            <param name="levelName">New name of the level.</param>
        </member>
        <member name="M:PHP.Core.BufferedOutput.GetLevelName(System.Int32)">
            <summary>
            Get the name of the level. If the level name is null, the filter.ToString() is used.
            </summary>
            <param name="levelIndex">Index of the level from 1.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.BufferedOutput.Clean">
            <summary>
            Discards data on the current level of buffering.
            </summary>
        </member>
        <member name="M:PHP.Core.BufferedOutput.FlushAll">
            <summary>
            Flushes all data from all buffers to sinks. Discards all data and all levels of buffering.
            Disables output buffering.
            </summary>
        </member>
        <member name="M:PHP.Core.BufferedOutput.Flush">
            <summary>
            Flushes data on current level of buffering to sinks or to the previous level and discards them.
            </summary>
        </member>
        <member name="M:PHP.Core.BufferedOutput.InternalFlush">
            <summary>
            Flushes data on current level of buffering to the sinks or to the previous level.
            The current level clean up MUST follow this method's call.
            </summary>
        </member>
        <member name="M:PHP.Core.BufferedOutput.GetContentAsString">
            <summary>
            Gets a content of buffers on current buffering level converted to string regardless of its type.
            </summary>
            <returns>
            The content converted to a string. Binary data are converted using <see cref="P:PHP.Core.BufferedOutput.Encoding"/>.
            </returns>
        </member>
        <member name="M:PHP.Core.BufferedOutput.GetContent">
            <summary>
            Gets a content of buffers on current buffering level.
            </summary>
            <returns>The content as <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/> or a 
            <b>null</b> reference if output buffering is disable.</returns>
            <remarks>
            Character data are returned unchanged, binary data are converted to string by 
            the <see cref="M:System.Text.Encoding.GetString(System.Byte[])"/> method of the current encoding.
            </remarks>
        </member>
        <member name="M:PHP.Core.BufferedOutput.WriteBytes(System.Byte[])">
            <summary>
            Writes an array of bytes to the output buffer.
            </summary>
            <param name="value">Bytes to be written.</param>
        </member>
        <member name="M:PHP.Core.BufferedOutput.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of bytes to the output buffer.
            </summary>
            <param name="value">Bytes to be written.</param>
            <param name="index">Starting index in the array.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:PHP.Core.BufferedOutput.Write(System.Char[])">
            <summary>
            Writes a subarray of characters to the output buffer.
            </summary>
            <param name="value">Characters to be written.</param>
        </member>
        <member name="M:PHP.Core.BufferedOutput.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the output buffer.
            </summary>
            <param name="value">The value to be written.</param>
            <param name="index">Starting index in the array.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:PHP.Core.BufferedOutput.WriteInternal(System.Array,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Writes a subarray to the output buffer.
            </summary>
            <param name="value">The value to be written.</param>
            <param name="binary">The type of items in array (byte/char).</param>
            <param name="index">Starting index in the array.</param>
            <param name="count">The number of items to write.</param>
        </member>
        <member name="M:PHP.Core.BufferedOutput.Write(System.Char)">
            <summary>
            Writes a single character to the output buffer.
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:PHP.Core.BufferedOutput.Write(System.String)">
            <summary>
            Writes a string value to the output buffer.
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:PHP.Core.BufferedOutput.GetLevelInfo(System.Int32,PHP.Core.PhpCallback@,System.Int32@)">
            <summary>
            Gets some information about a specified level.
            </summary>
            <param name="levelIndex">Level index starting from 1.</param>
            <param name="filter">Filtering callback (if any).</param>
            <param name="size">Data size.</param>
        </member>
        <member name="M:PHP.Core.BufferedOutput.FindLevelByFilter(PHP.Core.PhpCallback)">
            <summary>
            Find level index by the filter callback.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="P:PHP.Core.BufferedOutput.CharSink">
            <summary>
            The writer through which character data will be written.
            </summary>
        </member>
        <member name="P:PHP.Core.BufferedOutput.ByteSink">
            <summary>
            The stream through which binary data will be written.
            </summary>
        </member>
        <member name="P:PHP.Core.BufferedOutput.Encoding">
            <summary>
            Encoding used by <see cref="M:PHP.Core.BufferedOutput.GetContentAsString"/> converting binary data to a string.
            </summary>
        </member>
        <member name="P:PHP.Core.BufferedOutput.Stream">
            <summary>
            The buffered binary stream used as for loading binary data to buffers.
            </summary>
        </member>
        <member name="P:PHP.Core.BufferedOutput.Level">
            <summary>
            Current buffer level starting from 1. Zero if buffering is disabled.
            </summary>
        </member>
        <member name="P:PHP.Core.BufferedOutput.Length">
            <summary>
            The total length of data written to the current level of buffering.
            Returns -1 if buffering is disabled.
            </summary>
        </member>
        <member name="T:PHP.Core.BufferedOutput.ChunkPosition">
            <summary>
            Position of a chunk of buffered data. 
            </summary>
        </member>
        <member name="M:PHP.Core.BufferedOutput.LevelElement.#ctor(PHP.Core.BufferedOutput.LevelElement)">
            <summary>
            Copies index, name and filter from the element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:PHP.Core.BufferedOutputStream">
            <summary>
            Provides output buffering of streams.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpArray">
            <summary>
            Represents PHP associative ordered array.
            </summary>
        </member>
        <member name="T:PHP.Core.IPhpEnumerable">
            <summary>
            Provides methods which allows implementor to be used in PHP foreach statement as a source of enumeration.
            </summary>
        </member>
        <member name="M:PHP.Core.IPhpEnumerable.GetForeachEnumerator(System.Boolean,System.Boolean,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates an enumerator used in foreach statement.
            </summary>
            <param name="keyed">Whether the foreach statement uses keys.</param>
            <param name="aliasedValues">Whether the values returned by enumerator are assigned by reference.</param>
            <param name="caller">Type <see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the class in whose context the caller operates.</param>
            <returns>The dictionary enumerator.</returns>
            <remarks>
            <see cref="P:System.Collections.IDictionaryEnumerator.Value"/> should return <see cref="T:PHP.Core.PhpReference"/> 
            iff <paramref name="aliasedValues"/>.
            </remarks>
        </member>
        <member name="P:PHP.Core.IPhpEnumerable.IntrinsicEnumerator">
            <summary>
            Implementor's intrinsic enumerator which will be advanced during enumeration.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpArray.PhpTypeName">
            <summary>
            Used in all PHP functions determining the type name. (var_dump, ...)
            </summary>
        </member>
        <member name="F:PHP.Core.PhpArray.PrintablePhpTypeName">
            <summary>
            Used in print_r function.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpArray.toBytes">
            <summary>
            Representation of "array" string in a form of bytes.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpArray.intrinsicEnumerator">
            <summary>
            Intrinsic enumerator associated with the array. Initialized lazily.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArray.#ctor">
            <summary>
            Creates a new instance of <see cref="T:PHP.Core.PhpArray"/> with specified capacities for integer and string keys respectively.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArray.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:PHP.Core.PhpArray"/> with specified capacities for integer and string keys respectively.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:PHP.Core.PhpArray.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:PHP.Core.PhpArray"/> with specified capacities for integer and string keys respectively.
            </summary>
            <param name="intCapacity"></param>
            <param name="stringCapacity"></param>
        </member>
        <member name="M:PHP.Core.PhpArray.#ctor(System.Array)">
            <summary>
            Creates a new instance of <see cref="T:PHP.Core.PhpArray"/> initialized with all values from <see cref="T:System.Array"/>.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:PHP.Core.PhpArray.#ctor(System.Array,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:PHP.Core.PhpArray"/> initialized with a portion of <see cref="T:System.Array"/>.
            </summary>
            <param name="values"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:PHP.Core.PhpArray.#ctor(System.Int32[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PHP.Core.PhpArray"/> class filled by values from specified array.
            </summary>
            <param name="values">An array of values to be added to the table.</param>
            <param name="start">An index of the first item from <paramref name="values"/> to add.</param>
            <param name="length">A number of items to add.</param>
            <param name="value">A value to be filtered.</param>
            <param name="doFilter">Wheter to add all items but <paramref name="value"/> (<b>true</b>) or 
            all items with the value <paramref name="value"/> (<b>false</b>).</param>
        </member>
        <member name="M:PHP.Core.PhpArray.#ctor(System.Collections.IEnumerable)">
            <summary>
            Creates a new instance of <see cref="T:PHP.Core.PhpArray"/> filled by data from an enumerator.
            </summary>
            <param name="data">The enumerator containing values added to the new instance.</param>
        </member>
        <member name="M:PHP.Core.PhpArray.#ctor(PHP.Core.PhpArray,System.Boolean)">
            <summary>
            Copy constructor. Creates <see cref="T:PHP.Core.PhpArray"/> that shares internal data table with another <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
            <param name="array">Table to be shared.</param>
            <param name="preserveMaxInt">True to copy the <see cref="P:PHP.Core.PhpHashtable.MaxIntegerKey"/> from <paramref name="array"/>.
            Otherwise the value will be recomputed when needed. See http://phalanger.codeplex.com/workitem/31484 for more details.</param>
        </member>
        <member name="M:PHP.Core.PhpArray.New(System.Object[])">
            <summary>
            Creates an instance of <see cref="T:PHP.Core.PhpArray"/> filled by given values.
            </summary>
            <param name="values">Values to be added to the new instance. 
            Keys will correspond order of values in the array.</param>
        </member>
        <member name="M:PHP.Core.PhpArray.Keyed(System.Object[])">
            <summary>
            Creates an instance of <see cref="T:PHP.Core.PhpArray"/> filled by given entries.
            </summary>
            <param name="keysValues">Keys and values (alternating) or values only.</param>
            <remarks>If the length of <paramref name="keysValues"/> is odd then its last item is added without a key.</remarks>
        </member>
        <member name="M:PHP.Core.PhpArray.AsPhpArray(System.Object)">
            <summary>
            Cast given <paramref name="arrayobj"/> to <see cref="T:PHP.Core.PhpArray"/>. Depends on current implementation of <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
            <param name="arrayobj"><see cref="T:System.Object"/> to be casted to <see cref="T:PHP.Core.PhpArray"/>.</param>
            <returns>Casted object or <c>null</c>.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.Print(System.IO.TextWriter)">
            <summary>
            Prints an array in a human readable form.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArray.Dump(System.IO.TextWriter)">
            <summary>
            Prints an array along with item types in human readable form. 
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArray.Export(System.IO.TextWriter)">
            <summary>
            Prints an array in form of declaration in PHP. 
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArray.GetTypeCode">
            <summary>
            Retrieves a Phalanger type code of this instance.
            </summary>
            <returns>The PHP.NET type code.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.ToInteger">
            <summary>
            Converts this instance to an integer value.
            </summary>
            <returns>The number of items in this instance.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.ToLongInteger">
            <summary>
            Returns <c>0</c>.
            </summary>
            <returns><c>0</c></returns>
        </member>
        <member name="M:PHP.Core.PhpArray.ToDouble">
            <summary>
            Converts this instance to a double value.
            </summary>
            <returns>The number of items in this instance.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.ToBoolean">
            <summary>
            Converts this instance to a boolean value.
            </summary>
            <returns>Whether the number of items in this instance is not zero.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.ToPhpBytes">
            <summary>
            Converts this instance to a <see cref="T:PHP.Core.PhpBytes"/> value.
            </summary>
            <returns>Returns "array" string converted to bytes.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.ToNumber(System.Int32@,System.Int64@,System.Double@)">
            <summary>
            Converts instance to a number of type <see cref="T:System.Int32"/>.
            </summary>
            <param name="doubleValue">The number of items in this instance.</param>
            <param name="intValue">The number of items in this instance.</param>
            <param name="longValue">The number of items in this instance.</param>
            <returns><see cref="F:PHP.Core.Convert.NumberInfo.Integer"/>.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.PHP#Core#IPhpConvertible#ToString">
            <summary>
            Converts this instance to a string value.
            </summary>
            <returns>Returns "array" string.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.PHP#Core#IPhpConvertible#ToString(System.Boolean,System.Boolean@)">
            <summary>
            Converts this instance to a string value.
            </summary>
            <param name="throwOnError">Throw 'notice' when conversion fails?</param>
            <param name="success">Indicates whether conversion was successful.</param>
            <returns>Returns "array" string.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.Clone">
            <summary>
            Creates a shallow copy of this instance.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.DeepCopy">
            <summary>
            Creates a deep copy of this instance.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.CompareTo(System.Object)">
            <summary>
            Compares this instance with an object of arbitrary PHP.NET type.
            </summary>
            <param name="obj">An object to compare with this instance.</param><returns>
      Negative integer if this instance is less than <paramref name="obj"/>,
      zero if this instance equals to <paramref name="obj"/> and positive integer
      if this instance is greater than <paramref name="obj"/>.
    </returns><remarks>
      If the <paramref name="obj"/> is also if type <see cref="T:PHP.Core.PhpArray"/>
      the <see cref="F:PHP.Core.PhpComparer.Default"/> comparer is used for comparing its items. 
    </remarks>
        </member>
        <member name="M:PHP.Core.PhpArray.CompareTo(System.Object,System.Collections.IComparer)">
            <summary>
            Compares this instance with an object of arbitrary PHP.NET type.
            </summary>
            <remarks>
            <para>Empty array is equal to the null reference.</para>
            <para>Non empty array is greater than the null reference.</para>
            <para>If <paramref name="obj"/> is of type <see cref="T:System.Boolean"/> then 
            the comparison is performed between the boolean term "the number of items in this instance is positive" 
            and <paramref name="obj"/>.</para>
            <para>If <paramref name="obj"/> is of type <see cref="T:PHP.Core.PhpArray"/> then the item counts are compared at first,
            the corresponding keys then and finally the corresponding values are compared. Values comparison 
            is performed by specified <paramref name="comparer"/> and can be recursive. Never-ending recursion is prevented.</para>
            </remarks>
            <param name="obj">An object to compare with this instance.</param><param name="comparer">A comparer to be used for comparing items contained in this instance.</param><returns>
      Negative integer if this instance is less than <paramref name="obj"/>,
      zero if this instance equals to <paramref name="obj"/> and positive integer
      if this instance is greater than <paramref name="obj"/>.
    </returns><remarks>
      The <paramref name="comparer"/> is used to compare items which contained in this instance (useful when the instance
      is an array or object etc.).
    </remarks>
        </member>
        <member name="M:PHP.Core.PhpArray.CompareArrays(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Collections.IComparer,System.Boolean@)">
            <summary>
            Compares two instances of <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="incomparable">Whether arrays are incomparable 
            (no difference is found before both arrays enters an infinite recursion). 
            Returns zero then.</param>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="M:PHP.Core.PhpArray.StrictCompareEq(PHP.Core.PhpArray)">
            <summary>
            Compares this instance with another <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
            <param name="array">The array to be strictly compared.</param>
            <returns>Whether this instance strictly equals to <paramref name="array"/>.</returns>
            <remarks>
            Arrays are strictly equal if all entries are strictly equal and in the same order in both arrays.
            Entries are strictly equal if keys are the same and values are strictly equal 
            in the terms of operator <see cref="M:PHP.Core.Operators.StrictEquality(System.Object,System.Object)"/>.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpArray.StrictCompareArrays(PHP.Core.PhpArray,PHP.Core.PhpArray,System.Boolean@)">
            <summary>
            Compares two instances of <see cref="T:PHP.Core.PhpArray"/> for strict equality.
            </summary>
            <param name="incomparable">Whether arrays are incomparable 
            (no difference is found before both arrays enters an infinite recursion). 
            Returns <B>true</B> then.</param>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="M:PHP.Core.PhpArray.IsEmpty">
            <summary>
            Defines emptiness of the <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
            <returns>Whether this instance contains no element.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.IsScalar">
            <summary>
            Defines whether <see cref="T:PHP.Core.PhpArray"/> is a scalar.
            </summary>
            <returns><B>false</B></returns>
        </member>
        <member name="M:PHP.Core.PhpArray.GetTypeName">
            <summary>
            Returns a name of declaring type.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.RestartIntrinsicEnumerator">
            <summary>
            Restarts intrinsic enumerator - moves it to the first item.
            </summary>
            <remarks>
            If the intrinsic enumerator has never been used on this instance nothing happens.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpArray.GetForeachEnumerator(System.Boolean,System.Boolean,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates an enumerator used in foreach statement.
            </summary>
            <param name="keyed">Whether the foreach statement uses keys.</param>
            <param name="aliasedValues">Whether the values returned by enumerator are assigned by reference.</param>
            <param name="caller">Type <see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the caller (ignored).</param>
            <returns>The dictionary enumerator.</returns>
            <remarks>Used for internal purposes only!</remarks>
        </member>
        <member name="M:PHP.Core.PhpArray.Walk(PHP.Core.PhpWalkCallback,PHP.Core.ScriptContext)">
            <summary>
            Walks the object graph rooted in this node.
            </summary>
            <param name="callback">The callback method.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The <paramref name="callback"/>'s result.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.GetArrayItem(System.Object,System.Boolean)">
            <summary>
            Retrieves an item from an array.
            </summary>
            <param name="key">The key of arbitrary PHP.NET type.</param>
            <param name="quiet">Disables reporting of notices and warnings.</param>
            <returns>The item.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="key"/> is not a legal key (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="key"/> is not contained in <see cref="T:PHP.Core.PhpArray"/> (Notice).</exception>
        </member>
        <member name="M:PHP.Core.PhpArray.GetArrayItem(System.String,System.Boolean)">
            <summary>
            Gets item of the array associated with a specified key of string type (a conversion to integer key may take place).
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArray.GetArrayItemOverride(System.Object,System.Boolean)">
            <summary>
            Handles undefined offset when getting a value from the array or derivet PhpArray types. Can be overriden.
            </summary>
            <param name="key">Key.</param>
            <param name="quiet">Whether a notice should not be displayed.</param>
            <returns><c>null</c> reference or an actual value in overriden class.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.GetArrayItemRef">
            <summary>
            Retrieves a reference on new item of the array.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArray.GetArrayItemRef(System.Object)">
            <summary>
            Retrieves a reference on an item of the array.
            </summary>
            <param name="key">Key of the item.</param>
            <returns><see cref="T:PHP.Core.PhpReference"/> of the item.</returns>
            <exception cref="T:PHP.Core.PhpException"><paramref name="key"/> is not a legal key (Warning).</exception>
        </member>
        <member name="M:PHP.Core.PhpArray.SetArrayItem(System.Object)">
            <summary>
            Sets a value to an item of a <see cref="T:PHP.Core.PhpArray"/>. Implements the last keyed [] operator in the chain.
            </summary>
            <param name="value">The value to be set to a new item (value or <see cref="T:PHP.Core.PhpReference"/>).</param>
        </member>
        <member name="M:PHP.Core.PhpArray.EnsureItemIsArray">
            <summary>
            Ensures a specified array item is an instance of <see cref="T:PHP.Core.PhpArray"/>. 
            </summary>
            <remarks>A new instance of <see cref="T:PHP.Core.PhpArray"/> is assigned to the item if it is empty in a meaning of <see cref="M:PHP.Core.Operators.IsEmptyForEnsure(System.Object)"/>.</remarks>
            <returns>The item associated with a key after it might be replaced by a new instance of <see cref="T:PHP.Core.PhpArray"/>.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.EnsureItemIsObject(PHP.Core.ScriptContext)">
            <summary>
            Ensures specified array item is an instance of <see cref="T:PHP.Core.Reflection.DObject"/>. 
            </summary>
            <param name="context">The <see cref="T:PHP.Core.ScriptContext"/> in which potential new object will be created.</param>
            <remarks>A new instance of <see cref="T:PHP.Library.stdClass"/> is assigned to the item if it is empty in a meaning of <see cref="M:PHP.Core.Operators.IsEmptyForEnsure(System.Object)"/>.</remarks>
            <returns>The item associated with a key after the potential replacement by a new instance of <see cref="T:PHP.Library.stdClass"/>.</returns>
        </member>
        <member name="P:PHP.Core.PhpArray.InplaceCopyOnReturn">
            <summary>
            If this flag is <B>true</B> the array will be copied inplace by the immediate <see cref="M:PHP.Core.PhpArray.Copy(PHP.Core.CopyReason)"/> call.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpArray.IntrinsicEnumerator">
            <summary>
            Intrinsic enumerator associated with the array. Initialized lazily when read for the first time.
            The enumerator points to the first item of the array immediately after the initialization if exists,
            otherwise it points to an invalid item and <see cref="P:PHP.Core.IPhpEnumerator.AtEnd"/> is <B>true</B>.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpArray.ForeachEnumeratorValues">
            <summary>
            An enumerator used (only) for foreach statement.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpArray.ForeachEnumeratorValues.enumerator">
            <summary>
            The internal enumerator used to iterate through the read only copy of array.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpArray.ForeachEnumeratorValues.disposed">
            <summary>
            Wheter the internal enumerator was disposed.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArray.ForeachEnumeratorValues.#ctor(PHP.Core.PhpArray)">
            <summary>
            Creates a new instance of the enumerator.
            </summary>
            <param name="array">The array to iterate over.</param>
        </member>
        <member name="M:PHP.Core.PhpArray.ForeachEnumeratorValues.Reset">
            <summary>
            Resets enumerator.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArray.ForeachEnumeratorValues.MoveNext">
            <summary>
            Moves to the next entry.
            </summary>
            <returns>Whether we can continue.</returns>
        </member>
        <member name="M:PHP.Core.PhpArray.ForeachEnumeratorValues.Dispose">
            <summary>
            Unshare the underlaying table and dispose enumerator resources if any.
            </summary>
            <remarks>If this method is not called at least once, the underlaying table may be lazily copied later in some cases.</remarks>
        </member>
        <member name="P:PHP.Core.PhpArray.ForeachEnumeratorValues.Key">
            <summary>
            Gets a current key.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpArray.ForeachEnumeratorValues.Value">
            <summary>
            Gets a current value. Returns either a deep copy of a value if values are not aliased or 
            a <see cref="T:PHP.Core.PhpReference"/> otherwise. In the latter case, the reference item is added to the array
            if there is not one.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpArray.ForeachEnumeratorValues.Current">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpArray.ForeachEnumeratorAliased">
            <summary>
            An enumerator used (only) for aliased foreach statement.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpArray.ForeachEnumeratorAliased.enumerator">
            <summary>
            Array to get values from.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpArray.ForeachEnumeratorAliased.currentKey">
            <summary>
            Remember the last key (right after <see cref="M:PHP.Core.PhpArray.ForeachEnumeratorAliased.MoveNext"/>) to detect whether current entry has been deleted during foreach body.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArray.ForeachEnumeratorAliased.#ctor(PHP.Core.PhpArray,System.Boolean)">
            <summary>
            Creates a new instance of the enumerator.
            </summary>
            <param name="array">The array to iterate over.</param>
            <param name="keyed">Whether keys are interesting.</param>
        </member>
        <member name="M:PHP.Core.PhpArray.ForeachEnumeratorAliased.Reset">
            <summary>
            Resets enumerator.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArray.ForeachEnumeratorAliased.MoveNext">
            <summary>
            Moves to the next entry.
            </summary>
            <returns>Whether we can continue.</returns>
        </member>
        <member name="P:PHP.Core.PhpArray.ForeachEnumeratorAliased.Key">
            <summary>
            Gets a current key.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpArray.ForeachEnumeratorAliased.Value">
            <summary>
            Gets a current value. Returns either a deep copy of a value if values are not aliased or 
            a <see cref="T:PHP.Core.PhpReference"/> otherwise. In the latter case, the reference item is added to the array
            if there is not one.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpArray.ForeachEnumeratorAliased.Current">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpBytes">
            <summary>
            Represents binary data in PHP language.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpBytes.Empty">
            <summary>
            Empty bytes. Not a single instance with zero length.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpBytes.DumpTo(System.IO.TextWriter)">
            <summary>
            Dumps internal data, escapes non-ASCII characters.
            </summary>
            <param name="output">Output to dump to.</param>
        </member>
        <member name="M:PHP.Core.PhpBytes.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:PHP.Core.PhpBytes"/> class.
            </summary>
            <param name="data">The array of bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.PhpBytes.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:PHP.Core.PhpBytes"/> class with its data converted from a string using 
            encoding from the <see cref="P:PHP.Core.Configuration.Global"/> configuration.
            </summary>
            <param name="str">The string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.PhpBytes.#ctor(PHP.Core.PhpBytes)">
            <summary>
            Creates a new instance of the <see cref="T:PHP.Core.PhpBytes"/> class that shares internal byte array
            with another <see cref="T:PHP.Core.PhpBytes"/> instance.
            </summary>
            <param name="data">The original bytes array.</param>
        </member>
        <member name="M:PHP.Core.PhpBytes.GetTypeCode">
            <summary>
            Retrieves the type code of the Phalanger type.
            </summary>
            <returns>The <see cref="F:PHP.Core.PhpTypeCode.PhpBytes"/> type code.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.ToDouble">
            <summary>
            Retrives a content of this instance converted to the <see cref="T:System.Double"/>.
            </summary>
            <returns>The double precision floating point number.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.ToInteger">
            <summary>
            Retrives a content of this instance converted to the <see cref="T:System.Int32"/>.
            </summary>
            <returns>The integer number.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.ToLongInteger">
            <summary>
            Retrives a content of this instance converted to the <see cref="T:System.Int64"/>.
            </summary>
            <returns>The integer number.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.ToBoolean">
            <summary>
            Retrives a content of this instance converted to the <see cref="T:System.Boolean"/>.
            </summary>
            <returns>True iff this instance contains nothing or one zero byte.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.ToPhpBytes">
            <summary>
            Retrives a content of this instance converted to the <see cref="T:System.Byte"/>[].
            </summary>
            <returns>The array of bytes.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.ToNumber(System.Int32@,System.Int64@,System.Double@)">
            <summary>
            Converts this instance to a number of type <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.
            </summary>
            <param name="doubleValue">The double value.</param>
            <param name="intValue">The integer value.</param>
            <param name="longValue">The long integer value.</param>
            <returns>Value of <see cref="T:PHP.Core.Convert.NumberInfo"/>.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.PHP#Core#IPhpConvertible#ToString(System.Boolean,System.Boolean@)">
            <summary>
            Converts instance to its string representation according to PHP conversion algorithm.
            </summary>
            <param name="success">Indicates whether conversion was successful.</param>
            <param name="throwOnError">Throw out 'Notice' when conversion wasn't successful?</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.Print(System.IO.TextWriter)">
            <summary>
            Prints a content of this instance.
            </summary>
            <param name="output">The output text stream.</param>
        </member>
        <member name="M:PHP.Core.PhpBytes.Dump(System.IO.TextWriter)">
            <summary>
            Prints a content of this instance along with its type.
            </summary>
            <param name="output">The output text stream.</param>
        </member>
        <member name="M:PHP.Core.PhpBytes.Export(System.IO.TextWriter)">
            <summary>
            Prints a PHP declaration of a content of this instance.
            </summary>
            <param name="output">The output text stream.</param>
        </member>
        <member name="M:PHP.Core.PhpBytes.DeepCopy">
            <summary>
            Creates a lazy deep copy of this instance.
            </summary>
            <returns>A copy that shares the internal byte array with another <see cref="T:PHP.Core.PhpBytes"/>.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.CompareTo(System.Object)">
            <summary>
            Compares this instance with an object of arbitrary PHP.NET type.
            </summary>
            <param name="obj">An object to compare with this instance.</param><returns>
      Negative integer if this instance is less than <paramref name="obj"/>,
      zero if this instance equals to <paramref name="obj"/> and positive integer
      if this instance is greater than <paramref name="obj"/>.
    </returns><remarks>
      If the <paramref name="obj"/> is also if type <see cref="T:PHP.Core.PhpArray"/>
      the <see cref="F:PHP.Core.PhpComparer.Default"/> comparer is used for comparing its items. 
    </remarks>
        </member>
        <member name="M:PHP.Core.PhpBytes.CompareTo(System.Object,System.Collections.IComparer)">
            <summary>
            Compares this instance with an object of arbitrary PHP.NET type.
            </summary>
            <param name="obj">An object to compare with this instance.</param><param name="comparer">A comparer to be used for comparing items contained in this instance.</param><returns>
      Negative integer if this instance is less than <paramref name="obj"/>,
      zero if this instance equals to <paramref name="obj"/> and positive integer
      if this instance is greater than <paramref name="obj"/>.
    </returns><remarks>
      The <paramref name="comparer"/> is used to compare items which contained in this instance (useful when the instance
      is an array or object etc.).
    </remarks>
        </member>
        <member name="M:PHP.Core.PhpBytes.Clone">
            <summary>
            Creates a shallow copy of this instance.
            </summary>
            <returns>A shallow copy.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.IsEmpty">
            <summary>
            Defines emptiness on <see cref="T:PHP.Core.PhpBytes"/>.
            </summary>
            <returns>Whether the inscance contains empty byte array or byte array containing the single zero byte.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.IsScalar">
            <summary>
            Defines whether <see cref="T:PHP.Core.PhpBytes"/> is a scalar.
            </summary>
            <returns><B>true</B></returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.GetTypeName">
            <summary>
            Returns a name of declaring type.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.Concat(PHP.Core.PhpBytes,PHP.Core.PhpBytes)">
            <summary>
            Concats two strings of bytes.
            </summary>
            <param name="x">The first string of bytes to be concatenated. Cannot be <c>null</c>.</param>
            <param name="y">The second string of bytes to be concatenated. Cannot be <c>null</c>.</param>
            <returns>The concatenation of <paramref name="x"/> and <paramref name="y"/>.</returns>
            <remarks>
            Bytes are not encoded nor decoded from their respective encodings. 
            Instead, data are copied without any changes made and the result's encoding is set to the encoding 
            of the <paramref name="x"/>.</remarks>
        </member>
        <member name="M:PHP.Core.PhpBytes.Concat(PHP.Core.PhpBytes,System.Object)">
            <summary>
            Concatenates strings or strings of bytes optimized for concatenation with a PhpBytes.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>
            A concatenation of the <paramref name="x"/> and <paramref name="y"/> (no copy needed).
            </returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.Concat(System.Object,PHP.Core.PhpBytes)">
            <summary>
            Concatenates strings or strings of bytes optimized for concatenation with a PhpBytes.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>
            A concatenation of the <paramref name="x"/> and <paramref name="y"/> (no copy needed).
            </returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.Concat(PHP.Core.PhpBytes[])">
            <summary>
            Concatenate list of PhpBytes. Given array can contain nulls.
            </summary>
            <param name="args">List of PhpArray objects. Can contain null.</param>
            <returns>PhpBytes with concatenated args.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.Concat(PHP.Core.PhpBytes[],System.Int32,System.Int32)">
            <summary>
            Concatenate list of PhpBytes. Given array can contain nulls.
            </summary>
            <param name="args">List of PhpArray objects. Can contain null.</param>
            <param name="startIndex">First element in args to start concatenation from.</param>
            <param name="count">Amount of element to concatenate from the startIndex index.</param>
            <returns>PhpBytes with concatenated args.</returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.Append(System.Object,PHP.Core.PhpBytes)">
            <summary>
            Concatenates two strings or strings of bytes optimized for concatenation with a string.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>
            The single-referenced concatenation of the <paramref name="x"/> and <paramref name="y"/> (no copy needed).
            </returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.Walk(PHP.Core.PhpWalkCallback,PHP.Core.ScriptContext)">
            <summary>
            Walks the object graph rooted in this node.
            </summary>
            <param name="callback">The callback method.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
        </member>
        <member name="P:PHP.Core.PhpBytes.ReadonlyData">
            <summary>
            Get the internal byte array for read only purposes.
            The returned array must not be modified! It is modifiable only because of the performance.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpBytes.Data">
            <summary>
            Data contained in this instance. If internal byte array is shared with other <see cref="T:PHP.Core.PhpBytes"/> objects,
            internal byte array is cloned.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpBytes.Length">
            <summary>
            Gets data length.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpBytes.Item(System.Int32)">
            <summary>
            The i-th byte from the internal byte array;
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:PHP.Core.PhpBytes.DataContainer">
            <summary>
            Internal data structure holds the byte array.
            The data can be marked as read only. This tells the runtime if the internal data structure can be reused to avoid of copying.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpBytes.DataContainer.#ctor(System.Byte[])">
            <summary>
            Initialize the instance of <see cref="P:PHP.Core.PhpBytes.DataContainer.Data"/> with byte array. The data are not marked as <see cref="P:PHP.Core.PhpBytes.DataContainer.IsShared"/>.
            </summary>
            <param name="data">The byte array reference used internally.</param>
        </member>
        <member name="M:PHP.Core.PhpBytes.DataContainer.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initialize the instance of <see cref="P:PHP.Core.PhpBytes.DataContainer.Data"/> with byte array.
            </summary>
            <param name="refCount">Number of references to this class. By default 1.</param>
            <param name="data">The byte array reference used internally.</param>
        </member>
        <member name="M:PHP.Core.PhpBytes.DataContainer.Share">
            <summary>
            Marks this instance as shared (<see cref="P:PHP.Core.PhpBytes.DataContainer.IsShared"/>) and returns itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.PhpBytes.DataContainer.Unshare">
            <summary>
            Get back shared instance of internal <see cref="T:System.Byte"/> array.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpBytes.DataContainer.IsShared">
            <summary>
            True iff the internal data structure is shared and should not be modified.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpBytes.DataContainer.Data">
            <summary>
            Internal byte array representing the data.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpBytes.DataContainer.Length">
            <summary>
            The length of internal byte array.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpBytes.DataContainer.Item(System.Int32)">
            <summary>
            Get byte on specified index.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:PHP.Core.PhpCallback">
            <summary>
            Represents a callback designation passed to a system function.
            </summary>
            <remarks>
            <seealso cref="M:PHP.Core.Convert.ObjectToCallback(System.Object)"/>
            </remarks>
        </member>
        <member name="F:PHP.Core.PhpCallback.state">
            <summary>
            The state of the callback.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpCallback.routineDesc">
            <summary>A handle of the target PHP method.</summary>
            <remarks>
            Valid if <see cref="F:PHP.Core.PhpCallback.state"/> is <see cref="F:PHP.Core.PhpCallback.State.Bound"/>, otherwise <B>null</B>.
            </remarks>
        </member>
        <member name="F:PHP.Core.PhpCallback.context">
            <summary>
            Script context the <see cref="F:PHP.Core.PhpCallback.routineDesc"/> should be called with.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpCallback.targetName">
            <summary>
            The name of the target function or method for unbound callback.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpCallback.className">
            <summary>
            The name of the target class for unbound callback.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpCallback.instance">
            <summary>
            The target instance.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpCallback.lateStaticBindType">
            <summary>
            Type used to call this routine.
            Used for late static binding.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpCallback.dummyInstance">
            <summary>
            <B>true</B> if <see cref="F:PHP.Core.PhpCallback.instance"/> is just a dummy instance created ad-hoc to be able to call an instance method
            statically, <B>false</B> otherwise.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpCallback.callingContext">
            <summary>
            Type context (determined at bind time).
            </summary>
        </member>
        <member name="F:PHP.Core.PhpCallback.Invalid">
            <summary>
            Invalid <see cref="T:PHP.Core.PhpCallback"/> singleton.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpCallback.#ctor">
            <summary>
            Creates an invalid <see cref="T:PHP.Core.PhpCallback"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpCallback.#ctor(PHP.Core.Reflection.DObject,PHP.Core.Reflection.DRoutineDesc,PHP.Core.ScriptContext)">
            <summary>
            Creates a callback bound to the specified PHP method represented by a <see cref="T:PHP.Core.Reflection.DRoutineDesc"/>.
            </summary>
            <param name="instance">The target PHP object.</param>
            <param name="handle">The handle of the target PHP method.</param>
            <param name="context">The script context to call the method with.</param>
        </member>
        <member name="M:PHP.Core.PhpCallback.#ctor(System.String)">
            <summary>
            Creates an unbound PHP function callback given a function name.
            </summary>
            <param name="functionName">The target PHP function name.</param>
        </member>
        <member name="M:PHP.Core.PhpCallback.#ctor(System.String,PHP.Core.ScriptContext)">
            <summary>
            Creates an unbound PHP function callback given a function name and <see cref="T:PHP.Core.ScriptContext"/>.
            </summary>
            <param name="functionName">The target PHP function name.</param>
            <param name="context">The script context to call the function with.</param>
        </member>
        <member name="M:PHP.Core.PhpCallback.#ctor(System.String,System.String)">
            <summary>
            Creates an unbound PHP static method callback given a class name and method name.
            </summary>
            <param name="className">The target PHP class name.</param>
            <param name="methodName">The target PHP method name.</param>
        </member>
        <member name="M:PHP.Core.PhpCallback.#ctor(System.String,System.String,PHP.Core.ScriptContext)">
            <summary>
            Creates an unbound PHP static method callback given a class name, method name and <see cref="T:PHP.Core.ScriptContext"/>.
            </summary>
            <param name="className">The target PHP class name.</param>
            <param name="methodName">The target PHP method name.</param>
            <param name="context">The script context to call the method with.</param>
        </member>
        <member name="M:PHP.Core.PhpCallback.#ctor(PHP.Core.Reflection.DObject,System.String)">
            <summary>
            Creates an unbound PHP instance method callback given a <see cref="T:PHP.Core.PhpObject"/> instance and a method name.
            </summary>
            <param name="instance">The target PHP object.</param>
            <param name="targetName">The target PHP function name.</param>
        </member>
        <member name="M:PHP.Core.PhpCallback.#ctor(PHP.Core.Reflection.DObject,PHP.Core.Reflection.DRoutineDesc)">
            <summary>
            Creates bounded PHP instance method callback. Used when we already know the routine.
            </summary>
            <param name="instance">The target PHP object.</param>
            <param name="routine">The target PHP method.</param>
        </member>
        <member name="M:PHP.Core.PhpCallback.Bind">
            <summary>
            Attempts to bind this callback to its target with no naming context.
            </summary>
            <returns><B>True</B> if the callback was successfully bound, <B>false</B> if an error occured.</returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.Bind(System.Boolean)">
            <summary>
            Attempts to bind this callback to its target with no naming context.
            </summary>
            <param name="quiet"><B>true</B> of no errors should be thrown, <B>false</B> otherwise.</param>
            <returns><B>True</B> if the callback was successfully bound, <B>false</B> if an error occured.</returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.Bind(System.Boolean,PHP.Core.Reflection.DTypeDesc,PHP.Core.NamingContext)">
            <summary>
            Attempts to bind this callback to its target.
            </summary>
            <param name="quiet"><B>true</B> of no errors should be thrown, <B>false</B> otherwise.</param>
            <param name="nameContext">Current <see cref="T:PHP.Core.NamingContext"/> for function and class name resolution.</param>
            <param name="caller">Current class context or a <see cref="T:PHP.Core.Reflection.UnknownTypeDesc"/> if the class context
            should be determined ad-hoc.</param>
            <returns><B>True</B> if the callback was successfully bound, <B>false</B> if an error occured.</returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.Invoke(System.Object[])">
            <summary>
            Invokes this callback.
            </summary>
            <param name="args">Arguments to be passed to target function or method (can be <see cref="T:PHP.Core.PhpReference"/>s).</param>
            <returns>The value returned by the called function or method (can be a <see cref="T:PHP.Core.PhpReference"/>).</returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.Invoke(PHP.Core.Reflection.DTypeDesc,System.Object[])">
            <summary>
            Invokes this callback. Can be used if DTypeDesc of caller's class context is known without an overhead of determining it.
            </summary>
            <param name="caller">DTypeDesc of the caller's class context.</param>
            <param name="args">Arguments to be passed to target function or method (can be <see cref="T:PHP.Core.PhpReference"/>s).</param>
            <returns>The value returned by the called function or method (can be a <see cref="T:PHP.Core.PhpReference"/>).</returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.InvokeInternal(System.Object[])">
            <summary>
            Invokes this callback (must be bound).
            </summary>
            <param name="args">Arguments to be passed to target function or method (can be <see cref="T:PHP.Core.PhpReference"/>s).</param>
            <returns>The value returned by the called function or method (can be a <see cref="T:PHP.Core.PhpReference"/>).</returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.GetTypeCode">
            <summary>
            Returns <see cref="F:PHP.Core.PhpTypeCode.Invalid"/>.
            </summary>
            <returns><see cref="F:PHP.Core.PhpTypeCode.Invalid"/></returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.ToDouble">
            <summary>
            Returns <c>0</c>.
            </summary>
            <returns><c>0</c></returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.ToInteger">
            <summary>
            Returns <c>0</c>.
            </summary>
            <returns><c>0</c></returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.ToLongInteger">
            <summary>
            Returns <c>0</c>.
            </summary>
            <returns><c>0</c></returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.ToBoolean">
            <summary>
            Returns <B>false</B>.
            </summary>
            <returns><B>false</B></returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.ToNumber(System.Int32@,System.Int64@,System.Double@)">
            <summary>
            Converts this instance to a number of type <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpCallback.ToPhpBytes">
            <summary>
            Converts this instance to its <see cref="T:PHP.Core.PhpBytes"/> representation.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.PHP#Core#IPhpConvertible#ToString">
            <summary>
            Converts this instance to its <see cref="T:System.String"/> representation.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.PHP#Core#IPhpConvertible#ToString(System.Boolean,System.Boolean@)">
            <summary>
            Converts instance to its string representation according to PHP conversion algorithm.
            </summary>
            <param name="success">Indicates whether conversion was successful.</param>
            <param name="throwOnError">Throw out 'Notice' when conversion wasn't successful?</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.ToPhpRepresentation">
            <summary>
            Returns PHP representation of this callback (either a string or a <see cref="T:PHP.Core.PhpArray"/>
            with two items denoting the class/instance and method name).
            </summary>
            <returns>A string or <see cref="T:PHP.Core.PhpArray"/> containing the two items.</returns>
        </member>
        <member name="M:PHP.Core.PhpCallback.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Creates an instance from deserialized data using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to receive data from.</param><param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.</param>
        </member>
        <member name="M:PHP.Core.PhpCallback.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="P:PHP.Core.PhpCallback.IsBound">
            <summary>
            Returns <B>true</B> if this callback is bound, <B>false</B> otherwise.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpCallback.IsBoundToCaller">
            <summary>
            Returns <B>true</B> if this callback is bound to a <c>__call</c> or <c>__callStatic</c> method, <B>false</B> otherwise.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpCallback.IsInvalid">
            <summary>
            Returns <B>true</B> if this <see cref="T:PHP.Core.PhpCallback"/> is "invalid", <B>false</B> otherwise.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpCallback.RoutineName">
            <summary>
            Returns the target routine name (this is the real name even if bound to <c>__call</c>).
            </summary>
        </member>
        <member name="P:PHP.Core.PhpCallback.TargetInstance">
            <summary>
            Returns the target <see cref="T:PHP.Core.Reflection.DObject"/> if this <see cref="T:PHP.Core.PhpCallback"/> references an instance method,
            <B>null</B> otherwise.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpCallback.TargetRoutine">
            <summary>
            Returns the target routine to which this callback is bound.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpCallback.State">
            <summary>
            State of a <see cref="T:PHP.Core.PhpCallback"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpCallback.State.UnboundFunction">
            <summary>
            Unresolved function name (<see cref="F:PHP.Core.PhpCallback.targetName"/>) is known.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpCallback.State.UnboundStaticMethod">
            <summary>
            Unresolved class name (<see cref="F:PHP.Core.PhpCallback.className"/>) and method name (<see cref="F:PHP.Core.PhpCallback.targetName"/>)
            are known.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpCallback.State.UnboundInstanceMethod">
            <summary>
            A <see cref="T:PHP.Core.PhpObject"/> instance (<see cref="F:PHP.Core.PhpCallback.instance"/>) and an unresolved method name
            (<see cref="F:PHP.Core.PhpCallback.targetName"/>) are known.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpCallback.State.Bound">
            <summary>
            The callback has been resolved into a <see cref="T:PHP.Core.Reflection.DRoutineDesc"/> (<see cref="F:PHP.Core.PhpCallback.routineDesc"/>).
            </summary>
        </member>
        <member name="F:PHP.Core.PhpCallback.State.BoundToCaller">
            <summary>
            The callback has been resolved into a <see cref="T:PHP.Core.Reflection.DRoutineDesc"/> pointing to the <c>__call</c> method.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpCallbackParameterized">
            <summary>
            Represents a callback along with the arguments that will be used for invocation.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpCallbackParameterized.#ctor(PHP.Core.PhpCallback,System.Object[])">
            <summary>
            Creates parameterized callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:PHP.Core.PhpCallbackParameterized.Invoke">
            <summary>
            Invokes the callback with the parameters.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpCallbackParameterized.Invoke(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Invokes the callback with the parameters.
            </summary>
            <param name="caller">Current class context.</param>
        </member>
        <member name="P:PHP.Core.PhpCallbackParameterized.Callback">
            <summary>
            The callback. Cannot be a <B>null</B> reference.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpCallbackParameterized.Parameters">
            <summary>
            The parameters. Can be a <B>null</B> reference.
            </summary>
        </member>
        <member name="T:PHP.Library.stdClass">
            <summary>
            &quot;Standard&quot; built-in PHP class.
            </summary>
            <remarks>
            This class contains no CT fields and no methods. It is implicitly instantiated when you apply
            certain field access operators (-&gt;) on an empty variable.
            </remarks>
        </member>
        <member name="T:PHP.Core.PhpObject">
            <summary>
            Serves as a base for user defined PHP classes.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.PhpTypeName">
            <summary>
            PHP name of this type. Default result of to-string conversion.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.PrintablePhpTypeName">
            <summary>
            Used by print_r.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.RuntimeFields">
            <summary>
            Ordered hashtable containing fields added at runtime (so called RT fields).
            </summary>
            <remarks>
            This field is initialized in a lazy manner. It is <B>null</B> until the first RT field is created.
            </remarks>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.typeDesc">
            <summary>
            Caches the type desc describing this instance's type.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.InvokeConstructor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Invokes a PHP constructor (<c>__construct</c> or PHP 4 style constructor) of this instance's class.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that requests the invocation.
            </param>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.InvokeMethod(System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Invokes a method (both instance and static) on this object.
            </summary>
            <param name="name">The name of the method to invoke.</param>
            <param name="caller">The <see cref="T:System.Type"/> of the object that request the invocation or <B>null</B>
            if it should be determined lazily.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The return value of the method (might be a <see cref="T:PHP.Core.PhpReference"/>).</returns>
            <remarks>
            Arguments are expected on the current <see cref="F:PHP.Core.ScriptContext.Stack"/>.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.GetMethodDesc(System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean,System.Boolean@)">
            <summary>
            Returns a handle to this object's method or <B>null</B> if an error (not found or bad visibility) occurs.
            </summary>
            <param name="name">The name of the method.</param>
            <param name="caller">The <see cref="T:System.Type"/> of the object that request the operation or <B>null</B>
            if it should be determined lazily.</param>
            <param name="quiet">If <B>true</B>, no errors should be thrown.</param>
            <param name="isCallerMethod">Receives <B>true</B> if the returned <see cref="T:PHP.Core.Reflection.DRoutineDesc"/> represents
            the <c>__call</c> method, <B>false</B> otherwise.</param>
            <returns>The handle or <B>null</B>.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.PropertyReadHandler(System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean@)">
            <summary>
            Invoked when an unknown property is read.
            </summary>
            <remarks>Override in order to get custom property reading behavior.</remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.PropertyWriteHandler(System.Object,System.Object,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Invoked when an unknown property is written (<paramref name="name"/> can be a <see cref="T:PHP.Core.RuntimeChainElement"/>).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.PropertyUnsetHandler(System.String,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Invoked when an unknown property is unset.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.PropertyIssetHandler(System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean@)">
            <summary>
            Invoked when an unknown property is tested for being set.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.GetProperty(System.String,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Gets the value of an instance property (both CT and RT).
            </summary>
            <param name="name">The property name.</param>
            <param name="caller">Class context of the code that requests the retrieval.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.GetProperty(System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean)">
            <summary>
            Gets the value of an instance property (both CT and RT).
            </summary>
            <param name="name">The property name.</param>
            <param name="caller">Class context of the code that requests the retrieval.</param>
            <param name="issetSemantics">If <B>true</B>, the operation should have the <c>isset</c> semantics - 
            it should try to call <c>__isset</c> instead of <c>__get</c> and throw any exceptions when the property
            is not found.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.GetPropertyRef(System.String,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Gets the value of an instance property (both CT and RT) as a <see cref="T:PHP.Core.PhpReference"/>.
            </summary>
            <param name="name">The property name.</param>
            <param name="caller">Class context of the code that requests the retrieval.</param>
            <returns>The property value (never <B>null</B>).</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.GetRuntimeField(System.String,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Gets the value of an instance field when CT property lookup has failed.
            </summary>
            <param name="name">The field name.</param>
            <param name="caller">Class context of the code that requests the retrieval.</param>
            <returns>The field value.</returns>
            <remarks>This is merely a helper method called from <see cref="M:PHP.Core.Reflection.DObject.GetProperty(System.String,PHP.Core.Reflection.DTypeDesc)"/>.</remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.InvokeGetterRef(System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean@)">
            <summary>
            Invokes the <c>__get</c> handler of this instance and returns a reference.
            </summary>
            <param name="name">The name of the property whose value is requested.</param>
            <param name="caller">The class context, in which the operation should be performed.</param>
            <param name="getterExists">When this method returns, contains <B>true</B> if the getter exists and
            an attempt was made to invoke it, and <B>false</B> if this instance does not define the getter.</param>
            <returns>A reference representing the value returned by getter or <B>null</B> if an error occured or
            this instance does not have the overloaded field getter (<c>__get</c>).</returns>
            <remarks>This method is called by <c>*Ref</c> operators to retrieve a reference to a field
            when the instance has an overloaded field getter.</remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.SetProperty(System.String,System.Object,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Sets the value of an instance property (both CT and RT).
            </summary>
            <param name="name">The property name.</param>
            <param name="value">The new property value.</param>
            <param name="caller">Class context of the code that requests the operation.</param>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.SetPropertyDirect(System.Object,System.Object)">
            <summary>
            Sets the value of an instance property (both CT and RT) without visibility checks and without attempting
            to invoke <c>__set</c>.
            </summary>
            <param name="name">The property name.</param>
            <param name="value">The new property value.</param>
            <remarks>
            This method is useful for deserialization and marshaling purposes.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.SetRuntimeField(System.String,System.Object,PHP.Core.Reflection.DPropertyDesc,PHP.Core.PhpReference,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Sets the value of an instance field when CT property lookup has failed.
            </summary>
            <param name="name">The field name.</param>
            <param name="value">The new field value.</param>
            <param name="ctCandidate">CT property candidate (may be <B>null</B>).</param>
            <param name="ctCandidateValue">CT property candidate value (is <B>null</B> iff <paramref name="ctCandidate"/>
            is <B>null</B>).</param>
            <param name="caller">Class context of the code that requests the retrieval.</param>
            <remarks>This is merely a helper method called from <see cref="M:PHP.Core.Reflection.DObject.SetProperty(System.String,System.Object,PHP.Core.Reflection.DTypeDesc)"/>.</remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.InvokeSetter(PHP.Core.RuntimeChainElement,System.Object)">
            <summary>
            Invokes the <c>__set</c> handler of this instance with a "setter chain".
            </summary>
            <param name="chain">A linked list of <see cref="T:PHP.Core.RuntimeChainElement"/>s that should be passed
            to the setter.</param>
            <param name="value">A value that should be assigned to the last chain element.</param>
            <returns><B>true</B> if the setter was successfully called, <B>false</B> otherwise.</returns>
            <remarks>This method is intended for system classes, especially for classes in managed wrappers.</remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.UnsetProperty(System.String,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Unsets an instance property (both CT and RT).
            </summary>
            <param name="name">The property name.</param>
            <param name="caller">Class context of the code that requests the operation.</param>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.CloneObject(PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Creates a clone of this instance, which is either a deep copy or a <c>clone</c>-style
            copy according to the <paramref name="deepCopyFields"/> parameter.
            </summary>
            <param name="caller">Class context of the code that requests the lookup.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="deepCopyFields">If <B>true</B>, fields will be deep-copied, if <B>false</B>,
            fields will be copied by assignment.</param>
            <returns>The clone.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.ThrowMethodVisibilityError(PHP.Core.Reflection.DRoutineDesc,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Throws a 'Protected method called' or 'Private method called' <see cref="T:PHP.Core.PhpException"/>.
            </summary>
            <param name="method">The <see cref="T:PHP.Core.Reflection.DRoutineDesc"/>.</param>
            <param name="caller">The caller that was passed to method lookup or <B>null</B>
            if it should be determined by this method (by tracing the stack.</param>
            <remarks>
            This method is intended to be called after <see cref="M:PHP.Core.Reflection.DTypeDesc.GetMethod(PHP.Core.Name)"/> has returned
            <see cref="F:PHP.Core.Reflection.GetMemberResult.BadVisibility"/> while performing a method lookup.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.ThrowPropertyVisibilityError(System.String,PHP.Core.Reflection.DPropertyDesc,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Throws a 'Cannot access protected property' or 'Cannot access private property' <see cref="T:PHP.Core.PhpException"/>.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="property">The <see cref="T:PHP.Core.Reflection.DPropertyDesc"/>.</param>
            <param name="caller">The caller.</param>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.Wakeup(PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)">
            <summary>
            Tries to invoke <c>__wakeup</c> on this instance.
            </summary>
            <param name="caller"><see cref="T:System.Type"/> of the object that requests the invocation or <B>null</B> if
            it should be determined lazily.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.Sleep(PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,System.Boolean@)">
            <summary>
            Tries to invoke <c>__sleep</c> on this instance.
            </summary>
            <param name="caller"><see cref="T:System.Type"/> of the object that requests the invocation or <B>null</B> if
            it should be determined lazily.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="sleepCalled">Receives <B>true</B> if <c>__sleep</c> was called, <B>false</B> otherwise.</param>
            <returns>The <c>__sleep</c> result (an array containing names of fields that should be preserved) or
            <B>null</B> if <c>__sleep</c> was not callable or did not return an array.</returns>
            <remarks>
            There are three possible results of this method. If <paramref name="sleepCalled"/> is <B>false</B>,
            then <c>__sleep</c> was not called because it was not found or invisible for the <paramref name="caller"/>.
            Otherwise, the return value is valid and can be either <B>null</B> (<c>__sleep</c> did not return
            an array) or a <see cref="T:PHP.Core.PhpArray"/> (<c>__sleep</c> returned an array).
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.CompareTo(System.Object)">
            <summary>
            Compares this instance with an object of arbitrary PHP.NET type.
            </summary>
            <param name="obj">An object to compare with this instance.</param><returns>
      Negative integer if this instance is less than <paramref name="obj"/>,
      zero if this instance equals to <paramref name="obj"/> and positive integer
      if this instance is greater than <paramref name="obj"/>.
    </returns><remarks>
      If the <paramref name="obj"/> is also if type <see cref="T:PHP.Core.PhpArray"/>
      the <see cref="F:PHP.Core.PhpComparer.Default"/> comparer is used for comparing its items. 
    </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.CompareTo(System.Object,System.Collections.IComparer)">
            <summary>
            Compares this instance with an object of arbitrary PHP.NET type.
            </summary>
            <remarks>
            <param name="obj">An object to compare with this instance.</param><param name="comparer">A comparer to be used for comparing items contained in this instance.</param><returns>
      Negative integer if this instance is less than <paramref name="obj"/>,
      zero if this instance equals to <paramref name="obj"/> and positive integer
      if this instance is greater than <paramref name="obj"/>.
    </returns><remarks>
      The <paramref name="comparer"/> is used to compare items which contained in this instance (useful when the instance
      is an array or object etc.).
    </remarks>
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.CompareObjects(PHP.Core.Reflection.DObject,PHP.Core.Reflection.DObject,System.Collections.IComparer,System.Boolean@)">
            <summary>
            Compares two instances of <see cref="T:PHP.Core.PhpObject"/>.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="incomparable">Whether objects are incomparable (no difference is found before both objects enter
            an infinite recursion). Returns zero then.</param>
            <param name="x">The first item to compare.</param><param name="y">The second item to compare.</param><returns>
      Negative integer if <paramref name="x"/> is less than <paramref name="y"/>,
      zero if <paramref name="x"/> equals to <paramref name="y"/> and positive integer
      if <paramref name="x"/> is greater than <paramref name="y"/>.
    </returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.GetTypeCode">
            <summary>
            Returns Phalanger type code.
            </summary>
            <returns>The type code.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.ToInteger">
            <summary>
            Converts this instance to its <see cref="T:System.Int32"/> representation according to PHP conversion algorithm.
            </summary>
            <returns>The converted value.</returns>
            <remarks>
            The result is <c>1</c> if there is at least one field in this instance, <c>0</c> otherwise.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.ToLongInteger">
            <summary>
            Converts this instance to its <see cref="T:System.Int64"/> representation according to PHP conversion algorithm.
            </summary>
            <returns>The converted value.</returns>
            <remarks>
            The result is <c>1</c> if there is at least one field in this instance, <c>0</c> otherwise.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.ToDouble">
            <summary>
            Converts this instance to its <see cref="T:System.Double"/> representation according to PHP conversion algorithm.
            </summary>
            <returns>The converted value.</returns>
            <remarks>
            The result is <c>1.0</c> if there is at least one field in this instance, <c>0.0</c> otherwise.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.ToBoolean">
            <summary>
            Converts this instance to its <see cref="T:System.Boolean"/> representation according to PHP conversion algorithm.
            </summary>
            <returns>The converted value.</returns>
            <remarks>
            The result is <B>true</B> if there is at least one field in this instance, <B>false</B> otherwise.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.ToPhpBytes">
            <summary>
            Converts this instance to its <see cref="T:PHP.Core.PhpBytes"/> representation.
            </summary>
            <returns>The converted value.</returns>
            <remarks>
            If this object contains the <c>__toString</c> method, it is invoked and its result returned.
            Otherwise, <see cref="M:System.Object.ToString"/> is invoked on the real object.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.ToNumber(System.Int32@,System.Int64@,System.Double@)">
            <summary>
            Converts this instance to a number of type <see cref="T:System.Int32"/>.
            </summary>
            <param name="doubleValue">Not applicable.</param>
            <param name="intValue">This instance converted to integer.</param>
            <param name="longValue">Not applicable.</param>
            <returns><see cref="F:PHP.Core.Convert.NumberInfo.Integer"/>.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.PHP#Core#IPhpConvertible#ToString">
            <summary>
            Converts this instance to its <see cref="T:System.String"/> representation according to PHP conversion algorithm.
            </summary>
            <returns>The converted value.</returns>
            <remarks>
            If this object contains the __toString method, it is invoked and its result returned.
            Otherwise, "Object" is returned.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.ToString(System.Boolean,System.Boolean@)">
            <summary>
            Converts this instance to its <see cref="T:System.String"/> representation according to PHP conversion algorithm.
            </summary>
            <param name="throwOnError">
            Should the method throw 'object_to_string_conversion' notice when no conversion method is found?
            </param>
            <param name="success">Indicates whether conversion was successful.</param>
            <returns>The converted value.</returns>
            <remarks>
            If this object contains the __toString method, it is invoked and its result returned.
            Otherwise, "Object" is returned.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.ToPhpArray">
            <summary>
            Converts this instance to its <see cref="T:PHP.Core.PhpArray"/> representation.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.DeepCopy">
            <summary>
            Creates a deep copy of this instance.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.Copy(PHP.Core.CopyReason)">
            <summary>
            Creates a copy of this instance.
            </summary>
            <param name="reason">The copy reason.</param>
            <returns>The copy.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.PropertyIterator">
            <summary>
            Iterator used for <see cref="M:PHP.Core.Reflection.DObject.Print(System.IO.TextWriter)"/>, <see cref="M:PHP.Core.Reflection.DObject.Dump(System.IO.TextWriter)"/>, and <see cref="M:PHP.Core.Reflection.DObject.Export(System.IO.TextWriter)"/>.
            </summary>
            <remarks>Override this to get a different print/dump/export behavior.</remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.Print(System.IO.TextWriter)">
            <summary>
            Prints this instance's fields in a human readable form. Mimics the <c>print_r</c> PHP function.
            </summary>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> to print to.</param>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.Dump(System.IO.TextWriter)">
            <summary>
            Dumps this instance's fields in a human readable form including types.
            Mimics the <c>var_dump</c> PHP function.
            </summary>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> to dump to.</param>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.Export(System.IO.TextWriter)">
            <summary>
            Exports this instance's fields in a human readable form including types.
            Mimics the <c>var_export</c> PHP function.
            </summary>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> to export to.</param>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.IsEmpty">
            <summary>
            Defines emptiness of the <see cref="T:PHP.Core.PhpObject"/>.
            </summary>
            <returns>An instance is never empty.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.IsScalar">
            <summary>
            Defines whether <see cref="T:PHP.Core.PhpObject"/> is a scalar.
            </summary>
            <returns><B>false</B></returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.GetTypeName">
            <summary>
            Returns a name of declaring type.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.Walk(PHP.Core.PhpWalkCallback,PHP.Core.ScriptContext)">
            <summary>
            Walks the object graph rooted in this node.
            </summary>
            <param name="callback">The callback method.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.GetForeachEnumerator(System.Boolean,System.Boolean,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates an enumerator used in the <c>foreach</c> statement.
            </summary>
            <param name="keyed">Whether the foreach statement uses keys.</param>
            <param name="aliasedValues">Whether the values returned by enumerator are assigned by reference.</param>
            <param name="caller">Type <see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the class in whose context the caller operates.</param>
            <returns>The dictionary enumerator.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.InstancePropertyIterator(PHP.Core.Reflection.DTypeDesc,System.Boolean)">
            <summary>
            An PHP style iterator for <see cref="T:PHP.Core.Reflection.DObject"/>.
            </summary>
            <remarks>
            This iterator returns instance property names as keys and instance property values as values. Only
            properties that are visible for the <paramref name="caller"/> are enumerated - both CT and RT, CT first.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.Add(System.Object,System.Object)">
            <summary>
            Adds a runtime instance field with the provided name and value.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.Clear">
            <summary>
            Unsets all runtime fields.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.Contains(System.Object)">
            <summary>
            Determines whether this instance contains an instance property with the specified name.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates instance properties visible in the current class context.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.GetEnumerator(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Returns an enumerator that enumerates instance properties visible in a given class context.
            </summary>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that request the enumeration.</param>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Creates an instance from deserialized data using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to receive data from.</param><param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.</param>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.Dispose(System.Boolean)">
            <summary>
            Disposes of unmanaged and optionally also managed resources.
            </summary>
            <param name="disposing">If <B>true</B>, both managed and unmanaged resources should be released.
            If <B>false</B> only unmanaged resources should be released.</param>
            <remarks>
            <para>
            User defined destructor (<c>__destruct</c>) can only be called, when <parameref name="disposing"/>
            is <B>true</B>, because the destructor may (and probably will) manipulate managed resources which is
            forbidden when this method is called by the runtime with <parameref name="disposing"/> set to
            <B>false</B>).
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.Dispose">
            <summary>
            Standard <see cref="M:System.IDisposable.Dispose"/> implementation.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.IsDisposed">
            <summary>
            <B>True</B> iff this instance has already been disposed off.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.ReadyForDisposal">
            <summary>
            <B>True</B> iff this instance can be finalized.
            </summary>
            <remarks>
            If a derived class practices resurrection, this property must be overriden in order to
            prevent this class's finalizer from calling <c>__destruct</c>
            </remarks>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.RealType">
            <summary>
            Real <see cref="T:System.Type"/> of the object.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.RealObject">
            <summary>
            The real CLR object contained by the DObject.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.InstanceObject">
            <summary>
            The instance passed to method and property invocation.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.visited">
            <summary>
            Marks visited <see cref="T:PHP.Core.Reflection.DObject"/> instances when printing variable contents or comparing
            <see cref="T:PHP.Core.Reflection.DObject"/>s.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.insideGetter">
            <summary>
            <B>True</B> means there is <c>__get</c> in current call stack (used to prevent getter recursion).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.insideSetter">
            <summary>
            <B>True</B> means there is <c>__set</c> in current call stack (used to prevent setter recursion).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.insideCaller">
            <summary>
            <B>True</B> means there is <c>__call</c> in current call stack (used to prevent caller recursion).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.insideUnsetter">
            <summary>
            <B>True</B> means there is <c>__unset</c> in current call stack (used to prevent setter recursion).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.insideIssetter">
            <summary>
            <B>True</B> means there is <c>__isset</c> in current call stack (used to prevent setter recursion).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.IntrinsicEnumerator">
            <summary>
            Not supported in objects.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.Item(System.Object)">
            <summary>
            Gets or sets an instance property with the specified name.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.Count">
            <summary>
            Gets the number of (set) instance properties contained in this <see cref="T:PHP.Core.Reflection.DObject"/>.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.DObject.ObjectFlags">
            <summary>
            Instance flags grouped into an enum to conserve space.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.ObjectFlags.Visited">
            <summary>
            Marks visited <see cref="T:PHP.Core.Reflection.DObject"/> instances when printing variable contents or comparing
            <see cref="T:PHP.Core.Reflection.DObject"/>s.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.ObjectFlags.InsideGetter">
            <summary>
            <B>True</B> means there is <c>__get</c> in current call stack (used to prevent getter recursion).
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.ObjectFlags.InsideSetter">
            <summary>
            <B>True</B> means there is <c>__set</c> in current call stack (used to prevent setter recursion).
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.ObjectFlags.InsideCaller">
            <summary>
            <B>True</B> means there is <c>__call</c> in current call stack (used to prevent caller recursion).
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.ObjectFlags.InsideUnsetter">
            <summary>
            <B>True</B> means there is <c>__unset</c> in current call stack (used to prevent caller recursion).
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.ObjectFlags.InsideIssetter">
            <summary>
            <B>True</B> means there is <c>__isset</c> in current call stack (used to prevent caller recursion).
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.DObject.PhpIteratorEnumerator">
            <summary>
            Provides the <see cref="T:System.Collections.IDictionaryEnumerator"/> interface by wrapping a user-implemeted
            <see cref="T:PHP.Library.SPL.Iterator"/>.
            </summary>
            <remarks>
            Instances of this class are iterated when <c>foreach</c> is used on object of a class
            that implements <see cref="T:PHP.Library.SPL.Iterator"/> or <see cref="T:PHP.Library.SPL.IteratorAggregate"/>.
            </remarks>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.PhpIteratorEnumerator.iterator">
            <summary>
            The underlying user iterator.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.PhpIteratorEnumerator.context">
            <summary>
            Current script context.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.PhpIteratorEnumerator.aliasedValues">
            <summary>
            Whether the enumerator should return values as <see cref="T:PHP.Core.PhpReference"/>s.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DObject.PhpIteratorEnumerator.firstElement">
            <summary>
            <b>true</b> if <see cref="F:PHP.Core.Reflection.DObject.PhpIteratorEnumerator.iterator"/> points to the first element.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.PhpIteratorEnumerator.#ctor(PHP.Core.Reflection.DObject,PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Reflection.DObject.PhpIteratorEnumerator"/>.
            </summary>
            <param name="iterator">The underlying user iterator.</param>
            <param name="context">Current script context.</param>
            <param name="aliasedValues">Whether the enumerator should return values as <see cref="T:PHP.Core.PhpReference"/>s.</param>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.PhpIteratorEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DObject.PhpIteratorEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><B>true</B> if the enumerator was successfully advanced to the next element; <B>false</B>
            if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.PhpIteratorEnumerator.Key">
            <summary>
            Returns the key of the current dictionary entry.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.PhpIteratorEnumerator.Value">
            <summary>
            Returns the value of the current dictionary entry.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.PhpIteratorEnumerator.Entry">
            <summary>
            Returns both the key (field name) and the value (field value) of the current dictionary entry.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DObject.PhpIteratorEnumerator.Current">
            <summary>
            Returns both the key (field name) and the value (field value) of the current dictionary entry.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpObject.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates a new <c>PhpObject</c> and calls its PHP constructors (<c>__construct</c> or PHP 4 style constructor).
            </summary>
            <param name="context">The <see cref="T:PHP.Core.ScriptContext"/> to create the instance with.</param>
            <param name="caller"><see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the object that requests the construction.
            </param>
            <remarks>
            <para>
            This constructor should be used when instantiating PHP classes by the Phalanger compiler. Derived classes must
            also contain a constructor with this signature.
            </para>
            <para>
            In fact, this very constructor will never be called and is included here just to show how constructors
            with this signature whould work in derived classes. Firstly, the <see cref="M:PHP.Core.PhpObject.#ctor(PHP.Core.ScriptContext,System.Boolean)"/>
            constructor of the same class is invoked in order to initialize all fields along the inheritance hierarchy.
            Then the <see cref="M:PHP.Core.Reflection.DObject.InvokeConstructor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)"/> method is called in order to locate and invoke a PHP constructor.
            There is no <c>base(context, callingTypeHandle)</c> upcall, in particular.
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpObject.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Creates a new <c>PhpObject</c> without calling its PHP constructor.
            </summary>
            <param name="context">The <see cref="T:PHP.Core.ScriptContext"/> to create the instance with.</param>
            <param name="newInstance">Determines whether this instance was created using the <c>new</c> construct
            (<B>true</B>), or just as a clone of another instance (<B>false</B>).</param>
            <remarks>
            This constructor is used when PHP constructors must not be called - when cloning <see cref="T:PHP.Core.PhpObject"/>s
            (<paramref name="newInstance"/> is <B>false</B>) and when the caller is going to invoke a PHP constructor
            (<paramref name="newInstance"/> is <B>true</B>). Derived classes must also contain a constructor with this
            signature.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpObject.InstanceCreated(PHP.Core.ScriptContext)">
            <summary>
            Notifies derived classes that this instance has just been created.
            </summary>
            <remarks>
            Called before <c>__construct</c> is invoked. When overriding, make sure you call the
            overriden method (<c>base.InstanceCreated(context)</c>).
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpObject.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Creates an instance from deserialized data using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to receive data from.</param><param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.</param>
        </member>
        <member name="P:PHP.Core.PhpObject.RealObject">
            <summary>
            <see cref="T:PHP.Core.PhpObject"/> is its own real object.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpObject.InstanceObject">
            <summary>
            <see cref="T:PHP.Core.PhpObject"/> is passed to its method and property invokes.
            </summary>
        </member>
        <member name="F:PHP.Library.stdClass.ClassName">
            <summary>
            The name of this class.
            </summary>
        </member>
        <member name="M:PHP.Library.stdClass.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates a new <see cref="T:PHP.Library.stdClass"/>.
            <seealso cref="M:PHP.Core.PhpObject.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)"/>
            </summary>
        </member>
        <member name="M:PHP.Library.stdClass.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Creates a new <see cref="T:PHP.Library.stdClass"/>.
            <seealso cref="M:PHP.Core.PhpObject.#ctor(PHP.Core.ScriptContext,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:PHP.Library.stdClass.#ctor(PHP.Core.ScriptContext)">
            <summary>
            Creates a new <see cref="T:PHP.Library.stdClass"/> (<c>newInstance</c> is <B>false</B>).
            </summary>
        </member>
        <member name="M:PHP.Library.stdClass.#ctor">
            <summary>
            Creates a new <see cref="T:PHP.Library.stdClass"/> with current <see cref="T:PHP.Core.ScriptContext"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.stdClass.CreateDefaultObject(PHP.Core.ScriptContext)">
            <summary>
            Creates an empty <see cref="T:PHP.Library.stdClass"/> and throws the "Creating default object from empty value"
            strict message.
            </summary>
            <param name="context">The <see cref="T:PHP.Core.ScriptContext"/> to create the <see cref="T:PHP.Library.stdClass"/> with.</param>
            <returns>The created <see cref="T:PHP.Library.stdClass"/> instance.</returns>
            <exception cref="T:PHP.Core.PhpException">Always (Strict).</exception>
        </member>
        <member name="M:PHP.Library.stdClass.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Creates an instance from deserialized data using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to receive data from.</param><param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.</param>
        </member>
        <member name="T:PHP.Library.__PHP_Incomplete_Class">
            <summary>
            Type of the result of failed deserialization.
            </summary>
            <remarks>
            Instances of this class are created when an attempts is made to deserialize an object whose class
            is undefined for the current script.
            </remarks>
        </member>
        <member name="F:PHP.Library.__PHP_Incomplete_Class.ClassName">
            <summary>
            The name of this class.
            </summary>
        </member>
        <member name="F:PHP.Library.__PHP_Incomplete_Class.ClassNameFieldName">
            <summary>
            Name of the field that holds name of the class that was originally serialized.
            </summary>
        </member>
        <member name="F:PHP.Library.__PHP_Incomplete_Class.__PHP_Incomplete_Class_Name">
            <summary>
            Holds name of the class that was originally serialized.
            </summary>
        </member>
        <member name="M:PHP.Library.__PHP_Incomplete_Class.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates a new <see cref="T:PHP.Library.__PHP_Incomplete_Class"/>.
            <seealso cref="M:PHP.Core.PhpObject.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)"/>
            </summary>
        </member>
        <member name="M:PHP.Library.__PHP_Incomplete_Class.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Creates a new <see cref="T:PHP.Library.__PHP_Incomplete_Class"/>.
            <seealso cref="M:PHP.Core.PhpObject.#ctor(PHP.Core.ScriptContext,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:PHP.Library.__PHP_Incomplete_Class.#ctor">
            <summary>
            Creates a new <see cref="T:PHP.Library.__PHP_Incomplete_Class"/> with current <see cref="T:PHP.Core.ScriptContext"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.__PHP_Incomplete_Class.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Creates an instance from deserialized data using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to receive data from.</param><param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.</param>
        </member>
        <member name="M:PHP.Library.__PHP_Incomplete_Class.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="T:PHP.Library.EventClass`1">
            <summary>
            Represents a CLR event acquired using the property-getting syntax.
            </summary>
            <typeparam name="T">Event handler type (a delegate).</typeparam>
        </member>
        <member name="F:PHP.Library.EventClass`1.delegateDesc">
            <summary>
            The desc of the CLR event's delegate type.
            </summary>
        </member>
        <member name="F:PHP.Library.EventClass`1.eventName">
            <summary>
            Name of the CLR event.
            </summary>
        </member>
        <member name="F:PHP.Library.EventClass`1.addMethod">
            <summary>
            Delegate pointing to the event's add method (may be <B>null</B>).
            </summary>
        </member>
        <member name="F:PHP.Library.EventClass`1.removeMethod">
            <summary>
            Delegate pointing to the event's remove method (may be <B>null</B>).
            </summary>
        </member>
        <member name="M:PHP.Library.EventClass`1.#ctor(PHP.Core.ScriptContext,System.String,PHP.Library.EventClass{`0}.HookDelegate,PHP.Library.EventClass{`0}.HookDelegate)">
            <summary>
            Creates a new <see cref="T:PHP.Library.EventClass`1"/>.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="eventName">Name of the CLR event.</param>
            <param name="addMethod">Delegate pointing to the event's add method (may be <B>null</B>).</param>
            <param name="removeMethod">Delegate pointing to the event's remove method (may be <B>null</B>).</param>
            <remarks>
            At least one of <paramref name="addMethod"/> and <paramref name="removeMethod"/> must be non-<B>null</B>.
            </remarks>
        </member>
        <member name="M:PHP.Library.EventClass`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Creates an instance from deserialized data using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to receive data from.</param><param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.</param>
        </member>
        <member name="M:PHP.Library.EventClass`1.GetStub(PHP.Core.Reflection.DObject,PHP.Core.Reflection.DRoutineDesc,System.String)">
            <summary>
            Returns delegate of T type to CLR stub of the given target-routine pair.
            </summary>
            <param name="target">The target instance or <B>null</B>.</param>
            <param name="routine">The target routine desc.</param>
            <param name="realCalleeName">Real callee name if <paramref name="routine"/> is in fact <c>__call</c>,
            or <B>null</B> if <paramref name="routine"/> if the real callee.</param>
            <returns>
            Delegate to the stub or <B>null</B> if stub for this target-routine pair cannot be generated.
            </returns>
            <remarks>
            This method is used in cases when delegate type T is known at compile-time. By caching the corresponding
            delegate type desc in a static field (see <see cref="F:PHP.Library.EventClass`1.delegateDesc"/>), repeated type desc lookups are
            completely avoided.
            </remarks>
        </member>
        <member name="M:PHP.Library.EventClass`1.__construct(PHP.Core.ScriptContext)">
            <summary>
            Private <c>__construct</c> prevents instantiation from PHP.
            </summary>
        </member>
        <member name="M:PHP.Library.EventClass`1.__toString(PHP.Core.ScriptContext)">
            <summary>
            Converts the instance to a string.
            </summary>
            <returns>The string containing formatted trace.</returns>
        </member>
        <member name="M:PHP.Library.EventClass`1.Add(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Adds a delegate to the event's invocation list.
            </summary>
        </member>
        <member name="M:PHP.Library.EventClass`1.Remove(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Removes a delegate from the event's invocation list.
            </summary>
        </member>
        <member name="M:PHP.Library.EventClass`1.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.EventClass`1.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates a new <see cref="T:PHP.Library.EventClass`1"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.EventClass`1.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Creates a new <see cref="T:PHP.Library.EventClass`1"/>.
            </summary>
        </member>
        <member name="T:PHP.Core.IPhpDestructable">
            <summary>
            Interface specifying PHP object with __destruct function defined. Used when PHP class is being emitted.
            </summary>
        </member>
        <member name="M:PHP.Core.IPhpDestructable.__destruct(PHP.Core.ScriptContext)">
            <summary>
            PHP class destructor.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:PHP.Core.PhpReference">
            <summary>
            Represents a PHP reference.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpReference.value">
            <summary>
            Referenced object. For internal use only. Use property <see cref="P:PHP.Core.PhpReference.Value"/> to access the value.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpReference.#ctor(System.Object@)">
            <summary>
            Initializes new instance of <see cref="T:PHP.Core.PhpReference"/> and
            assigns this new instance into <paramref name="value"/>.
            </summary>
            <param name="value">Value to be wrapped into new instance of <see cref="T:PHP.Core.PhpReference"/> and
            then it will be overwritten by the reference to this new instance.</param>
        </member>
        <member name="M:PHP.Core.PhpReference.GetTypeCode">
            <summary>Returns code of type which implements this interface.</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpReference.ToDouble">
            <summary>Converts instance to its <see cref="T:System.Double"/> representation according to PHP conversion algorithm.</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpReference.ToInteger">
            <summary>Converts instance to its <see cref="T:System.Int32"/> representation according to PHP conversion algorithm.</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpReference.ToLongInteger">
            <summary>Converts instance to its <see cref="T:System.Int32"/> representation according to PHP conversion algorithm.</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpReference.ToBoolean">
            <summary>Converts instance to its <see cref="T:System.Boolean"/> representation according to PHP conversion algorithm.</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpReference.ToPhpBytes">
            <summary>Converts instance to its binary representation (<see cref="T:PHP.Core.PhpBytes"/>).</summary><returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpReference.ToNumber(System.Int32@,System.Int64@,System.Double@)">
            <summary>Converts instance to a number of type <see cref="T:System.Double"/>, <see cref="T:System.Int64"/> or <see cref="T:System.Int32"/>.</summary><param name="intValue">
			The integer value. Valid iff <see cref="F:PHP.Core.Convert.NumberInfo.Integer"/> is returned.
		</param><param name="longValue">
			The long integer value. Valid iff <see cref="F:PHP.Core.Convert.NumberInfo.LongInteger"/> is returned.
		</param><param name="doubleValue">
			The double value. Valid iff <see cref="F:PHP.Core.Convert.NumberInfo.Double"/> is returned.
		</param><returns>Type of the conversion result.</returns>
        </member>
        <member name="M:PHP.Core.PhpReference.PHP#Core#IPhpConvertible#ToString(System.Boolean,System.Boolean@)">
            <summary>
            Converts instance to its string representation according to PHP conversion algorithm.
            </summary>
            <param name="success">Indicates whether conversion was successful.</param>
            <param name="throwOnError">Throw out 'Notice' when conversion wasn't successful?</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpReference.Print(System.IO.TextWriter)">
            <summary>
            Prints a value which is referenced by this instance.
            </summary>
            <param name="output">The output where the value is printed.</param>
        </member>
        <member name="M:PHP.Core.PhpReference.Dump(System.IO.TextWriter)">
            <summary>
            Dumps a value which is referenced by this instance.
            </summary>
            <param name="output">The output where the value is printed.</param>
        </member>
        <member name="M:PHP.Core.PhpReference.Export(System.IO.TextWriter)">
            <summary>
            Exports a value which is referenced by this instance.
            </summary>
            <param name="output">The output where the value is printed.</param>
        </member>
        <member name="M:PHP.Core.PhpReference.DeepCopy">
            <summary>
            Retrieves a copy of this instance. 
            </summary>
            <returns>This instance.</returns>
            <remarks>
            Actually, references are not copied and this instance is returned instead.
            That is because deep-copying stops on references in PHP.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpReference.Copy(PHP.Core.CopyReason)">
            <summary>
            Retrieves a copy of this instance. 
            </summary>
            <returns>This instance.</returns>
            <remarks>
            Actually references are not copied and this instance is returned instead.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpReference.CompareTo(System.Object,System.Collections.IComparer)">
            <summary>
            Compares a referenced object with an object of arbitrary PHP.NET type.
            </summary>
            <remarks>
            Compares a referenced object with <paramref name="obj"/> and returns the result.
            </remarks>
            <param name="obj">An object to compare with this instance.</param><param name="comparer">A comparer to be used for comparing items contained in this instance.</param><returns>
      Negative integer if this instance is less than <paramref name="obj"/>,
      zero if this instance equals to <paramref name="obj"/> and positive integer
      if this instance is greater than <paramref name="obj"/>.
    </returns><remarks>
      The <paramref name="comparer"/> is used to compare items which contained in this instance (useful when the instance
      is an array or object etc.).
    </remarks>
        </member>
        <member name="M:PHP.Core.PhpReference.CompareTo(System.Object)">
            <summary>
            Compares this instance with an object of arbitrary PHP.NET type.
            </summary>
            <remarks>
            Compares a referenced object with <paramref name="obj"/> and returns the result.
            </remarks>
            <param name="obj">An object to compare with this instance.</param><returns>
      Negative integer if this instance is less than <paramref name="obj"/>,
      zero if this instance equals to <paramref name="obj"/> and positive integer
      if this instance is greater than <paramref name="obj"/>.
    </returns><remarks>
      If the <paramref name="obj"/> is also if type <see cref="T:PHP.Core.PhpArray"/>
      the <see cref="F:PHP.Core.PhpComparer.Default"/> comparer is used for comparing its items. 
    </remarks>
        </member>
        <member name="M:PHP.Core.PhpReference.IsEmpty">
            <summary>
            Whether this instance is empty.
            </summary>
            <returns>Whether a referenced object is empty.</returns>
        </member>
        <member name="M:PHP.Core.PhpReference.IsScalar">
            <summary>
            Defines whether <see cref="T:PHP.Core.PhpReference"/> is a scalar.
            </summary>
            <returns>Whether a referenced object is a scalar.</returns>
        </member>
        <member name="M:PHP.Core.PhpReference.GetTypeName">
            <summary>
            Returns a name of declaring type.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:PHP.Core.PhpReference.Walk(PHP.Core.PhpWalkCallback,PHP.Core.ScriptContext)">
            <summary>
            Walks the object graph rooted in this node.
            </summary>
            <param name="callback">The callback method.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
        </member>
        <member name="P:PHP.Core.PhpReference.Value">
            <summary>
            Referenced object.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpReference.IsAliased">
            <summary>
            Returns <B>true</B>. Overriden in <see cref="T:PHP.Core.PhpSmartReference"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpReference.IsSet">
            <summary>
            Returns <B>true</B>. Overriden in <see cref="T:PHP.Core.PhpSmartReference"/>.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpSmartReference">
            <summary>
            Represents a PHP reference that remembers whether it is pointed to by more than one location
            (i.e. whether it really is a reference).
            </summary>
        </member>
        <member name="F:PHP.Core.PhpSmartReference.flags">
            <summary>
            Contains the <see cref="F:PHP.Core.PhpSmartReference.ReferenceFlags.IsAliased"/> and <see cref="F:PHP.Core.PhpSmartReference.ReferenceFlags.IsSet"/> flags.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpSmartReference.DeepCopy">
            <summary>
            Retrieves a deep copy of this instance. 
            </summary>
            <returns>The copy.</returns>
            <remarks>
            If this <see cref="T:PHP.Core.PhpSmartReference"/> <see cref="P:PHP.Core.PhpSmartReference.IsAliased"/>, this instance is returned without copying.
            That is because deep copying stops on references in PHP. If this instance's <see cref="P:PHP.Core.PhpSmartReference.IsAliased"/> is
            <B>false</B>, a new <see cref="T:PHP.Core.PhpSmartReference"/> referencing a deep copy of the current value is returned.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpSmartReference.Copy(PHP.Core.CopyReason)">
            <summary>
            Retrieves a copy of this instance. 
            </summary>
            <returns>The copy.</returns>
            <remarks>
            If this <see cref="T:PHP.Core.PhpSmartReference"/> <see cref="P:PHP.Core.PhpSmartReference.IsAliased"/>, this instance is returned without copying.
            That is because (deep) copying stops on references in PHP. If this instance is not <see cref="P:PHP.Core.PhpSmartReference.IsAliased"/>,
            a new <see cref="T:PHP.Core.PhpSmartReference"/> referencing a copy of the current value is returned.
            </remarks>
        </member>
        <member name="P:PHP.Core.PhpSmartReference.IsAliased">
            <summary>
            <B>true</B> if this <see cref="T:PHP.Core.PhpSmartReference"/> is referenced from more than one location,
            <B>false</B> otherwise.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpSmartReference.IsSet">
            <summary>
            <B>true</B> if the <see cref="F:PHP.Core.PhpReference.value"/> of this <see cref="T:PHP.Core.PhpSmartReference"/> is set,
            <B>false</B> otherwise.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpSmartReference.ReferenceFlags.IsAliased">
            <summary>
            <B>true</B> if this <see cref="T:PHP.Core.PhpSmartReference"/> is referenced from more than one location,
            <B>false</B> otherwise.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpSmartReference.ReferenceFlags.IsSet">
            <summary>
            <B>true</B> if the <see cref="F:PHP.Core.PhpReference.value"/> of this <see cref="T:PHP.Core.PhpSmartReference"/> is set,
            <B>false</B> otherwise.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpExternalResource">
            <summary>
            Represents a resource that was created by an extension and lives in <c>ExtManager</c>.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpExternalResource.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new <see cref="T:PHP.Core.PhpExternalResource"/>.
            </summary>
            <param name="resourceId">The resource ID assigned by the external resource manager.</param>
            <param name="typeName">The resource type name.</param>
        </member>
        <member name="M:PHP.Core.PhpExternalResource.GetId">
            <summary>
            Returns the resource ID given when creating this instance.
            </summary>
            <remarks><seealso cref="M:PHP.Core.PhpExternalResource.#ctor(System.Int32,System.String)"/></remarks>
            <returns>The resource ID.</returns>
        </member>
        <member name="M:PHP.Core.PhpExternalResource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Creates an instance from deserialized data using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to receive data from.</param><param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.</param>
        </member>
        <member name="T:PHP.Core.RuntimeChainElement">
            <summary>
            An abstract element of <see cref="T:PHP.Core.PhpRuntimeChain"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainElement.Get(System.Object,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Applies the element on a given variable (<B>Read</B> semantics).
            </summary>
            <param name="var">The variable.</param>
            <param name="context">Script context.</param>
            <param name="caller">Class context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:PHP.Core.RuntimeChainElement.GetRef(System.Object@,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Applies the element on a given variable (<B>ReadRef</B> semantics).
            </summary>
            <param name="var">The variable.</param>
            <param name="context">Script context.</param>
            <param name="caller">Class context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:PHP.Core.RuntimeChainElement.EnsureVariable(System.Object@,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Performs the ensure operation on an variable to make it suitable for current element application.
            </summary>
            <param name="var">The variable.</param>
            <param name="context">Script context.</param>
            <param name="caller">Class context.</param>
            <returns>The new variable value.</returns>
        </member>
        <member name="M:PHP.Core.RuntimeChainElement.Ensure(System.Object,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Performs the ensure operation on this element to make it suitable for <see cref="F:PHP.Core.RuntimeChainElement.Next"/> element
            application.
            </summary>
            <param name="var">The variable.</param>
            <param name="context">Script context.</param>
            <param name="caller">Class context.</param>
            <returns>The new element value.</returns>
        </member>
        <member name="M:PHP.Core.RuntimeChainElement.GetEnsuredRef(System.Object,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Applies the element on a given variable (<B>ReadRef</B> semantics) that has already been ensured to have
            the suitable type.
            </summary>
            <param name="var">The variable.</param>
            <param name="context">Script context.</param>
            <param name="caller">Class context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="F:PHP.Core.RuntimeChainElement.Next">
            <summary>
            Next <see cref="T:PHP.Core.RuntimeChainElement"/> in the chain.
            </summary>
        </member>
        <member name="P:PHP.Core.RuntimeChainElement.Name">
            <summary>
            Returns the name of the chain element.
            </summary>
        </member>
        <member name="T:PHP.Core.RuntimeChainProperty">
            <summary>
            Represents an object property access (<B>-&gt;</B>).
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainProperty.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:PHP.Core.RuntimeChainProperty"/> with a given name.
            </summary>
            <param name="name">The field name.</param>
        </member>
        <member name="M:PHP.Core.RuntimeChainProperty.Get(System.Object,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Applies the field access on a given variable (<B>Read</B> semantics).
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainProperty.GetRef(System.Object@,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Applies the field access on a given variable (<B>ReadRef</B> semantics).
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainProperty.EnsureVariable(System.Object@,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Performs the ensure operation on an variable to make it a <see cref="T:PHP.Core.Reflection.DObject"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainProperty.Ensure(System.Object,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Performs the ensure operation on this field to make it suitable for <see cref="F:PHP.Core.RuntimeChainElement.Next"/> element
            application.
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainProperty.GetEnsuredRef(System.Object,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Applies the field access on a given variable (<B>ReadRef</B> semantics) that has already been ensured to
            be <see cref="T:PHP.Core.Reflection.DObject"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.RuntimeChainProperty.name">
            <summary>The name of the property.</summary>
        </member>
        <member name="P:PHP.Core.RuntimeChainProperty.Name">
            <summary>Returns the name of the property.</summary>
        </member>
        <member name="T:PHP.Core.RuntimeChainItem">
            <summary>
            Represents an array item access (<B>[x]</B>).
            </summary>
        </member>
        <member name="F:PHP.Core.RuntimeChainItem.key">
            <summary>
            The key.
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainItem.#ctor(PHP.Core.IntStringKey)">
            <summary>
            Creates a new <see cref="T:PHP.Core.RuntimeChainItem"/> with a given key.
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainItem.Get(System.Object,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Applies the item access on a given variable (<B>Read</B> semantics).
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainItem.GetRef(System.Object@,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Applies the item access on a given variable (<B>ReadRef</B> semantics).
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainItem.EnsureVariable(System.Object@,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Performs the ensure operation on an variable to make it a <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainItem.Ensure(System.Object,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Performs the ensure operation on this item to make it suitable for <see cref="F:PHP.Core.RuntimeChainElement.Next"/> element
            application.
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainItem.GetEnsuredRef(System.Object,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Applies the item access on a given variable (<B>ReadRef</B> semantics) that has already been ensured to
            be <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.RuntimeChainItem.Name">
            <summary>
            Returns the name of the item (index).
            </summary>
        </member>
        <member name="T:PHP.Core.RuntimeChainNewItem">
            <summary>
            Represents an array item access (<B>[]</B>).
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainNewItem.#ctor">
            <summary>
            Creates a new <see cref="T:PHP.Core.RuntimeChainNewItem"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainNewItem.Get(System.Object,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Throws an error because <B>[]</B> cannot be used in read context.
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainNewItem.GetRef(System.Object@,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Applies the new item access on a given variable (<B>ReadRef</B> semantics).
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainNewItem.EnsureVariable(System.Object@,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Performs the ensure operation on an variable to make it a <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainNewItem.Ensure(System.Object,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Performs the ensure operation on the new item to make it suitable for <see cref="F:PHP.Core.RuntimeChainElement.Next"/> element
            application.
            </summary>
        </member>
        <member name="M:PHP.Core.RuntimeChainNewItem.GetEnsuredRef(System.Object,PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Applies the new item access on a given variable (<B>ReadRef</B> semantics) that has already been ensured to
            be <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.RuntimeChainNewItem.Name">
            <summary>Returns <B>null</B> as new item (<B>[]</B>) has no name.</summary>
        </member>
        <member name="T:PHP.Core.PhpRuntimeChain">
            <summary>
            Represents an operator chain at runtime.
            </summary>
            <remarks>
            When a compile-time unknown function invocation is encountered and it has a complex parameter consisting of
            an operator chain, evaluation of the chain must be postponed to run-time. Only at run-time it becomes
            clear whether the chain's outcome should be an object or a <see cref="T:PHP.Core.PhpReference"/> (formal parameter
            equipped with the <B>&amp;</B>) which leads to somewhat different evaluation procedure.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpRuntimeChain.#ctor(System.Object)">
            <summary>
            Creates a new <see cref="T:PHP.Core.PhpRuntimeChain"/> operating on a given variable.
            </summary>
            <param name="var">The variable.</param>
        </member>
        <member name="M:PHP.Core.PhpRuntimeChain.#ctor(System.Object,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Creates a new <see cref="T:PHP.Core.PhpRuntimeChain"/> operating on a given variable in a given class context.
            </summary>
            <param name="var">The variable.</param>
            <param name="caller">The class context.</param>
        </member>
        <member name="M:PHP.Core.PhpRuntimeChain.AddField(System.String)">
            <summary>
            Extends this chain with an object field access.
            </summary>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:PHP.Core.PhpRuntimeChain.AddItem(System.Object)">
            <summary>
            Extends this chain with an array item access.
            </summary>
            <param name="name">The name of the item (index).</param>
        </member>
        <member name="M:PHP.Core.PhpRuntimeChain.AddItem">
            <summary>
            Extends this chain with a &quot;new field item&quot; (<B>[]</B>) access.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpRuntimeChain.Add(PHP.Core.RuntimeChainElement)">
            <summary>
            Extends this chain with a <see cref="T:PHP.Core.RuntimeChainElement"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:PHP.Core.PhpRuntimeChain.GetValue(PHP.Core.ScriptContext)">
            <summary>
            Evaluates this chain as if it had the <see cref="F:PHP.Core.Compiler.AST.AccessType.Read"/> access type.
            </summary>
            <param name="context">Current script context.</param>
            <returns>The result of chain evaluation.</returns>
        </member>
        <member name="M:PHP.Core.PhpRuntimeChain.GetReference(PHP.Core.ScriptContext)">
            <summary>
            Evaluates this chain as if it had the <see cref="F:PHP.Core.Compiler.AST.AccessType.ReadRef"/> access type.
            </summary>
            <param name="context">Current script context.</param>
            <returns>The result of chain evaluation.</returns>
        </member>
        <member name="F:PHP.Core.PhpRuntimeChain.Variable">
            <summary>
            The variable on which the chain is applied.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpRuntimeChain.Caller">
            <summary>
            The class context in which the chain should be evaluated.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpRuntimeChain.Chain">
            <summary>
            Head of the linked list of <see cref="T:PHP.Core.RuntimeChainElement"/>s representing field and item names
            applied to the <see cref="F:PHP.Core.PhpRuntimeChain.Variable"/> in the lexical order.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpRuntimeChain.lastElement">
            <summary>
            The lastly added element or <B>null</B> if there are no elements yet.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpStack">
            <summary>
            A stack used to perform indirect calls of user funcions and to call argument-aware functions.
            </summary>
            <remarks>
            <para>
            A stack is used for calling m-decl and args-aware PHP functions/methods.
            1. Caller of such function pushes all arguments into this stack, sets ArgCount
            to the argument count pushed and calls argument-less overload. 
            If a method is called a caller invokes
            Operators.InvokeMethod method and this one calls argument-less overload.
            2. Argument-less overload reads ArgCount arguments from the stack, pushes 
            them to the evalution stack and calls argument-full overload.
            If the callee is args-aware function/method arguments are kept on the stack
            until callee returns and are popped afterwards. Moreover, the number of arguments
            is boxed and pushed on the top of the stack in order to be used by 
            class library funcions working with arguments (such are func_get_args etc.).
            Otherwise, if the function/method is args-unaware, stack frame is deleted before
            the function/method is called.  
            </para>
            <para>
            Protocol for args-unaware excluding Class Library Stubs: 
              AddFrame; arg-less { (PeekValue + PeekReference + PeekValueOptional + PeekReferenceOptional)*; RemoveFrame; arg-full; }
            Protocol for Class Library stubs: 
              AddFrame; arg-less { (PeekValueUnchecked + PeekReferenceUnchecked)*; RemoveFrame; arg-full; }
            Protocol for args-aware:   
              AddFrame; arg-less { (PeekValue + PeekReference + PeekValueOptional + PeekReferenceOptional)*; MakeArgsAware; arg-full; RemoveArgsAwareFrame; }
            </para>
            </remarks>
        </member>
        <member name="F:PHP.Core.PhpStack.Items">
            <summary>
            Array representing stack.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.Types">
            <summary>
            Array representing generic parameters.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.Context">
            <summary>
            The <see cref="T:PHP.Core.ScriptContext"/> which the stack is associated to.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.Top">
            <summary>
            An index of the current top item + 1 (points immediately above the top item). 
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStack.#ctor(PHP.Core.ScriptContext)">
            <summary>
            Creates a new instance of <see cref="T:PHP.Core.PhpStack"/>.
            </summary>
            <param name="context">The script context.</param>
        </member>
        <member name="M:PHP.Core.PhpStack.ResizeItems(System.Int32)">
            <summary>
            ResizeItemss args stack to maximum of a given size and a double of the current size.
            </summary>
            <param name="size">The minimal required size.</param>
        </member>
        <member name="M:PHP.Core.PhpStack.ResizeTypes(System.Int32)">
            <summary>
            ResizeItemss types stack to maximum of a given size and a double of the current size.
            </summary>
            <param name="size">The minimal required size.</param>
        </member>
        <member name="F:PHP.Core.PhpStack.ArgCount">
            <summary>
            The number of items in the last stack frame.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.TypeArgCount">
            <summary>
            The number of items in the last stack frame.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.Variables">
            <summary>
            Defined variables.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.CalleeName">
            <summary>
            The name of called function or method. Set up before peeking of values or references.
            Used for error reporting.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.Callback">
            <summary>
            Set by PhpCallback.Invoke if a function is called via a callback. 
            Changes slightly the behavior of method <see cref="M:PHP.Core.PhpStack.PeekReference(System.Int32)"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.LateStaticBindType">
            <summary>
            Type used to call currently evaluated method.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStack.GetArgCount(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the number of arguments passed to the current user-function.
            </summary>
            <returns><B>True</B> on success, <B>false</B> if called from outside of user-function context.</returns>
            <exception cref="T:PHP.Core.PhpException">If called from outside of user-function context (Warning).</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.GetArgument(System.Int32)">
            <summary>
            Retrieves an argument passed to the current user-function.
            </summary>
            <param name="index">The index of the argument to get (starting from zero).</param>
            <returns>
            The value of the <paramref name="index"/>-th argument or <b>false</b> on error.
            The value is returned as is, i.e. no copy is made. That should be done by library function.
            </returns>
            <exception cref="T:PHP.Core.PhpException">If <paramref name="index"/> is negative (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">If <paramref name="index"/> is greater than the current 
            user-function's actual parameter count (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">If called from outside of user-function context (Warning).</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.GetArguments">
            <summary>
            Returns an array of arguments of the current user-defined function. 
            </summary>
            <returns>
            The array of arguments which values contains arguments' values and keys are their indices or
            <b>null</b> on error.
            Values in array are returned as is, i.e. no copy is made. That should be done by library function.
            </returns>
            <exception cref="T:PHP.Core.PhpException">If called from outside of user-function context (Warning).</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.AddFrame">
            <summary>
		  Pushes item(s) to the top of a stack.
		</summary><remarks>
		  Sets a size of the current 
		</remarks><exception cref="T:System.IndexOutOfRangeException">If there is not enough space in the stack.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.AddFrame(System.Object)">
            <summary>
		  Pushes item(s) to the top of a stack.
		</summary><remarks>
		  Sets a size of the current 
		</remarks><exception cref="T:System.IndexOutOfRangeException">If there is not enough space in the stack.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.AddFrame(System.Object,System.Object)">
            <summary>
		  Pushes item(s) to the top of a stack.
		</summary><remarks>
		  Sets a size of the current 
		</remarks><exception cref="T:System.IndexOutOfRangeException">If there is not enough space in the stack.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.AddFrame(System.Object,System.Object,System.Object)">
            <summary>
		  Pushes item(s) to the top of a stack.
		</summary><remarks>
		  Sets a size of the current 
		</remarks><exception cref="T:System.IndexOutOfRangeException">If there is not enough space in the stack.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.AddFrame(System.Object,System.Object,System.Object,System.Object)">
            <summary>
		  Pushes item(s) to the top of a stack.
		</summary><remarks>
		  Sets a size of the current 
		</remarks><exception cref="T:System.IndexOutOfRangeException">If there is not enough space in the stack.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.AddFrame(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
		  Pushes item(s) to the top of a stack.
		</summary><remarks>
		  Sets a size of the current 
		</remarks><exception cref="T:System.IndexOutOfRangeException">If there is not enough space in the stack.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.AddFrame(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
		  Pushes item(s) to the top of a stack.
		</summary><remarks>
		  Sets a size of the current 
		</remarks><exception cref="T:System.IndexOutOfRangeException">If there is not enough space in the stack.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.AddFrame(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
		  Pushes item(s) to the top of a stack.
		</summary><remarks>
		  Sets a size of the current 
		</remarks><exception cref="T:System.IndexOutOfRangeException">If there is not enough space in the stack.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.AddFrame(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
		  Pushes item(s) to the top of a stack.
		</summary><remarks>
		  Sets a size of the current 
		</remarks><exception cref="T:System.IndexOutOfRangeException">If there is not enough space in the stack.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.AddFrame(System.Object[])">
            <summary>
		  Pushes item(s) to the top of a stack.
		</summary><remarks>
		  Sets a size of the current 
		</remarks><exception cref="T:System.IndexOutOfRangeException">If there is not enough space in the stack.</exception>
            <param name="args">Arguments to add to a new frame.</param>
        </member>
        <member name="M:PHP.Core.PhpStack.AddFrame(System.Collections.ICollection)">
            <summary>
		  Pushes item(s) to the top of a stack.
		</summary><remarks>
		  Sets a size of the current 
		</remarks><exception cref="T:System.IndexOutOfRangeException">If there is not enough space in the stack.</exception>
            <param name="args">Arguments to add to a new frame.</param>
        </member>
        <member name="M:PHP.Core.PhpStack.AddTypeFrame">
            <!-- No matching elements were found for the following include tag --><include file="Doc/Common.xml" path="docs/method[@name=&quot;PhpStack.AddTypeFrame&quot;]/*"/>
        </member>
        <member name="M:PHP.Core.PhpStack.AddTypeFrame(PHP.Core.Reflection.DTypeDesc)">
            <!-- No matching elements were found for the following include tag --><include file="Doc/Common.xml" path="docs/method[@name=&quot;PhpStack.AddTypeFrame&quot;]/*"/>
        </member>
        <member name="M:PHP.Core.PhpStack.AddTypeFrame(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc)">
            <!-- No matching elements were found for the following include tag --><include file="Doc/Common.xml" path="docs/method[@name=&quot;PhpStack.AddTypeFrame&quot;]/*"/>
        </member>
        <member name="M:PHP.Core.PhpStack.AddTypeFrame(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc)">
            <!-- No matching elements were found for the following include tag --><include file="Doc/Common.xml" path="docs/method[@name=&quot;PhpStack.AddTypeFrame&quot;]/*"/>
        </member>
        <member name="M:PHP.Core.PhpStack.AddTypeFrame(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc)">
            <!-- No matching elements were found for the following include tag --><include file="Doc/Common.xml" path="docs/method[@name=&quot;PhpStack.AddTypeFrame&quot;]/*"/>
        </member>
        <member name="M:PHP.Core.PhpStack.AddTypeFrame(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc)">
            <!-- No matching elements were found for the following include tag --><include file="Doc/Common.xml" path="docs/method[@name=&quot;PhpStack.AddTypeFrame&quot;]/*"/>
        </member>
        <member name="M:PHP.Core.PhpStack.AddTypeFrame(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc)">
            <!-- No matching elements were found for the following include tag --><include file="Doc/Common.xml" path="docs/method[@name=&quot;PhpStack.AddTypeFrame&quot;]/*"/>
        </member>
        <member name="M:PHP.Core.PhpStack.AddTypeFrame(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc)">
            <!-- No matching elements were found for the following include tag --><include file="Doc/Common.xml" path="docs/method[@name=&quot;PhpStack.AddTypeFrame&quot;]/*"/>
        </member>
        <member name="M:PHP.Core.PhpStack.AddTypeFrame(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc)">
            <!-- No matching elements were found for the following include tag --><include file="Doc/Common.xml" path="docs/method[@name=&quot;PhpStack.AddTypeFrame&quot;]/*"/>
        </member>
        <member name="M:PHP.Core.PhpStack.AddTypeFrame(PHP.Core.Reflection.DTypeDesc[])">
            <!-- No matching elements were found for the following include tag --><include file="Doc/Common.xml" path="docs/method[@name=&quot;PhpStack.AddTypeFrame&quot;]/*"/>
        </member>
        <member name="M:PHP.Core.PhpStack.ExpandFrame(PHP.Core.PhpArray)">
            <summary>
            Adds additional arguments before arguments currently on stack.
            Used for expanding 'use' parameters of lambda function.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStack.RemoveFrame">
            <summary>
            Removes the current open args-unaware frame from the stack.
            </summary>
            <remarks>
            Called by args-unaware stubs before executing the arg-full function/method.
            </remarks>
            <exception cref="T:PHP.Core.PhpException">Some actual arguments are missing (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Some actual arguments are not references and a function is not called from callback (Error).</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.RemoveArgsAwareFrame(System.Int32)">
            <summary>
            Removes the closed args-aware frame from the top of the stack.
            </summary>
            <remarks>
            Called by args-aware stubs before returning.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpStack.MakeArgsAware(System.Int32)">
            <summary>
            Sets the stack up so it is prepared for the arg-full overload call.
            Called in args-aware stubs after peeking all arguments and before calling the arg-full overload.
            </summary>
            <param name="encodedFormalCount">{type param count} * 0x1000 + {param count}.</param>
            <returns>The number of arguments pushed on the stack.</returns>
            <remarks>
            An args-aware stub is usually called when the caller doesn't know which arguments 
            are references and which not. Therefore, the stub should dereference all that 
            arguments which are not references. Those arguments on the stack corresponding 
            with formal ones are dereferenced by <see cref="M:PHP.Core.PhpStack.PeekValue(System.Int32)"/> and <see cref="M:PHP.Core.PhpStack.PeekValueOptional(System.Int32)"/>
            methods. Others are dereferenced here.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpStack.PeekAllValues(System.Int32)">
            <summary>
            Dereferences all arguments on the stack starting from the given one.
            </summary>
            <param name="formalParamCount">The number of formal arguments.</param>
        </member>
        <member name="M:PHP.Core.PhpStack.CollectFrame">
            <summary>
            Collects arguments of the current open frame to the new instance of <see cref="T:PHP.Core.PhpArray"/> and removes the frame.
            Peeks all arguments as values and does no deep-copying.
            </summary>
            <returns>The array containing all arguments.</returns>
        </member>
        <member name="M:PHP.Core.PhpStack.AddIndirection(System.Int32)">
            <summary>
            Adds a level of indirection to a specified argument.
            Supresses checks that disables a reference to containe another reference.
            </summary>
            <param name="i">An index of argument starting from 1.</param>
        </member>
        <member name="M:PHP.Core.PhpStack.PeekValue(System.Int32)">
            <summary>
            Retrieves an argument from the current frame.
            </summary>
            <param name="i">The index of the argument starting from 1 (the last pushed argument).</param>
            <returns>The value passed as the <paramref name="i"/>-th actual argument.</returns>
            <remarks>
            If argument is a <see cref="T:PHP.Core.PhpReference"/> then it is dereferenced.
            Do set <see cref="F:PHP.Core.PhpStack.CalleeName"/> before calling this method since the name is used for reporting errors.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i"/> is invalid.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.PeekValueOptional(System.Int32)">
            <summary>
            Retrieves an optional argument from the current frame.
            </summary>
            <param name="i">The index of the argument starting from 1 (the last pushed argument).</param>
            <returns>The value passed as the <paramref name="i"/>-th actual argument.</returns>
            <remarks>If argument is a <see cref="T:PHP.Core.PhpReference"/> then it is dereferenced.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i"/> is invalid.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.PeekValueUnchecked(System.Int32)">
            <summary>
            Retrieves an argument from the current frame without checking range.
            Used also by library arg-less stubs.
            </summary>
            <param name="i">The index of the argument starting from 1 (the last pushed argument).</param>
            <returns>The value passed as the <paramref name="i"/>-th actual argument.</returns>
            <remarks>If argument is a <see cref="T:PHP.Core.PhpReference"/> then it is dereferenced.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i"/> is invalid.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.PeekReference(System.Int32)">
            <summary>
            Retrieves a reference argument from the current frame.
            </summary>
            <param name="i">The index of the argument starting from 1 (the last pushed argument).</param>
            <returns>The reference passed as the <paramref name="i"/>-th actual argument. Never <B>null</B>.</returns>
            <remarks>
            Do set <see cref="F:PHP.Core.PhpStack.CalleeName"/> before calling this method since the name is used for reporting errors.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i"/> is invalid.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.PeekReferenceOptional(System.Int32)">
            <summary>
            Retrieves a reference optional argument from the current frame.
            </summary>
            <param name="i">The index of the argument starting from 1 (the last pushed argument).</param>
            <returns>The reference passed as the <paramref name="i"/>-th actual argument. Never <B>null</B>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i"/> is invalid.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.PeekReferenceUnchecked(System.Int32)">
            <summary>
            Peeks a reference argument from the current frame without range check. 
            Used by library arg-less stubs.
            </summary>
            <param name="i">The index of the argument starting from 1 (the last pushed argument).</param>
            <returns>The reference passed as the <paramref name="i"/>-th actual argument. Never <B>null</B>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i"/> is invalid.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.PeekType(System.Int32)">
            <summary>
            Retrieves a type argument from the current frame.
            </summary>
            <param name="i">The index of the type argument starting from 1 (the last pushed argument).</param>
            <returns>The <see cref="T:PHP.Core.Reflection.DTypeDesc"/> passed as the <paramref name="i"/>-th actual type argument.</returns>
            <remarks>
            Do set <see cref="F:PHP.Core.PhpStack.CalleeName"/> before calling this method since the name is used for reporting errors.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i"/> is invalid.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.PeekTypeOptional(System.Int32)">
            <summary>
            Retrieves an optional type argument from the current frame.
            </summary>
            <param name="i">The index of the argument starting from 1 (the last pushed argument).</param>
            <returns>The value passed as the <paramref name="i"/>-th actual argument.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i"/> is invalid.</exception>
        </member>
        <member name="M:PHP.Core.PhpStack.ThrowIfNotArgsaware(System.String)">
            <summary>
            Check whether current <see cref="F:PHP.Core.PhpStack.CalleeName"/> matches currently called function.
            </summary>
            <param name="routineName">Currently called function name.</param>
            <exception cref="T:System.InvalidOperationException">If currently caled function does not match <see cref="F:PHP.Core.PhpStack.CalleeName"/>.</exception>
        </member>
        <member name="T:PHP.Core.PhpStack.CallState">
            <summary>
            Data used in arg-less stub during a single call.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.CallState.ArgCount">
            <summary>
            The number of items in the last stack frame.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.CallState.TypeCount">
            <summary>
            The number of types in the last stack frame.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.CallState.Variables">
            <summary>
            Defined variables.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.CallState.NamingContext">
            <summary>
            Defined variables.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.CallState.CalleeName">
            <summary>
            The name of called function or method. Set up before peeking of values or references.
            Used for error reporting.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpStack.CallState.Callback">
            <summary>
            Set by PhpCallback.Invoke if a function is called via a callback. 
            Changes slightly the behavior of method <see cref="M:PHP.Core.PhpStack.PeekReference(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:PHP.Core.StreamContext">
            <summary>
            Resource type used for associating additional options with stream wrappers.
            </summary>
            <remarks>
            Stream Contexts are stored in a Resource to save useless deep-copying
            of the contained constant array.
            </remarks>
        </member>
        <member name="F:PHP.Core.StreamContext.StreamContextTypeName">
            <summary>
            The type name displayed when printing a variable of type StreamContext.
            </summary>
        </member>
        <member name="F:PHP.Core.StreamContext.Default">
            <summary>
            Default StreamContext. Cannot be null.
            </summary>
        </member>
        <member name="M:PHP.Core.StreamContext.#ctor">
            <summary>
            Create an empty StreamContext (allows lazy PhpArray instantiation).
            </summary>
        </member>
        <member name="M:PHP.Core.StreamContext.#ctor(PHP.Core.PhpArray)">
            <summary>
            Create a new context resource from an array of wrapper options.
            </summary>
            <param name="data">A 2-dimensional array of wrapper options</param>
        </member>
        <member name="M:PHP.Core.StreamContext.#ctor(PHP.Core.PhpArray,System.Boolean)">
            <summary>
            Create a new context resource from an array of wrapper options.
            </summary>
            <param name="data">A 2-dimensional array of wrapper options</param>
            <param name="registerInReqContext">Whether to register this instance in current <see cref="T:PHP.Core.RequestContext"/>. Should be <c>false</c> for static resources.</param>
        </member>
        <member name="M:PHP.Core.StreamContext.GetValid(PHP.Core.PhpResource)">
            <summary>
            Checks the context for validity, throws a warning it is not.
            </summary>
            <param name="context">Resource which should contain a StreamContext.</param>
            <returns>The given resource cast to <see cref="T:PHP.Core.StreamContext"/> or <c>null</c> if invalid.</returns>
            <exception cref="T:PHP.Core.PhpException">In case the context is invalid.</exception>
        </member>
        <member name="M:PHP.Core.StreamContext.GetValid(PHP.Core.PhpResource,System.Boolean)">
            <summary>
            Checks the context for validity, throws a warning it is not.
            </summary>
            <param name="context">Resource which should contain a StreamContext.</param>
            <param name="allowNull"><c>True</c> to allow <c>NULL</c> context, that will be without any warning converted to Default <see cref="T:PHP.Core.StreamContext"/>.</param>
            <returns>The given resource cast to <see cref="T:PHP.Core.StreamContext"/> or <c>null</c> if invalid and <c>allowNull</c> is <c>false</c>.</returns>
            <exception cref="T:PHP.Core.PhpException">In case the context is invalid.</exception>
        </member>
        <member name="M:PHP.Core.StreamContext.GetOption(System.String,System.String)">
            <summary>
            Gets a wrapper-specific option identified by the scheme and the option name.
            </summary>
            <param name="scheme">The target wrapper scheme.</param>
            <param name="option">The option name.</param>
            <returns>The specific option or <b>null</b> if no such option exists.</returns>
        </member>
        <member name="P:PHP.Core.StreamContext.Data">
            <summary>
            The contained context array (2D associative array: first wrapper, then options).
            </summary>
        </member>
        <member name="P:PHP.Core.StreamContext.Parameters">
            <summary>
            The additional parameters (currently only a notification callback).
            </summary>
        </member>
        <member name="T:PHP.Core.StreamOpenMode">
            <summary>
            Shortcuts for the short overload of PhpStream.Open
            </summary>
        </member>
        <member name="F:PHP.Core.StreamOpenMode.Read">
            <summary>Open for reading</summary>
        </member>
        <member name="F:PHP.Core.StreamOpenMode.Write">
            <summary>Open for writing</summary>
        </member>
        <member name="F:PHP.Core.StreamOpenMode.ReadText">
            <summary>Open for reading (text mode)</summary>
        </member>
        <member name="F:PHP.Core.StreamOpenMode.WriteText">
            <summary>Open for writing (text mode)</summary>
        </member>
        <member name="F:PHP.Core.StreamOpenMode.ReadBinary">
            <summary>Open for reading (binary mode)</summary>
        </member>
        <member name="F:PHP.Core.StreamOpenMode.WriteBinary">
            <summary>Open for writing (binary mode)</summary>
        </member>
        <member name="T:PHP.Core.StreamParameterOptions">
            <summary>
            Parameter identifier for <see cref="M:PHP.Core.PhpStream.SetParameter(PHP.Core.StreamParameterOptions,System.Object)"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.StreamParameterOptions.BlockingMode">
            <summary>Set the synchronous/asynchronous operation mode (<c>value</c> is <see cref="T:System.Boolean"/>.</summary>
        </member>
        <member name="F:PHP.Core.StreamParameterOptions.ReadBufferSize">
            <summary>Set the read buffer size (<c>value</c> is <see cref="T:System.Int32"/>).</summary>
        </member>
        <member name="F:PHP.Core.StreamParameterOptions.WriteBufferSize">
            <summary>Set the write buffer size (<c>value</c> is <see cref="T:System.Int32"/>).</summary>
        </member>
        <member name="F:PHP.Core.StreamParameterOptions.ReadTimeout">
            <summary>Set the read timeout in seconds (<c>value</c> is <see cref="T:System.Double"/>).</summary>
        </member>
        <member name="F:PHP.Core.StreamParameterOptions.SetChunkSize">
            <summary>Set the read chunk size (<c>value</c> is <see cref="T:System.Int32"/>).</summary>
        </member>
        <member name="F:PHP.Core.StreamParameterOptions.Locking">
            <summary>Set file locking (<c>value</c> is <see cref="T:System.Int32"/>).</summary>
        </member>
        <member name="F:PHP.Core.StreamParameterOptions.MemoryMap">
            <summary>Set memory mapping. Unimplemented.</summary>
        </member>
        <member name="F:PHP.Core.StreamParameterOptions.Truncate">
            <summary>Truncate the stream at the current position.</summary>
        </member>
        <member name="T:PHP.Core.CheckAccessMode">
            <summary>
            Mode selector of <see cref="M:PHP.Core.PhpStream.CheckAccess(System.String,PHP.Core.CheckAccessMode,PHP.Core.CheckAccessOptions)"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.CheckAccessMode.FileExists">
            <summary>Return invalid <c>false</c> if file does not exist (<c>fopen()</c>).</summary>
        </member>
        <member name="F:PHP.Core.CheckAccessMode.FileNotExists">
            <summary>Return valid <c>true</c> if file does not exist (for example <c>rename()</c>.</summary>
        </member>
        <member name="F:PHP.Core.CheckAccessMode.FileOrDirectory">
            <summary>If file does not exist, check directory (for example <c>stat()</c>).</summary>
        </member>
        <member name="F:PHP.Core.CheckAccessMode.Directory">
            <summary>Only check directory (needed for <c>mkdir</c>, <c>opendir</c>).</summary>
        </member>
        <member name="F:PHP.Core.CheckAccessMode.FileMayExist">
            <summary>Only check file.</summary>
        </member>
        <member name="T:PHP.Core.CheckAccessOptions">
            <summary>
            Additional options for <see cref="M:PHP.Core.PhpStream.CheckAccess(System.String,PHP.Core.CheckAccessMode,PHP.Core.CheckAccessOptions)"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.CheckAccessOptions.Empty">
            <summary>Empty option (default).</summary>
        </member>
        <member name="F:PHP.Core.CheckAccessOptions.UseIncludePath">
            <summary>If <c>true</c> then the include paths are searched for the file too (1).</summary>
        </member>
        <member name="F:PHP.Core.CheckAccessOptions.Quiet">
            <summary>Suppress display of error messages (2).</summary>
        </member>
        <member name="T:PHP.Core.NativeStream">
            <summary>
            An implementation of <see cref="T:PHP.Core.PhpStream"/> as a simple
            encapsulation of a .NET <see cref="T:System.IO.Stream"/> class
            which is directly accessible via the RawStream property.
            </summary>
        </member>
        <member name="M:PHP.Core.NativeStream.FreeManaged">
            <summary>
            PhpResource.FreeManaged overridden to get rid of the contained context on Dispose.
            </summary>
        </member>
        <member name="M:PHP.Core.NativeStream.RawRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
  Reads raw byte data from the underlying stream to the given <paramref name="buffer"/>.
  </summary><param name="buffer">The buffer.</param><param name="offset">Starting index in the <paramref name="buffer"/>.</param><param name="count">How many bytes to read.</param><returns>The number of bytes read or <c>0</c> in case of EOF or <c>-1</c> in case of an error.</returns>
        </member>
        <member name="M:PHP.Core.NativeStream.RawWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>
  Writes the binary data from the <paramref name="buffer"/>to the underlying stream.
  </summary><param name="buffer">The buffer.</param><param name="offset">Starting index in the <paramref name="buffer"/>.</param><param name="count">How many bytes to write.</param><returns>The number of bytes written or <c>-1</c> in case of an error.</returns>
        </member>
        <member name="M:PHP.Core.NativeStream.RawFlush">
            <summary>
  Flushes the underlying stream.
  </summary><returns><c>true</c> on success, <c>false</c> on error.</returns>
        </member>
        <member name="F:PHP.Core.NativeStream.reportEof">
            <summary>EOF stored at the time of the last read.</summary>
        </member>
        <member name="M:PHP.Core.NativeStream.RawTell">
            <summary>
  Retreives the position in the underlying stream in bytes from the beginning.
  </summary><returns>The position or <c>-1</c> on error.</returns><exception cref="T:PHP.Core.PhpException">When seeking is not supported.</exception>
        </member>
        <member name="M:PHP.Core.NativeStream.RawSeek(System.Int32,System.IO.SeekOrigin)">
            <summary>
	Changes the offset in the underlying stream.
	</summary><param name="offset">New position from the <paramref name="whence"/> position.</param><param name="whence">Where to count the <paramref name="offset"/> from. May be one
	of the <see cref="T:System.IO.SeekOrigin"/> options.</param><returns><c>true</c> on success, <c>false</c> on error.</returns><exception cref="T:PHP.Core.PhpException">When seeking is not supported.</exception>
        </member>
        <member name="M:PHP.Core.NativeStream.RawLength">
            <summary>
            Returns the Length property of the underlying stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.NativeStream.SeekExpects(System.Int64,System.Int64,System.Int64,System.IO.SeekOrigin)">
            <summary>
            Get the expected position in the stream to check for Seek() failure.
            </summary>
            <param name="position">Actual position in the stream.</param>
            <param name="length">The length of the stream.</param>
            <param name="offset">The offset for the seek() operation.</param>
            <param name="whence">Where to count the new position from.</param>
            <returns>The expected new position.</returns>
        </member>
        <member name="F:PHP.Core.NativeStream.stream">
            <summary>The encapsulated native stream.</summary>
        </member>
        <member name="P:PHP.Core.NativeStream.RawEof">
            <summary>
  <c>true</c> if the end of the stream was reached, <c>false</c> otherwise.
  </summary>
        </member>
        <member name="P:PHP.Core.NativeStream.CanSeek">
            <summary>
  <c>true</c> if this stream implements seeking behavior (<c>Seek</c> and <c>Tell</c>).
  </summary>
        </member>
        <member name="P:PHP.Core.NativeStream.RawStream">
            <summary>
  Casts this instance as the <see cref="T:System.IO.Stream"/>
  (gives direct acess to the unbuffered and unfiltered raw binary data).
  </summary>
        </member>
        <member name="T:PHP.Core.PhpUserStream">
            <summary>
            An implementation of <see cref="T:PHP.Core.PhpStream"/> as a simple
            encapsulation of a .NET <see cref="T:System.IO.Stream"/> class
            which is directly accessible via the RawStream property.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpUserStream.FreeManaged">
            <summary>
            PhpResource.FreeManaged overridden to get rid of the contained context on Dispose.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpUserStream.RawRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
  Reads raw byte data from the underlying stream to the given <paramref name="buffer"/>.
  </summary><param name="buffer">The buffer.</param><param name="offset">Starting index in the <paramref name="buffer"/>.</param><param name="count">How many bytes to read.</param><returns>The number of bytes read or <c>0</c> in case of EOF or <c>-1</c> in case of an error.</returns>
        </member>
        <member name="M:PHP.Core.PhpUserStream.RawWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>
  Writes the binary data from the <paramref name="buffer"/>to the underlying stream.
  </summary><param name="buffer">The buffer.</param><param name="offset">Starting index in the <paramref name="buffer"/>.</param><param name="count">How many bytes to write.</param><returns>The number of bytes written or <c>-1</c> in case of an error.</returns>
        </member>
        <member name="M:PHP.Core.PhpUserStream.RawFlush">
            <summary>
  Flushes the underlying stream.
  </summary><returns><c>true</c> on success, <c>false</c> on error.</returns>
        </member>
        <member name="M:PHP.Core.PhpUserStream.RawTell">
            <summary>
  Retreives the position in the underlying stream in bytes from the beginning.
  </summary><returns>The position or <c>-1</c> on error.</returns><exception cref="T:PHP.Core.PhpException">When seeking is not supported.</exception>
        </member>
        <member name="M:PHP.Core.PhpUserStream.RawSeek(System.Int32,System.IO.SeekOrigin)">
            <summary>
	Changes the offset in the underlying stream.
	</summary><param name="offset">New position from the <paramref name="whence"/> position.</param><param name="whence">Where to count the <paramref name="offset"/> from. May be one
	of the <see cref="T:System.IO.SeekOrigin"/> options.</param><returns><c>true</c> on success, <c>false</c> on error.</returns><exception cref="T:PHP.Core.PhpException">When seeking is not supported.</exception>
        </member>
        <member name="M:PHP.Core.PhpUserStream.RawLength">
            <summary>
            Returns the Length property of the underlying stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PHP.Core.PhpUserStream.RawEof">
            <summary>
  <c>true</c> if the end of the stream was reached, <c>false</c> otherwise.
  </summary>
        </member>
        <member name="P:PHP.Core.PhpUserStream.CanSeek">
            <summary>
  <c>true</c> if this stream implements seeking behavior (<c>Seek</c> and <c>Tell</c>).
  </summary>
        </member>
        <member name="P:PHP.Core.PhpUserStream.UserWrapper">
            <summary><see cref="T:PHP.Core.UserStreamWrapper"/>.</summary>
        </member>
        <member name="T:PHP.Core.PhpString">
            <summary>
            String representation that uses <see cref="P:PHP.Core.PhpString.StringBuilder"/> internally to improve
            performance of modifications such as Append, Prepend and singe character change.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpString.PhpTypeName">
            <summary>
            PhpStrings PHP type name (string).
            </summary>
        </member>
        <member name="F:PHP.Core.PhpString.cow">
            <summary>
            Copy-on-write aware string builder.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpString.#ctor(PHP.Core.PhpString)">
            <summary>
            Lazy copy construction.
            </summary>
            <param name="phps"></param>
        </member>
        <member name="M:PHP.Core.PhpString.#ctor(System.String)">
            <summary>
            Initialize PhpString with string value.
            </summary>
            <param name="str">String value.</param>
        </member>
        <member name="M:PHP.Core.PhpString.#ctor(System.String,System.String)">
            <summary>
            Initialize PhpString with two string values that will be concatenated.
            </summary>
            <param name="str1">First string value.</param>
            <param name="str2">Second string value.</param>
        </member>
        <member name="M:PHP.Core.PhpString.PHP#Core#IPhpConvertible#ToString(System.Boolean,System.Boolean@)">
            <summary>
            Converts instance to its string representation according to PHP conversion algorithm.
            </summary>
            <param name="success">Indicates whether conversion was successful.</param>
            <param name="throwOnError">Throw out 'Notice' when conversion wasn't successful?</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:PHP.Core.PhpString.Walk(PHP.Core.PhpWalkCallback,PHP.Core.ScriptContext)">
            <summary>
            Walks the object graph rooted in this node.
            </summary>
            <param name="callback">The callback method.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
        </member>
        <member name="P:PHP.Core.PhpString.StringBuilder">
            <summary>
            Internal <see cref="P:PHP.Core.PhpString.StringBuilder"/> containing string data. Note: Can be shared.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpString.CowStringBuilder">
            <summary>
            StringBuilder that can be marked both as read only (shared, immutable) or writable.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpString.CowStringBuilder._refCount">
            <summary>
            Keep track of "reference count". Only increased when copied, and decreased when shared instance is modified.
            Sometimes it really avoids copying.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpString.CowStringBuilder.#ctor(System.String)">
            <summary>
            Initialize the instance with string value.
            </summary>
            <param name="str">String value.</param>
        </member>
        <member name="M:PHP.Core.PhpString.CowStringBuilder.#ctor(System.String,System.Int32)">
            <summary>
            Initialize the instance with string and expected capacity.
            </summary>
            <param name="str">String value.</param>
            <param name="capacity">Expected capacity.</param>
        </member>
        <member name="M:PHP.Core.PhpString.CowStringBuilder.#ctor(System.String,System.String)">
            <summary>
            Initialize the instance with twi string values that will be concatenated.
            </summary>
            <param name="str1"></param>
            <param name="str2"></param>
        </member>
        <member name="M:PHP.Core.PhpString.CowStringBuilder.Share">
            <summary>
            Mark this instance as shared (read only, immutable).
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.PhpString.CowStringBuilder.Unshare">
            <summary>
            Get back shared instance of <see cref="T:PHP.Core.PhpString.CowStringBuilder"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpString.CowStringBuilder.Builder">
            <summary>
            <see cref="P:PHP.Core.PhpString.StringBuilder"/> containing the string (Unicode) data.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpString.CowStringBuilder.IsShared">
            <summary>
            True iff the internal data structure is shared and should not be modified.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpString.SerializationHelper">
            <summary>
            Handles serialization and deserialization of <see cref="T:PHP.Core.PhpString"/>.
            </summary>
            <remarks>Deserialization converts this object into <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="F:PHP.Core.PhpString.SerializationHelper.InfoValueName">
            <summary>
            Name of value field within <see cref="T:System.Runtime.Serialization.SerializationInfo"/> containing serialized string.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpString.SerializationHelper.value">
            <summary>
            Deserialized string value.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpString.SerializationHelper.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Beginning of the deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:PHP.Core.PhpArrayString">
            <summary>
            Created by ensuring operators (i.e. when a chain is written) if the ensured value is a non-empty string.
            Holds a string container (<see cref="T:PHP.Core.PhpString"/> or <see cref="T:PHP.Core.PhpBytes"/>).
            The operator immediately following the ensuring operator either raises an error if it is an ensuring operator
            or modifies byte/character in the string if it is a <see cref="M:PHP.Core.PhpArray.SetArrayItem(System.Object)"/> operator.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DConstantDesc.#ctor(PHP.Core.Reflection.DModule,PHP.Core.PhpMemberAttributes,System.Object)">
            <summary>
            Used by compiler for global constants.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DConstantDesc.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes,System.Object)">
            <summary>
            Used by compiler for class constants.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DConstantDesc.GetValue(PHP.Core.ScriptContext)">
            <summary>
            Read value of this constant.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:PHP.Core.Reflection.DConstantDesc.LiteralValue">
            <summary>
            Written-up by the analyzer if the value is evaluable (literals only).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DConstantDesc.ValueIsDeferred">
            <summary>
            <c>True</c> if value of this constant is deferred to runtime; hence it must be read from corresponding static field every time.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DConstant.#ctor(PHP.Core.Reflection.DConstantDesc)">
            <summary>
            Used by known constant subclasses.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DConstant.#ctor(System.String)">
            <summary>
            Used by unknown constants subclasses.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DConstant.HasValue">
            <summary>
            Whether the value of the constant is known and stored in the constant-desc.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DConstant.Value">
            <summary>
            Constant value. Valid only if <see cref="P:PHP.Core.Reflection.DConstant.HasValue"/> is <B>true</B>.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.KnownConstant.HasValue">
            <summary>
            Whether the value of the constant is known and stored in the constant-desc.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.KnownConstant.RealField">
            <summary>
            Real storage of the constant (a field).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.KnownConstant.Node">
            <summary>
            AST node representing the constant. Used for evaluation only.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.KnownConstant.IsExported">
            <summary>
            Gets whether the constant is exported.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.GlobalConstant">
            <summary>
            Pure mode global constants, namespace constants, CLR constants, library constants.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.GlobalConstant.scriptTypeBuilder">
            <summary>
            If constant defined within &lt;script&gt; type, remember its builder to define constant field there.
            In case of pure or transient module, this is null. If this is null, the constant is declared in as CLR global.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.GlobalConstant.#ctor(PHP.Core.Reflection.DModule,PHP.Core.QualifiedName,System.Reflection.FieldInfo)">
            <summary>
            Used for constants created by run-time, but with known declaring module
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.GlobalConstant.#ctor(PHP.Core.QualifiedName,System.Reflection.FieldInfo)">
            <summary>
            Used for constants created by run-time.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.GlobalConstant.#ctor(PHP.Core.QualifiedName,PHP.Core.PhpMemberAttributes,PHP.Core.Reflection.CompilationSourceUnit,System.Boolean,PHP.Core.AST.Scope,PHP.Core.Text.Span)">
            <summary>
            Used by compiler.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.GlobalConstant.QualifiedName">
            <summary>
            Note: the base name is case-sensitive.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.GlobalConstant.Extension">
            <summary>
            Name of the extension where this global constant was defined.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClassConstant.#ctor(PHP.Core.VariableName,PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes,PHP.Core.SourceUnit,PHP.Core.Text.Span)">
            <summary>
            Used by compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClassConstant.#ctor(PHP.Core.VariableName,PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes)">
            <summary>
            Used by full-reflect (CLR).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClassConstant.#ctor(PHP.Core.VariableName,PHP.Core.Reflection.DConstantDesc,System.Reflection.FieldInfo)">
            <summary>
            Used by full-reflect (PHP).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClassConstant.IsValidName(System.String)">
            <summary>
            Checks whether a specified name is valid constant name. 
            </summary>
            <param name="name">The constant name.</param>
            <seealso cref="M:PHP.Core.PhpVariable.IsValidName(System.String)"/>
        </member>
        <member name="P:PHP.Core.Reflection.ClassConstant.Span">
            <summary>
            Error reporting.
            <see cref="F:PHP.Core.ShortPosition.Invalid"/> for reflected PHP methods.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ClassConstant.SourceUnit">
            <summary>
            Error reporting (for partial classes).
            <B>null</B> for reflected PHP methods.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.Declaration.Scope">
            <summary>
            Compile-time non-pure only. Used when added to the containing compilation unit.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.Declaration.Node">
            <summary>
            Types stores their AST nodes here to allow fast member-analysis.
            Should be nulled by the analysis (to cut AST off).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.Declaration.Group">
            <summary>
            Declaration group or null if there is only single declaration.
            Can be non-null for both conditional and unconditional decls (during merging).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.Declaration.IsUnreachable">
            <summary>
            Set by analyzer.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.Declaration.IsSynthetic">
            <summary>
            Set by analyzer.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.RoutineProperties">
            <summary>
            Properties of a PHP user function.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.RoutineProperties.None">
            <summary>
            No significant properties.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.RoutineProperties.ContainsIndirectFcnCall">
            <summary>
            A function contains ${expr}() construct.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.RoutineProperties.ContainsEval">
            <summary>
            A function contains eval or assert.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.RoutineProperties.ContainsInclude">
            <summary>
            A function contains include (either dynamic or static).
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.RoutineProperties.IndirectLocalAccess">
            <summary>
            A function contains ${expr}.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.RoutineProperties.ContainsLocalsWorker">
            <summary>
            A function contains call to a class library method with <see cref="F:PHP.Core.FunctionImplOptions.NeedsVariables"/> option.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.RoutineProperties.UseVarArgs">
            <summary>
            A function contains call to system function which manipulates arguments on PHP stack.
            (e.g. func_get_arg, func_get_args...)
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.RoutineProperties.LateStaticBinding">
            <summary>
            A function contains late static binding call (use of <c>static</c> keyword referring to current runtime type).
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.RoutineProperties.IsArgsAware">
            <summary>
            A function uses arguments from <see cref="T:PHP.Core.PhpStack"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.RoutineProperties.HasUnoptimizedLocals">
            <summary>
            A function local variable accesses can be optimized.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.RoutineProperties.HasRTVariablesTable">
            <summary>
            A function contains a table of run-time variables.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.RoutineSignature.CanOverride(PHP.Core.Reflection.RoutineSignature)">
            <summary>
            Determines whether this signature can override given signature.
            Parameters count, type hints and names must match.
            </summary>
            <param name="sig"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Reflection.DRoutine.#ctor(PHP.Core.Reflection.DMemberDesc)">
            <summary>
            Used by subclasses when creating known routines.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DRoutine.#ctor(System.String)">
            <summary>
            Used by subclasses when creating unknown routines.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DRoutine.GetCallerRequirements">
            <summary>
            Gets <see cref="T:PHP.Core.Reflection.RoutineProperties"/> that each PHP caller of this routine is required to satisfy.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DRoutine.EmitCall(PHP.Core.CodeGenerator,System.String,PHP.Core.AST.CallSignature,PHP.Core.Emit.IPlace,System.Boolean,System.Int32,PHP.Core.Reflection.DType,PHP.Core.Text.Span,PHP.Core.Compiler.AST.AccessType,System.Boolean)">
            <summary>
            Emits the call of DRoutine.
            </summary>
            <param name="codeGenerator">Used code generator.</param>
            <param name="fallbackQualifiedName">Fallback function name to call, if the origin one does not exist.</param>
            <param name="callSignature">Call signature.</param>
            <param name="instance">IPlace containing instance of object in case of non static method call.</param>
            <param name="runtimeVisibilityCheck">True to check visibility during runtime.</param>
            <param name="overloadIndex">The index of overload (used in case of PhpLibraryFunction).</param>
            <param name="type">Type used to resolve this routine.</param>
            <param name="position">Position of the call expression.</param>
            <param name="access">Access type of the routine call. Used to determine wheter the caller does not need return value. In such case additional operations (like CastToFalse) should not be emitted.</param>
            <param name="callVirt">True to call the instance method virtually, using <c>.callvirt</c> instruction. This is used when current routine is non-static routine called on instance, not statically.</param>
            <returns>PhpTypeCode of the resulting value that is on the top of the evaluation stack after the DRoutine call. Value types are not boxed.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DRoutine.ResolveOverload(PHP.Core.Analyzer,PHP.Core.AST.CallSignature,PHP.Core.Text.Span,PHP.Core.Reflection.RoutineSignature@)">
            <summary>
            Finds most suitable overload. Returns <see cref="F:PHP.Core.Reflection.DRoutine.InvalidOverloadIndex"/> and 
            <see cref="F:PHP.Core.Reflection.UnknownSignature.Default"/> in <c>overloadSignature</c> if no suitable overload exists.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DRoutine.ReturnValueDeepCopyEmitted">
            <summary>
            Whether the deep-copy-testing code (if applicable) is emitted by <see cref="M:PHP.Core.Reflection.DRoutine.EmitCall(PHP.Core.CodeGenerator,System.String,PHP.Core.AST.CallSignature,PHP.Core.Emit.IPlace,System.Boolean,System.Int32,PHP.Core.Reflection.DType,PHP.Core.Text.Span,PHP.Core.Compiler.AST.AccessType,System.Boolean)"/> method and thus
            the AST node emitter needn't to care any more.
            </summary>
            <remarks>
            It is better to make test on need for a deep-copy in the caller than in the callee
            since the callee doesn't know whether the copying is really necessary.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.KnownRoutine.#ctor(PHP.Core.Reflection.DRoutineDesc)">
            <summary>
            Used by the compiler and the reflector.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.KnownRoutine.Name">
            <summary>
            Simple name of the routine.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.KnownRoutine.Properties">
            <summary>
            Compiled functions/methods: Set during analysis.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.KnownRoutine.UsesLateStaticBinding">
            <summary>
            Whether the routine contains use of late static binding.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.KnownRoutine.IsArgsAware">
            <summary>
            Whether the routine should be called via argless stub. (Needs PhpStack).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.UnknownMethod.#ctor(PHP.Core.Reflection.DType,System.String)">
            <summary>
            Used by the compiler for unresolved methods.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.UnknownMethod.#ctor(PHP.Core.Reflection.DType)">
            <summary>
            Used by the compiler for unresolved ctors.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.UnknownSignature.IsAlias(System.Int32)">
            <summary>
            Returns <B>true</B> as parameters should be passed to the stack by reference since
            we don't know whether they are passed by ref in the real signature.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.PhpRoutineSignature">
            <summary>
            Represents PHP routine signature. Immutable.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutineSignature.#ctor(PHP.Core.Reflection.GenericParameter[],System.Int32)">
            <summary>
            Creates a signature partially initialized with type parameters. 
            Rationale for partial initialization: 
            When analyzing a routine, the analyzer needs to know about type parameters prior to the analysis of actual parameters.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutineSignature.WriteUp(System.Boolean,System.Collections.BitArray,PHP.Core.Reflection.DType[],System.Int32)">
            <summary>
            Completes the signature with information on actual parameters and return value. 
            Returns this instance for convenience.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutineSignature.IsAlias(System.Int32)">
            <summary>
            Whether a index-th parameter has by-ref semantics.
            Can be called with index greater than the number of parameters. 
            Return <B>false</B> in such cases as the arguments behind the last formal parameter cannot be 
            returned to the caller modified.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutineSignature.CanOverride(PHP.Core.Reflection.RoutineSignature)">
            <summary>
            Determines whether this signature can override given signature.
            Parameters count, type hints and names must match.
            </summary>
            <param name="sig"></param>
            <returns>True if method with this signature can override method with given signature.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutineSignature.ToArgfullSignature(System.Int32,System.Type@)">
            <summary>
            Returns an array of types according to the alias mask of the signature (for argfull use).
            </summary>
            <param name="hiddenParamCount">
            Number of hidden parameters preceding the parameters captured by alias mask.
            </param>
            <param name="returnType">Return type.</param>
            <returns>
            Argfull overload CLR parameter types. Contains <B>null</B> references in places of hidden params.
            </returns>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutineSignature.FromArgfullInfo(PHP.Core.Reflection.PhpRoutine,System.Reflection.MethodInfo)">
            <summary>
            Returns a <see cref="T:PHP.Core.Reflection.PhpRoutineSignature"/> for the specified argfull <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <exception cref="T:PHP.Core.ReflectionException">Invalid argfull.</exception>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutineSignature.GenericParams">
            <summary>
            Type parameters.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutineSignature.MandatoryGenericParamCount">
            <summary>
            Gets the number of mandatory type parameters.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutineSignature.AliasMask">
            <summary>
            Gets alias mask, i.e. the bitmask where a flag is set iff the respective formal parameter aliased.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutineSignature.TypeHints">
            <summary>
            Gets type hints. Array, int, bool, etc. hints are represented by special DTypeDesc.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutineSignature.AliasReturn">
            <summary>
            Gets whether the routine returns by alias.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutineSignature.MandatoryParamCount">
            <summary>
            Gets the number of mandatory parameters.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutineSignature.ParamCount">
            <summary>
            Gets the number of all parameters.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutineSignature.GenericParamCount">
            <summary>
            Gets the number of all type parameters.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpRoutine.isDllImport">
            <summary>Contains value of the <see cref="P:PHP.Core.Reflection.PhpRoutine.IsDllImport"/> property</summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutine.#ctor(PHP.Core.Reflection.DRoutineDesc,PHP.Core.AST.Signature,PHP.Core.AST.TypeSignature)">
            <summary>
            Used by the compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutine.#ctor(PHP.Core.Reflection.DRoutineDesc)">
            <summary>
            Used by the reflection.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutine.DefineRealMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
            <summary>
            Defines real method on routine declaring type.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutine.EmitPeekArgument(PHP.Core.Emit.ILEmitter,System.Int32)">
            <summary>
            Emits code which pops argument from the <see cref="T:PHP.Core.PhpStack"/> and pushes it on the evaluation stack.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpRoutine.EmitLoadInstanceUnwrapped(PHP.Core.CodeGenerator,PHP.Core.Emit.IPlace)">
            <summary>
            Emit load <paramref name="instance"/> in top of the evaluation stack. Unwraps the value if &lt;proxy&gt; is used instead of <c>this</c>.
            </summary>
            <param name="codeGenerator"></param>
            <param name="instance"></param>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutine.IsDllImport">
            <summary>Indicates if this method is decorated with <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/></summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutine.Signature">
            <summary>
            Written up, not null after that.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutine.Builder">
            <summary>
            Auxiliary fields used for emission, <B>null</B> for reflected types.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutine.IsGeneric">
            <summary>
            <B>true</B>, if the method has generic arguments. 
            Valid since write-up.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutine.FirstPhpParameterIndex">
            <summary>
            Gets the number of hidden arguments of the arg-full overload.
            Valid since write-up.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutine.FirstPseudoGenericParameterIndex">
            <summary>
            Gets an index of the first pseudo-generic argument.
            Methods and functions use the 0-th argument for passing the <see cref="T:PHP.Core.ScriptContext"/>.
            In instance methods, the 0-th argument is "this".
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutine.ReturnValueDeepCopyEmitted">
            <summary>
            PHP routine result should be checked for deep-copy.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpRoutineBuilder.Labels">
            <summary>
            TODO: lazy creation
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpFunction.#ctor(PHP.Core.QualifiedName,PHP.Core.PhpMemberAttributes,PHP.Core.AST.Signature,PHP.Core.AST.TypeSignature,System.Boolean,PHP.Core.AST.Scope,PHP.Core.Reflection.CompilationSourceUnit,PHP.Core.Text.Span)">
            <summary>
            To be used by compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpFunction.#ctor(PHP.Core.QualifiedName,PHP.Core.Reflection.PhpRoutineDesc,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Used by full-reflect.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpMethod.#ctor(PHP.Core.Reflection.PhpType,PHP.Core.Name,PHP.Core.PhpMemberAttributes,System.Boolean,PHP.Core.AST.Signature,PHP.Core.AST.TypeSignature,PHP.Core.Reflection.CompilationSourceUnit,PHP.Core.Text.Span)">
            <summary>
            Used by the compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpMethod.#ctor(PHP.Core.Name,PHP.Core.Reflection.PhpRoutineDesc,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Used by full-reflect.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpMethod.Span">
            <summary>
            Error reporting.
            <c>Position.Invalid</c> for reflected PHP methods.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpMethod.SourceUnit">
            <summary>
            Error reporting (for partial classes).
            <B>null</B> for reflected PHP methods.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpMethod.HasBody">
            <summary>
            Methods only.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLambdaFunction.#ctor(PHP.Core.AST.Signature,PHP.Core.Reflection.CompilationSourceUnit,PHP.Core.Text.Span)">
            <summary>
            Used by the compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryFunction.#ctor(PHP.Core.Reflection.PhpLibraryFunctionDesc,PHP.Core.Name,PHP.Core.FunctionImplOptions,System.Int32)">
            <summary>
            Used by full-reflect.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryFunction.ResolveOverload(System.Int32,System.Boolean@)">
            <summary>
            Finds an overload whose parameter count matches the specified one.
            </summary>
            <param name="argumentCount">The number of parameters.</param>
            <param name="exactMatch">Whether the exactly required overload has been found.</param>
            <returns>The resulting overload index (always valid).</returns>
            <remarks>
            If the last overload (when sorted by parameter counts) has <see cref="T:PHP.Core.Reflection.PhpLibraryFunction.OverloadFlags"/> 
            flag set and <paramref name="argumentCount"/> is greater than this overload's parameter count
            then the last overload is returned. If there is no exactly matching overload returns first 
            which has more arguments than specified by <paramref name="argumentCount"/>.
            </remarks>
        </member>
        <member name="P:PHP.Core.Reflection.PhpLibraryFunction.ReturnValueDeepCopyEmitted">
            <summary>
            Library function does deep-copy according to the <see cref="T:PHP.Core.PhpDeepCopyAttribute"/>.
            The call itself emits the deep-copy, so the outer code needn't to care.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpLibraryFunction.Options">
            <summary>
            Options associated with the function (all overloads have to have the same options associated).
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.PhpLibraryFunction.OverloadFlags">
            <summary>
            Additional overload flags.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpLibraryFunction.OverloadFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpLibraryFunction.OverloadFlags.NeedsVariables">
            <summary>
            Needs local variables of caller
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpLibraryFunction.OverloadFlags.NeedsThisReference">
            <summary>
            Needs $this reference of caller
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpLibraryFunction.OverloadFlags.NeedsClassContext">
            <summary>
            Needs DTypeDesc class context of the caller.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpLibraryFunction.OverloadFlags.IsVararg">
            <summary>Overload has "params" array as its last argument.</summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpLibraryFunction.OverloadFlags.NeedsScriptContext">
            <summary>
            The overload has the ScriptContext as the first parameter. It will be passed automatically.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpLibraryFunction.OverloadFlags.NotSupported">
            <summary>
            Function is not supported.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpLibraryFunction.OverloadFlags.NeedsLateStaticBind">
            <summary>
            Needs DTypeDesc class context of the late static binding.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryFunction.Overload.Create(System.Reflection.MethodInfo,PHP.Core.FunctionImplOptions)">
            <summary>
            Creates an overload of the function. May return <B>null</B> on error.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryFunction.Overload.IsAlias(System.Int32)">
            <summary>
            Returns <B>true</B> if the <c>index</c>-th formal parameter of the PHP signature is by-ref.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpLibraryFunction.Overload.RealParameters">
            <summary>
            Parameters.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpLibraryFunction.Overload.Method">
            <summary>
            The method implementing the overload.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpLibraryFunction.Overload.MandatoryParamCount">
            <summary>
            Mandatory PHP parameters count. 
            Auxiliary parameters such are the defined variable table and "params" array are not included.
            Example:
              f(VarTable, p1, p2, params[])  -> 2
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpLibraryFunction.Overload.Flags">
            <summary>
            Additional flags.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrMethod.#ctor(PHP.Core.Name,PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes,System.Int32,System.Boolean)">
            <summary>
            Used by full-reflect.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrMethod.CreateConstructor(PHP.Core.Reflection.ClrTypeDesc)">
            <summary>
            Used by full-reflect (<see cref="T:PHP.Core.Reflection.DTypeDesc"/>).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrMethod.AddOverload(System.Reflection.MethodBase,PHP.Core.Reflection.ClrMethod.Overload@)">
            <summary>
            Adds an overload by reflecting the specified real overload.
            Returns <see cref="F:PHP.Core.Reflection.DRoutine.InvalidOverloadIndex"/> and <B>null</B> in <paramref name="overload"/>
            if the reflection fails.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrMethod.EmitArglessStub(PHP.Core.Emit.ILEmitter,PHP.Core.Emit.IPlace,PHP.Core.Emit.IPlace)">
            <summary>
            Run-time argless-stub emission.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrMethod.BuildDefaultValueCtor(System.Type)">
            <summary>
            Emit static method that creates an instance of given value type using default ctor.
            </summary>
            <param name="valueType">Value type to be instantiated by resulting method.</param>
            <returns>The method that returns value boxed into new instance of <see cref="T:PHP.Core.Reflection.ClrValue`1"/>.</returns>
        </member>
        <member name="P:PHP.Core.Reflection.ClrMethod.Overloads">
            <summary>
            Array of overloads represented by the <see cref="T:PHP.Core.Reflection.ClrMethod"/>.
            Sorted by the number of mandatory parameters.
            Contrary to <see cref="T:PHP.Core.Reflection.PhpLibraryFunction"/>, there may be more overloads with the same parameter count.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.ClrMethod.OverloadFlags">
            <summary>
            Additional overload flags.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.ClrMethod.OverloadFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.ClrMethod.OverloadFlags.IsVararg">
            <summary>
            Overload has "params" array as its last argument.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrMethod.Overload.ToString">
            <summary>
            Stringifies this signature for easier equality checks.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrMethod.Overload.ClrSignatureToString(System.Int32,System.Reflection.ParameterInfo[],System.Type)">
            <summary>
            Stringifies a CLR method signature for easier equality checks.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrMethod.Overload.ClrSignatureToString(System.Int32,System.Object[],System.Object)">
            <summary>
            Stringifies a CLR method signature for easier equality checks.
            </summary>
            <remarks>
            Elements of <paramref name="parameters"/> and <paramref name="returnType"/> are either <see cref="T:System.Type"/>s
            or integeres denoting generic method type parameter indexes. Negative index means byref parameter.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.ClrMethod.Overload.MakeConstructed(PHP.Core.Reflection.ConstructedType,System.Type@)">
            <summary>
            Returns parameters and return type remapped according to a constructed type.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ClrMethod.Overload.Method">
            <summary>
            The method implementing the overload.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ClrMethod.Overload.MandatoryParamCount">
            <summary>
            Mandatory parameter count. 
            Same as total parameter count as the default parameters are currently not supported.
            Differs from parameters.Length if the last argument is param-array in which case, the last parameter is not counted.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ClrMethod.Overload.MandatoryGenericParamCount">
            <summary>
            Mandatory type parameter count.
            Same as total parameter count as CLR doesn't use concept of default type parameters.
            Same as the number of genericParameters.Length.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.PurePhpFunction">
            <summary>
            Represents runtime global PHP function declared in &lt;Declare&gt; helper method.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PurePhpFunction.#ctor(PHP.Core.Reflection.PhpRoutineDesc,System.String,System.Reflection.MethodInfo)">
            <summary>
            Used by full-reflect.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.TransientAssembly.InvalidEvalId">
            <summary>
            An invalid eval id. All eval ids are indices to the eval list so -1 is invalid value indeed.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.TransientAssembly.rwLock">
            <summary>
            Protects both <see cref="F:PHP.Core.Reflection.TransientAssembly.cache"/> and <see cref="F:PHP.Core.Reflection.TransientAssembly.modules"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.TransientAssembly.cache">
            <summary>
            Maps transient source code to its compiled form - an instance of <see cref="T:PHP.Core.Reflection.ScriptModule"/> class.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.TransientAssembly.modules">
            <summary>
            List of modules. Can contain <B>null</B> slots if two threads are compiling the same code. The slower
            may reserve the slot but it doesn't fill it (the redundant compiled code is thrown away).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.TransientAssembly.GetModule(System.Int32)">
            <summary>
            Gets eval info.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.TransientAssembly.GetRootModule(System.Int32)">
            <summary>
            Gets a root eval for a specified eval.
            </summary>
            <param name="id">The eval id.</param>
            <returns>An id of root eval.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.TransientAssembly.GetEvalFullTrace(System.Int32,System.Collections.Generic.List{PHP.Core.ErrorStackInfo})">
            <summary>
            Fills a list by an eval trace starting with an eval of a specified id.
            </summary>
            <param name="evalId">The id of the eval which to start with.</param>
            <param name="result">The list of <see cref="T:PHP.Core.ErrorStackInfo"/> to fill. </param>
        </member>
        <member name="M:PHP.Core.Reflection.TransientAssembly.Dump(System.IO.TextWriter)">
            <summary>
            Dumps cache.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.TransientAssembly.Key">
            <summary>
            Compiled code depends on its source code, source file, and position.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.TransientAssembly.Value">
            <summary>
            Values stored in the cache.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrAssembly.#ctor(PHP.Core.ApplicationContext,System.Reflection.Assembly,PHP.Core.LibraryConfigStore)">
            <summary>
            Called by the loader.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpLibraryAssembly.#ctor(PHP.Core.ApplicationContext,System.Reflection.Assembly,PHP.Core.PhpLibraryAttribute,PHP.Core.LibraryConfigStore)">
            <summary>
            Called by the loader. 
            Thread unsafe. Has to be called only in a critical section preventing any other calls.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpLibraryAssembly.Descriptor">
            <summary>
            Library descriptor. Available only if the library is not loaded for reflection only.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpLibraryAssembly.Properties">
            <summary>
            The PhpLibrary attribute of the library.
            Custom attribute describing library properties.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpLibraryAssembly.ImplementedExtensions">
            <summary>
            Returns a list of names of extensions which are implemented by the library.
            </summary>
            <returns>An array of names.</returns>
            <remarks>The first item (if any) is considered to be default extension for the library.</remarks>
        </member>
        <member name="P:PHP.Core.Reflection.PhpLibraryAssembly.DefaultExtension">
            <summary>
            Returns a name of default extension which is implemented by the library.
            </summary>
            <remarks>The first item (if any) is considered to be default extension for the library.</remarks>
        </member>
        <member name="T:PHP.Core.Reflection.ClrObject">
            <summary>
            Represents a non-PHP object at runtime.
            </summary>
            <remarks>
            TODO: Should override conversion routines and delegate to real object's ToString, IConvertible, ...
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.ClrObject.SetRealObject(System.Object)">
            <summary>
            To be used by serialization only.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrObject.WrapDynamic(System.Object)">
            <summary>
            Performs "dynamic" type check and wraps only if the type is not primitive
            </summary>
            <param name="instance">Object to be converted to PHP world.</param>
            <returns>PHP type variable.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.ClrObject.WrapDelegate(System.MulticastDelegate)">
            <summary>
            Wrap <see cref="T:System.MulticastDelegate"/> into PHP invokable object.
            </summary>
            <param name="function">.NET <see cref="T:System.MulticastDelegate"/> to be wrapped.</param>
            <returns>PHP callable object.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.ClrObject.Create(System.Object)">
            <summary>
            Called by compiled code when a new real object is being constructed.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.ClrObject.valueTypesCache">
            <summary>
            Cache of <see cref="T:PHP.Core.Reflection.ClrValue`1"/> and its <see cref="M:PHP.Core.Reflection.ClrValue`1.Create(`0)"/> method associated with specific value type.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrObject.ToString(System.Boolean,System.Boolean@)">
            <summary>
            Overrides basic string conversion of CLR object by calling its <c>ToString</c> method.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrObject.ToPhpBytes">
            <summary>
            Overrides basic string conversion of CLR object by calling its <c>ToString</c> method.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Creates an instance from deserialized data using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to receive data from.</param><param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.</param>
        </member>
        <member name="P:PHP.Core.Reflection.ClrObject.RealObject">
            <summary>
            The real object contained by this ClrObject wrapper.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ClrObject.InstanceObject">
            <summary>
            The reference passed to the methods and properties.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.ClrObject.DelegateClosure.function">
            <summary>
            Delegate to be called when this object is converted into <see cref="T:PHP.Core.PhpCallback"/> and invoked.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.ClrObject.DelegateClosure.functionParams">
            <summary>
            Cache args count of the <see cref="F:PHP.Core.Reflection.ClrObject.DelegateClosure.function"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrObject.DelegateClosure.CheckArgs(System.Object[])">
            <summary>
            Check the <paramref name="args"/> to correspond to <see cref="F:PHP.Core.Reflection.ClrObject.DelegateClosure.function"/>.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Reflection.ClrObject.DelegateClosure.invokeDelegate(System.Object[])">
            <summary>
            
            </summary>
            <param name="args">Arguments to be unwrapped and passed to <see cref="F:PHP.Core.Reflection.ClrObject.DelegateClosure.function"/>.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Reflection.ClrObject.DelegateClosure.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="T:PHP.Core.Reflection.IClrValue">
            <summary>
            An interface identifying ClrValue&lt;T&gt; instance object.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.ClrValue`1">
            <summary>
            Represents non-PHP value typed object at runtime.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PHP.Core.Reflection.ClrValue`1.realValue">
            <summary>
            The CLR value represented by this <see cref="T:PHP.Core.Reflection.ClrValue`1"/> instance.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrValue`1.Create(`0)">
            <summary>
            Create the instance of <see cref="T:PHP.Core.Reflection.ClrValue`1"/>.
            </summary>
            <param name="value">The value to be wrapped into <see cref="T:PHP.Core.Reflection.ClrValue`1"/>.</param>
            <returns>New instance of <see cref="T:PHP.Core.Reflection.ClrValue`1"/> containing <paramref name="value"/> as its <see cref="P:PHP.Core.Reflection.ClrValue`1.RealObject"/>.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.ClrValue`1.ToString(System.Boolean,System.Boolean@)">
            <summary>
            Overrides basic string conversion of CLR object by calling its <c>ToString</c> method.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrValue`1.ToPhpBytes">
            <summary>
            Overrides basic string conversion of CLR object by calling its <c>ToString</c> method.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrValue`1.ToDouble">
            <summary>
            Overrides default double cast of CLR object in case of <see cref="T:System.Decimal"/> type.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrValue`1.ToNumber(System.Int32@,System.Int64@,System.Double@)">
            <summary>
            Overrides default number conversion of CLR object in of <see cref="T:System.Decimal"/> type.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrValue`1.CloneObjectInternal(PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Clone the value typed object and create new <see cref="T:PHP.Core.Reflection.ClrValue`1"/> instance containing copy of <see cref="F:PHP.Core.Reflection.ClrValue`1.realValue"/>.
            </summary>
            <param name="caller">Current class contetext. Ignored.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>. Ignored.</param>
            <param name="deepCopyFields"></param>
            <returns>New instance of <see cref="T:PHP.Core.Reflection.ClrValue`1"/>.</returns>
        </member>
        <member name="P:PHP.Core.Reflection.ClrValue`1.RealObject">
            <summary>
            The CLR value represented by this <see cref="T:PHP.Core.Reflection.ClrValue`1"/> instance. The returned value is boxed.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ClrValue`1.InstanceObject">
            <summary>
            The object passed as an instance to called methods and properties of this value type.
            The whole <see cref="T:PHP.Core.Reflection.ClrValue`1"/> is returned too not box the wrapped value. Therefore the value
            can be modified in-place by the called method or property.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DPropertyDesc.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes)">
            <summary>
            Used by compiler and full-reflect.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DPropertyDesc.DumpGet(PHP.Core.Reflection.DObject)">
            <summary>
            Get operation used for <see cref="T:PHP.Core.IPhpPrintable"/> operations.
            </summary>
            <param name="instance">Reference to <c>self</c> instance.</param>
            <returns>Value of this property.</returns>
            <remarks>Value of CLR properties are wrapped into <see cref="T:PHP.Core.Reflection.DPropertyDesc.ClrPrintableValue"/> avoiding infinite recursion and displaying values converted to string if necessary.</remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DPropertyDesc.Set(PHP.Core.Reflection.DObject,System.Object)">
            <summary>
            If the property is an unset <see cref="T:PHP.Core.PhpReference"/>, it is returned (no modification takes place),
            otherwise <B>null</B> is returned (and the new value is written to the property).
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.DPropertyDesc.ClrPrintableValue">
            <summary>
            Wraps CLR property value to stop recursion and display the value as a string. Same as VisualStudio's Immediate Window.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DPropertyDesc.ClrPrintableValue.OverridePrint">
            <summary>
            Determines whether <see cref="F:PHP.Core.Reflection.DPropertyDesc.ClrPrintableValue.value"/> is primitive type and can be printed as it is. Otherwise the <see cref="F:PHP.Core.Reflection.DPropertyDesc.ClrPrintableValue.value"/> should be evaluated to string to be printed.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DPropertyDesc.ClrPrintableValue.ValueString">
            <summary>
            Converts <see cref="F:PHP.Core.Reflection.DPropertyDesc.ClrPrintableValue.value"/> to string enclosed with { and }.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DPhpFieldDesc.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes,PHP.Core.GetterDelegate,PHP.Core.SetterDelegate)">
            <summary>
            Used by type population.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DPhpFieldDesc.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes)">
            <summary>
            Used by full reflection.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DProperty.#ctor(PHP.Core.Reflection.DPropertyDesc)">
            <summary>
            Used by subclasses when creating known routines.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DProperty.#ctor(System.String)">
            <summary>
            Used by subclasses when creating unknown routines.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.KnownProperty.#ctor(PHP.Core.Reflection.DPropertyDesc,PHP.Core.VariableName)">
            <summary>
            Used by subclasses.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.UnknownProperty.#ctor(PHP.Core.Reflection.DType,System.String)">
            <summary>
            Used by the compiler for unresolved properties.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpField.#ctor(PHP.Core.VariableName,PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes,System.Boolean,PHP.Core.SourceUnit,PHP.Core.Text.Span)">
            <summary>
            Used by compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpField.#ctor(PHP.Core.VariableName,PHP.Core.Reflection.DPropertyDesc,System.Reflection.FieldInfo,System.Reflection.PropertyInfo)">
            <summary>
            Used by full reflection.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpField.#ctor(PHP.Core.VariableName,PHP.Core.Reflection.DPropertyDesc,PHP.Core.Reflection.DPropertyDesc,System.Boolean,System.Reflection.PropertyInfo)">
            <summary>
            Used by full reflection for fields that are not implemented by their declaring type.
            <seealso cref="T:PHP.Core.PhpPublicFieldAttribute"/>
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpField.IsAbstract">
            <summary>
            Should be used internally for validation only. Valid fields doesn't have these attributes.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpField.Span">
            <summary>
            Error reporting.
            <c>Position.Invalid</c> for reflected PHP fields.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpField.SourceUnit">
            <summary>
            Error reporting (for partial classes).
            <B>null</B> for reflected PHP fields.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpField.Implementor">
            <summary>
            Returns the <see cref="T:PHP.Core.Reflection.PhpType"/> that implements this field, i.e. provides storage for it.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpField.UpgradesVisibility">
            <summary>
            Returns <B>true</B> iff this is a public field overriding a protected field.
            </summary>
            <remarks>Valid after <see cref="M:PHP.Core.Reflection.PhpField.DefineBuilders"/>.</remarks>
        </member>
        <member name="P:PHP.Core.Reflection.PhpField.IsExported">
            <summary>
            Gets whether the field is exported.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.PhpVisibleProperty">
            <summary>
            Used by full reflection for class properties marked with [PhpVisible] attribute.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpVisibleProperty.#ctor(PHP.Core.VariableName,PHP.Core.Reflection.DPropertyDesc,System.Reflection.PropertyInfo)">
            <summary>
            Used by full reflection.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpVisibleProperty.EmitIsAliased(PHP.Core.Emit.ILEmitter)">
            <summary>
            Emit (stack_top dup).IsAliased = true;
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:PHP.Core.Reflection.ClrPropertyBase.#ctor(PHP.Core.Reflection.DPropertyDesc,PHP.Core.VariableName)">
            <summary>
            Used by full-reflect.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrProperty.#ctor(PHP.Core.VariableName,PHP.Core.Reflection.ClrTypeDesc,PHP.Core.PhpMemberAttributes,System.Reflection.PropertyInfo,System.Boolean,System.Boolean)">
            <summary>
            Used by full-reflect.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrField.#ctor(PHP.Core.VariableName,PHP.Core.Reflection.ClrTypeDesc,PHP.Core.PhpMemberAttributes,System.Reflection.FieldInfo)">
            <summary>
            Used by full-reflect.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrEvent.#ctor(PHP.Core.VariableName,PHP.Core.Reflection.ClrTypeDesc,PHP.Core.PhpMemberAttributes,System.Reflection.EventInfo,System.Boolean,System.Boolean)">
            <summary>
            Used by full-reflect.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.CompilationSourceUnit.ResolveName(PHP.Core.QualifiedName,PHP.Core.Reflection.DeclarationKind,PHP.Core.AST.Scope,System.Nullable{PHP.Core.QualifiedName}@,PHP.Core.ErrorSink,PHP.Core.Text.Span,System.Boolean)">
            <summary>
            Resolves a function or type name using aliases and imported namespaces of the source unit.
            </summary>
            <param name="qualifiedName">Function qualified name to resolve. Doesn't resolve special names ("self", "parent").</param>
            <param name="kind">Declaration kind.</param>
            <param name="currentScope">Current scope.</param>
            <param name="alias">
            <B>null</B>, if the function name is resolved immediately.
            Otherwise, if the <paramref name="qualifiedName"/> is simple and an alias exists, contains its qualified target.
            </param>
            <param name="errors">Error sink or <B>null</B> if errors shouldn't be reported.</param>
            <param name="position">Position where to report an error.</param>
            <param name="mustResolve">Whether name must be resolved if possible.</param>
            <returns>
            Resolved member, the unknown member, or <B>null</B> if error reporting is disabled (errors == null).
            </returns>
            <remarks>
            If the name is simple, is not resolved and has an alias then the run-time resolve should be run on the alias.
            If the name is simple, is not resolved and hasn't an alias, the run-time resolve should be run on the name
            	within the naming context of the source unit (i.e. imported namespaces should be considered).
            If the name is fully qualified and is not resolved then then the run-time resolve should be run on the name itself.
            </remarks>
        </member>
        <member name="P:PHP.Core.Reflection.CompilationSourceUnit.CompilationUnit">
            <summary>
            Containing compilation unit.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.CompilationSourceUnit.NamingContextFieldBuilder">
            <summary>
            Place where this unit's <see cref="T:PHP.Core.NamingContext"/> is stored (<B>null</B> if there are no imports).
            Not an <see cref="T:PHP.Core.Emit.IPlace"/> as we need to encode it to the <see cref="T:PHP.Core.Reflection.DTypeSpec"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.CompilationSourceUnit.SymbolDocumentWriter">
            <summary>
            Symbol document writer associated with the unit.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.SourceFileUnit.Parse(PHP.Core.ErrorSink,PHP.Core.Parsers.IReductionsSink,PHP.Core.LanguageFeatures)">
            <summary>
            Keeps stream open.
            </summary>
            <exception cref="T:PHP.Core.InvalidSourceException">Source file cannot be opened for reading.</exception>
        </member>
        <member name="P:PHP.Core.Reflection.SourceFileUnit.ExpandableLineBreaks">
            <summary>
            Gets inner line breaks as ExpandableLineBreaks.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.SourceCodeUnit">
            <summary>
            Source unit from string representation of code.
            The code is expected to not contain opening and closing script tags.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.SourceCodeUnit.initialState">
            <summary>
            Initial state of the lexer
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.SourceCodeUnit.Line">
            <summary>
            Line position in the immediately containing source code.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.SourceCodeUnit.Column">
            <summary>
            Column position in the immediately containing source code.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.PhpScriptSourceUnit">
            <summary>
            Represents a source code that is stored in a string, but contains
            a complete PHP script file including the initial marks
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.SourceCodeDescriptor">
            <summary>
            Uniquely identifies a piece of compiled source code.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.SourceCodeDescriptor.ContainingSourcePath">
            <summary>
            Relative path to the containing source file.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.SourceCodeDescriptor.ContainingTransientModuleId">
            <summary>
            Column where the code is positioned relatively to the containing code.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.SourceCodeDescriptor.Line">
            <summary>
            Line where the code located relatively to the containing code.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.SourceCodeDescriptor.Column">
            <summary>
            Column where the code is positioned relatively to the containing code.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.DTypeDesc">
            <summary>
            The representative of a dynamic type.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DTypeDesc.cache">
            <summary>
            Cache of <see cref="T:System.RuntimeTypeHandle"/> mapping into <see cref="T:PHP.Core.Reflection.DTypeDesc"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DTypeDesc.RealTypeCtor_ScriptContext_Bool">
            <summary>
            Delegate that calls {.newobj .ctor(ScriptContext, bool)} of the <c>RealType</c>.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DTypeDesc.RealTypeCtor_ScriptContext_DTypeDesc">
            <summary>
            Delegate that calls {.newobj .ctor(ScriptContext, DTypeDesc)} of the <c>RealType</c>.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DTypeDesc.pendingReflection">
            <summary>
            Reflection is pending. Tables should not be used until <c>pendingReflection</c> is <c>true</c>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.#ctor">
            <summary>
            Used only by <see cref="T:PHP.Core.Reflection.GlobalTypeDesc"/>, <see cref="T:PHP.Core.Reflection.UnknownTypeDesc"/>, <see cref="T:PHP.Core.Reflection.GenericParameterDesc"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.#ctor(PHP.Core.Reflection.DTypeDesc,System.Type,PHP.Core.Reflection.GenericTypeDefinition)">
            <summary>
            Used only by <see cref="T:PHP.Core.Reflection.ConstructedTypeDesc"/> and <see cref="T:PHP.Core.Reflection.PhpTypeCompletionDesc"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.#ctor(PHP.Core.Reflection.DModule,PHP.Core.PhpMemberAttributes)">
            <summary>
            Used by the compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.WriteUpGenericDefinition(PHP.Core.Reflection.GenericTypeDefinition)">
            <summary>
            Used by the compiler after the type has been analyzed. First write up.
            Used also at run-time.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.WriteUpBaseType(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Used by the compiler after the type has been analyzed. Second write up.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.DefineBuilder(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Called by the compiler when the type is being defined.
            A <B>null</B> reference means that the type has no own real builder (e.g. <see cref="T:PHP.Core.Reflection.GlobalType"/>).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.DefineBuilder(System.Reflection.Emit.GenericTypeParameterBuilder)">
            <summary>
            Called by the compiler when the type parameter is being defined.
            A <B>null</B> reference means that the type parameter has no own real builder (generic methods).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.Bake(System.Type)">
            <summary>
            Called by the compiler when the type is being baked.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.#ctor(System.Type,PHP.Core.Reflection.GenericTypeDefinition)">
            <summary>
            Used by the reflection.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.#ctor(PHP.Core.Reflection.DModule,System.Type,PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes)">
            <summary>
            To be used by reflection and run-time.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.Create(System.Type)">
            <summary>
            To be used at run-time for getting <see cref="T:PHP.Core.Reflection.DTypeDesc"/> from <see cref="P:PHP.Core.Reflection.DTypeDesc.Type"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.Create(System.RuntimeTypeHandle)">
            <summary>
            To be used at run-time for getting <see cref="T:PHP.Core.Reflection.DTypeDesc"/> from <see cref="T:System.RuntimeTypeHandle"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.Recreate(System.RuntimeTypeHandle,System.Boolean)">
            <summary>
            Create the new <see cref="T:PHP.Core.Reflection.DTypeDesc"/> of given type.
            </summary>
            <param name="realTypeHandle">The type handle.</param>
            <param name="forcePhptype">True to force create <see cref="T:PHP.Core.Reflection.PhpTypeDesc"/>.</param>
            <returns>New <see cref="T:PHP.Core.Reflection.DTypeDesc"/>.</returns>
            <remarks>The newly created <see cref="T:PHP.Core.Reflection.DTypeDesc"/> is added into the cache.</remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.CreateNoLockInternal(System.RuntimeTypeHandle,System.Boolean)">
            <summary>
            Create <see cref="T:PHP.Core.Reflection.DTypeDesc"/> of given type.
            </summary>
            <param name="realTypeHandle">Runtime type handle of the type.</param>
            <param name="forcePhpType">True to force to create <see cref="T:PHP.Core.Reflection.PhpTypeDesc"/>.</param>
            <returns>New <see cref="T:PHP.Core.Reflection.DTypeDesc"/> wrapping the given <paramref name="realTypeHandle"/>.</returns>
            <remarks>The method is not thread safe and it does not lock or cache anything.</remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.MakeSimpleName">
            <summary>
            Name of the class excluding namespace name.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.MakeFullName">
            <summary>
            Full name of the type, including namespace name. Uses PHP namespace separator.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.MakeFullGenericName">
            <summary>
            Full name of the type, including namespace name and generic parameters. Uses PHP namespace separator.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.GetFullGenericName(System.Type,System.Text.StringBuilder)">
            <summary>
            Full name of the type, including namespace name and generic parameters. Uses PHP namespace separator.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.IsRelatedTo(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Determines whether this instance contains a given <see cref="T:PHP.Core.Reflection.DTypeDesc"/>
            in its inheritance hierarchy or vice-versa.
            </summary>
            <param name="anotherTypeDesc">Another <see cref="T:PHP.Core.Reflection.DTypeDesc"/>.</param>
            <returns><B>True</B> if the two types are related, <B>false</B> otherwise.</returns>
            <remarks>
            The (a &lt;: b || b &lt;: a) plays an important role in member accessibility checks.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.IsAssignableFrom(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Determines whether this instance is in the iheritance hierarchy (i.e. bases and implemented interfaces)
            of a given <see cref="T:PHP.Core.Reflection.DTypeDesc"/>.
            </summary>
            <param name="anotherTypeDesc">Another <see cref="T:PHP.Core.Reflection.DTypeDesc"/>.</param>
            <returns><B>True</B> if this instance is one of <paramref name="anotherTypeDesc"/>'s
            base types or implemented interfaces, <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.IsSubclassOf(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Determines whether this instance is a subclass of a given <see cref="T:PHP.Core.Reflection.DTypeDesc"/>.
            </summary>
            <param name="superTypeDesc">Another <see cref="T:PHP.Core.Reflection.DTypeDesc"/>.</param>
            <returns><B>True</B> if this instance is one of <paramref name="superTypeDesc"/>'s
            base types or implemented interfaces, <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.IsCompatibleWithGenericParameter(System.Type)">
            <summary>
            Determines whether this instance can be used as a generic argument for the specified generic parameter.
            </summary>
            <param name="parameter">The generic parameter type.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.ReflectGenericParameters(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DRoutineDesc,PHP.Core.Reflection.ResolverDelegate)">
            <summary>
            Reflectes generic parameters of the generic type definition. Assumes no parameters if not overriden.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.ReflectInterfaces">
            <summary>
            Initialize the <c>interfaces</c> property with an array of items.
            This method is not thread safe. It assumes <c>interfaces</c> are not reflected yet.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.ReflectMethods">
            <summary>
            Initialize the <c>methods</c> property with an array of items.
            This method is not thread safe. It assumes <c>methods</c> are not reflected yet.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.ReflectProperties">
            <summary>
            Initialize the <c>properties</c> property with an array of items.
            This method is not thread safe. It assumes <c>properties</c> are not reflected yet.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.ReflectConstants">
            <summary>
            Initialize the <c>constants</c> property with an array of items.
            This method is not thread safe. It assumes <c>constants</c> are not reflected yet.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.GetMember``2(PHP.Core.Reflection.DTypeDesc.GetMemberDictionary{``0,``1},``0,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc.LookupFlags,``1@)">
            <summary>
            Searches for a member with the specified <paramref name="name"/> by walking up the inheritance hierarchy.
            </summary>
            <typeparam name="N">Type of member dictionary keys.</typeparam>
            <typeparam name="T">Type of member dictionary values.</typeparam>
            <param name="dictionary">Delegate that returns the member dictionary for a given <see cref="T:PHP.Core.Reflection.DTypeDesc"/>.</param>
            <param name="name">Member name.</param>
            <param name="context">Caller context.</param>
            <param name="flags">Flags that adjust the lookup.</param>
            <param name="member">Receives the member on success (<see cref="F:PHP.Core.Reflection.GetMemberResult.OK"/>) and on bad visiblity
            (<see cref="F:PHP.Core.Reflection.GetMemberResult.BadVisibility"/>).</param>
            <returns>The lookup result. If difference from <see cref="F:PHP.Core.Reflection.GetMemberResult.NotFound"/>, <paramref name="member"/>
            is non-<B>null</B>.</returns>
            <remarks>
            This method strives to incorporate all the PHP member lookup nuances. At the same time, all visibility
            combinations that are introduced by CLR members due to overloading must be supported.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.GetConstant(PHP.Core.VariableName)">
            <summary>
            Searches only in declared constants.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.GetConstant(PHP.Core.VariableName,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DConstantDesc@)">
            <summary>
            Searches in all bases and interfaces.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.GetProperty(PHP.Core.VariableName)">
            <summary>
            Searches only in declared properties.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.GetProperty(PHP.Core.VariableName,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DPropertyDesc@)">
            <summary>
            Searches in all bases.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.GetInstanceProperty(PHP.Core.VariableName,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DPropertyDesc@)">
            <summary>
            Searches in all bases. Ignores static properties.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.GetMethod(PHP.Core.Name)">
            <summary>
            Searches only in declared methods.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.GetMethod(PHP.Core.Name,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DRoutineDesc@)">
            <summary>
            Searches in all bases.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.GetGenericParameter(System.String)">
            <summary>
            Gets the generic parameter with the specified name.
            </summary>
            <param name="lowercaseFullName">Lowercase name.</param>
            <returns>Generic parameter or <B>null</B> if not found.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.EnumerateMembers``2(PHP.Core.Reflection.DTypeDesc.GetMemberDictionary{``0,``1},PHP.Core.Reflection.DTypeDesc.LookupFlags)">
            <summary>
            Enumerates all members from the entire inheritance hierarchy regardless of visibility.
            </summary>
            <typeparam name="T">Type of member dictionary keys.</typeparam>
            <typeparam name="N">Type of member dictionary values.</typeparam>
            <param name="dictionary">Delegate that returns the member dictionary for a given <see cref="T:PHP.Core.Reflection.DTypeDesc"/>.</param>
            <param name="flags">Flags that adjust the enumeration.</param>
            <returns>The members.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.EnumerateMembers``2(PHP.Core.Reflection.DTypeDesc.GetMemberDictionary{``0,``1},PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc.LookupFlags)">
            <summary>
            Enumarates all members from the entire inheritance hierarchy that are visible in the specified
            <paramref name="context"/>.
            </summary>
            <typeparam name="T">Type of member dictionary keys.</typeparam>
            <typeparam name="N">Type of member dictionary values.</typeparam>
            <param name="dictionary">Delegate that returns the member dictionary for a given <see cref="T:PHP.Core.Reflection.DTypeDesc"/>.</param>
            <param name="context">Caller context.</param>
            <param name="flags">Flags that adjust the enumeration.</param>
            <returns>The members.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.RemoveOverridenMembers``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Removes overriden members from an enumeration.
            </summary>
            <typeparam name="N"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="members">The member enumeration starting from the most derived type.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.EnumerateProperties">
            <summary>
            Enumerates all properties declared by this type and its bases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.EnumerateProperties(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Returns properties visible in the given <paramref name="context"/>.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.EnumerateMethods">
            <summary>
            Enumerates all methods declared by this type and its bases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.EnumerateMethods(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Returns methods visible in the given <paramref name="context"/>.
            </summary>
            <param name="context">The caller.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.MakeGenericArguments(PHP.Core.Reflection.DTypeDesc[]@,System.Int32@,System.Action{PHP.Core.Reflection.DTypeDesc.MakeGenericArgumentsResult,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.GenericParameterDesc})">
            <summary>
            Substitutes missing arguments by the default types where possible and reports error otherwise.
            Updates the specified array and sets the specified argument count to the parameter count.
            Expands the arguments array if needed.
            </summary>
            <returns>Whether some arguments are missing.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDesc.GetGenericParameterDefaultType(System.Int32)">
            <summary>
            Gets a default type-desc associated with the index-th generic parameter.
            Overridden by <see cref="T:PHP.Core.Reflection.PhpTypeCompletionDesc"/>, which carries run-time resolved default types.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DTypeDesc.Type">
            <summary>
            Triggers full-reflect when accessed and is <B>null</B>.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DTypeDesc.KnownType">
            <summary>
            Triggers full-reflect when accessed and is <B>null</B>.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DTypeDesc.PhpType">
            <summary>
            Triggers full-reflect when accessed and is <B>null</B>.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DTypeDesc.ClrType">
            <summary>
            Triggers full-reflect when accessed and is <B>null</B>.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DTypeDesc.RealType">
            <summary>
            For generated types, this is <B>null</B> before the type builder is defined.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DTypeDesc.Base">
            <summary>
            <B>null</B> for types without a base type (PHP types only).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DTypeDesc.GenericDefinition">
            <summary>
            Generic definition for this type or <B>null</B> if the type is non-generic or unknown.
            Generic definitions points to themselves, instantiations shares a single instance of generic definition.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DTypeDesc.Interfaces">
            <summary>
            All implemented interfaces (including inherited ones).
            It is impossible to get rid of inherited interfaces due to lack of support from CLR.
            For PHP types being compiled, this array is filled by inheritance hierarchy analysis.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.DTypeDesc.GetMemberDictionary`2">
            <summary>
            Open-instance delegate that returns the appropriate member dictionary for the specified
            <see cref="T:PHP.Core.Reflection.DTypeDesc"/> instance.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DTypeDesc.LookupFlags.InheritPrivate">
            <summary>
            Specifies whether private members are reported as non-accessible by subtypes.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DTypeDesc.LookupFlags.SearchInterfaces">
            <summary>
            Specifies whether interfaces should be included in the lookup.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.DTypeDesc.LookupFlags.IgnoreStaticMembers">
            <summary>
            Specifies whether only instance members should be searched.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.DTypeDescs">
            <summary>
            Immutable <see cref="T:PHP.Core.Reflection.DTypeDesc"/> array with overriden <see cref="M:PHP.Core.Reflection.DTypeDescs.GetHashCode"/> and <see cref="M:PHP.Core.Reflection.DTypeDescs.Equals(PHP.Core.Reflection.DTypeDescs)"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDescs.GetRealTypes">
            <summary>
            Converts the types to real <see cref="T:System.Type"/> array.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeDescs.GetRealTypes(System.Type[],System.Int32)">
            <summary>
            Puts real types to a provided <see cref="T:System.Type"/> array.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.DTypeSpec">
            <summary>
            Encodes a dynamic type.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeSpec.#ctor(System.Int32[])">
            <summary>
            The array shouldn't be modified by the caller.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DTypeSpec.GetTypeDesc(System.Reflection.Module,PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DRoutineDesc,PHP.Core.Reflection.ResolverDelegate)">
            <summary>
            Decodes the type-spec to the type-desc within a given context (referring type, routine, and real module).
            If the type encoded in the type-spec was unknown when encoding, the specified resolver is called.
            Returns <B>null</B> if the data of type-spec are incorrect.
            Returns see cref="UnknownTypeSpec" instance if the type is currently unresolvable (or no resolver specified).
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.UnknownTypeDesc">
            <summary>
            Represents a descriptor for unknown type.
            Necessary when unknown types are held in lists of descriptors (such as implemented interface list).
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.UnknownTypeDesc.Singleton">
            <summary>
            Singleton instance to be used wherever it is needed.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.GlobalTypeDesc">
            <summary>
            Represents a pseudo-type declaring all global functions and types.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.GenericParameterDesc">
            <summary>
            Represents a pseudo-type declaring all global functions and types.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.GenericParameterDesc.#ctor">
            <summary>
            Used by the compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.GenericParameterDesc.#ctor(System.Type,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Used by the reflection.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.GenericParameterDesc.IsSubstitutableBy(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Gets whether the argument can be substituted for this parameters.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.GenericTypeDefinition">
            <summary>
            Shared by all instantiations of the generic type and the type itself.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ConstructedTypeDesc.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc[])">
            <summary>
            Used by <see cref="T:PHP.Core.Reflection.ConstructedType"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpTypeCompletionDesc.#ctor(PHP.Core.Reflection.PhpTypeDesc,PHP.Core.Reflection.GenericParameterDesc[])">
            <summary>
            Used by <c>ScriptContext.DeclareType</c>.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.PhpTypeDesc">
            <summary>
            Represents PHP type, generic PHP type template, or PHP type instantiation.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpTypeDesc.methodsReflected">
            <summary>
            <B>True</B> iff methods have been fully reflected (every <see cref="T:PHP.Core.Reflection.DRoutineDesc"/> in
            <see cref="F:PHP.Core.Reflection.DTypeDesc.methods"/> has its <see cref="T:PHP.Core.Reflection.PhpMethod"/>).
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpTypeDesc.fieldsAndConstantsReflected">
            <summary>
            <B>True</B> iff fields and class constants have been fully reflected (every <see cref="T:PHP.Core.Reflection.DPropertyDesc"/> in
            <see cref="F:PHP.Core.Reflection.DTypeDesc.properties"/> has its <see cref="T:PHP.Core.Reflection.PhpField"/> and every <see cref="T:PHP.Core.Reflection.DConstantDesc"/> in
            <see cref="F:PHP.Core.Reflection.DTypeDesc.constants"/> has its <see cref="T:PHP.Core.Reflection.ClassConstant"/>).
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpTypeDesc.initializeStaticFields">
            <summary>
            Points to this type's <c>__InitializeStaticFields</c> method.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpTypeDesc.#ctor(PHP.Core.Reflection.DModule,PHP.Core.PhpMemberAttributes)">
            <summary>
            To be used by compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpTypeDesc.#ctor(PHP.Core.Reflection.DModule,System.Type,PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes)">
            <summary>
            To be used by run-time reflection.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpTypeDesc.Create(System.RuntimeTypeHandle)">
            <summary>
            To be used at run-time.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpTypeDesc.FullReflectMethodsNoLock">
            <summary>
            Used by PhpType constructor invoked via <see cref="M:PHP.Core.Reflection.PhpTypeDesc.Reflect"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpTypeDesc.FullReflectFieldsAndConstantsNoLock">
            <summary>
            Used by PhpType constructor invoked via <see cref="M:PHP.Core.Reflection.PhpTypeDesc.Reflect"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpTypeDesc.ReflectGenericParameters(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DRoutineDesc,PHP.Core.Reflection.ResolverDelegate)">
            <summary>
            <para>
            Reflectes generic parameters of a generic definition within a specified script context at run-time.
            </para>
            
            <para>
            Note, that all PHP generic type definitions have to reflect their generic parameters at the time of
            their declaration and not lazily (as they must resolve type names in the appropriate state of the script context).
            </para> 
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpTypeDesc.AutoPopulateNoLock">
            <summary>
            Tries to populate methods, properties, and constants by invoking the <c>__PopulateTypeDesc</c> method.
            </summary>
            <returns><B>True</B> if this instance was successfully populated, <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.PhpTypeDesc.SetStaticInit(System.Action{PHP.Core.ScriptContext})">
            <summary>
            To be called by the generated <c>__PopulateTypeDesc</c>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpTypeDesc.AddMethod(System.String,PHP.Core.PhpMemberAttributes,PHP.Core.RoutineDelegate)">
            <summary>
            To be called by the generated <c>__PopulateTypeDesc</c>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpTypeDesc.AddProperty(System.String,PHP.Core.PhpMemberAttributes,PHP.Core.GetterDelegate,PHP.Core.SetterDelegate)">
            <summary>
            To be called by the generated <c>__PopulateTypeDesc</c>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpTypeDesc.AddConstant(System.String,System.Object)">
            <summary>
            To be called by generated helpers.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.ClrTypeDesc">
            <summary>
            Represents CLR type, generic CLR type template, or CLR type instantiation.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrTypeDesc.#ctor(PHP.Core.Reflection.DModule,System.Type,PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes)">
            <summary>
            Used by run-time reflection.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrTypeDesc.Reflect">
            <summary>
            Reflects the type itself.
            Members will be reflected lazily on per member table basis.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrTypeDesc.ReflectGenericParameters(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DRoutineDesc,PHP.Core.Reflection.ResolverDelegate)">
            <summary>
            Reflectes generic parameters if the type is generic type definition.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrTypeDesc.ReflectMethod(System.Reflection.MethodInfo,PHP.Core.Name,PHP.Core.PhpMemberAttributes,PHP.Core.Reflection.DTypeDesc,System.Collections.Generic.Dictionary{PHP.Core.Name,PHP.Core.Reflection.DRoutineDesc},System.Collections.Generic.IList{System.Reflection.MethodInfo})">
            <summary>
            Add method and its overloads to the table
            </summary>
            <param name="realMethod">First found methodinfo</param>
            <param name="name">Name of the method</param>
            <param name="attributes">Attributes</param>
            <param name="declaringType">Owner type</param>
            <param name="methods">Collection with already added methods</param>
            <param name="overloads">All visible methods with the same name (including inherited)</param>
        </member>
        <member name="M:PHP.Core.Reflection.ClrTypeDesc._NoConstructorErrorStub(System.Object,PHP.Core.PhpStack)">
            <summary>
            Argless stub used as a fake CLR constructor if there is no such constructor.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ClrTypeDesc.Constructor">
            <summary>
            Instance constructor.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ClrTypeDesc.GenericOverloads">
            <summary>
            List of all type parameter overloads. Empty for non-generic type.
            Otherwise, shared by all overloads and containing the type itself.
            Unsorted.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.ClrDelegateDesc._stubBuilder">
            <summary>
            Lazily initialized stub builder.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrDelegateDesc.#ctor(PHP.Core.Reflection.DModule,System.Type,PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpMemberAttributes)">
            <summary>
            Used by run-time reflection.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.ClrDelegateDesc.DelegateStubBuilder.stubCache">
            <summary>
            Per delegate type stub cache.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrDelegateDesc.DelegateStubBuilder.GetStub(PHP.Core.Reflection.DObject,PHP.Core.Reflection.DRoutineDesc,System.String)">
            <summary>
            Returns delegate to CLR stub of the given target-routine pair.
            </summary>
            <param name="target">The target instance or <B>null</B>.</param>
            <param name="routine">The target routine desc.</param>
            <param name="realCalleeName">Real callee name if <paramref name="routine"/> is in fact <c>__call</c>,
            or <B>null</B> if <paramref name="routine"/> if the real callee.</param>
            <returns>
            Delegate to the stub or <B>null</B> if stub for this target-routine pair cannot be generated.
            </returns>
        </member>
        <member name="P:PHP.Core.Reflection.VersionInfo.Index">
            <summary>
            Versions are numbered starting from zero. Unconditionally declared entities has a single version #0.
            Conditionally declared entities have index > 0.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.DType">
            <summary>
            Represents a type. For generic types, this instance represents the generic template
            all instantiations (represented by DTypeDesc) are sharing.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DType.#ctor(PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Known types.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DType.#ctor(PHP.Core.Reflection.DTypeDesc,System.String)">
            <summary>
            For unknown types and generic type parameters.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DType.GetConstructor">
            <summary>
            Returns a <see cref="T:PHP.Core.Reflection.DRoutine"/> representing the constructor effective for this class
            or <B>null</B> if there is no constructor.
            </summary>
            <returns>The constructor or <B>null</B>.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.DType.AnalyzeInheritance(PHP.Core.ErrorSink)">
            <summary>
            Analyzes inheritance properties of the PHP types and constructed types being declared in the current compilation.
            The properties being analyzed primarily include the definiteness of the type.
            </summary>
            <remarks>
            <para>
            The constructed types themselves can't get the analysis into a loop as they form a DAG structure
            (grammar defines a tree structure and unifying the same constructed types results in the DAG).
            However, the completeness of a constructed type depends on the completeness of the components -
            the generic type and all the type arguments. Since a polymorphic recursion can take place (e.g. B{T} extends A{B{T}}),
            we need to employ minimal fixpoint algorithm to determine the type completeness.
            </para>
            </remarks>	
        </member>
        <member name="M:PHP.Core.Reflection.DType.AnalyzeInheritance(PHP.Core.ErrorSink,System.Collections.Generic.List{PHP.Core.Reflection.DType}@,PHP.Core.Reflection.DType,PHP.Core.Reflection.PhpType,System.Int32,System.Int32)">
            <remarks>
            <para>
            If <paramref name="dfsDepth"/> is non-negative the method performs DFS on the graph of PHP types and constructed types, 
            going to the depth recursively adding the type being analyzed to the <paramref name="mfpWorklist"/> if it closes a loop.
            It also adds the <paramref name="dfsPredecessor"/> into its list of DFS predecessors (if non-null).
            The <paramref name="phpPredecessor"/> tracks the last DFS predecessor that was PhpType (not constructed).
            </para>
            
            <para>
            Terminology: 
              - "inheritance edge" is an edge going from a type to its immediate base type (class or interface)
              - "constructed edge" is an edge going from a constructed type to a generic argument
              - "generic edge" is an edge going from a constructed type to the generic type
            </para>
            
            <para>
            During the DFS, <paramref name="dfsDepth"/> records the current depth in the DFS tree.
            <paramref name="inheritanceDepth"/> records the length of a path from the current type to the first node of a constructed edge
            (the path therefore comprises of inheritance and generic edges). 
            
            The DFS depth is stored on PhpTypes and is used to discover circular inheriting among inherited types. 
            When a backward edge is discovered and the target type (which must be either 
            a PhpType or a ConstructedType, considering the generic type in the latter case) the DFS depth difference between 
            the target type and the current type is calculated. If it is less than the current inheritance depth then there 
            is a loop comprising of inheritance edges only (which is an error).
            
            NOTE: It suffice to store the DFS depth only on PhpTypes (in <see cref="F:PHP.Core.Reflection.PhpTypeBuilder.InheritanceAnalysisDfsDepth"/>).
            Depth comparison in constructed type compares the inheritance depth of the generic type with the difference of the 
            DFS depths minus one -- as if the backward edge pointed directly to the generic type.
            </para>
            
            <para>
            If <paramref name="dfsDepth"/> is -1 the method only updates the properties whose procesing requires MFP and 
            adds the types listed in the DFS predecessors list to the worklist if any of these properties changed.
            </para>
            
            <para>
            The lists of DFS predecessors are cleaned up later during the DType clean-up (TODO: clean the builders as well).
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.DType.ResolveAbstractOverrides(PHP.Core.ErrorSink)">
            <summary>
            For each method M, finds out the method that is overridden by the method M as well as all interface methods
            that are implemented by the method M.
            </summary>
            <remarks>
            Must be called after member-analysis as all types and their members have to be known.
            Assumes that the inheritance hierarchy is free of circular dependencies.
            </remarks>
            <param name="errors">Error sink, can be null is you don't care.</param>
        </member>
        <member name="M:PHP.Core.Reflection.DType.DefineBuilders">
            <summary>
            Defines real builders neccessary to reference the type in the IL and, recursively, 
            all the depending real builders.
            Idempotent operation.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DType.EmitInvokeConstructor(PHP.Core.Emit.ILEmitter,PHP.Core.Reflection.PhpType,PHP.Core.Reflection.ConstructedType)">
            <summary>
            Emits invocation of this type's constructor from within a derived type's constructor.
            </summary>
            <param name="il"><see cref="T:PHP.Core.Emit.ILEmitter"/>.</param>
            <param name="derivedType">The derived type in whose (<see cref="T:PHP.Core.ScriptContext"/>, <B>bool</B>)
            constructor the emission takes place.</param>
            <param name="constructedType"></param>
        </member>
        <member name="M:PHP.Core.Reflection.DType.EmitInvokeDeserializationConstructor(PHP.Core.Emit.ILEmitter,PHP.Core.Reflection.PhpType,PHP.Core.Reflection.ConstructedType)">
            <summary>
            Analogous to <see cref="M:PHP.Core.Reflection.DType.EmitInvokeConstructor(PHP.Core.Emit.ILEmitter,PHP.Core.Reflection.PhpType,PHP.Core.Reflection.ConstructedType)"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DType.DefineRealMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
            <summary>
            Defines a real method builder on the type. 
            Unifies creation of global, type and dynamic methods.
            Returns either <see cref="T:System.Reflection.Emit.MethodBuilder"/> or <see cref="T:System.Reflection.Emit.DynamicMethod"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.DType.GetCustomAttributeUsage(System.Boolean@)">
            <summary>
            Gets attribute usage information for this attribute type (if applicable). 
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DType.IsComplete">
            <summary>
            Whether all base types are definite. Note that the type itself needn't to be definite nor identity definite.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DType.IsDefinite">
            <summary>
            Whether the type can be definitely emitted in the resulting compulation unit, i.e.
            whether it is a completely declared type or it is a reflected type.
            
            Note that a reflected type is always complete.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DType.IsPhpType">
            <summary>
            <B>true</B> if the type is PHP type or a constructed type of PHP generic type.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DType.IsClrType">
            <summary>
            <B>true</B> if the type is CLR type or a constructed type of CLR type.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DType.IsGenericParameter">
            <summary>
            <B>true</B> if the type is generic parameter or a constructed type of generic parameter.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DType.AllAbstracts">
            <summary>
            Abstract methods and properties (declared or inherited) not implemented by the type.
            Computed lazily during full analysis.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DType.Constructor">
            <summary>
            Gets constructor of this type (if any).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DType.HasDefaultConstructor">
            <summary>
            Determines whether this type exposes a public parameterless constructor.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.DType.IsCustomAttributeType">
            <summary>
            <B>True</B>, if the type defines a custom attribute class.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.UnknownType.typeRef">
            <summary>
            Optionally a <see cref="T:PHP.Core.AST.TypeRef"/> instead of full name.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.StaticType">
            <summary>
            Type representing <c>static</c> keyword (late static binding).
            Used only during compilation.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.GenericParameter">
            <summary>
            Represents a type parameter of a generic type or method.
            Created during pre-analysis.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.GenericParameter.#ctor(PHP.Core.Name,System.Int32,PHP.Core.Reflection.DMember)">
            <summary>
            Used by the compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.GenericParameter.GetConstructor">
            <summary>
            Returns <B>null</B> as the constructor for the type is unknown.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.GenericParameter.DefineBuildersWithinType(System.Reflection.Emit.GenericTypeParameterBuilder)">
            <summary>
            Define builders for parameters on type.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.GenericParameter.DefineBuildersWithinMethod">
            <summary>
            Define builders for parameters on method.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.GenericParameter.IsIdentityDefinite">
            <summary>
            The actual identity of the type (the substitute) is not known.
            The analyzer cannot reason about it's modifiers, generic parameters nor declared members.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.GenericParameter.RealGenericTypeParameterBuilder">
            <summary>
            Valid only if the declaring member is a type whose type builder has been defined.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.GenericParameter.RealPseudoGenericParameterBuilder">
            <summary>
            Valid only if the declaring member is a routine whose builders has already been defined.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.GenericParameter.DefaultType">
            <summary>
            Filled by member analysis (written up).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.GenericParameter.Index">
            <summary>
            Index in the parameter list.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.GenericParameter.DeclaringMember">
            <summary>
            Declarer: DType or DMethod.
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.ConstructedType">
            <summary>
            Represents a type constructed from a generic type filling the type parameters.
            </summary>
            <remarks>
            Compiler creates a single instance per occurrence.
            Shares type-desc with the generic type and has also the same qualified name.
            This sharing transfers the resposibility for member look-up to the generic type (via its type-desc).
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.ConstructedType.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.Reflection.DTypeDesc[])">
            <summary>
            To be used by the compiler for creation of constructed types during analysis. 
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ConstructedType.GetRealArguments(System.Boolean@)">
            <param name="success">Is set to false when any argument is not known at this point
            (for example when reflecting a base class reference in a generic class declaration that 
            depends on the type argument that is not defined until emission).</param>
            <returns></returns>
        </member>
        <member name="P:PHP.Core.Reflection.ConstructedType.IsUnknown">
            <summary>
            Constructed type is unknown iff its generic type is unknown.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ConstructedType.IsIdentityDefinite">
            <summary>
            To decide whether or not to report an error, it suffice to known whether the generic type is known definitely.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ConstructedType.IsComplete">
            <summary>
            <B>true</B> iff the generic type and all arguments are complete types.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ConstructedType.IsOpen">
            <summary>
            <B>true</B> iff the generic type or any argument is a open type.
            Note that the generic type can be a generic parameter, which is an open type.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ConstructedType.IsGenericParameter">
            <summary>
            <B>true</B> iff the generic type is a generic parameter.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ConstructedType.IsPhpType">
            <summary>
            <B>true</B> iff the generic type is a PHP type.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ConstructedType.IsClrType">
            <summary>
            <B>true</B> iff the generic type is a CLR type.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ConstructedType.IsDefinite">
            <summary>
            Constructed type is definite iff the generic type is definite and it is not a generic parameter 
            (hence we cannot refer to the members then) and all arguments are definite types.
            </summary>
            <remarks>
            We can emit the TypeSpec token to the IL if the constructed type is definite.
            The constructed types that are not definite are reconstructed at run-time using type-desc.
            </remarks>
        </member>
        <member name="T:PHP.Core.Reflection.ClrType">
            <summary>
            Represents CLR type. For generic types, this instance represents the generic template
            all instantiations (represented by ClrTypeDesc) are sharing.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrType.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.QualifiedName)">
            <summary>
            Used by full-reflect (<see cref="M:PHP.Core.Reflection.DTypeDesc.Reflect"/>).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.ClrType.GetCustomAttributeUsage(System.Boolean@)">
            <summary>
            Gets attribute usage attribute applied on the type (if any).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ClrType.IsGeneric">
            <summary>
            CLR type is considered generic if its real type is generic or if there are some generic overloads.
            In the latter case, at least one of the overloads has generic real type.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.ClrType.Constructor">
            <summary>
            Gets constructor of this type (if any).
            </summary>
        </member>
        <member name="T:PHP.Core.Reflection.PhpType">
            <summary>
            Represents PHP type. For generic types, this instance represents the generic template
            all instantiations (represented by PhpTypeDesc) are sharing.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.QualifiedName)">
            <summary>
            Used by full-reflect (<see cref="M:PHP.Core.Reflection.DTypeDesc.Reflect"/>).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.#ctor(PHP.Core.QualifiedName,PHP.Core.PhpMemberAttributes,System.Boolean,PHP.Core.AST.TypeSignature,System.Boolean,PHP.Core.AST.Scope,PHP.Core.Reflection.CompilationSourceUnit,PHP.Core.Text.Span)">
            <summary>
            To be used by the compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.IsPhpRealType(System.Type)">
            <summary>
            Determines whether a given type represents a PHP class or a PHP interface.
            </summary>
            <param name="realType">The <see cref="T:System.Type"/> to test.</param>
            <returns><B>true</B> if <paramref name="realType"/> implements a PHP class or a PHP interface, <B>false</B>
            otherwise.</returns>
            <exception cref="T:System.NullReferenceException"><paramref name="realType"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.IsRealConditionalDefinition(System.Type)">
            <exception cref="T:System.NullReferenceException"><paramref name="realType"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.ValidateMembers(PHP.Core.ErrorSink)">
            <summary>
            To be used by analyzer in member-analysis.
            </summary>
            <remarks>
            All types are known at this point (their inheritance relationships needn't to be known).
            This instance knows its base class and interfaces (the others needn't to).
            Members of this type are known, however members of the other types are not known yet.
            Partial declarations are merged at this point.
            </remarks>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.GetImplementedInterfaces">
            <summary>
            Gathers all implemented interfaces including those inherited from base types.
            Filters duplicates so that implements/ghost arrays won't contain duplicates when populated.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.DetermineConstructor">
            <summary>
            Looks the constructor up among the methods of the type. Used by analysis and reflection.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.Validate(PHP.Core.ErrorSink)">
            <summary>
            Expects all declared members to be validated.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.AddField(PHP.Core.VariableName,PHP.Core.PhpMemberAttributes,System.Boolean,PHP.Core.Text.Span,PHP.Core.Reflection.CompilationSourceUnit,PHP.Core.ErrorSink)">
            <summary>
            Adds a field to the type.
            </summary>
            <returns>Whether the field has been added.</returns>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.Bake">
            <summary>
            Returns a plain type-desc corresponding to the baked real type or a <B>null</B> reference if the type 
            cannot be baked due to its indefiniteness.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.EmitAutoDeclareOnApplicationContext(PHP.Core.Emit.ILEmitter,PHP.Core.Emit.IPlace)">
            <summary>
            Emits call that declares this type to <see cref="T:PHP.Core.ApplicationContext"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.EmitAutoDeclareOnScriptContext(PHP.Core.Emit.ILEmitter,PHP.Core.Emit.IPlace)">
            <summary>
            Emits call that declares this type to <see cref="T:PHP.Core.ScriptContext"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.GetCustomAttributeUsage(System.Boolean@)">
            <summary>
            Gets attribute usage attribute applied on the type (if any).
            </summary>
        </member>
        <member name="M:PHP.Core.Reflection.PhpType.SetCustomAttributeUsage(System.AttributeUsageAttribute)">
            <summary>
            Called by the analyzer when it determines the <see cref="T:System.AttributeUsageAttribute"/> is (not) defined on the type.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.IsIdentityDefinite">
            <summary>
            Whether the analyzer can be sure about the identity of the type.
            A type is error definite if it is a unconditionally declared type or if it is a reflected type.
            
            Note that reflected types are resolved iff they are active at the time of the resolving. 
            A reflected type declared unconditionally in its compilation unit is active since the module is loaded 
            (the module's auto-reflection code declares it on <see cref="T:PHP.Core.ApplicationContext"/>). 
            A reflected type declared conditionally is activated by a call to the <see cref="M:PHP.Core.ScriptContext.DeclareType(PHP.Core.Reflection.PhpTypeDesc,System.String)"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.IsRuntimeActivated">
            <summary>
            Type can be either unconditional/load-time activated (version index is zero), 
            conditionally declared with known declaration (version index is positive) or 
            runtime activated by an already compiled code (version index is <see cref="F:PHP.Core.Reflection.VersionInfo.ReflectedRuntimeActivated"/>).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.Builder">
            <summary>
            Auxiliary fields used for emission, <B>null</B> for reflected types.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.Constructor">
            <summary>
            Gets constructor of this type (if any).
            Filled by member analysis.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.IsComplete">
            <summary>
            Set in constructor for reflected types.
            Initialized on demand, not available before full analysis starts (the hierarchy needs to be validated first).
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.Root">
            <summary>
            Root in the inheritance hierarchy.
            Available after full analysis.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.ExtendsClrType">
            <summary>
            <B>True</B> if there is a CLR type (or a constructed type with CLR generic type) in this type's base chain.
            Available after full analysis.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.IsExported">
            <summary>
            Gets whether the type is exported.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.StaticFieldInitMethodInfo">
            <summary>
            Returns <see cref="T:System.Reflection.MethodInfo"/> of <see cref="F:PHP.Core.Emit.PhpObjectBuilder.StaticFieldInitMethodName"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.ClrConstructorInfos">
            <summary>
            Returns exported aka &quot;C#-friendly&quot; constructors defined in this PHP type.
            </summary>
            <remarks>
            Constructors are sorted according to their parameter count in the ascending order.
            </remarks>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.ShortConstructorInfo">
            <summary>
            Returns <see cref="T:System.Reflection.ConstructorInfo"/> to short constructor.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.LongConstructorInfo">
            <summary>
            Returns <see cref="T:System.Reflection.ConstructorInfo"/> to long constructor.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.DeserializingConstructorInfo">
            <summary>
            Returns <see cref="T:System.Reflection.ConstructorInfo"/> to deserializing constructor.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.TypeDescFieldInfo">
            <summary>
            Static readonly field emitted to each PHP type. Holds reference to the type's <see cref="P:PHP.Core.Reflection.PhpType.PhpTypeDesc"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.ProxyFieldInfo">
            <summary>
            Instance readonly field emitted to the first PHP type that extends a CLR base. Holds reference to the
            instance's <see cref="T:PHP.Core.Reflection.ClrObject"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.IncompleteClassDeclareMethodInfo">
            <summary>
            Method that declares (compiles) incomplete class definition. Is <c>null</c> if the type is not incomplete.
            Method is in format <c>private static void &lt;Declare&gt;XXX(ScriptContext)</c>
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpType.IncompleteClassDeclarationId">
            <summary>
            Unique identifier of the incomplete class declaration.
            Used in runtime (<see cref="F:PHP.Core.ScriptContext.IncompleteTypesInAdvance"/>) to determine whether class was declared in advance.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpTypeBuilder.InheritanceAnalysisDfsDepth">
            <summary>
            Used by <c>InheritanceAnalysis</c>.
            </summary>
        </member>
        <member name="F:PHP.Core.Reflection.PhpTypeBuilder.HasThreadStaticFields">
            <summary>
            <B>True</B> if the type contains at least one thread-static field.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpTypeBuilder.BaseInterfaces">
            <summary>
            Interfaces implemented directly by this type.
            Set by Pre-Analysis of the TypeDecl.
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpTypeBuilder.GhostImplementations">
            <summary>
            List of "ghost implementations" mapping abstract member (key) to its implementation (value).
            Ghost implementations are stubs that are required to be added to the class
            in order to tackle CLR inability to bind abstract method/property defined in interface I with
            its implementation defined in a superclass B of the class A implementing the interface.
            (class B { f() {} }, interface I { f() { } }, class A extends B implements I { }). 
            </summary>
        </member>
        <member name="P:PHP.Core.Reflection.PhpTypeBuilder.RealOpenType">
            <summary>
            Fully open constructed real type (type arguments are filled with the type parameters).
            </summary>
        </member>
        <member name="T:PHP.Core.RequestContext">
            <summary>
            Represents a set of data associated with the current web request targeting PHP scripts.
            </summary>
            <summary>
            Represents a set of data associated with the current web request targeting PHP scripts.
            </summary>
        </member>
        <member name="M:PHP.Core.RequestContext.Initialize(PHP.Core.ApplicationContext)">
            <summary>
            Initializes the context.
            </summary>
        </member>
        <member name="M:PHP.Core.RequestContext.Initialize(PHP.Core.ApplicationContext,System.Web.HttpContext)">
            <summary>
            Creates and initializes request and script contexts associated with the current thread.
            </summary>
            <param name="appContext">Application context.</param>
            <param name="context">Current HTTP context.</param>
            <returns>The initialized request context.</returns>
            <remarks>
            <para>
            Request context provides PHP with the web server environment.
            It should be initialized before any PHP code is invoked within web server and finalized (disposed)
            at the end of the request. This method can be called for multiple times, however it creates and 
            initializes a new request context only once per HTTP request.
            </para>
            <para>
            The following steps take place during the initialization (in this order):
            <list type="number">
              <term>Configuration is loaded (if not loaded yet).</term>
              <term>A new instance of <see cref="T:PHP.Core.RequestContext"/> is created and bound to the current thread.</term>
              <term>A new instance of <see cref="P:PHP.Core.RequestContext.ScriptContext"/> is created and initialized.</term>
              <term>Event <see cref="E:PHP.Core.RequestContext.RequestBegin"/> is fired.</term>
              <term>Session is started if session auto-start confgiuration option is switched on.</term>
            </list>
            </para>
            <para>
            The request context can be accessed via the returned instance or via <see cref="P:PHP.Core.RequestContext.CurrentContext"/>
            thread static field anytime between the initialization and disposal.
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Core.RequestContext.InvokeRequestBegin">
            <summary>
            Invokes <see cref="E:PHP.Core.RequestContext.RequestBegin"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.RequestContext.InvokeRequestEnd">
            <summary>
            Invokes <see cref="E:PHP.Core.RequestContext.RequestEnd"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.RequestContext.FinalizeContext">
            <summary>
            Finalizes (disposes) the current request context, if there is any.
            </summary>
        </member>
        <member name="M:PHP.Core.RequestContext.DeleteTemporaryFiles">
            <summary>
            Silently deletes all temporary files.
            </summary>
        </member>
        <member name="M:PHP.Core.RequestContext.AddTemporaryFile(System.String)">
            <summary>
            Adds temporary file to current handler's temp files list.
            </summary>
            <param name="path">A path to the file.</param>
        </member>
        <member name="M:PHP.Core.RequestContext.IsTemporaryFile(System.String)">
            <summary>
            Checks whether the given filename is a path to a temporary file
            (for example created using the filet upload mechanism).
            </summary>
            <remarks>
            The stored paths are checked case-insensitively.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Argument is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.RequestContext.RemoveTemporaryFile(System.String)">
            <summary>
            Removes a file from a list of temporary files.
            </summary>
            <param name="path">A full path to the file.</param>
            <exception cref="T:System.ArgumentNullException">Argument is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.RequestContext.EnsureSessionId">
            <summary>
            Ensures that Session ID is set, so calls to Flush() don't cause issues
            (if flush() is called, session ID can't be set because cookie can't be created).
            </summary>
        </member>
        <member name="M:PHP.Core.RequestContext.UpdateSID">
            <summary>
            Adds/update a SID global PHP constant.
            </summary>
            <remarks>The constant is non-empty only for cookie-less sessions.</remarks>
        </member>
        <member name="M:PHP.Core.RequestContext.StartSession">
            <summary>
            Starts session if not already started. Loads session variables from <c>HttpContext.Session</c>.
            </summary>
            <para>
            Session state (<c>HttpContext.Session</c>) has to be available at the time of the call. 
            Otherwise, an exception occurs.
            </para>
            <para>
            Starting the session inheres in importing session variables from the session data store.
            The store is specific to the current PHP session handler 
            defined by configuration option <see cref="P:PHP.Core.LocalConfiguration.SessionSection.Handler"/>.
            In the case the ASP.NET handler is active, values from <c>HttpContext.Session</c> are imported to
            <c>$_SESSION</c> PHP auto-global variable. Hence, items added to the <c>HttpContext.Session</c> by 
            non-PHP code after the start of the session will not be visible to PHP code. The <c>$_SESSION</c> variable
            has to be updated directly (see <c>ScriptContext.AutoGlobals</c>) to make these items visible to PHP.
            </para>
            <exception cref="T:PHP.Core.SessionException">Session state not available.</exception>
        </member>
        <member name="M:PHP.Core.RequestContext.EndSession(System.Boolean)">
            <summary>
            Ends session, i.e. stores content of the $_SESSION array to the <c>HttpContext.Session</c> collection.
            </summary>
            <param name="abandon">Whether to abandon the session without persisting variables.</param>
            <exception cref="T:PHP.Core.SessionException">Session state not available.</exception>
        </member>
        <member name="M:PHP.Core.RequestContext.UpdateSessionCookieExpiration">
            <summary>
            Updates the session cookie expiration time using <see cref="P:PHP.Core.RequestContext.SessionCookieLifetime"/> field.
            Called at the end of the request.
            </summary>
        </member>
        <member name="M:PHP.Core.RequestContext.GetCompiledScript(PHP.Core.PhpSourceFile)">
            <summary>
            Get the precompiled script from several locations - script library database, precompiled SSA, precompiled MSA (WebPages.dll).
            </summary>
            <param name="sourceFile">The source file of the script to retrieve.</param>
            <returns>The <see cref="T:PHP.Core.ScriptInfo"/> of required script or null if such script cannot be obtained.</returns>
        </member>
        <member name="F:PHP.Core.RequestContext.disposed">
            <summary>
            Set when the context started finalization.
            </summary>
        </member>
        <member name="M:PHP.Core.RequestContext.IncludeScript(System.String,PHP.Core.ScriptInfo)">
            <summary>
            Performs PHP inclusion on a specified script. Equivalent to <see cref="M:PHP.Core.ScriptContext.IncludeScript(System.String,PHP.Core.ScriptInfo)"/>. 
            </summary>
            <param name="relativeSourcePath">
            Path to the target script source file relative to the web application root.
            </param>
            <param name="script">
            Script info (i.e. type called <c>Default</c> representing the target script) or any type from 
            the assembly where the target script is contained. In the latter case, the script type is searched in the 
            assembly using value of <paramref name="relativeSourcePath"/>.
            </param>
            <returns>The value returned by the global code of the target script.</returns>
            <exception cref="T:System.InvalidOperationException">Request context has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="relativeSourcePath"/> or <paramref name="script"/> are <B>null</B> references.</exception>
            <exception cref="T:System.ArgumentException">Script type cannot be resolved.</exception>
            <exception cref="T:PHP.Core.Reflection.InvalidScriptAssemblyException">The target assembly is not a valid Phalanger compiled assembly.</exception>
        </member>
        <member name="M:PHP.Core.RequestContext.Dispose">
            <summary>
            Finalizes (disposes) the request context.
            </summary>
            <remarks>
            Finalization comprises of the following actions (executed in the order):
            <list type="number">
            <term>Output buffers are flushed. This action may include calls to user defined filters (see <c>ob_start</c> function).</term>
            <term>Shutdown callbacks are invoked (if added by <c>register_shutdown_function</c> function).</term>
            <term>Session is closed. User defined session handling function may be invoked (see <c>session_set_save_handler</c> function).</term>
            <term>PHP objects are destroyed.</term>
            <term>HTTP Headers are flushed (if it wasn't done earlier).</term>
            <term>PHP resources are disposed.</term>
            <term>Per-request temporary files are deleted.</term>
            <term><see cref="E:PHP.Core.RequestContext.RequestEnd"/> event is fired.</term>
            <term>Current request and script contexts are nulled.</term>
            </list>
            Multiple invocations of the method are ignored.
            Since session data need to be written to the session store (<c>HttpContext.Session</c>) this method has to be 
            called before the ASP.NET session is ended for the request.
            </remarks>
        </member>
        <member name="P:PHP.Core.RequestContext.CurrentContext">
            <summary>
            The request context associated with the current thread executing the request. 
            Set by <see cref="M:PHP.Core.RequestContext.Initialize(PHP.Core.ApplicationContext)"/> method when the request starts.
            Contains a <B>null</B> reference when the current thread is not executing any web request 
            (or prior to the call to <see cref="M:PHP.Core.RequestContext.Initialize(PHP.Core.ApplicationContext)"/> method).
            </summary>
        </member>
        <member name="P:PHP.Core.RequestContext.RequestFile">
            <summary>
            Source file targeted by the request.
            </summary>
        </member>
        <member name="P:PHP.Core.RequestContext.HttpContext">
            <summary>
            Current HTTP context.
            </summary>
        </member>
        <member name="P:PHP.Core.RequestContext.TemporaryFiles">
            <summary>
            A list of temporary files which was created during the request and should be deleted at its end.
            </summary>
        </member>
        <member name="P:PHP.Core.RequestContext.ConnectionAborted">
            <summary>
            Gets whether the connection has been aborted due to client disconnection.
            It doesn't check, however, whether the client is connected right now.
            </summary>
        </member>
        <member name="P:PHP.Core.RequestContext.TrackClientDisconnection">
            <summary>
            Enables tracking for client disconnecion.
            </summary>
        </member>
        <member name="P:PHP.Core.RequestContext.SessionState">
            <summary>
            Whether a session has been started (i.e. session variables has been loaded).
            </summary>
        </member>
        <member name="P:PHP.Core.RequestContext.SessionExists">
            <summary>
            Gets whether a session exists (i.e. has been started or is being closed).
            </summary>
        </member>
        <member name="P:PHP.Core.RequestContext.SessionCookieLifetime">
            <summary>
            Gets or sets a lifetime of the session cookie. 
            Cookie expiration is updated after the request using this value.
            Non-positive value means infinite.
            </summary>
        </member>
        <member name="P:PHP.Core.RequestContext.ScriptContext">
            <summary>
            Current script context.
            </summary>
        </member>
        <member name="P:PHP.Core.RequestContext.DefaultResponseEncoding">
            <summary>
            Gets the original value of response encoding set in ASP.NET configuration.
            </summary>
        </member>
        <member name="E:PHP.Core.RequestContext.RequestEnd">
            <summary>
            An event fired on the very end of the request. 
            </summary>
        </member>
        <member name="E:PHP.Core.RequestContext.RequestBegin">
            <summary>
            An event fired on the beginning of the request after the script context is initialized.
            </summary>
        </member>
        <member name="T:PHP.Core.RequestContext.ResponseFilter">
            <summary>
            A filter installed on the response. All data sent to the client go through this filter.
            The filter checks whether the client is connected or not while flushing the data. 
            If the state changes from connected to disconnected then a callback specified in the ctor is invoked.
            </summary>
        </member>
        <member name="T:PHP.Core.PageFactory">
            <summary>
            Generates request handlers servicing web requests.
            </summary>
            <threadsafety instance="true"/>
        </member>
        <member name="M:PHP.Core.PageFactory.#cctor">
            <summary>
            Initializes app domain settings.
            </summary>
        </member>
        <member name="M:PHP.Core.PageFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            The method is called by ASP.NET server to obtain <see cref="T:System.Web.IHttpHandler"/> implementor.
            </summary>
            <returns>Returns a <see cref="T:PHP.Core.RequestHandler"/>.</returns>
        </member>
        <member name="M:PHP.Core.PageFactory.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            Enables a factory to reuse an existing handler instance.
            </summary>
            <param name="handler">The <see cref="T:System.Web.IHttpHandler"/> object to reuse.</param>
        </member>
        <member name="M:PHP.Core.PageFactory.AssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Called on assembly load.
            </summary>
        </member>
        <member name="T:PHP.Core.RequestHandler">
            <summary>
            Process a request and stores references to objects associated with it.
            </summary>
        </member>
        <member name="M:PHP.Core.RequestHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Invoked by ASP.NET when a request comes from a client. Single threaded.
            </summary>
            <param name="context">The reference to web server objects.</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration is invalid.</exception>
            <exception cref="T:PHP.Core.PhpUserException">Uncaught exception.</exception>
            <exception cref="T:PHP.Core.PhpNetInternalException">An internal error.</exception>
            <exception cref="T:System.Exception">Uncaught exception thrown by the class library or another error occurred during request processing.</exception>
        </member>
        <member name="P:PHP.Core.RequestHandler.IsReusable">
            <summary>
            Whether another request can reuse this instance.
            All fields are reinitialized at the beginning of the request thus the instance is reusable.
            </summary>
        </member>
        <member name="T:PHP.Core.InclusionResolutionContext">
            <summary>
            Contains information needed during inclusion resolution.
            </summary>
        </member>
        <member name="P:PHP.Core.InclusionResolutionContext.ApplicationContext">
            <summary>
            Application context.
            </summary>
        </member>
        <member name="P:PHP.Core.InclusionResolutionContext.ScriptDirectory">
            <summary>
            Directory, where the including script is present.
            </summary>
        </member>
        <member name="P:PHP.Core.InclusionResolutionContext.WorkingDirectory">
            <summary>
            Working directory.
            </summary>
        </member>
        <member name="P:PHP.Core.InclusionResolutionContext.SearchPaths">
            <summary>
            Semicolon-separated list of paths where included file is searched before the local directory is checked.
            </summary>
        </member>
        <member name="T:PHP.Core.IPhpScript">
            <summary>
            Interface marking a class containing script implementation. 
            </summary>
        </member>
        <member name="T:PHP.Core.PhpScript">
            <summary>
            Provides functionality related to PHP scripts.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpScript.CompiledWebAppAssemblyName">
            <summary>
            A name of an assembly where all web pages are compiled in.
            </summary>
            <remarks>
            This has to be unified with the script library concept in the future.
            </remarks>
        </member>
        <member name="F:PHP.Core.PhpScript.MDeclMark">
            <summary>
            String added to identifiers of m-decl functions/classes.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpScript.IsMainHelper(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Determines whether a specified method whose declaring type is a script type is a Main helper.
            </summary>
            <param name="method">The method.</param>
            <param name="parameters">GetUserEntryPoint parameters (optimization). Can be <B>null</B> reference.</param>
            <returns>Whether a specified method is an arg-less stub.</returns>
        </member>
        <member name="M:PHP.Core.PhpScript.IsScriptType(System.Type)">
            <summary>
            Checks whether a specified <see cref="T:System.Type"/> is a script type.
            </summary>
            <param name="type">The type to be checked.</param>
            <returns><B>true</B> iff <paramref name="type"/> is a script type.</returns>
        </member>
        <member name="M:PHP.Core.PhpScript.ParseMDeclName(System.String,System.String@,System.Int32@)">
            <summary>
            Splits a specified identifier and into a function/class name and an m-decl index (if applicable).
            </summary>
            <param name="fullClrName">An identifier.</param>
            <param name="name">The name of the function/class.</param>
            <param name="index">The index of the function/class if identifier has m-decl format or -1 if not.</param>
        </member>
        <member name="M:PHP.Core.PhpScript.FormatMDeclName(System.String,System.Int32)">
            <summary>
            Decides whehter a specified name has m-decl name format.
            </summary>
            <param name="name">The name of the function.</param>
            <param name="index">The m-decl index of the function. Should be positive.</param>
            <returns>Whether the name has m-decl name format.</returns>
        </member>
        <member name="M:PHP.Core.PhpScript.SearchInSearchPaths(PHP.Core.InclusionResolutionContext,System.String,System.Predicate{PHP.Core.FullPath})">
            <summary>
            Searches for an existing file among files which names are combinations of a relative path and one of the 
            paths specified in a list.
            </summary>
            <param name="context">Inclusion context containing information about include which is being evaluated.</param>
            <param name="relativePath">The relative path.</param>
            <param name="pathIsValid">Function deciding file existence.</param>
            <returns>Full path to a first existing file or an empty path.</returns>
        </member>
        <member name="M:PHP.Core.PhpScript.FindInclusionTargetPath(PHP.Core.InclusionResolutionContext,System.String,System.Predicate{PHP.Core.FullPath},System.String@)">
            <summary>
            Searches for a specified inclusion target.
            </summary>
            <param name="context">Inclustion resolution context.</param>
            <param name="path">Path to the file to search.</param>
            <param name="pathIsValid">Function deciding about file existence. Only path that passes this function is returned.</param>
            <param name="errorMessage">Warning which should be reported by the compiler or a <B>null</B> reference. The error message can be set iff the returned path is empty.</param>
            <returns>
            A canonical path to the target file or a <B>null</B> reference if the file path is not valid or the file not exists.
            </returns>
        </member>
        <member name="T:PHP.Core.ScriptContext">
            <summary>
            The context of an executing script. Contains data associated with a request.
            </summary>
            <summary>
            The context of an executing script. Contains data associated with a request.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.callContextSlotName">
            <summary>
            Call context name for the current <see cref="T:PHP.Core.ScriptContext"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.InitWebRequest(PHP.Core.ApplicationContext,System.Web.HttpContext)">
            <summary>
            Initializes the script context for a web request.
            </summary>
            <param name="appContext">Application context.</param>
            <param name="context">HTTP context of the request.</param>
            <returns>A instance of <see cref="T:PHP.Core.ScriptContext"/> to be used by the request.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Web configuration is invalid. The context is not initialized then.
            </exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.RunApplication(System.Delegate,System.String,System.String)">
            <summary>
            Creates a new script context and runs the application in it. For internal use only.
            </summary>
            <param name="mainRoutine">The script's main helper routine.</param>
            <param name="relativeSourcePath">A path to the main script source file.</param>
            <param name="sourceRoot">A source root within which an application has been compiler.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.InitApplication(PHP.Core.ApplicationContext,System.Type,System.String,System.String)">
            <summary>
            Initializes the script context for a PHP console application.
            </summary>
            <param name="appContext">Application context.</param>
            <param name="mainScript">The main script's type or a <B>null</B> reference for a pure application.</param>
            <param name="relativeSourcePath">A path to the main script source file.</param>
            <param name="sourceRoot">A source root within which an application has been compiler.</param>
            <returns>
            A new instance of <see cref="T:PHP.Core.ScriptContext"/> with its own copy of local configuration 
            to be used by the application.
            </returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Web configuration is invalid. The context is not initialized then.
            </exception>
            <remarks>
            Use this method if you want to initialize application in the same way the PHP console/Windows 
            application is initialized. The returned script context is initialized as follows:
            <list type="bullet">
              <term>The application's source root is set.</term>
              <term>The main script of the application is defined.</term>
              <term>Output and input streams are set to standard output and input, respectively.</term>
              <term>Current culture it set to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.</term>
              <term>Auto-global variables ($_GET, $_SET, etc.) are initialized.</term>
              <term>Working directory is set tothe current working directory.</term>
            </list>
            </remarks>
        </member>
        <member name="M:PHP.Core.ScriptContext.InitContext(PHP.Core.ApplicationContext)">
            <summary>
            Initializes <see cref="T:PHP.Core.ScriptContext"/> for the C#/PHP interoperability.
            </summary>
            <param name="appContext">Application context.</param>
            <returns>New <see cref="T:PHP.Core.ScriptContext"/></returns>
            <remarks>
            Use this method if you want to initialize application in the same way the PHP console/Windows 
            application is initialized. CurrentContext is set, and initialized to simulate request begin and end.
            </remarks>
        </member>
        <member name="M:PHP.Core.ScriptContext.InitContext(PHP.Core.ApplicationContext,System.IO.Stream)">
            <summary>
            Initializes <see cref="T:PHP.Core.ScriptContext"/> for the C#/PHP interoperability.
            </summary>
            <param name="appContext">Application context.</param>
            <param name="output">Output stream.</param>
            <returns>New <see cref="T:PHP.Core.ScriptContext"/></returns>
            <remarks>
            Use this method if you want to initialize application in the same way the PHP console/Windows 
            application is initialized. CurrentContext is set, and initialized to simulate request begin and end.
            </remarks>
        </member>
        <member name="M:PHP.Core.ScriptContext.CreateDefaultScriptContext">
            <summary>
            Initialize new ScriptContext and store it into the LogicalCallContext.
            </summary>
            <returns>Newly created ScriptContext.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.Include(System.String,System.Boolean)">
            <summary>
            Includes a specific script using current configuration.
            </summary>
            <param name="relativeSourcePath">Source root relative path to the script.</param>
            <param name="once">Specifies whether script should be included only once.</param>
            <returns>The value returned by the global code of the target script.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.IncludeScript(System.String,PHP.Core.ScriptInfo)">
            <summary>
            Performs PHP inclusion on a specified script. 
            </summary>
            <param name="relativeSourcePath">
            Path to the target script source file relative to the application source root 
            (see <c>Configuration.Application.Compiler.SourceRoot</c>.
            </param>
            <param name="script">
            Script type (i.e. type called <c>Default</c> representing the target script) or any type from 
            the assembly where the target script is contained (useful for multi-script assemblies, where script types are 
            not directly available from C# as they have mangled names). In the latter case, the script type is searched in the 
            assembly using value of <paramref name="relativeSourcePath"/>.
            </param>
            <returns>The value returned by the global code of the target script.</returns>
            <remarks>
            <para>
            The inclusion inheres in adding the target to the list of included scripts on the current script context
            (see <c>ScriptContext.Scripts</c> and in a call to the global code of the target script.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Request context has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="relativeSourcePath"/> or <paramref name="script"/> are <B>null</B> references.</exception>
            <exception cref="T:System.ArgumentException">Script type cannot be resolved.</exception>
            <exception cref="T:PHP.Core.Reflection.InvalidScriptAssemblyException">The target assembly is not a valid Phalanger compiled assembly.</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.StaticInclude(System.Int32,System.String,System.RuntimeTypeHandle,PHP.Core.InclusionTypes)">
            <summary>
            Called in place where a script is statically included. For internal purposes only.
            </summary>
            <param name="level">RelativePath.level; <paramref name="relativeSourcePath"/>.</param>
            <param name="relativeSourcePath">RelativePath.path; A path to the included script's source file relative to source root.</param>
            <param name="includee">A type handle of the included script.</param>
            <param name="inclusionType">A type of an inclusion.</param>
            <returns>Whether to process inclusion. If <B>false</B>, inclusion should be ignored.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.DynamicInclude(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.Reflection.DObject,PHP.Core.Reflection.DTypeDesc,PHP.Core.InclusionTypes)">
            <summary>
            Called in place where a script is dynamically included. For internal purposes only.
            </summary>
            <param name="includedFilePath">A source path to the included script.</param>
            <param name="includerFileRelPath">A source path to the script issuing the inclusion relative to the source root.</param>
            <param name="variables">A run-time variables table.</param>
            <param name="self">A current object in which method an include is called (if applicable).</param>
            <param name="includer">A current class type desc in which method an include is called (if applicable).</param>
            <param name="inclusionType">A type of an inclusion.</param>
            <returns>A result of the Main() method call.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.SearchForIncludedFile(PHP.Core.PhpError,System.String,PHP.Core.FullPath)">
            <summary>
            Searches for a file in the script library, current directory, included paths, and web application root respectively.
            </summary>
            <param name="errorSeverity">A severity of an error (if occures).</param>
            <param name="includedPath">A source path to the included script.</param>
            <param name="includerFullPath">Full source path to the including script.</param>
            <returns>Full path to the file or <B>null</B> path if not found.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.LoadDynamicScriptType(PHP.Core.PhpSourceFile)">
            <summary>
            Loads a script type dynamically.
            </summary>
            <param name="sourceFile">Script's source file.</param>
        </member>
        <member name="F:PHP.Core.ScriptContext.httpHeaders">
            <summary>
            Stores HttpHeaders locally so PHP apps can change them (by default you can't change value 
            of already set http header, but this is possible in PHP)
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.RegisterSessionGlobals">
            <summary>
            Adds session variables aliases to global variables.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.scripts">
            <summary>
            List of <see cref="T:PHP.Core.ScriptInfo"/>s included by the current script. Contains also the script itself.
            Used for resolving inclusions.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetIncludedScripts">
            <summary>
            List currently included script files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.DeclaredFunctionsAllocate(System.Int32)">
            <summary>
            Allocate <see cref="F:PHP.Core.ScriptContext._declaredFunctions"/> with given <paramref name="capacity"/>.
            </summary>
            <param name="capacity">Capacity hint.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.DeclaredTypesAllocate(System.Int32)">
            <summary>
            Allocate <see cref="F:PHP.Core.ScriptContext._declaredTypes"/> with given <paramref name="capacity"/>.
            </summary>
            <param name="capacity">Capacity hint.</param>
        </member>
        <member name="F:PHP.Core.ScriptContext.IncompleteTypesInAdvance">
            <summary>
            Set of incomplete (deferred) types (their unique identifier) that were declared already in advance at the beginning of the script.
            These types was declared at the beginning of the script, because it was already possible. This simulates behaviour of PHP,
            since it "loads" type into the context if its base type is known at runtime (not at compile time like Phalanger does).
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.staticLocalsId">
            <summary>
            Mapping of static local variables into their unique sequential ID. This allows efficient indexing into <see cref="F:PHP.Core.ScriptContext.staticLocals"/> array.
            The index starts from 1.
            The dictionary is used only when two or more static locals point to the same variable (e.g. when single eval() has different content sometimes).
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.staticLocals">
            <summary>
            User defined static locals for the current context.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.Stack">
            <summary>
            The stack for performing indirect calls and calls to argument-aware functions.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.autoloadFunction">
            <summary>
            Lazily resolved and initialized __autoload() function.
            Initialized when needed in the first time in <c>ResolveTypeByAutoload</c>.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.pendingAutoloads">
            <summary>
            Lazily created list of types name being auto-loaded.
            Used as a recursion prevention of <b>autoload</b>.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.disposed">
            <summary>
            Set when the context started finalization.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.#ctor(PHP.Core.ApplicationContext)">
            <summary>
            Creates an instance of <see cref="T:PHP.Core.ScriptContext"/> initialized with dummy streams and 
            a copy of the default local configuration.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.#ctor(PHP.Core.ApplicationContext,PHP.Core.LocalConfiguration,System.IO.TextWriter,System.IO.Stream)">
            <summary>
            Creates instance of <see cref="T:PHP.Core.ScriptContext"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext._coreConstants">
            <summary>
            Contain constants defined by runtime in ScriptContext (all of them are ignoreCase)
            </summary>
            <remarks>Actaully it is here just because of GetDefinedConstants(bool) library function</remarks>
        </member>
        <member name="M:PHP.Core.ScriptContext.DefineConstant(System.String,System.Object)">
            <summary>
            Defines a user constant.
            </summary>
            <param name="name">The constant name. Compiler converts constant name to string before passing it to this method.</param>
            <param name="value">The constant value (should be either scalar or a <B>null</B> reference).</param>
            <returns>Whether the constant has been defined. Returns <B>false</B> if the constant is already defined.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.DefineConstant(System.String,System.Object,System.Boolean)">
            <summary>
            Defines a user constant.
            </summary>
            <param name="name">The constant name. Compiler converts constant name to string before passing it to this method.</param>
            <param name="value">The constant value (should be either scalar or a <B>null</B> reference).</param>
            <param name="ignoreCase">Whether the constant is case insensitive.</param>
            <returns>Whether the new constant has been defined.</returns>
            <exception cref="T:PHP.Core.PhpException">Constant has already been defined (Notice).</exception>
            <exception cref="T:PHP.Core.PhpException">Value is neither scalar not <B>null</B> (Warning).</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetConstantValue(System.String,System.String)">
            <summary>
            Retrieves a value of a constant (either user or library).
            </summary>
            <param name="name">The name of the constant.</param>
            <param name="fallbackName">The name of the constant tried if the first one does not exist.</param>
            <returns>Returns the value of the constant or its name it it is not defined.</returns>
            <exception cref="T:PHP.Core.PhpException">Constant is not defined (Notice).</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetClassConstant(System.String,PHP.Core.Reflection.DConstantDesc@,System.Boolean)">
            <summary>
            Tries to parse the <paramref name="fullname"/> as "typename::constantname", resolve the typename and tries to get the constantname.
            </summary>
            <param name="fullname">Full class constant name, in a form of "typename::constantname".</param>
            <param name="desc">Found constant if any. Otherwise will be null.</param>
            <param name="quiet">True to throw undefined class constant PHP error if fullname represents class constant name and the constant was not found.</param>
            <returns>True if given <paramref name="fullname"/> states for class constant name.</returns>
            <exception cref="T:PHP.Core.PhpException">Undefined class constant (Fatal Error).</exception>
            <exception cref="T:PHP.Core.PhpException">Class name could not be resolved (Fatal Error).</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetConstantValue(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Retrieves a value of a constant (either user or library).
            </summary>
            <param name="name">The name of the constant.</param>
            <param name="fallbackName">The name of constant tried if <paramref name="name"/> does not exist. (global constants only)</param>
            <param name="quiet">Whether to report a notice if the constant is not defined.</param>
            <param name="returnNameIfUndefined">True to return the <paramref name="name"/> instead of <c>null</c> when constant is not defined.</param>
            <returns>Returns the value of the constant. If constant is not defined, <c>null</c> or its name is returned.</returns>
            <exception cref="T:PHP.Core.PhpException">Constant is not defined (Notice).</exception>
            <exception cref="T:PHP.Core.PhpException">Constant is not defined (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Undefined class constant (Fatal Error).</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetConstantValue(System.String,System.Boolean,System.Boolean)">
            <summary>
            Retrieves a value of a constant (either user or library).
            </summary>
            <param name="name">The name of the constant.</param>
            <param name="quiet">Whether to report a notice if the constant is not defined.</param>
            <param name="returnNameIfUndefined">True to return the <paramref name="name"/> instead of <c>null</c> when constant is not defined.</param>
            <returns>Returns the value of the constant. If constant is not defined, <c>null</c> or its name is returned.</returns>
            <exception cref="T:PHP.Core.PhpException">Constant is not defined (Notice).</exception>
            <exception cref="T:PHP.Core.PhpException">Constant is not defined (Warning).</exception>
            <exception cref="T:PHP.Core.PhpException">Undefined class constant (Fatal Error).</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.IsConstantDefined(System.String)">
            <summary>
            Checks whether a constant of a specified name is defined.
            </summary>
            <param name="name">The name of the constant.</param>
            <returns>Whether user or library constant with <paramref name="name"/> name is defined.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetDefinedConstants(System.Collections.IDictionary)">
            <summary>
            Retrieves all defined user and library constants.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="result"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetDefinedConstantCount">
            <summary>
            Retrieves the number of all defined user and library constants.
            </summary>
            <returns>The number of constants.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetDefinedUserConstantCount">
            <summary>
            Retrieves the number of user defined constants.
            </summary>
            <returns>The number of constants.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetDefinedUserConstants(System.Collections.IDictionary)">
            <summary>
            Retrieves all user defined constants.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetDefinedExtensionConstants(System.Collections.IDictionary,System.String)">
            <summary>
            Retrieves all defined extension constants.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="result"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.DeclareFunction(PHP.Core.Reflection.PhpRoutineDesc,System.String)">
            <summary>
            Declares a PHP function.
            Emitted.
            </summary>
            <param name="function">The <see cref="T:PHP.Core.Reflection.PhpRoutineDesc"/> of the function. Contains ArgLess stub and modifiers. (new PhpRoutineDesc(Attributes, ArglessStub)).</param>
            <param name="fullName">The name of the function.</param>
            <exception cref="T:PHP.Core.PhpException">A function of the given name has already been declared. (Error)</exception>
        </member>
        <member name="F:PHP.Core.ScriptContext._declaredFunctionsMap">
            <summary>
            Bit map of currently declared function. If we know the index of <see cref="T:PHP.Core.Reflection.DRoutineDesc"/>, we can check whether it is declared quickly.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.IsFunctionDeclared(PHP.Core.Reflection.DRoutineDesc)">
            <summary>
            Check whether given <paramref name="desc"/> is declared on the current <see cref="T:PHP.Core.ScriptContext"/> or not.
            </summary>
            <param name="desc"><see cref="T:PHP.Core.Reflection.DRoutineDesc"/> to check, if it is declared on the current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns><c>true</c> iff <paramref name="desc"/> is declared.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.DeclareLambda(PHP.Core.RoutineDelegate)">
            <summary>
            Declares a PHP lambda function.
            Operator.
            </summary>
            <param name="function">The <see cref="T:PHP.Core.Reflection.DRoutineDesc"/> of the function.</param>
            <return>The generated name for the function.</return>
        </member>
        <member name="M:PHP.Core.ScriptContext.Call(System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.NamingContext,System.Object,System.String,PHP.Core.Reflection.DRoutineDesc@,PHP.Core.ScriptContext)">
            <summary>
            Calls a function which is unknown at compile time.
            </summary>
            <param name="localVariables">Table of local variables if available.</param>
            <param name="namingContext">Naming context.</param>
            <param name="name">The name of the function. Case insensitive.</param>
            <param name="fallbackName">The name of the function tried if the first one does not exist.</param>
            <param name="context">The script context in which to do the call.</param>
            <param name="routineHint">Optional hint to skip function resolving.</param>
            <returns>The return value of the function called.</returns>
            <remarks>
            If a compile time unknown function is called all variables are expected to be of 
            type <see cref="T:PHP.Core.PhpReference"/>. If the result is passed to non reference target 
            it is dereferenced.
            </remarks>
        </member>
        <member name="M:PHP.Core.ScriptContext.CallInternal(System.Collections.Generic.Dictionary{System.String,System.Object},PHP.Core.NamingContext,System.Object,System.String,PHP.Core.Reflection.DRoutineDesc@,PHP.Core.ScriptContext)">
            <summary>
            Calls a function which is unknown at compile time. Returns the value directly returned by <see cref="M:PHP.Core.Reflection.DRoutineDesc.Invoke(PHP.Core.Reflection.DObject,PHP.Core.PhpStack)"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetDeclaredFunctions(System.Collections.IList,System.Collections.IList)">
            <summary>
            Populates given list with names of user and library functions. 
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.DeclareType(PHP.Core.Reflection.PhpTypeDesc,System.String)">
            <summary>
            Declares a PHP class or PHP interface.
            </summary>
            <param name="typeDesc">The <see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the class/interface.</param>
            <param name="fullName">The name of the class.</param>
            <exception cref="T:PHP.Core.PhpException">A class or interface of the given name has already been declared. (Error)</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.DeclareType(System.RuntimeTypeHandle,System.String)">
            <summary>
            Declares a generic PHP class or PHP interface.
            </summary>
            <param name="typeHandle">The <see cref="T:PHP.Core.Reflection.DTypeDesc"/> of the class/interface.</param>
            <param name="fullName">The name of the class.</param>
            <exception cref="T:PHP.Core.PhpException">A class or interface of the given name has already been declared. (Error)</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.DeclareIncompleteTypeHelper(System.String,System.String)">
            <summary>
            Checks whether deferred type can be declared already at current point of execution.
            </summary>
            <param name="uid">Unique type identifier used in <see cref="F:PHP.Core.ScriptContext.IncompleteTypesInAdvance"/> hash table.</param>
            <param name="requiredBaseType">Type name required by this type declaration. If this is not declared yet, the type cannot be declared in advance.</param>
            <returns><c>True</c> iff preconditions are met and the type can be declared.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.IncompleteTypeDeclared(System.String)">
            <summary>
            Checks whether specified incomplete type was already declared in the script beginning.
            </summary>
            <param name="uid">Unique type identifier used in <see cref="F:PHP.Core.ScriptContext.IncompleteTypesInAdvance"/> hash table.</param>
            <returns><c>True</c> iff the type was already declared and its declaration stub must not be called again.</returns>
        </member>
        <member name="F:PHP.Core.ScriptContext.AutoGlobals">
            <summary>
            Auto-global arrays.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.ResolveFunctionWithHint(PHP.Core.Reflection.DRoutineDesc,System.String,PHP.Core.NamingContext,System.Boolean)">
            <summary>
            Internally used for function lookup when we already have a candidate.
            </summary>
            <param name="routineHint">Hint.</param>
            <param name="fullName">Full name of the function to resolve.</param>
            <param name="nameContext">Current <see cref="T:PHP.Core.NamingContext"/>.</param>
            <param name="quiet">Wheter to throw is the function cannot be resolved.</param>
            <returns><see cref="T:PHP.Core.Reflection.DRoutineDesc"/> or <c>null</c>.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.ResolveType(System.String)">
            <summary>
            Finds a PHP class or PHP interface (either user or system) of a given name. Resolves <c>self</c> and
            <c>parent</c> reserved class names.
            </summary>
            <param name="fullName">Name of the class to search for, without namespace prefix.</param>
            <returns>The <see cref="T:System.Type"/> or <B>null</B> if not found.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.ResolveType(System.String,PHP.Core.NamingContext,PHP.Core.Reflection.DTypeDesc,System.Object[],PHP.Core.ResolveTypeFlags)">
            <summary>
            Finds a type (either user or system) of a given name. Resolves <c>self</c> and
            <c>parent</c> reserved class names.
            </summary>
            <param name="fullName">Name of the class/interface to search for, without namespace prefix, any case.</param>
            <param name="nameContext">Current naming context.</param>
            <param name="caller">Current class context.</param>
            <param name="genericArgs">Array of function type params. Stored in pairs in a form of [(string)name1,(DTypeDescs)type1, .., ..]. Can be null.</param>
            <param name="flags">Resolve type flags.</param>
            <returns>The <see cref="T:PHP.Core.Reflection.DTypeDesc"/> or <B>null</B> if not found.</returns>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="fullName"/> is <c>self</c> or <c>parent</c> but there is
            no class context. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="fullName"/> is <c>parent</c> but the current class has no parent.
            (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The class is not found. (Error)</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.ResolveTypeByAutoload(System.String,PHP.Core.NamingContext,PHP.Core.Reflection.DTypeDesc,PHP.Core.ResolveTypeFlags)">
            <summary>
            In case SPL autoload is enabled, invoke registered SPL autoload functions subsequently until
            specified type is declared. Otherwise try to invoke __autoload function to declare specified type.
            </summary>
            <param name="fullName">Name of the class/interface to search for, without namespace prefix, any case.</param>
            <param name="nameContext">Current naming context.</param>
            <param name="caller">Current class context.</param>
            <param name="flags">Resolve type flags.</param>
            <returns>The <see cref="T:PHP.Core.Reflection.DTypeDesc"/> or <B>null</B> if the class was not autoloaded.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.ResolveGenericParameterType(System.String,PHP.Core.Reflection.DTypeDesc,System.Object[])">
            <summary>
            Resolve generic parameter type. The type specified as a generic parameter.
            </summary>
            <param name="lowercaseFullName">The name of the generic parameter without the leading exclamation mark. The name is in lowercase.</param>
            <param name="caller">Current class context.</param>
            <param name="genericArgs">Array of function type params. Stored in pairs in a form of [(string)name1,(DTypeDescs)type1, .., ..]. Can be null.</param>
            <returns>The <see cref="T:PHP.Core.Reflection.DTypeDesc"/> or <B>null</B> if not found.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.ResolveSpecialTypeNames(System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ResolveTypeFlags)">
            <summary>
            Resolve <c>base</c> or <c>parent</c> class names in current class context.
            </summary>
            <param name="fullName">The name of class.</param>
            <param name="caller">Class context.</param>
            <param name="flags">Resolve type flags.</param>
            <returns>The <see cref="T:PHP.Core.Reflection.DTypeDesc"/> or <B>null</B> if the class was not autoloaded.</returns>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="fullName"/> is <c>self</c> or <c>parent</c> but there is
            no class context. (Error)</exception>
            <exception cref="T:PHP.Core.PhpException">The <paramref name="fullName"/> is <c>parent</c> but the current class has no parent.
            (Error)</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.SearchForName``1(System.Collections.Generic.Dictionary{System.String,``0},System.Collections.Generic.Dictionary{System.String,``0},System.String,PHP.Core.NamingContext)">
            <summary>
            Searches for a type in a given naming context.
            </summary>
            <param name="localTable"></param>
            <param name="globalTable"></param>
            <param name="fullName">Name of the type to search for.</param>
            <param name="nameContext">The naming context, in which the search should be performed.</param>
            <returns>The corresponding <see cref="T:PHP.Core.Reflection.DTypeDesc"/> or <B>null</B> if not found.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.ResolveGenericTypeName(System.Int32@,System.String,PHP.Core.NamingContext,PHP.Core.Reflection.DTypeDesc,System.Object[],PHP.Core.ResolveTypeFlags)">
            <summary>
            <c>start</c> points to the first character of the substring to parse.
            <c>end</c> points to the one character behind the substring to parse.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.DisableErrorReporting">
            <summary>
            Disables error reporting. Can be called for multiple times. To enable reporting again 
            <see cref="M:PHP.Core.ScriptContext.EnableErrorReporting"/> should be called as many times as <see cref="M:PHP.Core.ScriptContext.DisableErrorReporting"/> was.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.EnableErrorReporting">
            <summary>
            Enables error reporting disabled by a single call to <see cref="M:PHP.Core.ScriptContext.DisableErrorReporting"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.bufferedOutput">
            <remarks>Is <c>null</c> reference until it is not used for the first time.</remarks>
        </member>
        <member name="M:PHP.Core.ScriptContext.Echo(System.Object,PHP.Core.ScriptContext)">
            <summary>
            Writes data to the current output.
            </summary>
            <param name="value">Data to be written.</param>
            <param name="scriptcontext">Current script context.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.Echo(PHP.Core.PhpBytes,PHP.Core.ScriptContext)">
            <summary>
            Writes <see cref="T:PHP.Core.PhpBytes"/> data to the current output.
            </summary>
            <param name="value">Data to be written.</param>
            <param name="scriptcontext">Current script context.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.Echo(System.String,PHP.Core.ScriptContext)">
            <summary>
            Writes <see cref="T:System.String"/> to the current output.
            </summary>
            <param name="value">The string to be written.</param>
            <param name="scriptcontext">Current script context.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.Echo(System.Boolean,PHP.Core.ScriptContext)">
            <summary>
            Writes <see cref="T:System.Boolean"/> to the current output.
            </summary>
            <param name="value">The boolean to be written.</param>
            <param name="scriptcontext">Current script context.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.Echo(System.Int32,PHP.Core.ScriptContext)">
            <summary>
            Writes <see cref="T:System.Int32"/> to the current output.
            </summary>
            <param name="value">The integer to be written.</param>
            <param name="scriptcontext">Current script context.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.Echo(System.Int64,PHP.Core.ScriptContext)">
            <summary>
            Writes <see cref="T:System.Int64"/> to the current output.
            </summary>
            <param name="value">The long integer to be written.</param>
            <param name="scriptcontext">Current script context.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.Echo(System.Double,PHP.Core.ScriptContext)">
            <summary>
            Writes <see cref="T:System.Double"/> to the current output.
            </summary>
            <param name="value">The double to be written.</param>
            <param name="scriptcontext">Current script context.</param>
        </member>
        <member name="F:PHP.Core.ScriptContext.timer">
            <summary>
            A timer used for timeouting the request in the manner of PHP.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.ApplyExecutionTimeout(System.Int32)">
            <summary>
            Updates a value of <see cref="F:PHP.Core.LocalConfiguration.RequestControlSection.ExecutionTimeout"/>
            in the current configuration record and adjusts the active timer (if any).
            </summary>
            <param name="seconds">Timeout in seconds, non-positive values mean no timeout.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.GuardedCall``2(System.Converter{``0,``1},``0,System.Boolean)">
            <summary>
            Calls a specified routine in limited time and termination exceptions being caught
            (i.e. <see cref="T:PHP.Core.ScriptDiedException"/> and <see cref="T:System.Threading.ThreadAbortException"/>).
            </summary>
            <param name="routine">A routine to be called.</param>
            <param name="data">Data passed to the routine.</param>
            <param name="allowUserExceptions">Whether user exceptions are allowed to be thrown by the target.</param>
            <exception cref="T:PHP.Core.PhpNetInternalException">Internal error.</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.CallUserExceptionHandler(PHP.Library.SPL.Exception)">
            <summary>
            Calls user eception handler.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.CallUserExceptionToString(PHP.Library.SPL.Exception)">
            <summary>
            Get user exception string representation.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.FinalizeBufferedOutput(System.Object)">
            <summary>
            Flushes all remaining data from output buffers.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.ThreadAbortedDueToTimeout">
            <summary>
            Called when the execution has been timed out. 
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.Die(System.Object)">
            <summary>
            Implements language construct exit/die. 
            </summary>
            <param name="status">The status returned by script's Main() method. Can be a <B>null</B> reference.</param>
            <remarks>
            Prints the <paramref name="status"/> if it is of <see cref="T:System.String"/> type.
            </remarks>
        </member>
        <member name="F:PHP.Core.ScriptContext.shutdownCallbacks">
            <summary>
            User defined post-request callbacks.
            Can be a <B>null</B> reference which means no shutdown callback has ever been registered.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.RegisterShutdownCallback(PHP.Core.PhpCallback,System.Object[])">
            <summary>
            Adds new user callback to the list of callbacks called on script termination.
            </summary>
            <param name="callback">The callback to register.</param>
            <param name="parameters">Parameters for the callback.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="callback"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.ScriptContext.ProcessShutdownCallbacks(System.Object)">
            <summary>
            Processes shutdown callbacks registered by a user.
            </summary>
            <exception cref="T:PHP.Core.PhpException">An error occured during execution of the callbacks.</exception>
            <exception cref="T:PHP.Core.PhpUserException">Uncaught exception has been raised by some callback.</exception>
            <exception cref="T:PHP.Core.ScriptDiedException">Script died or exited.</exception>
            <exception cref="T:PHP.Core.PhpNetInternalException">Internal error.</exception>
        </member>
        <member name="F:PHP.Core.ScriptContext.objectsToBeFinalized">
            <summary>
            List of weak references to <see cref="T:PHP.Core.Reflection.DObject"/> instances that should be finalized when current request is over.
            Lazily constructed.
            </summary>
            <remarks>
            Objects are finalized as their memory is about to be reclaimed by the GC during the request/app
            processing. This list ensures that all instantiated objects are finalized before the request is
            finished.
            </remarks>
        </member>
        <member name="M:PHP.Core.ScriptContext.RegisterDObjectForFinalization(PHP.Core.Reflection.DObject)">
            <summary>
            Registers a <see cref="T:PHP.Core.Reflection.DObject"/> instance for finalization.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.FinalizePhpObjects(System.Object)">
            <summary>
            Calls <c>__destruct</c> on <see cref="T:PHP.Core.Reflection.DObject"/> instances that have been created in this context.
            </summary>
            <param name="_">Dummy.</param>
        </member>
        <member name="F:PHP.Core.ScriptContext.classContext">
            <summary>
            Cached class context used when acquiring objects.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.classContextIsValid">
            <summary>
            If <see cref="F:PHP.Core.ScriptContext.classContext"/> has not been set, this field is <B>true</B>
            (<B>null</B> is a valid value for <see cref="F:PHP.Core.ScriptContext.classContext"/>).
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.ReleaseObject(PHP.Core.IPhpObjectGraphNode,PHP.Core.ScriptContext)">
            <summary>
            Called for each object that implements the <see cref="T:PHP.Core.IPhpObjectGraphNode"/> interface when
            releasing an object graph (e.g. when storing variables to InProc session).
            </summary>
            <param name="node">The object that should be released.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The released object (might be different from <paramref name="node"/>).</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.AcquireObject(PHP.Core.IPhpObjectGraphNode,PHP.Core.ScriptContext)">
            <summary>
            Called for each object that implements the <see cref="T:PHP.Core.IPhpObjectGraphNode"/> interface when
            acquiring an object graph (e.g. when retrieving variables from InProc session).
            </summary>
            <param name="node">The object that should be acquired.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The acquired object (always <paramref name="node"/>).</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.AcquireArray(PHP.Core.PhpArray)">
            <summary>
            Call <c>__wakeup</c> recursively on <see cref="T:PHP.Core.PhpObject"/>s contained in the array.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.ReleaseArray(PHP.Core.PhpArray)">
            <summary>
            Call <c>__sleep</c> recursively on <see cref="T:PHP.Core.PhpObject"/>s contained in the array.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetStaticLocal(System.Int32)">
            <summary>
            Gets a value of a static local. For internal use only.
            </summary>
            <param name="id">The index of a static local. Index starts with 1.</param>
            <returns>Value of the local or <B>null</B>.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetStaticLocalId(System.String)">
            <summary>
            Get the index of specified local variable.
            </summary>
            <param name="id">Compound name of a static local (in format {simple function name}${local name index}).</param>
            <returns>The static local integer index.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.AddStaticLocal(System.Int32,System.Object)">
            <summary>
            Adds a local into the static local table. For internal use only.
            </summary>
            <param name="id">The index of a static local. Index starts with 1.</param>
            <param name="value">A value of local (not a reference).</param>
            <returns>A reference containing the <paramref name="value"/>.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.DefineMainScript(PHP.Core.ScriptInfo,PHP.Core.PhpSourceFile)">
            <summary>
            Sets a main script of the application.
            </summary>
            <param name="script">The script related to the <c>sourceFile</c>.</param>
            <param name="sourceFile">The file path of the <c>script</c>.</param>
        </member>
        <member name="F:PHP.Core.ScriptContext.EvalLine">
            <summary>
            Contains captured line number.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.EvalColumn">
            <summary>
            Contains captured column number.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.EvalId">
            <summary>
            Contains captured eval id.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.EvalRelativeSourcePath">
            <summary>
            Contains captured relative source file packed path.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.GetCapturedSourceCodeDescriptor">
            <summary>
            Gets captured eval info. Eval info on a script context is updated by 
            a code injected to generated code by the compiler.
            </summary>
            <returns>The captured eval info.</returns>
            <remarks>
            Eval info is captured before a class library function call if it is implemented with option 
            <see cref="F:PHP.Core.FunctionImplOptions.CaptureEvalInfo"/> and a part of it (line, column) is updated
            in every sequence point in debug mode. Should be called on the beginning of the function implementetion.
            Can be called even if the info will not be needed eventually.
            </remarks>
        </member>
        <member name="M:PHP.Core.ScriptContext.ClearCapturedSourceCodeDescriptor">
            <summary>
            Clears the info.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.setterChainStack">
            <summary>
            A stack of <see cref="T:PHP.Core.PhpRuntimeChain"/>s that are currently being processed.
            </summary>
            <remarks>
            <para>
            <see cref="T:PHP.Core.PhpRuntimeChain"/>s are maintained in a stack in order to support nested operator chains.
            </para>
            <para>
            Every time the <see cref="M:PHP.Core.Operators.EnsurePropertyIsArray(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc)"/> or <see cref="M:PHP.Core.Operators.EnsurePropertyIsObject(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/>
            is called on a system class with overloaded member access (<B>__set</B> and/or <B>__get</B>), a new
            <see cref="T:PHP.Core.PhpRuntimeChain"/> is pushed to the stack (<see cref="M:PHP.Core.ScriptContext.BeginSetterChain(PHP.Core.Reflection.DObject)"/>).
            </para>
            <para>
            If a setter chain has been created, the consequent chaining operators just record field and item names
            to it (<see cref="M:PHP.Core.ScriptContext.ExtendSetterChain(PHP.Core.RuntimeChainElement)"/>). The last operator calls <see cref="M:PHP.Core.ScriptContext.FinishSetterChain(System.Object)"/> which
            causes the recorded data to be passed to the <B>__set</B> handler and the <see cref="T:PHP.Core.PhpRuntimeChain"/>
            popped from the stack.
            </para>
            </remarks>
        </member>
        <member name="F:PHP.Core.ScriptContext.SetterChainSingletonObject">
            <summary>
            Singleton instance of <see cref="T:PHP.Core.PhpObject"/> passed among chaining operators to indicate that
            they are part of a setter chain.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptContext.SetterChainSingletonArray">
            <summary>
            Singleton instance of <see cref="T:PHP.Core.PhpArray"/> passed among chaining operators to indicate that
            they are part of a setter chain.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptContext.BeginSetterChain(PHP.Core.Reflection.DObject)">
            <summary>
            Creates a new setter chain. Called from <see cref="M:PHP.Core.Operators.EnsurePropertyIsArray(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc)"/> and
            <see cref="M:PHP.Core.Operators.EnsurePropertyIsObject(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/> when a field of a system class with overloaded member
            access should be ensured.
            </summary>
            <param name="obj">The instance on which the setter chain is applied.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.ExtendSetterChain(PHP.Core.RuntimeChainElement)">
            <summary>
            Adds a new element to the current setter chain. Called from chaining operators that can follow
            <see cref="M:PHP.Core.Operators.EnsurePropertyIsArray(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc)"/> or <see cref="M:PHP.Core.Operators.EnsurePropertyIsObject(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/> when
            they detect they are part of a setter chain.
            </summary>
            <param name="elem">The setter chain element to add.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.AbortSetterChain(System.Boolean)">
            <summary>
            Pops the current setter chain without invoking the setter.
            </summary>
            <param name="quiet">Whether not to report an error.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.FinishSetterChain(System.Object)">
            <summary>
            Passes the current setter chain to the setter and pops the setter chain. Called from chaining
            operators that conclude the chain that might contain <see cref="M:PHP.Core.Operators.EnsurePropertyIsArray(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc)"/> or
            <see cref="M:PHP.Core.Operators.EnsurePropertyIsObject(PHP.Core.Reflection.DObject,System.String,PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext)"/> when they detect they are part of a setter chain.
            </summary>
            <param name="value">The value that should be assigned to the field/item represented by the last
            setter chain element.</param>
        </member>
        <member name="M:PHP.Core.ScriptContext.Call(System.String,System.Object[])">
            <summary>
            Calls a PHP function. Intended for use from other languages.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="arguments">Arguments.</param>
            <returns>Function call result.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.Call(System.String,PHP.Core.NamingContext,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object[])">
            <summary>
            Calls a PHP function. Intended for use from other languages.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="namingContext">Naming context within which the name is resolved (namespaces and aliases). Can be <B>null</B>.</param>
            <param name="callerLocalVariables">Table of the caller's variables. Can be <B>null</B>.</param>
            <param name="arguments">Arguments.</param>
            <returns>Function call result.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.NewObject(System.String,System.Object[])">
            <summary>
            Creates and instance of a PHP class. Intended for use from other languages.
            </summary>
            <param name="className">Name of the class to instantiate.</param>
            <param name="ctorArguments">Constructor arguments.</param>
            <returns>The new instance or <B>null</B> on error.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.NewObject(System.String,PHP.Core.NamingContext,System.Object[])">
            <summary>
            Creates and instance of a PHP class. Intended for use from other languages.
            </summary>
            <param name="className">Name of the class to instantiate.</param>
            <param name="namingContext">Naming context within which the name is resolved (namespaces and aliases). Can be <B>null</B>.</param>
            <param name="ctorArguments">Constructor arguments.</param>
            <returns>The new instance or <B>null</B> on error.</returns>
        </member>
        <member name="M:PHP.Core.ScriptContext.System#IDisposable#Dispose">
            <summary>
            Disposes this instance of <see cref="T:PHP.Core.ScriptContext"/>,
            calls PHP shutdown functions, finalizes PHP objects and finalizes buffer output.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.CurrentContext">
            <summary>
            The instance of <see cref="T:PHP.Core.ScriptContext"/> associated with the current logical thread.
            </summary>
            <remarks>
            If no instance is associated with the current logical thread
            a new one is created, added to call context and returned. 
            The slot allocated by some instance is freed
            by setting this property to a <B>null</B> reference.
            </remarks>
        </member>
        <member name="P:PHP.Core.ScriptContext.MainScriptFile">
            <summary>
            A path to the source file of main script.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.MainScriptInfo">
            <summary>
            A <see cref="T:PHP.Core.ScriptInfo"/> of main script (first script executed within the current <see cref="T:PHP.Core.RequestContext"/>).
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.Config">
            <summary>
            The configuration used by the class library and script functions and by objects which 
            has this instance of <see cref="T:PHP.Core.ScriptContext"/> associated with itself.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.DeclaredFunctions">
            <summary>
            User functions declarators - delegates pointing on declared functions.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.DeclaredTypes">
            <summary>
            Declarators of user classes.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.UserStreamWrappers">
            <summary>
            Registered user stream wrappers per request. Initialized in a lazy manner.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.WorkingDirectory">
            <summary>
            The current directory used as working one for PHP file system functions and for including scripts.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.SplAutoloadFunctions">
            <summary>
            Get the list of SPL autoload functions. This cannot be null. First call to this property will enable SPL autoload functions.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.CurrentLateStaticBinding">
            <summary>
            Stack of <see cref="T:PHP.Core.Reflection.DTypeDesc"/> representing type used to call currently evaluated method.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.IsSplAutoloadEnabled">
            <summary>
            Get the value indicating if SPL autoload functions are enabled. (If spl_autoload_register was used.)
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.SplAutoloadExtensions">
            <summary>
            List of SPL extensions used by spl_autoload() function.
            </summary>
        </member>
        <member name="E:PHP.Core.ScriptContext.TryDispose">
            <summary>
            Additional disposal action.
            </summary>
        </member>
        <member name="E:PHP.Core.ScriptContext.FinallyDispose">
            <summary>
            Additional disposal action processed in <c>finally</c> block.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.Constants">
            <summary>
            User defined constants.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.ThrowExceptionOnError">
            <summary>
            Whether to throw an exception on soft error (Notice, Warning, Strict).
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.ErrorReportingDisabled">
            <summary>
            Gets whether error reporting is disabled or enabled.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.ErrorReportingLevel">
            <summary>
            Gets a value indicating a level of error reporting presented to user.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.LastErrorType">
            <summary>
            Last error type set by the <see cref="M:PHP.Core.PhpException.Throw(PHP.Core.PhpError,System.String)"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.LastErrorMessage">
            <summary>
            Last error message set by the <see cref="M:PHP.Core.PhpException.Throw(PHP.Core.PhpError,System.String)"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.LastErrorFile">
            <summary>
            Last error file set by the <see cref="M:PHP.Core.PhpException.Throw(PHP.Core.PhpError,System.String)"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.LastErrorLine">
            <summary>
            Last error line set by the <see cref="M:PHP.Core.PhpException.Throw(PHP.Core.PhpError,System.String)"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.BufferedOutput">
            <summary>
            Buffered output associated with the request.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.Output">
            <summary>
            Stream where text output will be sent.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.OutputStream">
            <summary>
            Stream where binary output will be sent.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.IsOutputBuffered">
            <summary>
            Specifies whether script output is passed through <see cref="P:PHP.Core.ScriptContext.BufferedOutput"/>.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptContext.ExecutionTimedOut">
            <summary>
            Returns <B>true</B> if the main script code has been timed out.
            </summary>
        </member>
        <member name="T:PHP.Core.ScriptInfo">
            <summary>
            Holds information about an included script. Caches the MainHelper and allows to call the Main of the Script.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptInfo.Script">
            <summary>
            The script type.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptInfo.MaxDeclaredFunctionsCount">
            <summary>
            Remember max count of declared functions from within this entering script. Used to prealocate <see cref="P:PHP.Core.ScriptContext.DeclaredFunctions"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.ScriptInfo.MaxDeclaredTypesCount">
            <summary>
            Remember max count of declared types from within this entering script. Used to prealocate <see cref="P:PHP.Core.ScriptContext.DeclaredTypes"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.ScriptInfo.SaveMaxCounts(PHP.Core.ScriptContext)">
            <summary>
            Update <see cref="F:PHP.Core.ScriptInfo.MaxDeclaredTypesCount"/> and <see cref="F:PHP.Core.ScriptInfo.MaxDeclaredFunctionsCount"/>.
            </summary>
            <param name="context"></param>
            <remarks>Called at the end of request.</remarks>
        </member>
        <member name="P:PHP.Core.ScriptInfo.MainHelper">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> of the &lt;Main&gt; method.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptInfo.Main">
            <summary>
            Get delegate that Invokes the Main helper method of the script.
            Unwraps any thrown <c>InnerException</c> of <c>PhpException</c>, <c>PhpUserException</c>, <c>ScriptDiedException</c> and <c>ThreadAbortException</c>.
            </summary>
        </member>
        <member name="P:PHP.Core.ScriptInfo.MainRoutine">
            <summary>
            The delegate to the Main method of the Script. Delegate is lazily 
            </summary>
        </member>
        <member name="T:PHP.Core.ResolveTypeFlags">
            <summary>
            Flags passed to <see cref="M:PHP.Core.ScriptContext.ResolveType(System.String)"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.ResolveTypeFlags.UseAutoload">
            <summary>Tries to execute autoload when the class is not found.</summary>
        </member>
        <member name="F:PHP.Core.ResolveTypeFlags.ThrowErrors">
            <summary>Throw an error if the class is not found.</summary>
        </member>
        <member name="F:PHP.Core.ResolveTypeFlags.PreserveFrame">
            <summary>Stack frame is preserved if autoload is called.</summary>
        </member>
        <member name="F:PHP.Core.ResolveTypeFlags.RemoveFrame">
            <summary><see cref="M:PHP.Core.PhpStack.RemoveFrame"/> is called before throwing an error.</summary>
        </member>
        <member name="F:PHP.Core.ResolveTypeFlags.SkipGenericNameParsing">
            <summary>
            Whether not to interpret the full name as a generic name if it cannot be resolved otherwise.
            </summary>
        </member>
        <member name="T:PHP.Core.SerializationContext">
            <summary>
            Caches current <see cref="P:PHP.Core.SerializationContext.ScriptContext"/> and class context.
            </summary>
        </member>
        <member name="M:PHP.Core.SerializationContext.CreateFromStreamingContext(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Pulls out a serialization context from a provided streaming context or creates a new one.
            </summary>
            <param name="context">The streaming context.</param>
            <returns>A <see cref="T:PHP.Core.SerializationContext"/>.</returns>
        </member>
        <member name="F:PHP.Core.SerializationContext.NoSleepResultSingleton">
            <summary>
            Set as a value for the instances that do not implement <c>__sleep</c>/
            </summary>
        </member>
        <member name="P:PHP.Core.SerializationContext.ScriptContext">
            <summary>
            Returns current <see cref="P:PHP.Core.SerializationContext.ScriptContext"/>. Lazily initialized.
            </summary>
        </member>
        <member name="P:PHP.Core.SerializationContext.ClassContext">
            <summary>
            Returns current class context. Lazily initialized.
            </summary>
        </member>
        <member name="P:PHP.Core.SerializationContext.SleepResults">
            <summary>
            Returns a dictionary of <c>__sleep</c> method return values.
            </summary>
            <remarks>
            Serialization asks for an object's values multiple times (flaw?) but <c>__sleep</c>
            should be called only once for each instance present in the object graph.
            </remarks>
        </member>
        <member name="T:PHP.Core.SerializationSurrogate">
            <summary>
            Implements .NET serialization.
            </summary>
            <remarks>
            This class is currently not registered as a surrogate for any type. <see cref="T:PHP.Core.Reflection.DObject"/> implements
            <see cref="T:System.Runtime.Serialization.ISerializable"/> and delegates to this class manually.
            </remarks>
        </member>
        <member name="M:PHP.Core.SerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:PHP.Core.SerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
        </member>
        <member name="M:PHP.Core.SerializationSurrogate.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="obj">The object being deserialized.</param>
        </member>
        <member name="T:PHP.Core.Deserializer">
            <summary>
            Handles deserialization for classes derived from <see cref="T:PHP.Core.Reflection.DObject"/> whose real objects
            do not implement the <see cref="T:PHP.Library.SPL.Serializable"/> interface.
            </summary>
            <remarks>
            The result of deserialization is either the original class or <see cref="T:PHP.Library.__PHP_Incomplete_Class"/>
            if the original class is undefined.
            </remarks>
        </member>
        <member name="F:PHP.Core.Deserializer.ClrRealObjectSerializationInfoKey">
            <summary>
            The key used for CLR real object when there's no <c>__sleep</c>.
            </summary>
        </member>
        <member name="F:PHP.Core.Deserializer.instance">
            <summary>
            The real object to be returned by <see cref="M:PHP.Core.Deserializer.GetRealObject(System.Runtime.Serialization.StreamingContext)"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.Deserializer.serInfo">
            <summary>
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> passed to the deserializing constructor.
            </summary>
        </member>
        <member name="F:PHP.Core.Deserializer.context">
            <summary>
            A serialization context holding SC and class context.
            </summary>
        </member>
        <member name="M:PHP.Core.Deserializer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Creates an instance from deserialized data using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to receive data from.</param><param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.</param>
        </member>
        <member name="M:PHP.Core.Deserializer.GetObjectData(PHP.Core.Reflection.DObject,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="instance">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="strctx">Streaming context (should contain <see cref="T:PHP.Core.SerializationContext"/>).</param>
        </member>
        <member name="M:PHP.Core.Deserializer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:PHP.Core.Deserializer.OnDeserialization(System.Object)">
            <summary>
	    Runs when the entire object graph has been deserialized.
	  </summary><param name="sender">The object that initiated the callback.</param>
        </member>
        <member name="M:PHP.Core.Deserializer.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Returns the real object that should be deserialized, rather than the object that the serialized stream specifies.
	  </summary><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> from which the current object is deserialized.</param><returns>Returns the actual object that is put into the graph.</returns>
            <remarks>
            The result is either an instance of the class that has originally been serialized,
            an instance of <see cref="T:PHP.Library.__PHP_Incomplete_Class"/> if the real class is undefined
            or <B>null</B> if the class has a faulty <c>__sleep</c> and should be deserialized as <B>null</B>.
            </remarks>
        </member>
        <member name="M:PHP.Core.Deserializer.WrapPropertyValue(System.Object)">
            <summary>
            Wraps a <see cref="T:PHP.Core.Reflection.DObject"/> with a non-aliased <see cref="T:PHP.Core.PhpReference"/> to allow for reference fix-ups
            after deserialization.
            </summary>
            <param name="val">The object to wrap.</param>
            <returns><see cref="T:PHP.Core.PhpReference"/> to <paramref name="val"/> if <paramref name="val"/> is a
            <see cref="T:PHP.Core.Reflection.DObject"/>, or <paramref name="val"/> itself otherwise.</returns>
            <remarks>
            <para>
            The purpose of this wrapping is to avoid <see cref="T:PHP.Core.Reflection.DObject"/>s referencing another <see cref="T:PHP.Core.Reflection.DObject"/>s
            directly which causes problems when such an object graph is deserialized.
            </para>
            <para>
            Without this wrapping, under certain circumstances serialization would fail with the following exception
            message: The object with ID 5 implements the <see cref="T:System.Runtime.Serialization.IObjectReference"/> interface for which all
            dependencies cannot be resolved. The likely cause is two instances of <see cref="T:System.Runtime.Serialization.IObjectReference"/> that
            have a mutual dependency on each other.
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Core.Deserializer.UnwrapPropertyValue(System.Object)">
            <summary>
            Eliminates non-aliased <see cref="T:PHP.Core.PhpReference"/>s. <seealso cref="M:PHP.Core.Deserializer.WrapPropertyValue(System.Object)"/>
            </summary>
            <param name="val">The object to unwrap.</param>
            <returns><paramref name="val"/>'s value if it is a non-aliased <see cref="T:PHP.Core.PhpReference"/>, or
            <paramref name="val"/> itself otherwise.</returns>
        </member>
        <member name="T:PHP.Core.SPLDeserializer">
            <summary>
            Handles deserialization for classes derived from <see cref="T:PHP.Core.Reflection.DObject"/> whose real objects implement the
            <see cref="T:PHP.Library.SPL.Serializable"/> interface.
            </summary>
            <remarks>
            The result of deserialization is either the original class or <B>null</B> if
            <see cref="M:PHP.Library.SPL.Serializable.serialize(PHP.Core.ScriptContext)"/> returned <B>null</B>.
            </remarks>
        </member>
        <member name="F:PHP.Core.SPLDeserializer.SerializedDataFieldName">
            <summary>
            Name of the serialized field that holds the string returned by <see cref="M:PHP.Library.SPL.Serializable.serialize(PHP.Core.ScriptContext)"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.SPLDeserializer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Creates an instance from deserialized data using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to receive data from.</param><param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this deserialization.</param>
        </member>
        <member name="M:PHP.Core.SPLDeserializer.GetObjectData(PHP.Core.Reflection.DObject,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="instance">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="strctx">Streaming context (should contain <see cref="T:PHP.Core.SerializationContext"/>).</param>
        </member>
        <member name="M:PHP.Core.SPLDeserializer.OnDeserialization(System.Object)">
            <summary>
	    Runs when the entire object graph has been deserialized.
	  </summary><param name="sender">The object that initiated the callback.</param>
        </member>
        <member name="T:PHP.Core.Serialization">
            <summary>
            Provides services related to serialization.
            </summary>
            <remarks>
            Used by .NET serialization (implemented in Core) as well as by PHP serialization, which is implemented
            in ClassLibrary.
            </remarks>
        </member>
        <member name="M:PHP.Core.Serialization.ParsePropertyName(System.String,System.String@,PHP.Core.PhpMemberAttributes@)">
            <summary>
            Parses property name used for serialization. 
            </summary>
            <param name="name">The name found in serialization stream or returned by <B>__sleep</B>.</param>
            <param name="typeName">Will receive the name of the declaring type or <B>null</B> if no
            type information is embedded in the property <paramref name="name"/>.</param>
            <param name="visibility">Will receive the assumed visibility of the property.</param>
            <returns>The bare (unmangled) property name.</returns>
            <remarks>
            Names of protected properties might be prepended with \0*\0, names of private properties might be
            prepended with \0declaring_class_name\0
            (see <A href="http://bugs.php.net/bug.php?id=26737">http://bugs.php.net/bug.php?id=26737</A>)
            </remarks>
        </member>
        <member name="M:PHP.Core.Serialization.FormatPropertyName(PHP.Core.Reflection.DPropertyDesc,System.String)">
            <summary>
            Formats a property name for serialization according to its visibility and declaing type.
            </summary>
            <param name="property">The property desc.</param>
            <param name="propertyName">The property name.</param>
            <returns>The property name formatted according to the <paramref name="property"/> as used by PHP serialization.
            </returns>
        </member>
        <member name="M:PHP.Core.Serialization.EnumerateSerializableProperties(PHP.Core.Reflection.DObject)">
            <summary>
            Returns names and properties of all instance properties (including runtime fields).
            </summary>
            <param name="instance">The instance being serialized.</param>
            <returns>Name-value pairs. Names are properly formatted for serialization.</returns>
        </member>
        <member name="M:PHP.Core.Serialization.EnumerateSerializableProperties(PHP.Core.Reflection.DObject,System.Boolean)">
            <summary>
            Returns names and properties of all instance properties or only PHP fields (including runtime fields).
            </summary>
            <param name="instance">The instance being serialized.</param>
            <param name="phpFieldsOnly"><B>True</B> to return only PHP fields, <B>false</B> to return all
            instance properties.</param>
            <returns>Name-value pairs. Names are properly formatted for serialization.</returns>
        </member>
        <member name="M:PHP.Core.Serialization.EnumerateSerializableProperties(PHP.Core.Reflection.DObject,PHP.Core.PhpArray,PHP.Core.ScriptContext)">
            <summary>
            Returns names and values of properties whose names have been returned by <c>__sleep</c>.
            </summary>
            <param name="instance">The instance being serialized.</param>
            <param name="sleepResult">The array returned by <c>__sleep</c>.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>Name-value pairs. Names are properly formatted for serialization.</returns>
            <exception cref="T:PHP.Core.PhpException">Property of the name returned from <c>__sleep</c> does not exist.</exception>
            <remarks>
            This method returns exactly <paramref name="sleepResult"/>'s <see cref="P:PHP.Core.PhpHashtable.Count"/> items.
            </remarks>
        </member>
        <member name="M:PHP.Core.Serialization.GetUninitializedInstance(System.String,PHP.Core.ScriptContext)">
            <summary>
            Returns an unitialized instance of the specified type or <see cref="T:PHP.Library.__PHP_Incomplete_Class"/>.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>The newly created instance or <B>null</B> if <paramref name="typeName"/> denotes
            a primitive type.</returns>
            <remarks>
            If the <paramref name="typeName"/> denotes a CLR type, no constructor is executed. If the
            <paramref name="typeName"/> denotes a PHP type, no user constructor (e.g. <c>__construct</c>)
            is executed.
            </remarks>
        </member>
        <member name="M:PHP.Core.Serialization.SetProperty(PHP.Core.Reflection.DObject,System.String,System.Object,PHP.Core.ScriptContext)">
            <summary>
            Sets a property of a <see cref="T:PHP.Core.Reflection.DObject"/> instance according to deserialized name and value.
            </summary>
            <param name="instance">The instance being deserialized.</param>
            <param name="name">The property name formatted for serialization (see <see cref="M:PHP.Core.Serialization.FormatPropertyName(PHP.Core.Reflection.DPropertyDesc,System.String)"/>).</param>
            <param name="value">The property value.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
        </member>
        <member name="T:PHP.Core.SessionStates">
            <summary>
            A session state.
            </summary>
        </member>
        <member name="F:PHP.Core.SessionStates.Starting">
            <summary>
            Session is being started. Session handler's 
            <see cref="M:PHP.Core.SessionHandler.Load(PHP.Core.ScriptContext,System.Web.HttpContext)"/> method is called during this phase.
            </summary>
        </member>
        <member name="F:PHP.Core.SessionStates.Started">
            <summary>
            Session has been started. 
            </summary>
        </member>
        <member name="F:PHP.Core.SessionStates.Closing">
            <summary>
            Session is being closed. Session handler's 
            <see cref="M:PHP.Core.SessionHandler.Persist(PHP.Core.PhpArray,PHP.Core.ScriptContext,System.Web.HttpContext)"/> method is called during this phase.
            </summary>
        </member>
        <member name="F:PHP.Core.SessionStates.Closed">
            <summary>
            Session has been closed.
            </summary>
        </member>
        <member name="T:PHP.Core.SessionException">
            <summary>
            Exception thrown by a Phalanger session manager.
            </summary>
        </member>
        <member name="T:PHP.Core.SessionHandler">
            <summary>
            Base abstract class for custom session handlers.
            </summary>
        </member>
        <member name="M:PHP.Core.SessionHandler.Load(PHP.Core.ScriptContext,System.Web.HttpContext)">
            <summary>
            Loads variables stored in the session.
            </summary>
            <returns>The array containing session variables. Can return a <B>null</B> reference.</returns>
            <param name="context">A current script context. Can't be a <B>null</B> reference.</param>
            <param name="httpContext">A current HTTP context. Can't be a <B>null</B> reference.</param>
        </member>
        <member name="M:PHP.Core.SessionHandler.Persist(PHP.Core.PhpArray,PHP.Core.ScriptContext,System.Web.HttpContext)">
            <summary>
            Persists session variables.
            </summary>
            <param name="variables">Session variables to be persisted.</param>
            <param name="context">A current script context. Can't be a <B>null</B> reference.</param>
            <param name="httpContext">A current HTTP context. Can't be a <B>null</B> reference.</param>
        </member>
        <member name="M:PHP.Core.SessionHandler.Abandoning(PHP.Core.ScriptContext,System.Web.HttpContext)">
            <summary>
            Called immediately before the session is abandoned.
            </summary>
            <param name="context">A current script context. Can't be a <B>null</B> reference.</param>
            <param name="httpContext">A current HTTP context. Can't be a <B>null</B> reference.</param>
        </member>
        <member name="M:PHP.Core.SessionHandler.InitializeLifetimeService">
            <summary>
            Keeps the object living forever.
            </summary>
        </member>
        <member name="M:PHP.Core.SessionHandler.GetSessionName(PHP.Core.RequestContext)">
            <summary>
            Gets current session name.
            </summary>
            <param name="request">Valid request context.</param>
            <returns>Session name.</returns>
        </member>
        <member name="M:PHP.Core.SessionHandler.SetSessionName(PHP.Core.RequestContext,System.String)">
            <summary>
            Sets new session name.
            </summary>
            <param name="request">Valid request context.</param>
            <param name="name">New session name.</param>
            <returns>Whether session name was changed successfully.</returns>
        </member>
        <member name="P:PHP.Core.SessionHandler.Name">
            <summary>
            Gets a name of the handler.
            </summary>
        </member>
        <member name="P:PHP.Core.SessionHandler.AllowsSessionIdChange">
            <summary>
            Returns <c>true</c> iff this session handled is able to persist data after session id change.
            </summary>
            <remarks>E.g. ASP.NET session handler does not.</remarks>
        </member>
        <member name="T:PHP.Core.AspNetSessionHandler">
            <summary>
            Session handler based of ASP.NET sessions.
            </summary>
        </member>
        <member name="F:PHP.Core.AspNetSessionHandler.Default">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="M:PHP.Core.AspNetSessionHandler.ToString">
            <summary>
            Gets a string representation.
            </summary>
            <returns>The name of the handler.</returns>
        </member>
        <member name="M:PHP.Core.AspNetSessionHandler.Load(PHP.Core.ScriptContext,System.Web.HttpContext)">
            <summary>
            Loads variables from ASP.NET session to an array.
            </summary>
        </member>
        <member name="M:PHP.Core.AspNetSessionHandler.Persist(PHP.Core.PhpArray,PHP.Core.ScriptContext,System.Web.HttpContext)">
            <summary>
            Stores session variables to ASP.NET session.
            </summary>
        </member>
        <member name="M:PHP.Core.AspNetSessionHandler.Abandoning(PHP.Core.ScriptContext,System.Web.HttpContext)">
            <summary>
            Called immediately before the session is abandoned.
            </summary>
        </member>
        <member name="M:PHP.Core.AspNetSessionHandler.GetCookie(System.Web.HttpContext)">
            <summary>
            Gets session cookie associated with a specified HTTP context.
            </summary>
            <param name="context">The context.</param>
            <returns>The cookie.</returns>
        </member>
        <member name="P:PHP.Core.AspNetSessionHandler.Name">
            <summary>
            Gets a name of the handler used in the configuration.
            </summary>
        </member>
        <member name="P:PHP.Core.AspNetSessionHandler.AllowsSessionIdChange">
            <summary>
            ASP.NET session handler won't persist data if session id has been changed. New session will be created.
            </summary>
        </member>
        <member name="T:PHP.Core.SessionHandlers">
            <summary>
            Maintains known session handler set.
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="F:PHP.Core.SessionHandlers.handlers">
            <summary>
            Registered handlers.
            </summary>
        </member>
        <member name="M:PHP.Core.SessionHandlers.#cctor">
            <summary>
            Initializes static list of handlers to contain an ASP.NET handler.
            </summary>
        </member>
        <member name="M:PHP.Core.SessionHandlers.RegisterHandler(PHP.Core.SessionHandler)">
            <summary>
            Registeres a new session handler.
            </summary>
            <param name="handler">The handler.</param>
            <returns>Whether handler has been successfuly registered. Two handlers with the same names can't be registered.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.SessionHandlers.GetHandler(System.String)">
            <summary>
            Gets a session handler by specified name.
            </summary>
            <param name="name">The name of the handler.</param>
            <returns>The handler or <B>null</B> reference if such handler has not been registered.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="T:PHP.Library.SPL.Iterator">
            <summary>
            Interface for external iterators or objects that can iterate themselves internally.
            </summary>
            <remarks>
            Note that contrary to the .NET framework enumerating interfaces,
            calling <c>rewind</c> positions the iterator on the first element, so <c>next</c>
            shall not be called until the first element is retrieved.
            </remarks>
        </member>
        <member name="T:PHP.Library.SPL.Traversable">
            <summary>
            Built-in marker interface.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Iterator.rewind(PHP.Core.ScriptContext)">
            <summary>
            Rewinds the iterator to the first element.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Iterator.next(PHP.Core.ScriptContext)">
            <summary>
            Moves forward to next element.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Iterator.valid(PHP.Core.ScriptContext)">
            <summary>
            Checks if there is a current element after calls to <see cref="M:PHP.Library.SPL.Iterator.rewind(PHP.Core.ScriptContext)"/> or <see cref="M:PHP.Library.SPL.Iterator.next(PHP.Core.ScriptContext)"/>.
            </summary>
            <returns><c>bool</c>.</returns>
        </member>
        <member name="M:PHP.Library.SPL.Iterator.key(PHP.Core.ScriptContext)">
            <summary>
            Returns the key of the current element.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Iterator.current(PHP.Core.ScriptContext)">
            <summary>
            Returns the current element (value).
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.Countable">
            <summary>
            Classes implementing Countable can be used with the count() function.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Countable.count(PHP.Core.ScriptContext)">
            <summary>
            Count elements of an object.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:PHP.Library.SPL.SplFixedArray.array">
            <summary>
            Internal array storage. <c>null</c> reference if the size is <c>0</c>.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.SplFixedArray.position">
            <summary>
            Iterator position in the array.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.SplFixedArray.__construct(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Constructs an <see cref="T:PHP.Library.SPL.SplFixedArray"/> object.
            </summary>
            <param name="context"></param>
            <param name="size">The initial array size.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.SplFixedArray.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.SplFixedArray.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.SplFixedArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.ArrayObject">
            <summary>
            This class allows objects to work as arrays.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.IteratorAggregate">
            <summary>
            Interface to create an external iterator.
            </summary>
            <remarks>
            This interface contains only arg-less stubs as signatures should not be restricted.
            </remarks>
        </member>
        <member name="M:PHP.Library.SPL.IteratorAggregate.getIterator(PHP.Core.ScriptContext)">
            <summary>
            Returns an <see cref="T:PHP.Library.SPL.Iterator"/> or another <see cref="T:PHP.Library.SPL.IteratorAggregate"/> for
            the implementing object.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.Serializable">
            <summary>
            Interface for customized serializing.
            </summary>
            <remarks>
            Classes that implement this interface no longer support <c>__sleep</c> and <c>__wakeup</c>.
            The method <c>serialize</c> is called whenever an instance needs to be serialized. This does not invoke
            <c>__destruct</c> or has any other side effect unless programmed inside the method. When the data
            is unserialized the class is known and the appropriate <c>unserialize</c> method is called as a
            constructor instead of calling <c>__construct</c>. If you need to execute the standard constructor
            you may do so in the method.
            </remarks>
        </member>
        <member name="M:PHP.Library.SPL.Serializable.serialize(PHP.Core.ScriptContext)">
            <summary>
            Returns a string representation of the instance or <B>null</B>.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Serializable.unserialize(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Reconstructs the instance from a string representation passed as the only parameter.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.ArrayObject.STD_PROP_LIST">
            <summary>
            Properties of the object have their normal functionality when accessed as list (var_dump, foreach, etc.).
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.ArrayObject.ARRAY_AS_PROPS">
            <summary>
            Entries can be accessed as properties (read and write).
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.__construct(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary>
            Construct a new array object.
            </summary>
            <param name="context">Script Context. Cannot be null.</param>
            <param name="input">Optional. The input parameter accepts an array or an Object.</param>
            <param name="flags">Optional. Flags to control the behaviour of the ArrayObject object. See ArrayObject::setFlags().</param>
            <param name="iterator_class">Optional. Specify the class that will be used for iteration of the ArrayObject object.</param>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.append(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Appends a new value as the last element.
            </summary>
            <param name="context">Script Context. Cannot be null.</param>
            <param name="value">The value being appended.</param>
            <remarks>This method cannot be called when the ArrayObject was constructed from an object. Use ArrayObject::offsetSet() instead.</remarks>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.exchangeArray(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Exchange the current array with another array or object.
            </summary>
            <param name="context">Script Context. Cannot be null.</param>
            <param name="input">The new array or object to exchange with the current array.</param>
            <returns>Returns the old array.</returns>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.getArrayCopy(PHP.Core.ScriptContext)">
            <summary>
            Exports the ArrayObject to an array.
            </summary>
            <param name="context">Script Context. Cannot be null.</param>
            <returns>Returns a copy of the array. When the ArrayObject refers to an object an array of the public properties of that object will be returned.</returns>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.getFlags(PHP.Core.ScriptContext)">
            <summary>
            Gets the behavior flags of the ArrayObject. See the ArrayObject::setFlags method for a list of the available flags.
            </summary>
            <param name="context">Script Context. Cannot be null.</param>
            <returns>Returns the behavior flags of the ArrayObject.</returns>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.setFlags(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Set the flags that change the behavior of the ArrayObject.
            </summary>
            <param name="context">Script Context. Cannot be null.</param>
            <param name="flags">The new ArrayObject behavior. It takes on either a bitmask, or named constants. Using named constants is strongly encouraged to ensure compatibility for future versions.</param>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.getIteratorClass(PHP.Core.ScriptContext)">
            <summary>
            Gets the class name of the array iterator that is used by ArrayObject::getIterator().
            </summary>
            <param name="context">Script Context. Cannot be null.</param>
            <returns>Returns the iterator class name that is used to iterate over this object.</returns>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.setIteratorClass(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Sets the classname of the array iterator that is used by ArrayObject::getIterator().
            </summary>
            <param name="context">Script Context. Cannot be null.</param>
            <param name="iterator_class">The classname of the array iterator to use when iterating over this object.</param>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.asort(PHP.Core.ScriptContext)">
            <summary>
            Sorts the entries such that the keys maintain their correlation with the entries they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.ksort(PHP.Core.ScriptContext)">
            <summary>
            Sorts the entries by key, maintaining key to entry correlations. This is useful mainly for associative arrays.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.natcasesort(PHP.Core.ScriptContext)">
            <summary>
            This method is a case insensitive version of ArrayObject::natsort.
            This method implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a "natural ordering".
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.natsort(PHP.Core.ScriptContext)">
            <summary>
            This method implements a sort algorithm that orders alphanumeric strings in
            the way a human being would while maintaining key/value associations. This is
            described as a "natural ordering". An example of the difference between this
            algorithm and the regular computer string sorting algorithms (used in ArrayObject::asort)
            method can be seen in the example below.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.uasort(PHP.Core.ScriptContext,System.Object)">
            <summary>
            This function sorts the entries such that keys maintain their correlation with the entry that they are associated with, using a user-defined comparison function.
            This is used mainly when sorting associative arrays where the actual element order is significant.
            </summary>
            <param name="context">Script Context. Cannot be null.</param>
            <param name="cmp_function">Function cmp_function should accept two parameters
            which will be filled by pairs of entries. The comparison function must return
            an integer less than, equal to, or greater than zero if the first argument is
            considered to be respectively less than, equal to, or greater than the second.</param>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.uksort(PHP.Core.ScriptContext,System.Object)">
            <summary>
            This function sorts the keys of the entries using a user-supplied comparison function. The key to entry correlations will be maintained.
            </summary>
            <param name="context">Script Context. Cannot be null.</param>
            <param name="cmp_function">The callback comparison function.
            Function cmp_function should accept two parameters which will be filled by
            pairs of entry keys. The comparison function must return an integer less than,
            equal to, or greater than zero if the first argument is considered to be
            respectively less than, equal to, or greater than the second.</param>
        </member>
        <member name="M:PHP.Library.SPL.ArrayObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.PhpArrayObject.#ctor(PHP.Core.Reflection.DObject)">
            <summary>
            Do not call base class since we don't need to initialize <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.PhpArrayObject.EnsureIndexerResultIsRefArray(System.Object)">
            <summary>
            Calls the indexer (offsetGet) and ensures that its result is an array or can be converted to an array.
            </summary>
            <param name="key">A key passed to the indexer.</param>
            <returns>The array (either previously existing or a created one) or a <B>null</B> reference on error.</returns>
            <exception cref="T:PHP.Core.PhpException">The indexer doesn't return a reference (Error).</exception>
            <exception cref="T:PHP.Core.PhpException">The return value cannot be converted to an array (Warning).</exception>
        </member>
        <member name="M:PHP.Library.SPL.PhpArrayObject.EnsureIndexerResultIsRefObject(System.Object,PHP.Core.ScriptContext)">
            <summary>
            Calls the indexer (offsetGet) and ensures that its result is an <see cref="T:PHP.Core.Reflection.DObject"/> or can be
            converted to <see cref="T:PHP.Core.Reflection.DObject"/>.
            </summary>
            <param name="key">A key passed to the indexer.</param>
            <param name="context">A script context.</param>
            <returns>The <see cref="T:PHP.Core.Reflection.DObject"/> (either previously existing or a created one) or a <B>null</B> reference on error.</returns>
            <exception cref="T:PHP.Core.PhpException">The indexer doesn't return a reference (Error).</exception>
            <exception cref="T:PHP.Core.PhpException">The return value cannot be converted to a DObject (Warning).</exception>
        </member>
        <member name="M:PHP.Library.SPL.PhpArrayObject.GetUserArrayItemRef(PHP.Core.Reflection.DObject,System.Object,PHP.Core.ScriptContext)">
            <summary>
            Gets an item of a user array by invoking <see cref="M:PHP.Library.SPL.ArrayAccess.offsetGet(PHP.Core.ScriptContext,System.Object)"/>.
            </summary>
            <param name="arrayAccess">User array object.</param>
            <param name="index">An index.</param>
            <param name="context">The current script context.</param>
            <returns>A reference on item returned by the user getter.</returns>
        </member>
        <member name="T:PHP.Library.SPL.Closure">
            <summary>
            Prototype class for PHP closure.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Closure.#ctor(PHP.Core.ScriptContext,PHP.Core.RoutineDelegate,PHP.Core.PhpArray,PHP.Core.PhpArray)">
            <summary>
            Constructor of PHP closure.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/></param>
            <param name="lambda">Delegate to lambda function itself.</param>
            <param name="parameter"><see cref="T:PHP.Core.PhpArray"/> of closure <c>parameter</c> field. Can be <c>null</c> if there are no parameters.</param>
            <param name="static"><see cref="T:PHP.Core.PhpArray"/> of closure <c>parameter</c> field. Can be <c>null</c> if there is no <c>use</c> of scope variables.</param>
        </member>
        <member name="M:PHP.Library.SPL.Closure.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Closure.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only. Invokes constructor dynamically.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Closure.PropertyIterator">
            <summary>
            Alters special behaviour of var_dump, export and print_r.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.SplObserver">
            <summary>
            The SplObserver interface is used alongside <see cref="T:PHP.Library.SPL.SplSubject"/> to implement the Observer Design Pattern.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.SplSubject">
            <summary>
            The SplSubject interface is used alongside <see cref="T:PHP.Library.SPL.SplObserver"/> to implement the Observer Design Pattern.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.Exception">
             <summary>
             Base class for PHP user exceptions.
             </summary>
             <remarks>
             <para>
             The class implements PHP5 class Exception which PHP "header" declaration follows:
             <code>
             class Exception
             {
               protected $message = 'Unknown exception';   // exception message
               protected $code = 0;                        // user defined exception code
               protected $file;                            // source filename of exception
               protected $line;                            // source line of exception
               protected $column;                          // source column of exception
               private $trace;                             // an array containing the trace
            
               function __construct($message = null, $code = 0);
            
               final function getMessage();                // message of exception 
               final function getCode();                   // code of exception
               final function getFile();                   // source file name
               final function getLine();                   // source file line
               final function getColumn();                 // source file column
               final function getTrace();                  // the PhpArray representation of the trace 
               final function getTraceAsString();          // formated string of trace
            
               function __toString();                      // formated string for display
             } 
             </code>
             </para>
             <para>
             The stack trace is captured in the constructor (as in Java) not by throw statement (as in C#).
             </para>
             </remarks>
        </member>
        <member name="F:PHP.Library.SPL.Exception.stringTraceCache">
            <summary>
            Contains a trace formatted to the string or a <B>null</B> reference.
            Needn't to be serialized.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Exception.InstanceCreated(PHP.Core.ScriptContext)">
            <summary>
            Invoked when the instance is created (not called when unserialized).
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Exception.BaseToString">
            <summary>
            Gets the default string representation of the exception.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Exception.ThrowSplException(System.Func{PHP.Core.ScriptContext,PHP.Library.SPL.Exception},PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary>
            Throws <see cref="T:PHP.Core.PhpUserException"/>. Internal <see cref="T:PHP.Library.SPL.Exception"/> is created using given <paramref name="factory"/>.
            </summary>
            <param name="factory">Factory to create new instance of <see cref="T:PHP.Library.SPL.Exception"/>.</param>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/> provided to factory and <see cref="M:PHP.Library.SPL.Exception.__construct(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)"/>.</param>
            <param name="message">First parameter to be passed to <see cref="M:PHP.Library.SPL.Exception.__construct(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)"/>.</param>
            <param name="code">Second parameter to be passed to <see cref="M:PHP.Library.SPL.Exception.__construct(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)"/>.</param>
            <param name="previous">Thhird parameter to be passed to <see cref="M:PHP.Library.SPL.Exception.__construct(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)"/>.</param>
        </member>
        <member name="F:PHP.Library.SPL.Exception.message">
            <summary>
            A message.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.Exception.code">
            <summary>
            A code.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.Exception.file">
            <summary>
            A source file where the exception has been thrown.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.Exception.line">
            <summary>
            A line in the source file where the exception has been thrown.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.Exception.column">
            <summary>
            A column in the source file where the exception has been thrown.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.Exception.trace">
            <summary>
            A user stack trace in form of <see cref="T:PHP.Core.PhpArray"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Exception.__construct(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary>
            Creates an instance of user exception.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <param name="message">A message to be associated with the exception.</param>
            <param name="code">A code to be associated with the exception.</param>
            <param name="previous">The previous exception used for the exception chaining.</param>
            <returns>A <b>null</b> reference (void in PHP).</returns>
        </member>
        <member name="M:PHP.Library.SPL.Exception.__toString(PHP.Core.ScriptContext)">
            <summary>
            Converts the instance to a string.
            </summary>
            <returns>The string containing formatted trace.</returns>
        </member>
        <member name="M:PHP.Library.SPL.Exception.getFile(PHP.Core.ScriptContext)">
            <summary>
            Gets a source file where the exception has been thrown.
            </summary>
            <returns>The source file.</returns>
        </member>
        <member name="M:PHP.Library.SPL.Exception.getLine(PHP.Core.ScriptContext)">
            <summary>
            Gets a line in the source file where the exception has been thrown. 
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:PHP.Library.SPL.Exception.getColumn(PHP.Core.ScriptContext)">
            <summary>
            Gets a column in the source file where the exception has been thrown.
            </summary>
            <returns>The column.</returns>
        </member>
        <member name="M:PHP.Library.SPL.Exception.getCode(PHP.Core.ScriptContext)">
            <summary>
            Gets the code specified in the constructor.
            </summary>
            <returns>The code.</returns>
        </member>
        <member name="M:PHP.Library.SPL.Exception.getMessage(PHP.Core.ScriptContext)">
            <summary>
            Gets a message.
            </summary>
            <returns>The message set by the constructor.</returns>
        </member>
        <member name="M:PHP.Library.SPL.Exception.getPrevious(PHP.Core.ScriptContext)">
            <summary>
            Returns previous <see cref="T:PHP.Library.SPL.Exception"/> (the third parameter of <see cref="M:PHP.Library.SPL.Exception.__construct(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)"/>).
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.Exception.getTrace(PHP.Core.ScriptContext)">
            <summary>
            Returns a trace of the stack in the moment the exception was thrown.
            </summary>
            <returns>The trace.</returns>
        </member>
        <member name="M:PHP.Library.SPL.Exception.getTraceAsString(PHP.Core.ScriptContext)">
            <summary>
            Returns a trace formatted in a form of a string.
            </summary>
            <returns>The formatted trace.</returns>
        </member>
        <member name="M:PHP.Library.SPL.Exception.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.Exception.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Exception.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.RuntimeException">
            <summary>
            Exception thrown if an error which can only be found on runtime occurs.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RuntimeException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.RuntimeException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RuntimeException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.ErrorException">
            <summary>
            An Error Exception.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ErrorException.getSeverity(PHP.Core.ScriptContext)">
            <summary>
            Returns the severity of the exception.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ErrorException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.ErrorException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ErrorException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.LogicException">
            <summary>
            Exception that represents error in the program logic.
            This kind of exceptions should directly lead to a fix in your code.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.LogicException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.LogicException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.LogicException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.LogicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.InvalidArgumentException">
            <summary>
            Exception thrown if an argument does not match with the expected value.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.InvalidArgumentException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.InvalidArgumentException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.InvalidArgumentException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.InvalidArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.OutOfRangeException">
            <summary>
            Exception thrown when an illegal index was requested.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.OutOfRangeException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.OutOfRangeException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.OutOfRangeException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.BadFunctionCallException">
            <summary>
            Exception thrown if a callback refers to an undefined function or if some arguments are missing.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.BadFunctionCallException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.BadFunctionCallException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.BadFunctionCallException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.BadFunctionCallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.BadMethodCallException">
            <summary>
            Exception thrown if a callback refers to an undefined method or if some arguments are missing.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.BadMethodCallException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.BadMethodCallException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.BadMethodCallException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.BadMethodCallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.LengthException">
            <summary>
            Exception thrown if a length is invalid.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.LengthException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.LengthException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.LengthException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.LengthException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.RangeException">
            <summary>
            Exception thrown to indicate range errors during program execution.
            Normally this means there was an arithmetic error other than under/overflow.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RangeException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.RangeException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RangeException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.OutOfBoundsException">
            <summary>
            Exception thrown if a value is not a valid key.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.OutOfBoundsException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.OutOfBoundsException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.OutOfBoundsException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.OverflowException">
            <summary>
            Exception thrown when adding an element to a full container.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.OverflowException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.OverflowException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.OverflowException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.OverflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.UnderflowException">
            <summary>
            Exception thrown when performing an invalid operation on an empty container,
            such as removing an element.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.UnderflowException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.UnderflowException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.UnderflowException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.UnderflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.UnexpectedValueException">
            <summary>
            Exception thrown if a value does not match with a set of values.
            Typically this happens when a function calls another function and expects the return value
            to be of a certain type or value not including arithmetic or buffer related errors.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.UnexpectedValueException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.UnexpectedValueException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.UnexpectedValueException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.UnexpectedValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.DomainException">
            <summary>
            Exception thrown if a value does not adhere to a defined valid data domain.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.DomainException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.DomainException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.DomainException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.DomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.SeekableIterator">
            <summary>
            The Seekable iterator.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.SeekableIterator.seek(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Seeks to a given position in the iterator.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.OuterIterator">
            <summary>
            Classes implementing OuterIterator can be used to iterate over iterators.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.OuterIterator.getInnerIterator(PHP.Core.ScriptContext)">
            <summary>
            Returns the inner iterator for the current iterator entry.
            </summary>
            <returns>The inner <see cref="T:PHP.Library.SPL.Iterator"/> for the current entry.</returns>
        </member>
        <member name="T:PHP.Library.SPL.RecursiveIterator">
            <summary>
            Classes implementing RecursiveIterator can be used to iterate over iterators recursively.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIterator.getChildren(PHP.Core.ScriptContext)">
            <summary>
            Returns an iterator for the current iterator entry.
            </summary>
            <returns>An <see cref="T:PHP.Library.SPL.RecursiveIterator"/> for the current entry.</returns>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIterator.hasChildren(PHP.Core.ScriptContext)">
            <summary>
            Returns if an iterator can be created for the current entry.
            </summary>
            <returns>Returns TRUE if the current entry can be iterated over, otherwise returns FALSE.</returns>
        </member>
        <member name="T:PHP.Library.SPL.ArrayIterator">
            <summary>
            This iterator allows to unset and modify values and keys while iterating over Arrays and Objects.
            
            When you want to iterate over the same array multiple times you need to instantiate ArrayObject
            and let it create ArrayIterator instances that refer to it either by using foreach or by calling
            its getIterator() method manually.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ArrayIterator.InitArrayIteratorHelper">
            <summary>
            Instantiate new PHP array's enumerator and advances its position to the first element.
            </summary>
            <returns><c>True</c> whether there is an first element.</returns>
        </member>
        <member name="M:PHP.Library.SPL.ArrayIterator.InitObjectIteratorHelper">
            <summary>
            Instantiate new object's enumerator and advances its position to the first element.
            </summary>
            <returns><c>True</c> whether there is an first element.</returns>
        </member>
        <member name="M:PHP.Library.SPL.ArrayIterator.__construct(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Constructs an <see cref="T:PHP.Library.SPL.ArrayIterator"/> object.
            </summary>
            <param name="context"></param>
            <param name="array">The array or object to be iterated on.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.ArrayIterator.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ArrayIterator.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ArrayIterator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.EmptyIterator">
            <summary>
            The EmptyIterator class for an empty iterator.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.EmptyIterator.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.EmptyIterator.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.EmptyIterator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.IteratorIterator">
            <summary>
            This iterator wrapper allows the conversion of anything that is Traversable into an Iterator.
            It is important to understand that most classes that do not implement Iterators have reasons
            as most likely they do not allow the full Iterator feature set. If so, techniques should be provided
            to prevent misuse, otherwise expect exceptions or fatal errors.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.IteratorIterator.iterator">
            <summary>
            Object to iterate on.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.IteratorIterator.enumerator">
            <summary>
            Enumerator over the <see cref="F:PHP.Library.SPL.IteratorIterator.iterator"/>.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.IteratorIterator.isValid">
            <summary>
            Wheter the <see cref="F:PHP.Library.SPL.IteratorIterator.enumerator"/> is in valid state (initialized and not at the end).
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.IteratorIterator.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.IteratorIterator.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.IteratorIterator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.FilterIterator">
            <summary>
            This abstract iterator filters out unwanted values. This class should be extended to implement
            custom iterator filters. The FilterIterator::accept() must be implemented in the subclass.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.FilterIterator.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.FilterIterator.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.RecursiveArrayIterator">
            <summary>
            This iterator allows to unset and modify values and keys while iterating over Arrays
            and Objects in the same way as the ArrayIterator. Additionally it is possible to iterate
            over the current iterator entry.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveArrayIterator.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveArrayIterator.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.EnumerableIteratorEntry">
            <summary>
            Helper class containing <see cref="T:PHP.Core.IPhpEnumerable"/> object and its enumerator and current key and value.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.RecursiveIteratorIterator">
            <summary>
            Can be used to iterate through recursive iterators.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.RecursiveIteratorIterator.iterator">
            <summary>
            The root iterator object.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.RecursiveIteratorIterator.iterators">
            <summary>
            "Stack" of active iterators and their enumerators.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.beginChildren(PHP.Core.ScriptContext)">
            <summary>
            Begin children.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.beginIteration(PHP.Core.ScriptContext)">
            <summary>
            Begin Iteration.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.callGetChildren(PHP.Core.ScriptContext)">
            <summary>
            Get children.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.callHasChildren(PHP.Core.ScriptContext)">
            <summary>
            Has children.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.__construct(PHP.Core.ScriptContext,System.Object,System.Object,System.Object)">
            <summary>
            Construct a RecursiveIteratorIterator.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.endChildren(PHP.Core.ScriptContext)">
            <summary>
            End children.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.endIteration(PHP.Core.ScriptContext)">
            <summary>
            End Iteration.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.getDepth(PHP.Core.ScriptContext)">
            <summary>
            Get the current depth of the recursive iteration.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.getMaxDepth(PHP.Core.ScriptContext)">
            <summary>
            Get max depth.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.getSubIterator(PHP.Core.ScriptContext,System.Object)">
            <summary>
            The current active sub iterator.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.nextElement(PHP.Core.ScriptContext)">
            <summary>
            Next element.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.setMaxDepth(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Set max depth.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.RecursiveIteratorIterator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.AppendIterator">
            <summary>
            An Iterator that iterates over several iterators one after the other.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.AppendIterator.iterators">
            <summary>
            Contained iterators.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.AppendIterator.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.AppendIterator.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.AppendIterator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.Reflection">
            <summary>
            
            </summary>
            <remarks>
            <para>
            <code>
            class Reflection 
            { 
              public static string getModifierNames(int modifiers);
              public static mixed export(Reflector r [, bool return]);  
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Library.SPL.Reflection.getModifierNames(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Gets an array of modifier names contained in modifiers flags.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Reflection.export(PHP.Core.ScriptContext,System.Object,System.Object)">
            <summary>
            Exports a reflection.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Reflection.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.Reflection.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Reflection.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Reflection.getModifierNames(System.Object,PHP.Core.PhpStack)">
            <summary>
            
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Reflection.export(System.Object,PHP.Core.PhpStack)">
            <summary>
            
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.Reflection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionException.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionException.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.ReflectionProperty">
            <summary>
            The ReflectionProperty class.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionProperty.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionProperty.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionProperty.__construct(PHP.Core.ScriptContext,System.Object,System.Object)">
            <summary>
            Constructs a ReflectionFunction object.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionProperty.isDefault(PHP.Core.ScriptContext)">
            <summary>
            Checks whether the property is the default.
            </summary>
            <param name="context"><see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>TRUE if the property was declared at compile-time, or FALSE if it was created at run-time.</returns>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionProperty.RuntimePhpProperty.#ctor(PHP.Core.Reflection.DTypeDesc,PHP.Core.GetterDelegate,PHP.Core.SetterDelegate)">
            <summary>
            Used by type population.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.ReflectionClass">
            <summary>
            The ReflectionClass class reports information about a class.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.ReflectionClass.IS_IMPLICIT_ABSTRACT">
            <summary>
            Indicates class that is abstract because it has some abstract methods.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.ReflectionClass.IS_EXPLICIT_ABSTRACT">
            <summary>
            Indicates class that is abstract because of its definition.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.ReflectionClass.IS_FINAL">
            <summary>
            Indicates final class.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.ReflectionClass.typedesc">
            <summary>
            Resolved <see cref="T:PHP.Core.Reflection.DTypeDesc"/> of reflected type.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionClass.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionClass.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionClass.ResolveType(PHP.Core.ScriptContext,System.String)">
            <summary>
            Resolves the <paramref name="typeName"/> and provides corresponding <see cref="T:PHP.Core.Reflection.DTypeDesc"/> or <c>null</c> reference.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionClass.newInstance(PHP.Core.ScriptContext)">
            <summary>
            Creates a new instance of the class. The given arguments are passed to the class constructor.
            </summary>
            <param name="context">Current context.</param>
            <returns>Returns a new instance of the class.</returns>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionClass.newInstanceArgs(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Creates a new instance of the class, the given arguments are passed to the class constructor.
            </summary>
            <param name="context">Current context.</param>
            <param name="arg">The parameters to be passed to the class constructor as an <see cref="T:PHP.Core.PhpArray"/>.</param>
            <returns>Returns a new instance of the class.</returns>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionClass.getName(PHP.Core.ScriptContext)">
            <summary>
            Gets the class name.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionClass.inNamespace(PHP.Core.ScriptContext)">
            <summary>
            Checks if this class is defined in a namespace.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionClass.getNamespaceName(PHP.Core.ScriptContext)">
            <summary>
            Gets the namespace name or an empty string if the class is not defined in a namespace.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionClass.getShortName(PHP.Core.ScriptContext)">
            <summary>
            Gets the short name of the class, the part without the namespace.
            </summary>
        </member>
        <member name="P:PHP.Library.SPL.ReflectionClass.name">
            <summary>
            Name of the class. Read-only, throws <see cref="T:PHP.Library.SPL.ReflectionException"/> in attempt to write.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.ReflectionFunctionAbstract">
            <summary>
            A parent class to <see cref="T:PHP.Library.SPL.ReflectionFunction"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionFunctionAbstract.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionFunctionAbstract.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="T:PHP.Library.SPL.ReflectionFunction">
            <summary>
            The ReflectionFunction class reports information about a function.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.ReflectionFunction.IS_DEPRECATED">
            <summary>
            Indicates deprecated functions.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionFunction.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionFunction.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionFunction.__construct(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Constructs a ReflectionFunction object.
            </summary>
            <param name="context"></param>
            <param name="arg">The name of the function to reflect or a closure.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionMethod.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionMethod.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionMethod.__construct(PHP.Core.ScriptContext,System.Object,System.Object)">
            <summary>
            Constructs a ReflectionFunction object.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.ReflectionMethod.getPrototype(PHP.Core.ScriptContext)">
            <summary>
            Gets the method prototype (if there is one).
            Prototype is a method of base class.
            </summary>
            <param name="context"></param>
            <returns><see cref="T:PHP.Library.SPL.ReflectionMethod"/> or <c>FALSE</c>.</returns>
        </member>
        <member name="T:PHP.Library.SPL.SplObjectStorage">
            <summary>
            The SplObjectStorage class provides a map from objects to data or, by ignoring data, an object set. This dual purpose can be useful in many cases involving the need to uniquely identify objects.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.SplObjectStorage.storage">
            <summary>
            Internal storage.
            </summary>
        </member>
        <member name="F:PHP.Library.SPL.SplObjectStorage.index">
            <summary>
            Internal index while enumerating.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.SplObjectStorage.asObjectStorage(System.Object)">
            <summary>
            Tries to cast <paramref name="storage"/> to <see cref="T:PHP.Library.SPL.SplObjectStorage"/>.
            </summary>
            <param name="storage">The object.</param>
            <returns><see cref="T:PHP.Library.SPL.SplObjectStorage"/> instance or <c>null</c>.</returns>
        </member>
        <member name="M:PHP.Library.SPL.SplObjectStorage.addAll(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Adds all objects from another storage.
            </summary>
            <param name="context"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.SplObjectStorage.attach(PHP.Core.ScriptContext,System.Object,System.Object)">
            <summary>
            Adds an object in the storage.
            </summary>
            <param name="context"></param>
            <param name="obj"></param>
            /// <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.SplObjectStorage.contains(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Checks if the storage contains a specific object.
            </summary>
            <param name="context"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.SplObjectStorage.detach(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Removes an object from the storage.
            </summary>
            <param name="context"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.SplObjectStorage.getHash(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Calculate a unique identifier for the contained objects.
            </summary>
            <param name="context"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.SplObjectStorage.removeAll(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Removes objects contained in another storage from the current storage.
            </summary>
            <param name="context"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.SplObjectStorage.removeAllExcept(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Removes all objects except for those contained in another storage from the current storage.
            </summary>
            <param name="context"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.SplObjectStorage.getInfo(PHP.Core.ScriptContext)">
            <summary>
            Returns the data associated with the current iterator entry.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.SplObjectStorage.setInfo(PHP.Core.ScriptContext,System.Object)">
            <summary>
            Sets the data associated with the current iterator entry.
            </summary>
            <param name="context"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.SPL.SplObjectStorage.__PopulateTypeDesc(PHP.Core.Reflection.PhpTypeDesc)">
            <summary>
            Populates the provided <see cref="T:PHP.Core.Reflection.DTypeDesc"/> with this class's methods and properties.
            </summary>
            <param name="typeDesc">The type desc to populate.</param>
        </member>
        <member name="M:PHP.Library.SPL.SplObjectStorage.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.SPL.SplObjectStorage.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="T:PHP.Core.FrameKinds">
            <summary>
            Kinds of a stack frame.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpStackFrame">
            <summary>
            Represents a PHP stack frame.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStackFrame.#ctor(PHP.Core.ScriptContext,System.Diagnostics.StackFrame,PHP.Core.FrameKinds)">
            <summary>
            Creates a new PHP stack frame.
            </summary>
            <param name="context">A script context.</param>
            <param name="frame">The respective CLR frame.</param>
            <param name="kind">A kind of the frame.</param>
        </member>
        <member name="P:PHP.Core.PhpStackFrame.Name">
            <summary>
            Gets a name of the frame (name of the PHP function, PHP method or class library function).
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStackFrame.Line">
            <summary>
            Gets a source line where the thred has left the function/method.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStackFrame.Column">
            <summary>
            Gets a source column where the thred has left the function/method.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStackFrame.File">
            <summary>
            Gets a source file where the thred has left the function/method.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStackFrame.Frame">
            <summary>
            Gets CLR frame.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStackFrame.IsLibraryFunction">
            <summary>
            Checks whether a frame belongs to a class library function.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStackFrame.IsMethod">
            <summary>
            Checks whether the frame represents a PHP method.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStackFrame.HasDebugInfo">
            <summary>
            Checks whether debug information (line, column, file) is known for the frame.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStackFrame.Operator">
            <summary>
            Gets a PHP operator (either "::" or "->") used for accessing a PHP method of the frame.
            </summary>
            <remarks>
            If the frame is representing a function "::" is returned.
            </remarks>
        </member>
        <member name="P:PHP.Core.PhpStackFrame.DeclaringType">
            <summary>
            Gets a declaring type of the method/function associated with the frame. Non-null.
            </summary>
        </member>
        <member name="P:PHP.Core.PhpStackFrame.DeclaringTypeName">
            <summary>
            Gets a name of the declaring type of the PHP method (or function) represented by the frame. 
            </summary>
            <remarks>
            Returns only valid part of m-decl types.
            </remarks>
        </member>
        <member name="T:PHP.Core.PhpStackTrace">
            <summary>
            Represents a stack trace containing only those frames visible from PHP.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStackTrace.GetFrame(System.Int32)">
            <summary>
            Get the <paramref name="i"/>-th frame of the trace.
            </summary>
            <param name="i">An index of the frame to get.</param>
            <returns>The frame or a <B>null</B> reference if <paramref name="i"/> is out of bounds.</returns>
        </member>
        <member name="M:PHP.Core.PhpStackTrace.GetFrameCount">
            <summary>
            Gets the number of frames in the trace.
            </summary>
            <returns>The number of frames.</returns>
        </member>
        <member name="M:PHP.Core.PhpStackTrace.GetFrameKind(System.Diagnostics.StackFrame)">
            <summary>
            Finds out a kind of a CLI frame from the PHP point of view.
            </summary>
            <param name="frame">The CLI frame.</param>
            <returns>The kind of the frame.</returns>
        </member>
        <member name="M:PHP.Core.PhpStackTrace.#ctor(PHP.Core.ScriptContext,System.Int32)">
            <summary>
            Creates a stack trace containing only those frames visible to PHP code.
            </summary>
            <param name="context">A script context.</param>
            <param name="skipFrames">The number of frames which will be skipped.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="skipFrames"/> parameter is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.PhpStackTrace.#ctor(PHP.Core.ScriptContext,System.Diagnostics.StackTrace)">
            <summary>
            Creates a stack trace containing only those frames visible to PHP code.
            </summary>
            <param name="context">A script context.</param>
            <param name="clrTrace">CLR stack trace.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> or <paramref name="clrTrace"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.PhpStackTrace.TraceErrorFrame(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Traces up the stack frame containing the method call that has caused an error.
            </summary>
            <returns>Found stack info.</returns>
            <remarks>
            Starts with a frame of a calling method and ends with the first frame belonging to user routine.
            If there was <see cref="T:PHP.Core.ImplementsFunctionAttribute"/> found during the walk the last one's value
            is considered as the caller.
            If there was not such attribute found (error occured in an operator, directly in the code etc.) 
            the last inspected method's debug info is returned.
            If the trace ends up with a function or method inside transient assembly an eval hierarchy is inspected
            and added to the resulting source position information.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpStackTrace.FillEvalStackInfo(PHP.Core.ScriptContext,System.Int32,PHP.Core.ErrorStackInfo@,System.Boolean)">
            <summary>
            Fills an instance of <see cref="T:PHP.Core.ErrorStackInfo"/> with information gathered from eval transient debug info.
            </summary>
            <param name="context">Script context.</param>
            <param name="evalId">An id of the inner-most eval where an error occured.</param>
            <param name="result">The resulting error stack info.</param>
            <param name="html">Whether the message is used in HTML.</param>
        </member>
        <member name="M:PHP.Core.PhpStackTrace.HideTransparentEvals(System.Collections.Generic.List{PHP.Core.ErrorStackInfo})">
            <summary>
            Modifies a specified eval trace such that all transparent evals get hidden.
            The others will have updated line numbers.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStackTrace.EvalTraceToFileName(System.Collections.Generic.List{PHP.Core.ErrorStackInfo},System.String,System.Boolean)">
            <summary>
            Extracts debug information from an eval trace and returns it in a form of extended file name:
            {full canonical file name of the inner most eval source file} 
            { inside {eval|assert|...|run-time funcion} (on line #, column #) }*
            </summary>
        </member>
        <member name="M:PHP.Core.PhpStackTrace.GetClassContext">
            <summary>
            Traces the calling stack to discover current PHP class context.
            </summary>
            <returns><see cref="T:System.Type"/> of the PHP class that represents current class context for this thread or
            <B>null</B> if this thread is executing in a function or startup Main context.</returns>
        </member>
        <member name="M:PHP.Core.PhpStackTrace.GetUserTrace">
            <summary>
            Returns array containing current stack state. Each item is an array representing one stack frame.
            </summary>
            <returns>The stack trace.</returns>
            <remarks>
            The resulting array contains the following items (their keys are stated):
            <list type="bullet">
            <item><c>"file"</c> - a source file where the function/method has been called</item>
            <item><c>"line"</c> - a line in a source code where the function/method has been called</item>
            <item><c>"column"</c> - a column in a source code where the function/method has been called</item>
            <item><c>"function"</c> - a name of the function/method</item> 
            <item><c>"class"</c> - a name of a class where the method is declared (if any)</item>
            <item><c>"type"</c> - either "::" for static methods or "->" for instance methods</item>
            </list>
            Unsupported items:
            <list type="bullet">
            <item><c>"args"</c> - routine arguments</item>
            <item><c>"object"</c> - target instance of the method invocation</item>
            </list>
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpStackTrace.FormatUserTrace(PHP.Core.PhpArray)">
            <summary>
            Formats a trace to user string.
            </summary>
            <param name="trace">An array containing the user trace.</param>
            <returns>The formatted trace.</returns>
        </member>
        <member name="M:PHP.Core.PhpStackTrace.FormatUserTrace">
            <summary>
            Formats a trace to user string.
            </summary>
            <returns>The formatted trace.</returns>
        </member>
        <member name="T:PHP.Core.IFilter">
            <summary>
            Interface encapsulating the stream filtering functionality.
            </summary>
        </member>
        <member name="M:PHP.Core.IFilter.Filter(System.Object,System.Boolean)">
            <summary>
            Processes the <paramref name="input"/> (either of type <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/>) 
            data and returns the filtered data in one of the formats above or <c>null</c>.
            </summary>
        </member>
        <member name="M:PHP.Core.IFilter.OnCreate">
            <summary>
            Called when the filter is attached to a stream.
            </summary>
        </member>
        <member name="M:PHP.Core.IFilter.OnClose">
            <summary>
            Called when the containig stream is being closed.
            </summary>
        </member>
        <member name="T:PHP.Core.TextReadFilter">
            <summary>
            Stream Filter used to convert \r\n to \n when reading a text file.
            </summary>
        </member>
        <member name="M:PHP.Core.TextReadFilter.Filter(System.Object,System.Boolean)">
            <summary>
            Processes the <paramref name="input"/> (either of type <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/>) 
            data and returns the filtered data in one of the formats above or <c>null</c>.
            </summary>
        </member>
        <member name="M:PHP.Core.TextReadFilter.OnCreate">
            <summary>
            Called when the filter is attached to a stream.
            </summary>
        </member>
        <member name="M:PHP.Core.TextReadFilter.OnClose">
            <summary>
            Called when the containig stream is being closed.
            </summary>
        </member>
        <member name="T:PHP.Core.TextWriteFilter">
            <summary>
            Stream Filter used to convert \n to \r\n when writing to a text file.
            </summary>
        </member>
        <member name="M:PHP.Core.TextWriteFilter.Filter(System.Object,System.Boolean)">
            <summary>
            Processes the <paramref name="input"/> (either of type <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/>) 
            data and returns the filtered data in one of the formats above or <c>null</c>.
            </summary>
        </member>
        <member name="M:PHP.Core.TextWriteFilter.OnCreate">
            <summary>
            Called when the filter is attached to a stream.
            </summary>
        </member>
        <member name="M:PHP.Core.TextWriteFilter.OnClose">
            <summary>
            Called when the containig stream is being closed.
            </summary>
        </member>
        <member name="T:PHP.Core.FilterChainOptions">
            <summary>
            Indicates whether the filter is to be attached to the
            input/ouput filter-chain or both.
            </summary>
        </member>
        <member name="F:PHP.Core.FilterChainOptions.Read">
            <summary>Insert the filter to the read filter chain of the stream (1).</summary>
        </member>
        <member name="F:PHP.Core.FilterChainOptions.Write">
            <summary>Insert the filter to the write filter chain of the stream (2).</summary>
        </member>
        <member name="F:PHP.Core.FilterChainOptions.ReadWrite">
            <summary>Insert the filter to both the filter chains of the stream (3).</summary>
        </member>
        <member name="F:PHP.Core.FilterChainOptions.Head">
            <summary>Prepend the filter to the filter-chain (0x10).</summary>
        </member>
        <member name="F:PHP.Core.FilterChainOptions.Tail">
            <summary>Append the filter to the filter-chain (0x20).</summary>
        </member>
        <member name="T:PHP.Core.IFilterFactory">
            <summary>
            Implementor of this interface provides filter creation.
            </summary>
        </member>
        <member name="M:PHP.Core.IFilterFactory.GetImplementedFilterNames">
            <summary>
            Returns the list of filters created by this <see cref="T:PHP.Core.IFilterFactory"/>.
            </summary>
            <returns>The list of implemented filters.</returns>
        </member>
        <member name="M:PHP.Core.IFilterFactory.GetImplementedFilter(System.String,System.Boolean,PHP.Core.PhpFilter@,System.Object)">
            <summary>
            Checks if a filter is being created by this factory and optionally returns a new instance of this filter.
            </summary>
            <param name="name">The name of the filter (may contain wildcards).</param>
            <param name="instantiate"><c>true</c> to fill <paramref name="instance"/> with a new instance of that filter.</param>
            <param name="instance">Filled with a new instance of an implemented filter if <paramref name="instantiate"/>.</param>
            <param name="parameters">Additional parameters provided to the filter constructor.</param>
            <returns><c>true</c> if a filter with the given name was found.</returns>
        </member>
        <member name="T:PHP.Core.PhpFilter">
            <summary>
            Base class for PHP stream filters.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpFilter.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:PHP.Core.PhpFilter"/>.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:PHP.Core.PhpFilter.Filter(System.Object,System.Boolean)">
            <summary>
            Processes the <paramref name="input"/> (either of type <see cref="T:System.String"/> or <see cref="T:PHP.Core.PhpBytes"/>) 
            data and returns the filtered data in one of the formats above or <c>null</c>.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpFilter.OnCreate">
            <summary>
            Called when the filter is attached to a stream.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpFilter.OnClose">
            <summary>
            Called when the containig stream is being closed.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpFilter.parameters">
            <summary>
            An additional <c>mixed</c> parameter passed at <c>stream_filter_append/prepend</c>.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpFilter.AddToStream(PHP.Core.PhpStream,System.String,PHP.Core.FilterChainOptions,System.Object)">
            <summary>
            Insert the filter into the filter chains.
            </summary>
            <param name="stream">Which stream's filter chains.</param>
            <param name="filter">What filter.</param>
            <param name="where">What position in the chains.</param>
            <param name="parameters">Additional parameters for the filter.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:PHP.Core.PhpFilter.GetFilter(System.String,System.Boolean,PHP.Core.PhpFilter@,System.Object)">
            <summary>
            Searches for a filter implementation in the known <see cref="T:PHP.Core.PhpFilter"/> descendants.
            </summary>
            <param name="filter">The name of the filter (may contain wildcards).</param>
            <param name="instantiate"><c>true</c> to fille <paramref name="instance"/> with a new instance of that filter.</param>
            <param name="instance">Filled with a new instance of an implemented filter if <paramref name="instantiate"/>.</param>
            <param name="parameters">Additional parameters for the filter.</param>
            <returns><c>true</c> if a filter with the given name was found.</returns>
        </member>
        <member name="M:PHP.Core.PhpFilter.AddUserFilter(System.String,System.String)">
            <summary>
            Registers a user stream filter.
            </summary>
            <param name="filter">The name of the filter (may contain wildcards).</param>
            <param name="classname">The PHP user class (derived from <c>php_user_filter</c>) implementing the filter.</param>
            <returns><c>true</c> if the filter was succesfully added, <c>false</c> if the filter of such name already exists.</returns>
        </member>
        <member name="M:PHP.Core.PhpFilter.AddSystemFilter(PHP.Core.IFilterFactory)">
            <summary>
            Register a built-in stream filter factory.
            </summary>
            <param name="factory">The filter factory.</param>
            <returns><c>true</c> if successfully added.</returns>
        </member>
        <member name="M:PHP.Core.PhpFilter.MergeFilterNames(System.Collections.ICollection,PHP.Core.PhpArray)">
            <summary>
            Merges the individual string[] into one PhpArray (numeric keys).
            </summary>
            <param name="filterList">List of filter name <see cref="T:System.String"/>s.</param>
            <param name="rv">Return value loopback (pass <c>null</c> to create new).</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.PhpFilter.GetFilterNames">
            <summary>
            Retrieves the list of registered filters.
            </summary>
            <returns>A <see cref="T:PHP.Core.PhpArray"/> containing the names of available filters.</returns>
        </member>
        <member name="F:PHP.Core.PhpFilter.userFilters">
            <summary>The list of (script-specific) user filters.</summary>
        </member>
        <member name="F:PHP.Core.PhpFilter.systemFilters">
            <summary>The list of built-in filters.</summary>
        </member>
        <member name="P:PHP.Core.PhpFilter.FilterName">
            <summary>
            The filter name, same as the name used for creating the filter (see GetFilter).
            </summary>
        </member>
        <member name="P:PHP.Core.PhpFilter.UserFilters">
            <summary>
            Gets or sets the collection of user filtername:classname associations.
            </summary>
        </member>
        <member name="T:PHP.Core.StreamWrapper">
            <summary>
            Abstract base class for PHP stream wrappers. Descendants define 
            methods implementing fopen, stat, unlink, rename, opendir, mkdir and rmdir 
            for different stream types.
            </summary>
            <summary>
            Abstract base class for PHP stream wrappers. Descendants define 
            methods implementing fopen, stat, unlink, rename, opendir, mkdir and rmdir 
            for different stream types.
            </summary>
            <remarks>
            Each script has its own copy of registeredWrappers stored in the ScriptContext.
            <para>
            PhpStream is created by a StreamWrapper on a call to fopen().
            Wrappers are stateless: they provide an instance of PhpStream
            on fopen() and an instance of DirectoryListing on opendir().
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Core.StreamWrapper.Stat(System.String,PHP.Core.StreamStatOptions,PHP.Core.StreamContext,System.Boolean)">
            <summary>
  Creates the stat-structure for a specified file.
  </summary><remarks>
  Regarding the stream_wrapper_register(), the stat() is an instance
  method of a stream. Maybe a PhpStream should remember the open-path
  of the contained file for such purposes but currently I can see
  no PHP function requiring stat() on an opened stream.
  </remarks><param name="path">The target filename.</param><param name="options">Additional options.</param><param name="context">Wrapper-specific options.</param><param name="streamStat">Wheter to use stream_stat() or url_stat() when invoking user wrapper.</param><returns>A <see cref="T:PHP.Core.StatStruct"/> containing the stat information about the target file 
  or with st_size set to <c>-1</c> in case of failure.</returns><exception cref="T:PHP.Core.PhpException">Throws a warning in case of failure.</exception>
            <remarks>
            <seealso cref="T:PHP.Core.StreamStatOptions"/> for the list of additional options.
            </remarks>
        </member>
        <member name="M:PHP.Core.StreamWrapper.Open(System.String@,System.String,PHP.Core.StreamOpenOptions,PHP.Core.StreamContext)">
            <summary>
  Called by <c>fopen()</c> for the specific wrapper determined by the scheme portion of an URL. 
  Override in descendants to make new instances of <see cref="T:PHP.Core.PhpStream"/>s.
  </summary><param name="path">The path passed to <c>fopen()</c> which will be set to the opened absolute path.</param><param name="mode">The mode passed to <c>fopen()</c>.</param><param name="options">Combination of <see cref="T:PHP.Core.StreamOpenOptions"/>.</param><param name="context">The context provided for the stream wrapper at the call to <c>fopen()</c>.</param><returns>A new instance of <see cref="T:PHP.Core.PhpStream"/> encapsulating the data Stream.
  Returns null in case of failure - will be cast to false for <c>fopen()</c>.
  </returns>
        </member>
        <member name="M:PHP.Core.StreamWrapper.Unlink(System.String,PHP.Core.StreamUnlinkOptions,PHP.Core.StreamContext)">
            <summary>
  Deletes the specified file using an appropriate stream-wrapper
  depending on the scheme portion of the given <paramref name="path"/>.
  </summary><remarks>
  Only the file and ftp wrappers support file deletion.
  </remarks><param name="path">The URL to the file to be deleted.</param><param name="options">Additional options.</param><param name="context">Wrapper-specific options.</param><returns>True if the file was deleted otherwise false.</returns>
            <remarks>
            <seealso cref="T:PHP.Core.StreamUnlinkOptions"/> for the list of additional options.
            </remarks>
        </member>
        <member name="M:PHP.Core.StreamWrapper.Listing(System.String,PHP.Core.StreamListingOptions,PHP.Core.StreamContext)">
            <summary>
  Provides an array of filenames used to create a DirectoryListing
  for directory enumeration.
  </summary><param name="path">The directory to be explored.</param><param name="options">This parameter is unused.</param><param name="context">Wrapper-specific options.</param><returns>An array of filenames or null in case of failure.</returns>
        </member>
        <member name="M:PHP.Core.StreamWrapper.Rename(System.String,System.String,PHP.Core.StreamRenameOptions,PHP.Core.StreamContext)">
            <summary>
  Renames the file specified by <paramref name="fromPath"/> to <paramref name="toPath"/>.
  Does not work accross wrappers.
  </summary><param name="fromPath">The original filename.</param><param name="toPath">The new filename.</param><param name="options">Unused.</param><param name="context">Wrapper-specific options.</param><returns>True in case of success.</returns>
        </member>
        <member name="M:PHP.Core.StreamWrapper.MakeDirectory(System.String,System.Int32,PHP.Core.StreamMakeDirectoryOptions,PHP.Core.StreamContext)">
            <summary>
  Creates a directory or a whole branch of directories in the specified path.
  </summary><param name="path">The directory to create (may work recursively).</param><param name="accessMode">Directory access mode (for UNIX systems, defaults to 0777).</param><param name="options">Additional options.</param><param name="context">Wrapper-specific options.</param><returns>True in case of success.</returns>
            <remarks><seealso cref="T:PHP.Core.StreamMakeDirectoryOptions"/> for the list of additional options.</remarks>
        </member>
        <member name="M:PHP.Core.StreamWrapper.RemoveDirectory(System.String,PHP.Core.StreamRemoveDirectoryOptions,PHP.Core.StreamContext)">
            <summary>
  Removes the specified directory.
  </summary><param name="path">The directory to remove.</param><param name="options">Unused.</param><param name="context">Wrapper-specific options.</param><returns>True in case of success.</returns>
        </member>
        <member name="M:PHP.Core.StreamWrapper.OnClose(PHP.Core.PhpStream)">
            <summary>
            Wrapper may be notified of closing a stream using this method.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:PHP.Core.StreamWrapper.OnStat(PHP.Core.PhpStream)">
            <summary>
            Wrapper may override the <c>stat()</c>ing of a stream using this method.
            </summary>
            <param name="stream">The Wrapper-opened stream to be <c>stat()</c>ed.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.StreamWrapper.ParseMode(System.String,PHP.Core.StreamOpenOptions,System.IO.FileMode@,System.IO.FileAccess@,PHP.Core.StreamAccessOptions@)">
            <summary>
            Parse the <paramref name="mode"/> argument passed to <c>fopen()</c>
            and make the appropriate <see cref="T:System.IO.FileMode"/> and <see cref="T:System.IO.FileAccess"/>
            combination.
            Integrate the relevant options from <see cref="T:PHP.Core.StreamOpenOptions"/> too.
            </summary>
            <param name="mode">Mode as passed to <c>fopen()</c>.</param>
            <param name="options">The <see cref="T:PHP.Core.StreamOpenOptions"/> passed to <c>fopen()</c>.</param>
            <param name="fileMode">Resulting <see cref="T:System.IO.FileMode"/> specifying opening mode.</param>
            <param name="fileAccess">Resulting <see cref="T:System.IO.FileAccess"/> specifying read/write access options.</param>
            <param name="accessOptions">Resulting <see cref="T:PHP.Core.StreamAccessOptions"/> giving 
            additional information to the stream opener.</param>
            <returns><c>true</c> if the given mode was a valid file opening mode, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PHP.Core.StreamWrapper.ParseMode(System.String,PHP.Core.StreamOpenOptions,PHP.Core.StreamAccessOptions@)">
            <summary>
            Overload of <see cref="M:PHP.Core.StreamWrapper.ParseMode(System.String,PHP.Core.StreamOpenOptions,System.IO.FileMode@,System.IO.FileAccess@,PHP.Core.StreamAccessOptions@)"/> without the <c>out</c> arguments.
            </summary>
            <param name="mode">Mode as passed to <c>fopen()</c>.</param>
            <param name="options">The <see cref="T:PHP.Core.StreamOpenOptions"/> passed to <c>fopen()</c>.</param>
            <param name="accessOptions">Resulting <see cref="T:PHP.Core.StreamAccessOptions"/> giving 
            additional information to the stream opener.</param>
            <returns><c>true</c> if the given mode was a valid file opening mode, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">If the <paramref name="mode"/> is not valid.</exception>
        </member>
        <member name="M:PHP.Core.StreamWrapper.CheckOptions(PHP.Core.StreamAccessOptions,System.IO.FileAccess,System.String)">
            <summary>
            Checks whether the supported read/write access matches the reqiured one.
            </summary>
            <param name="accessOptions">The access options specified by the user.</param>
            <param name="supportedAccess">The read/write access options supported by the stream.</param>
            <param name="path">The path given by user to report errors.</param>
            <returns><c>false</c> if the stream does not support any of the required modes, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:PHP.Core.StreamWrapper.RegisterUserWrapper(System.String,PHP.Core.StreamWrapper)">
            <summary>
            Insert a new wrapper to the list of user StreamWrappers.
            </summary>
            <remarks>
            Each script has its own set of user StreamWrappers registered
            by stream_wrapper_register() stored in the ScriptContext.
            </remarks>
            <param name="protocol">The scheme portion of URLs this wrapper can handle.</param>
            <param name="wrapper">An instance of the corresponding StreamWrapper descendant.</param>
            <returns>True if succeeds, false if the scheme is already registered.</returns>
        </member>
        <member name="M:PHP.Core.StreamWrapper.RegisterSystemWrapper(PHP.Core.StreamWrapper)">
            <summary>
            Register a new system wrapper
            </summary>
            <param name="wrapper">An instance of the corresponding StreamWrapper descendant.</param>
            <returns>True if succeeds, false if the scheme is already registered.</returns>
        </member>
        <member name="M:PHP.Core.StreamWrapper.Exists(System.String)">
            <summary>
            Checks if a wrapper is already registered for the given scheme.
            </summary>
            <param name="scheme">The scheme.</param>
            <returns><c>true</c> if exists.</returns>
        </member>
        <member name="M:PHP.Core.StreamWrapper.GetWrapper(System.String,PHP.Core.StreamOptions)">
            <summary>
            Retreive the corresponding StreamWrapper respectind the scheme portion 
            of the given path. If no scheme is specified, an instance of 
            FileStreamWrapper is returned.
            </summary>
            <param name="scheme">The scheme portion of an URL.</param>
            <param name="options">Additional <see cref="T:PHP.Core.StreamOptions"/> having effect on the wrapper retreival.</param>
            <returns>An instance of StreamWrapper to be used to open the specified file.</returns>
            <exception cref="T:PHP.Core.PhpException">In case when the required wrapper can not be found.</exception>
        </member>
        <member name="M:PHP.Core.StreamWrapper.GetSystemWrapperSchemes">
            <summary>
            Gets the list of built-in stream wrapper schemes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.StreamWrapper.GetUserWrapperSchemes">
            <summary>
            Gets the list of user wrapper schemes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.StreamWrapper.GetWrapperInternal(System.String)">
            <summary>
            Search the lists of registered StreamWrappers to find the 
            appropriate wrapper for a given scheme. When the scheme
            is empty, the FileStreamWrapper is returned.
            </summary>
            <param name="scheme">The scheme portion of an URL.</param>
            <returns>A StreamWrapper associated with the given scheme.</returns>
        </member>
        <member name="M:PHP.Core.StreamWrapper.CreateUserWrapperTable">
            <summary>
            Make new instance of Hashtable for the userwrappers
            in the ScriptContext.
            </summary>
        </member>
        <member name="M:PHP.Core.StreamWrapper.Dispose">
            <summary>
            Release wrapper resources
            </summary>
        </member>
        <member name="P:PHP.Core.StreamWrapper.Label">
            <summary>
  Gets the text identifier of this StreamWrapper used in error messages.
  </summary>
        </member>
        <member name="P:PHP.Core.StreamWrapper.Scheme">
            <summary>
  Gets the protocol portion of URL handled by this wrapper.
  </summary>
        </member>
        <member name="P:PHP.Core.StreamWrapper.IsUrl">
            <summary>
  Gets whether or not this wrapper is affected by the AllowUrlFopen configuration.
  </summary>
        </member>
        <member name="P:PHP.Core.StreamWrapper.UserWrappers">
            <summary>
            Table of user-registered stream wrappers.
            Stored as an instance variable in ScriptContext
            (for every script there is one, it is initialized
            to null - instance is created on first user-wrapper insertion).
            </summary>
        </member>
        <member name="P:PHP.Core.StreamWrapper.SystemStreamWrappers">
            <summary>
            Registered system stream wrappers for all requests.
            </summary>
        </member>
        <member name="T:PHP.Core.FileStreamWrapper">
            <summary>
            Derived from <see cref="T:PHP.Core.StreamWrapper"/>, this class provides access to 
            the local filesystem files.
            </summary>
            <summary>
            Derived from <see cref="T:PHP.Core.StreamWrapper"/>, this class provides access to 
            the local filesystem files.
            </summary>
            <remarks>
            The virtual working directory is handled by the PhpPath class in 
            the Class Library. The absolute path resolution (using the working diretory and the <c>include_path</c>
            if necessary) and open-basedir check is performed by the <see cref="M:PHP.Core.PhpStream.ResolvePath(System.String@,PHP.Core.StreamWrapper@,PHP.Core.CheckAccessMode,PHP.Core.CheckAccessOptions)"/> method.
            <newpara>
            This wrapper expects the path to be an absolute local filesystem path
            without the file:// scheme specifier.
            </newpara>
            </remarks>
        </member>
        <member name="F:PHP.Core.FileStreamWrapper.scheme">
            <summary>
            The protocol portion of URL handled by this wrapper.
            </summary>
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.Open(System.String@,System.String,PHP.Core.StreamOpenOptions,PHP.Core.StreamContext)">
            <summary>
  Called by <c>fopen()</c> for the specific wrapper determined by the scheme portion of an URL. 
  Override in descendants to make new instances of <see cref="T:PHP.Core.PhpStream"/>s.
  </summary><param name="path">The path passed to <c>fopen()</c> which will be set to the opened absolute path.</param><param name="mode">The mode passed to <c>fopen()</c>.</param><param name="options">Combination of <see cref="T:PHP.Core.StreamOpenOptions"/>.</param><param name="context">The context provided for the stream wrapper at the call to <c>fopen()</c>.</param><returns>A new instance of <see cref="T:PHP.Core.PhpStream"/> encapsulating the data Stream.
  Returns null in case of failure - will be cast to false for <c>fopen()</c>.
  </returns>
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.BuildStatStruct(System.IO.FileSystemInfo,System.IO.FileAttributes,System.String)">
            <summary>
            Creates a <see cref="T:PHP.Core.StatStruct"/> from the <see cref="T:PHP.Core.StatStruct"/> filling the common
            members (for files and directories) from the given <see cref="T:System.IO.FileSystemInfo"/> class.
            The <c>size</c> member (numeric index <c>7</c>) may be filled by the caller
            for when <paramref name="info"/> is a <see cref="T:System.IO.FileInfo"/>.
            </summary>
            <remarks>
            According to these outputs (PHP Win32):
            <code>
            fstat(somefile.txt):
               [dev] =&gt; 0
               [ino] =&gt; 0
               [mode] =&gt; 33206
               [nlink] =&gt; 1
               [uid] =&gt; 0
               [gid] =&gt; 0
               [rdev] =&gt; 0
               [size] =&gt; 24
               [atime] =&gt; 1091131360
               [mtime] =&gt; 1091051699
               [ctime] =&gt; 1091051677
               [blksize] =&gt; -1
               [blocks] =&gt; -1
            
            stat(somefile.txt):
               [dev] =&gt; 2
               [ino] =&gt; 0
               [mode] =&gt; 33206 // 0100666
               [nlink] =&gt; 1
               [uid] =&gt; 0
               [gid] =&gt; 0
               [rdev] =&gt; 2
               [size] =&gt; 24
               [atime] =&gt; 1091129621
               [mtime] =&gt; 1091051699
               [ctime] =&gt; 1091051677
               [blksize] =&gt; -1
               [blocks] =&gt; -1
               
            stat(somedir):
               [st_dev] =&gt; 2
               [st_ino] =&gt; 0
               [st_mode] =&gt; 16895 // 040777
               [st_nlink] =&gt; 1
               [st_uid] =&gt; 0
               [st_gid] =&gt; 0
               [st_rdev] =&gt; 2
               [st_size] =&gt; 0
               [st_atime] =&gt; 1091109319
               [st_mtime] =&gt; 1091044521
               [st_ctime] =&gt; 1091044521
               [st_blksize] =&gt; -1
               [st_blocks] =&gt; -1
            </code>
            </remarks>
            <param name="info">A <see cref="T:System.IO.FileInfo"/> or <see cref="T:System.IO.DirectoryInfo"/>
            of the <c>stat()</c>ed filesystem entry.</param>
            <param name="attributes">The file or directory attributes.</param>
            <param name="path">The path to the file / directory.</param>
            <returns>A <see cref="T:PHP.Core.StatStruct"/> for use in the <c>stat()</c> related functions.</returns>    
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.ToStatUnixTimeStamp(System.IO.FileSystemInfo,System.Func{System.IO.FileSystemInfo,System.DateTime})">
            <summary>
            Adjusts UTC time of a file by adding Daylight Saving Time difference.
            Makes file times working in the same way as in PHP and Windows Explorer.
            </summary>
            <param name="info"><see cref="T:System.IO.FileSystemInfo"/> object reference. Used to avoid creating of closure when passing <paramref name="utcTimeFunc"/>.</param>
            <param name="utcTimeFunc">Function obtaining specific <see cref="T:System.DateTime"/> from given <paramref name="info"/>.</param>
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.GetFileMode(System.IO.FileInfo)">
            <summary>
            Gets the ACL of a file and converts it into UNIX-like file mode
            </summary>
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.GetFileMode(System.IO.DirectoryInfo)">
            <summary>
             Gets the ACL of a directory and converts it ACL into UNIX-like file mode
            </summary>
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.GetFileMode(System.Security.AccessControl.AuthorizationRuleCollection)">
            <summary>
            Converts ACL into UNIX-like file mode
            </summary>
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.BuildMode(System.IO.FileSystemInfo,System.IO.FileAttributes,System.String)">
            <summary>
            Creates the UNIX-like file mode depending on the file or directory attributes.
            </summary>
            <param name="info">Information about file system object.</param>
            <param name="attributes">Attributes of the file.</param>
            <param name="path">Paths to the file.</param>
            <returns>UNIX-like file mode.</returns>
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.Stat(System.String,PHP.Core.StreamStatOptions,PHP.Core.StreamContext,System.Boolean)">
            <summary>
  Creates the stat-structure for a specified file.
  </summary><remarks>
  Regarding the stream_wrapper_register(), the stat() is an instance
  method of a stream. Maybe a PhpStream should remember the open-path
  of the contained file for such purposes but currently I can see
  no PHP function requiring stat() on an opened stream.
  </remarks><param name="path">The target filename.</param><param name="options">Additional options.</param><param name="context">Wrapper-specific options.</param><param name="streamStat">Wheter to use stream_stat() or url_stat() when invoking user wrapper.</param><returns>A <see cref="T:PHP.Core.StatStruct"/> containing the stat information about the target file 
  or with st_size set to <c>-1</c> in case of failure.</returns><exception cref="T:PHP.Core.PhpException">Throws a warning in case of failure.</exception>
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.HandleNewFileSystemInfo``1(``0,System.String,System.Func{System.String,``0})">
            <summary>
            Try the new FileSystemInfo based operation and hamdle exceptions properly.
            </summary>
            <typeparam name="T">The return value type.</typeparam>
            <param name="invalid">Invalid value.</param>
            <param name="path">Path to the resource passed to the <paramref name="action"/>. Also used for error control.</param>
            <param name="action">Action to try. The first argument is the path.</param>
            <returns>The value of <paramref name="action"/>() or <paramref name="invalid"/>.</returns>
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.Unlink(System.String,PHP.Core.StreamUnlinkOptions,PHP.Core.StreamContext)">
            <summary>
  Deletes the specified file using an appropriate stream-wrapper
  depending on the scheme portion of the given <paramref name="path"/>.
  </summary><remarks>
  Only the file and ftp wrappers support file deletion.
  </remarks><param name="path">The URL to the file to be deleted.</param><param name="options">Additional options.</param><param name="context">Wrapper-specific options.</param><returns>True if the file was deleted otherwise false.</returns>
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.Listing(System.String,PHP.Core.StreamListingOptions,PHP.Core.StreamContext)">
            <summary>
  Provides an array of filenames used to create a DirectoryListing
  for directory enumeration.
  </summary><param name="path">The directory to be explored.</param><param name="options">This parameter is unused.</param><param name="context">Wrapper-specific options.</param><returns>An array of filenames or null in case of failure.</returns>
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.Rename(System.String,System.String,PHP.Core.StreamRenameOptions,PHP.Core.StreamContext)">
            <summary>
  Renames the file specified by <paramref name="fromPath"/> to <paramref name="toPath"/>.
  Does not work accross wrappers.
  </summary><param name="fromPath">The original filename.</param><param name="toPath">The new filename.</param><param name="options">Unused.</param><param name="context">Wrapper-specific options.</param><returns>True in case of success.</returns>
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.MakeDirectory(System.String,System.Int32,PHP.Core.StreamMakeDirectoryOptions,PHP.Core.StreamContext)">
            <summary>
  Creates a directory or a whole branch of directories in the specified path.
  </summary><param name="path">The directory to create (may work recursively).</param><param name="accessMode">Directory access mode (for UNIX systems, defaults to 0777).</param><param name="options">Additional options.</param><param name="context">Wrapper-specific options.</param><returns>True in case of success.</returns>
        </member>
        <member name="M:PHP.Core.FileStreamWrapper.RemoveDirectory(System.String,PHP.Core.StreamRemoveDirectoryOptions,PHP.Core.StreamContext)">
            <summary>
  Removes the specified directory.
  </summary><param name="path">The directory to remove.</param><param name="options">Unused.</param><param name="context">Wrapper-specific options.</param><returns>True in case of success.</returns>
        </member>
        <member name="P:PHP.Core.FileStreamWrapper.Label">
            <summary>
  Gets the text identifier of this StreamWrapper used in error messages.
  </summary>
        </member>
        <member name="P:PHP.Core.FileStreamWrapper.Scheme">
            <summary>
  Gets the protocol portion of URL handled by this wrapper.
  </summary>
        </member>
        <member name="P:PHP.Core.FileStreamWrapper.IsUrl">
            <summary>
  Gets whether or not this wrapper is affected by the AllowUrlFopen configuration.
  </summary>
        </member>
        <member name="T:PHP.Core.InputOutputStreamWrapper">
            <summary>
            Derived from <see cref="T:PHP.Core.StreamWrapper"/>, this class provides access to the PHP input/output streams.
            </summary>
            <summary>
            Derived from <see cref="T:PHP.Core.StreamWrapper"/>, this class provides access to the PHP input/output streams.
            </summary>
        </member>
        <member name="F:PHP.Core.InputOutputStreamWrapper.scheme">
            <summary>
            The protocol portion of URL handled by this wrapper.
            </summary>
        </member>
        <member name="M:PHP.Core.InputOutputStreamWrapper.Open(System.String@,System.String,PHP.Core.StreamOpenOptions,PHP.Core.StreamContext)">
            <summary>
  Called by <c>fopen()</c> for the specific wrapper determined by the scheme portion of an URL. 
  Override in descendants to make new instances of <see cref="T:PHP.Core.PhpStream"/>s.
  </summary><param name="path">The path passed to <c>fopen()</c> which will be set to the opened absolute path.</param><param name="mode">The mode passed to <c>fopen()</c>.</param><param name="options">Combination of <see cref="T:PHP.Core.StreamOpenOptions"/>.</param><param name="context">The context provided for the stream wrapper at the call to <c>fopen()</c>.</param><returns>A new instance of <see cref="T:PHP.Core.PhpStream"/> encapsulating the data Stream.
  Returns null in case of failure - will be cast to false for <c>fopen()</c>.
  </returns>
        </member>
        <member name="M:PHP.Core.InputOutputStreamWrapper.OpenFiltered(System.String,System.String,System.String,PHP.Core.StreamOpenOptions,PHP.Core.StreamContext)">
            <summary>
            Opens a PhpStream and appends the stream filters.
            </summary>
            <param name="path">The URL resource.</param>
            <param name="arguments">String containig '/'-separated options.</param>
            <param name="mode">Original mode.</param>
            <param name="options">Original options.</param>
            <param name="context">Original context.</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.InputOutputStreamWrapper.OpenScriptInput">
            <summary>
            Opens the script input (containing raw POST data).
            </summary>
            <returns>The corresponding native stream opened for reading.</returns>
        </member>
        <member name="M:PHP.Core.InputOutputStreamWrapper.OpenScriptOutput">
            <summary>
            Opens the script output (binary output sink of the script).
            </summary>
            <returns>The corresponding native stream opened for writing.</returns>
        </member>
        <member name="P:PHP.Core.InputOutputStreamWrapper.In">
            <summary>
            Represents the console input stream (alias php://stdin).
            </summary>
            <remarks>
            It is a persistent text stream. This means that it is never closed
            by <c>fclose()</c> and <c>\r\n</c> is converted to <c>\n</c>.
            </remarks>
        </member>
        <member name="P:PHP.Core.InputOutputStreamWrapper.Out">
            <summary>
            Represents the console output stream (alias php://stdout).
            </summary>
            <remarks>
            It is a persistent text stream. This means that it is never closed
            by <c>fclose()</c> and <c>\n</c> is converted to <c>\r\n</c>.
            </remarks>
        </member>
        <member name="P:PHP.Core.InputOutputStreamWrapper.Error">
            <summary>
            Represents the console error stream (alias php://error).
            </summary>
            <remarks>
            It is a persistent text stream. This means that it is never closed
            by <c>fclose()</c> and <c>\n</c> is converted to <c>\r\n</c>.
            </remarks>
        </member>
        <member name="P:PHP.Core.InputOutputStreamWrapper.Label">
            <summary>
  Gets the text identifier of this StreamWrapper used in error messages.
  </summary>
        </member>
        <member name="P:PHP.Core.InputOutputStreamWrapper.Scheme">
            <summary>
  Gets the protocol portion of URL handled by this wrapper.
  </summary>
        </member>
        <member name="P:PHP.Core.InputOutputStreamWrapper.IsUrl">
            <summary>
  Gets whether or not this wrapper is affected by the AllowUrlFopen configuration.
  </summary>
        </member>
        <member name="P:PHP.Core.InputOutputStreamWrapper.ScriptInput">
            <summary>
            Represents the script input stream (containing the raw POST data).
            </summary>
            <remarks>
            It is a persistent binary stream. This means that it is never closed
            by <c>fclose()</c> and no EOLN mapping is performed.
            </remarks>
        </member>
        <member name="P:PHP.Core.InputOutputStreamWrapper.ScriptOutput">
            <summary>
            Represents the script output stream (alias php://output).
            </summary>
            <remarks>
            It is a persistent binary stream. This means that it is never closed
            by <c>fclose()</c> and no EOLN mapping is performed.
            </remarks>
        </member>
        <member name="T:PHP.Core.StatStruct">
            <summary>
            Managed equivalent of the CRT <c>stat</c> structure.
            </summary>
        </member>
        <member name="T:PHP.Core.StreamAccessOptions">
            <summary>
            Flags returned by <see cref="M:PHP.Core.StreamWrapper.ParseMode(System.String,PHP.Core.StreamOpenOptions,System.IO.FileMode@,System.IO.FileAccess@,PHP.Core.StreamAccessOptions@)"/> indicating
            additional information to the parsed <see cref="T:System.IO.FileMode"/>
            and <see cref="T:System.IO.FileAccess"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.StreamAccessOptions.Empty">
            <summary>Empty (invalid) value (0).</summary>
        </member>
        <member name="F:PHP.Core.StreamAccessOptions.Read">
            <summary>The stream was opened for reading (1).</summary>
        </member>
        <member name="F:PHP.Core.StreamAccessOptions.Write">
            <summary>The stream was opened for writing (2).</summary>
        </member>
        <member name="F:PHP.Core.StreamAccessOptions.UseText">
            <summary>Use text access to the stream (default is binary) (4).</summary>
        </member>
        <member name="F:PHP.Core.StreamAccessOptions.SeekEnd">
            <summary>Seek to the end of the stream is required (8).</summary>
            <remarks>
            The given mode requires "a+", which is not supported
            by .NET Framework; mode is reset to "r+" and a seek is required.
            </remarks>
        </member>
        <member name="F:PHP.Core.StreamAccessOptions.Exclusive">
            <summary>The mode starts with 'x' which requires 
            a Warning if the file already exists. It is not applicable
            to remote files (16).</summary>
        </member>
        <member name="F:PHP.Core.StreamAccessOptions.FindFile">
            <summary>This file may be searched in the include_path
            if requested (only the modes opening existing files) (32).</summary>
        </member>
        <member name="F:PHP.Core.StreamAccessOptions.Temporary">
            <summary>When a local file is opened using tmpfile() it should be removed when closed (256).</summary>
        </member>
        <member name="F:PHP.Core.StreamAccessOptions.Persistent">
            <summary>Denotes a persistent version of the stream (2048).</summary>
        </member>
        <member name="T:PHP.Core.StreamOptions">
            <summary>
            Flags passed in the options argument to the <see cref="M:PHP.Core.StreamWrapper.Open(System.String@,System.String,PHP.Core.StreamOpenOptions,PHP.Core.StreamContext)"/> method.
            </summary>
        </member>
        <member name="F:PHP.Core.StreamOptions.Empty">
            <summary>Empty option (default)</summary>
        </member>
        <member name="F:PHP.Core.StreamOptions.UseIncludePath">
            <summary>If path is relative, Wrapper will search for the resource using the include_path (1).</summary>
        </member>
        <member name="F:PHP.Core.StreamOptions.IgnoreUrl">
            <summary>When this flag is set, only the file:// wrapper is considered. (2)</summary>
        </member>
        <member name="F:PHP.Core.StreamOptions.EnforceSafeMode">
            <summary>Apply the <c>safe_mode</c> permissions check when opening a file (4).</summary>
        </member>
        <member name="F:PHP.Core.StreamOptions.ReportErrors">
            <summary>If this flag is set, the Wrapper is responsible for raising errors using 
            trigger_error() during opening of the stream. If this flag is not set, she should not raise any errors (8).</summary>
        </member>
        <member name="F:PHP.Core.StreamOptions.MustSeek">
            <summary>If you don't need to write to the stream, but really need to 
            be able to seek, use this flag in your options (16).</summary>
        </member>
        <member name="F:PHP.Core.StreamOptions.WillCast">
            <summary>
            If you are going to end up casting the stream into a FILE* or
            a socket, pass this flag and the streams/wrappers will not use
            buffering mechanisms while reading the headers, so that HTTP wrapped 
            streams will work consistently.  If you omit this flag, streams will 
            use buffering and should end up working more optimally (32).
            </summary>
        </member>
        <member name="F:PHP.Core.StreamOptions.LocateWrappersOnly">
            <summary> This flag applies to php_stream_locate_url_wrapper (64). </summary>
        </member>
        <member name="F:PHP.Core.StreamOptions.OpenForInclude">
            <summary> This flag is only used by include/require functions (128).</summary>
        </member>
        <member name="F:PHP.Core.StreamOptions.UseUrl">
            <summary> This flag tells streams to ONLY open urls (256).</summary>
        </member>
        <member name="F:PHP.Core.StreamOptions.OnlyGetHeaders">
            <summary> This flag is used when only the headers from HTTP request are to be fetched (512).</summary>
        </member>
        <member name="F:PHP.Core.StreamOptions.DisableOpenBasedir">
            <summary>Don't apply open_basedir checks (1024).</summary>
        </member>
        <member name="F:PHP.Core.StreamOptions.Persistent">
            <summary>Get (or create) a persistent version of the stream (2048).</summary>
        </member>
        <member name="T:PHP.Core.StreamOpenOptions">
            <summary>
            <see cref="T:PHP.Core.StreamOptions"/> relevant to the Open method.
            </summary>
        </member>
        <member name="F:PHP.Core.StreamOpenOptions.Empty">
            <summary>Empty option (default)</summary>
        </member>
        <member name="F:PHP.Core.StreamOpenOptions.UseIncludePath">
            <summary>If path is relative, Wrapper will search for the resource using the include_path (1).</summary>
        </member>
        <member name="F:PHP.Core.StreamOpenOptions.EnforceSafeMode">
            <summary>Apply the <c>safe_mode</c> permissions check when opening a file (4).</summary>
        </member>
        <member name="F:PHP.Core.StreamOpenOptions.ReportErrors">
            <summary>If this flag is set, the Wrapper is responsible for raising errors using 
            trigger_error() during opening of the stream. If this flag is not set, user should not raise any errors (8).</summary>
        </member>
        <member name="F:PHP.Core.StreamOpenOptions.OpenForInclude">
            <summary> This flag is only used by include/require functions (128).</summary>
        </member>
        <member name="F:PHP.Core.StreamOpenOptions.DisableOpenBasedir">
            <summary>Don't apply open_basedir checks (1024).</summary>
        </member>
        <member name="F:PHP.Core.StreamOpenOptions.Persistent">
            <summary>Get (or create) a persistent version of the stream (2048).</summary>
        </member>
        <member name="F:PHP.Core.StreamOpenOptions.Temporary">
            <summary>When a local file is opened using tmpfile() it should be removed when closed (256).</summary>
        </member>
        <member name="T:PHP.Core.StreamListingOptions">
            <summary>
            <see cref="T:PHP.Core.StreamOptions"/> relevant to the Listing method.
            </summary>
        </member>
        <member name="F:PHP.Core.StreamListingOptions.Empty">
            <summary>Empty option (default)</summary>
        </member>
        <member name="F:PHP.Core.StreamListingOptions.DisableOpenBasedir">
            <summary>Don't apply open_basedir checks (1024).</summary>
        </member>
        <member name="T:PHP.Core.StreamUnlinkOptions">
            <summary>
            <see cref="T:PHP.Core.StreamOptions"/> relevant to the Unlink method.
            </summary>
        </member>
        <member name="F:PHP.Core.StreamUnlinkOptions.Empty">
            <summary>Empty option (default)</summary>
        </member>
        <member name="F:PHP.Core.StreamUnlinkOptions.EnforceSafeMode">
            <summary>Apply the <c>safe_mode</c> permissions check when opening a file (4).</summary>
        </member>
        <member name="F:PHP.Core.StreamUnlinkOptions.ReportErrors">
            <summary>If this flag is set, the Wrapper is responsible for raising errors using 
            trigger_error() during opening of the stream. If this flag is not set, she should not raise any errors (8).</summary>
        </member>
        <member name="T:PHP.Core.StreamRenameOptions">
            <summary>
            <see cref="T:PHP.Core.StreamOptions"/> relevant to the Rename method.
            </summary>
        </member>
        <member name="F:PHP.Core.StreamRenameOptions.Empty">
            <summary>Empty option (default)</summary>
        </member>
        <member name="T:PHP.Core.StreamStatOptions">
            <summary>
            Specific options of the Stat method.
            </summary>
        </member>
        <member name="F:PHP.Core.StreamStatOptions.Empty">
            <summary>Empty option (default)</summary>
        </member>
        <member name="F:PHP.Core.StreamStatOptions.Link">
            <summary>Stat the symbolic link itself instead of the linked file (1).</summary>
        </member>
        <member name="F:PHP.Core.StreamStatOptions.Quiet">
            <summary>Do not complain if the file does not exist (2).</summary>
        </member>
        <member name="T:PHP.Core.StreamMakeDirectoryOptions">
            <summary>
            Specific options of the MakeDirectory method.
            </summary>
        </member>
        <member name="F:PHP.Core.StreamMakeDirectoryOptions.Empty">
            <summary>Empty option (default)</summary>
        </member>
        <member name="F:PHP.Core.StreamMakeDirectoryOptions.Recursive">
            <summary>Create the whole path leading to the specified directory if necessary (1).</summary>
        </member>
        <member name="T:PHP.Core.StreamRemoveDirectoryOptions">
            <summary>
            <see cref="T:PHP.Core.StreamOptions"/> relevant to the RemoveDirectory method.
            </summary>
        </member>
        <member name="F:PHP.Core.StreamRemoveDirectoryOptions.Empty">
            <summary>Empty option (default)</summary>
        </member>
        <member name="T:PHP.Core.FileModeFlags">
            <summary>
            File attribute flags used in fileperms.
            </summary>
        </member>
        <member name="F:PHP.Core.FileModeFlags.FileTypeMask">
            <summary>Mask for file type.</summary>
        </member>
        <member name="F:PHP.Core.FileModeFlags.File">
            <summary>Regular file.</summary>
        </member>
        <member name="F:PHP.Core.FileModeFlags.Directory">
            <summary>Directory.</summary>
        </member>
        <member name="F:PHP.Core.FileModeFlags.Character">
            <summary>Character special.</summary>
        </member>
        <member name="F:PHP.Core.FileModeFlags.Pipe">
            <summary>FIFO.</summary>
        </member>
        <member name="F:PHP.Core.FileModeFlags.Read">
            <summary>Read permissions; owner, group, others.</summary>
        </member>
        <member name="F:PHP.Core.FileModeFlags.Write">
            <summary>Write permissions; owner, group, others.</summary>
        </member>
        <member name="F:PHP.Core.FileModeFlags.Execute">
            <summary>Execute permissions; owner, group, others.</summary>
        </member>
        <member name="F:PHP.Core.FileModeFlags.ReadWriteExecute">
            <summary>All permissions for owner, group and others.</summary>
        </member>
        <member name="T:PHP.Core.HttpStreamWrapper">
            <summary>
            Derived from <see cref="T:PHP.Core.StreamWrapper"/>, this class provides access to 
            remote files using the http protocol.
            </summary>
        </member>
        <member name="F:PHP.Core.HttpStreamWrapper.scheme">
            <summary>
            The protocol portion of URL handled by this wrapper.
            </summary>
        </member>
        <member name="M:PHP.Core.HttpStreamWrapper.Open(System.String@,System.String,PHP.Core.StreamOpenOptions,PHP.Core.StreamContext)">
            <summary>
  Called by <c>fopen()</c> for the specific wrapper determined by the scheme portion of an URL. 
  Override in descendants to make new instances of <see cref="T:PHP.Core.PhpStream"/>s.
  </summary><param name="path">The path passed to <c>fopen()</c> which will be set to the opened absolute path.</param><param name="mode">The mode passed to <c>fopen()</c>.</param><param name="options">Combination of <see cref="T:PHP.Core.StreamOpenOptions"/>.</param><param name="context">The context provided for the stream wrapper at the call to <c>fopen()</c>.</param><returns>A new instance of <see cref="T:PHP.Core.PhpStream"/> encapsulating the data Stream.
  Returns null in case of failure - will be cast to false for <c>fopen()</c>.
  </returns>
        </member>
        <member name="M:PHP.Core.HttpStreamWrapper.ApplyContext(System.Net.HttpWebRequest,PHP.Core.StreamContext)">
            <summary>
            Init the parameters of the HttpWebRequest, use the StreamCOntext and/or default values.
            </summary>
            <param name="request"></param>
            <param name="context"></param>
        </member>
        <member name="M:PHP.Core.HttpStreamWrapper.CreateWrapperData(System.Net.HttpWebResponse)">
            <summary>
            see stream_get_meta_data()["wrapper_data"]
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="P:PHP.Core.HttpStreamWrapper.Label">
            <summary>
  Gets the text identifier of this StreamWrapper used in error messages.
  </summary>
        </member>
        <member name="P:PHP.Core.HttpStreamWrapper.Scheme">
            <summary>
  Gets the protocol portion of URL handled by this wrapper.
  </summary>
        </member>
        <member name="P:PHP.Core.HttpStreamWrapper.IsUrl">
            <summary>
  Gets whether or not this wrapper is affected by the AllowUrlFopen configuration.
  </summary>
        </member>
        <member name="T:PHP.Core.UserStreamWrapper">
            <summary>
            Derived from <see cref="T:PHP.Core.StreamWrapper"/>, this class is built
            using reflection upon a user-defined stream wrapper.
            A PhpStream descendant is defined upon the instance methods of 
            the given PHP class.
            </summary>
        </member>
        <member name="M:PHP.Core.UserStreamWrapper.InvokeWrapperMethod(System.String,System.Object[])">
            <summary>
            Invoke wrapper method on wrapper instance.
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:PHP.Core.UserStreamWrapper.WrapperTypeInstance">
            <summary>
            Lazily instantiated <see cref="F:PHP.Core.UserStreamWrapper.wrapperTypeDesc"/>. PHP instantiates the wrapper class when used for the first time.
            </summary>
        </member>
        <member name="P:PHP.Core.UserStreamWrapper.Label">
            <summary>
  Gets the text identifier of this StreamWrapper used in error messages.
  </summary>
        </member>
        <member name="P:PHP.Core.UserStreamWrapper.Scheme">
            <summary>
  Gets the protocol portion of URL handled by this wrapper.
  </summary>
        </member>
        <member name="T:PHP.Core.DebugUtils">
            <summary>
            Support for debugging.
            </summary>
        </member>
        <member name="M:PHP.Core.DebugUtils.WebInitialize">
            <summary>
            Initializes log logging in the context of web server.
            The log file is created in <see cref="P:System.Web.HttpRuntime.CodegenDir"/> directory.
            </summary>
        </member>
        <member name="T:PHP.Core.ConfigUtils">
            <summary>
            Utils for parsing Phalanger XML configuration file.
            </summary>
        </member>
        <member name="M:PHP.Core.ConfigUtils.MandatoryAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a string value contained in the mandatory attribute of specified name.
            </summary>
            <param name="node">The node which attribute get.</param>
            <param name="name">The name of attribute.</param>
            <returns>The string value contained in the attribute.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The attribute is missing.</exception>
        </member>
        <member name="M:PHP.Core.ConfigUtils.OptionalAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a string value contained in the optional attribute of specified name.
            </summary>
            <param name="node">The node which attribute get.</param>
            <param name="name">The name of attribute.</param>
            <returns>The string value contained in the attribute or a <B>null</B> reference if the attribute is missing.</returns>
        </member>
        <member name="M:PHP.Core.ConfigUtils.ParseNameValueList(System.Xml.XmlNode,PHP.Core.PhpConfigurationContext,PHP.Core.IPhpConfigurationSection)">
            <summary>
            Parses a configuration contained in the specified node.
            The section is expected to follow Phalanger configuration schema.
            </summary>
            <param name="node">The node to parse.</param>
            <param name="context">The configuration context or a <B>null</B> reference.</param>
            <param name="section1">The section to fill in.</param>
        </member>
        <member name="M:PHP.Core.ConfigUtils.ParseNameValueList(System.Xml.XmlNode,PHP.Core.PhpConfigurationContext,PHP.Core.IPhpConfigurationSection,PHP.Core.IPhpConfigurationSection)">
            <summary>
            Parses a configuration contained in the specified node.
            The section is expected to follow Phalanger configuration schema.
            </summary>
            <param name="node">The node to parse.</param>
            <param name="context">The configuration context or a <B>null</B> reference.</param>
            <param name="section1">The first section to fill in.</param>
            <param name="section2">The second section to fill in if the first doesn't contain the option.</param>
        </member>
        <member name="M:PHP.Core.ConfigUtils.ParseNameValueList(System.Xml.XmlNode,PHP.Core.PhpConfigurationContext,PHP.Core.IPhpConfigurationSection,PHP.Core.IPhpConfigurationSection,PHP.Core.IPhpConfigurationSection)">
            <summary>
            Parses a configuration contained in the specified node.
            The section is expected to follow Phalanger configuration schema.
            </summary>
            <param name="node">The node to parse.</param>
            <param name="context">The configuration context or a <B>null</B> reference.</param>
            <param name="section1">The first section to fill in.</param>
            <param name="section2">The second section to fill in if the first doesn't contain the option. Can be <B>null</B>.</param>
            <param name="section3">The third section to fill in if neither the first not the second contain the option. Can be <B>null</B>.</param>
            <remarks>
            The following node type is allowed to be contained in the <paramref name="node"/>:
            <code>
              &lt;set name="{string}" value="{string}" [allowOverride="{bool}"] /&gt;
              &lt;set name="{string}" [allowOverride="{bool}"] &gt; ... &lt;/set&gt;
            </code>                                          
            </remarks>
        </member>
        <member name="M:PHP.Core.ConfigUtils.ParseFlags(System.Xml.XmlNode,System.Int32,System.Type)">
            <summary>
            Parses a configuration contained in the specified node and its children in a form of flags.
            </summary>
            <param name="node">The node.</param>
            <param name="value">An initial value of the flags.</param>
            <param name="type">The type of flag enumeration.</param>
            <returns>An updated value after all flags stated in the sub-nodes are added/removed/cleared.</returns>
            <remarks>
            The following node types are allowed to be contained in the <paramref name="node"/>:
            <code>
             (&lt;add value="{enum field list}" /&gt; |
              &lt;remove value="{enum field list}" /&gt; |
              &lt;clear/&gt;)*
            </code>
            </remarks>
        </member>
        <member name="M:PHP.Core.ConfigUtils.GetConfigXmlPath(System.Xml.XmlDocument)">
            <summary>
            Get the file name of given <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <param name="document">Xml config file.</param>
            <returns>File name of the xml document or null.</returns>
        </member>
        <member name="M:PHP.Core.ConfigUtils.GetConfigModificationTimeUtc(System.Xml.XmlNode,System.DateTime)">
            <summary>
            Determine the configuration file for given <see cref="T:System.Xml.XmlNode"/> and its last modification time.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> from a configuration file.</param>
            <param name="maxTimeUtc">Currently latest modification time. The returned value cannot be lower.</param>
            <returns>Time of the configuration file modification or <see cref="F:System.DateTime.MinValue"/>.</returns>
        </member>
        <member name="M:PHP.Core.ConfigUtils.GetUri(System.Xml.XmlNode,System.String)">
            <summary>
            Get the full URI of the specified <c>url</c>. Uses path of the configuration file to resolve URI.
            If the path is not available, uses current directory.
            </summary>
            <param name="node">The XML node used to obtain the uri.</param>
            <param name="url">Relative or absolute URL of the file.</param>
            <returns>Resolved URI from <c>url</c>. To resolve relative path it use the file name of the XML.
            It filename cannot be resolved from the <c>node</c> it uses current configuration path.</returns>
        </member>
        <member name="M:PHP.Core.ConfigUtils.ParseStringList(System.Xml.XmlNode,System.Collections.Generic.IList{System.String})">
            <summary>
            Parses a list of string items inserting parsed values in a specified list.
            </summary>
            <param name="node">XML node containing a list.</param>
            <param name="result">The list where to add items.</param>
            <remarks>
            The following node types are allowed to be contained in the <paramref name="node"/>:
            <code>
              &lt;add value="{string}" /&gt;
              &lt;remove value="{string}" /&gt;
              &lt;clear/&gt;
            </code>
            </remarks>
        </member>
        <member name="M:PHP.Core.ConfigUtils.ParseLibraryAssemblyList(System.Xml.XmlNode,PHP.Core.LibrariesConfigurationList,PHP.Core.FullPath)">
            <summary>
            Parses list of library assemblies.
            </summary>
            <param name="node">Node containing the list.</param>
            <param name="libraries">List of libraries to be modified by given <paramref name="node"/>.</param>
            <param name="librariesPath">Full path to the libraries directory.</param>
            <remarks>
            The following node type is allowed to be contained in the <paramref name="node"/>:
            <code>
              &lt;add assembly="{string}" [section="{string}"] {additional attributes specific to library} /&gt;
            </code>
            </remarks>
        </member>
        <member name="M:PHP.Core.ConfigUtils.ParseInteger(System.String,System.Int32,System.Int32,System.Xml.XmlNode)">
            <summary>
            Parses an integer from a string.
            </summary>
            <param name="value">The string.</param>
            <param name="min">The minimal possible value for the resulting integer.</param>
            <param name="max">The maximal possible value for the resulting integer.</param>
            <param name="node">The configuration node being parsed.</param>
            <returns>The value.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Invalid format or out of range.</exception>
        </member>
        <member name="M:PHP.Core.ConfigUtils.ParseDouble(System.String,System.Xml.XmlNode)">
            <summary>
            Parses a double from a string.
            </summary>
            <param name="value">The string.</param>
            <param name="node">The configuration node being parsed.</param>
            <returns>The value.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Invalid format.</exception>
        </member>
        <member name="T:PHP.Core.ConfigUtils.InvalidNodeException">
            <summary>
            Exception thrown if a node is invalid.
            </summary>
        </member>
        <member name="T:PHP.Core.ConfigUtils.InvalidAttributeValueException">
            <summary>
            Exception thrown if a value of an attribute is not valid.
            </summary>
        </member>
        <member name="T:PHP.Core.ConfigUtils.ParseLibraryAssemblyCallback">
            <summary>
            Callback used by <see cref="M:PHP.Core.ConfigUtils.ParseLibraryAssemblyList(System.Xml.XmlNode,PHP.Core.LibrariesConfigurationList,PHP.Core.FullPath)"/>.
            Returning <B>false</B> will stop parsing.
            </summary>
            <param name="assemblyName">Parsed long assembly name or a <B>null</B> reference.</param>
            <param name="assemblyUrl">Parsed assembly file URL or a <B>null</B> reference.</param>
            <param name="sectionName">Configuration section name or a <B>null</B> reference.</param>
            <param name="node">XML node being parsed.</param>
            <remarks>
            Either <paramref name="assemblyName"/> or <paramref name="assemblyUrl"/> is always non-null.
            </remarks>
        </member>
        <member name="T:PHP.Core.ConfigUtils.ParseScriptLibraryAssemblyCallback">
            <summary>
            Callback used by <see cref="M:PHP.Core.ConfigUtils.ParseScriptLibraryAssemblyList(System.Xml.XmlNode,PHP.Core.ScriptLibraryDatabase)"/>. 
            Returning <b>false</b> will stop parsing.
            </summary>
            <param name="assemblyName">Parsed long assembly name or a <B>null</B> reference.</param>
            <param name="assemblyUrl">Parsed assembly file URL or a <B>null</B> reference.</param>
            <param name="libraryRootPath">Library root which will be used.</param>
            <returns></returns>
        </member>
        <member name="T:PHP.Core.FileSystemUtils">
            <summary>
            File system utilities.
            </summary>
            <summary>
            File system utilities.
            </summary>
        </member>
        <member name="M:PHP.Core.FileSystemUtils.GetDiskFreeSpace(System.String,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Retrieves information about the amount of space available on a disk volume.
            </summary>
            <param name="directoryName">A directory on the disk of interest (can be a network UNC path). 
            A <b>null</b> reference means the root of the current disk.</param>
            <param name="freeBytesAvailable">Receives the total number of free bytes on the disk that are 
            available to the user associated with the calling thread.</param>
            <param name="totalNumberOfBytes">Receives the total number of bytes on the disk that are 
            available to the user associated with the calling thread.</param>
            <param name="totalNumberOfFreeBytes">Receives the total number of free bytes on the disk.</param>
            <returns>Whether a call of method was successful.</returns>
        </member>
        <member name="M:PHP.Core.FileSystemUtils.GetAllFiles(System.Collections.Generic.IEnumerable{PHP.Core.FullPath})">
            <summary>
            Gets a list of file full paths contained in a specified directories.
            </summary>
            <param name="paths">List of paths to files and/or directories.</param>
            <returns>
            List of all files contained in <paramref name="paths"/> and all files contained
            in directories whose paths are contained in the <paramref name="paths"/> list.
            </returns>
        </member>
        <member name="M:PHP.Core.FileSystemUtils.GetAllFiles(System.Collections.Generic.IEnumerable{PHP.Core.FileReference})">
            <summary>
            Gets a list of files contained in a specified directories.
            </summary>
            <param name="paths">List of paths to files and/or directories.</param>
            <returns>
            List of all files contained in <paramref name="paths"/> and all files contained
            in directories whose paths are contained in the <paramref name="paths"/> list.
            </returns>
            <remarks>It is safe to pass <see cref="T:PHP.Core.ResourceFileReference"/> here</remarks>
        </member>
        <member name="M:PHP.Core.FileSystemUtils.ReadFileLine(System.String,System.Int32)">
            <summary>
            Seeks a specified line in a file and reads its content.
            </summary>
            <exception cref="T:System.Exception">Any exception the <see cref="M:System.IO.File.OpenText(System.String)"/> or <see cref="M:System.IO.StreamReader.ReadLine"/> may throw.</exception>
        </member>
        <member name="M:PHP.Core.FileSystemUtils.StripPassword(System.String)">
            <summary>
            Returns the given URL without the username/password information.
            </summary>
            <remarks>
            Removes the text between the last <c>"://"</c> and the following <c>'@'</c>.
            Does not check the URL for validity. Works for php://filter paths too.
            </remarks>
            <param name="url">The URL to modify.</param>
            <returns>The given URL with the username:password section replaced by <c>"..."</c>.</returns>
        </member>
        <member name="M:PHP.Core.FileSystemUtils.GetLastModifiedTimeUtc(System.IO.FileSystemInfo)">
            <summary>
            Gets the time given <paramref name="fsi"/> was modified. Mostly it is the <see cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc"/>
            however if the file was modified elsewhere and copied, <see cref="P:System.IO.FileSystemInfo.CreationTimeUtc"/> may be greater.
            </summary>
            <param name="fsi">File or a directory.</param>
            <returns>Max of <see cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc"/> and <see cref="P:System.IO.FileSystemInfo.CreationTimeUtc"/>.</returns>
        </member>
        <member name="M:PHP.Core.FileSystemUtils.GetLastModifiedTimeUtc(System.String)">
            <summary>
            Gets the time given file at <paramref name="path"/> was modified. Mostly it is the <see cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc"/>
            however if the file was modified elsewhere and copied, <see cref="P:System.IO.FileSystemInfo.CreationTimeUtc"/> may be greater.
            </summary>
            <param name="path">Path to the file.</param>
            <returns>Max of <see cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc"/> and <see cref="P:System.IO.FileSystemInfo.CreationTimeUtc"/>.</returns>
        </member>
        <member name="T:PHP.Core.NetworkUtils">
            <summary>
            Network utilities.
            </summary>
        </member>
        <member name="F:PHP.Core.NetworkUtils.singleton">
            <summary>
            A singleton whose finalizer shuts down Winsock.
            </summary>
        </member>
        <member name="M:PHP.Core.NetworkUtils.#ctor">
            <summary>
            Creates a new <see cref="T:PHP.Core.NetworkUtils"/> singleton whose purpose is to initialize and shut down Winsock.
            </summary>
        </member>
        <member name="M:PHP.Core.NetworkUtils.Finalize">
            <summary>
            Shuts down Winsock.
            </summary>
        </member>
        <member name="M:PHP.Core.NetworkUtils.WSAStartup32(System.Int16,PHP.Core.NetworkUtils.WsaData32@)">
            <summary>
            Initializes Winsock for the current process.
            </summary>
            <param name="wVersionRequested">The Winsock version requested by caller.</param>
            <param name="wsaData">Receives information about Winsock implementation.</param>
            <returns>Zero if successfull, a non-zero error code otherwise.</returns>
        </member>
        <member name="M:PHP.Core.NetworkUtils.WSAStartup64(System.Int16,PHP.Core.NetworkUtils.WsaData64@)">
            <summary>
            Initializes Winsock for the current process.
            </summary>
            <param name="wVersionRequested">The Winsock version requested by caller.</param>
            <param name="wsaData">Receives information about Winsock implementation.</param>
            <returns>Zero if successfull, a non-zero error code otherwise.</returns>
        </member>
        <member name="M:PHP.Core.NetworkUtils.WSACleanup">
            <summary>
            Shuts down Winsock for the current process.
            </summary>
            <returns>Zero if successfull, a non-zero error code otherwise.</returns>
        </member>
        <member name="M:PHP.Core.NetworkUtils.getprotobyname(System.String)">
            <summary>
            Retrieves the protocol information corresponding to a protocol name.
            </summary>
            <param name="name">The protocol name.</param>
            <returns>Protocol information or <B>null</B> if an error occurs.</returns>
        </member>
        <member name="M:PHP.Core.NetworkUtils.GetProtocolByName(System.String)">
            <summary>
            Safe wrapper for <see cref="M:PHP.Core.NetworkUtils.getprotobyname(System.String)"/> function call.
            </summary>
            <param name="name">The protocol name.</param>
            <returns>Protocol information or <B>null</B> if an error occurs.</returns>
            <remarks>The wrapper avoids freeing of pointer returned from <see cref="M:PHP.Core.NetworkUtils.getprotobyname(System.String)"/>. The returned pointer is managed by winsoc library and must not be freed by CLI.</remarks>
        </member>
        <member name="M:PHP.Core.NetworkUtils.getprotobynumber(System.Int32)">
            <summary>
            Retrieves protocol information corresponding to a protocol number.
            </summary>
            <param name="number">The protocol number.</param>
            <returns>Protocol information or <B>null</B> if an error occurs.</returns>
        </member>
        <member name="M:PHP.Core.NetworkUtils.GetProtocolByNumber(System.Int32)">
            <summary>
            Safe wrapper for <see cref="M:PHP.Core.NetworkUtils.getprotobynumber(System.Int32)"/> function call.
            </summary>
            <param name="number">The protocol number.</param>
            <returns>Protocol information or <B>null</B> if an error occurs.</returns>
        </member>
        <member name="M:PHP.Core.NetworkUtils.getservbyname(System.String,System.String)">
            <summary>
            Retrieves service information corresponding to a service name and protocol.
            </summary>
            <param name="name">The service name.</param>
            <param name="proto">The protocol name or <B>null</B> if only <paramref name="name"/> should be matched.
            </param>
            <returns>Service information or <B>null</B> if an error occurs.</returns>
        </member>
        <member name="M:PHP.Core.NetworkUtils.GetServiceByName(System.String,System.String)">
            <summary>
            Safe wrapper for <see cref="M:PHP.Core.NetworkUtils.getservbyname(System.String,System.String)"/> function call.
            </summary>
            <param name="name">The service name.</param>
            <param name="proto">The protocol name or <B>null</B> if only <paramref name="name"/> should be matched.
            </param>
            <returns>Service information or <B>null</B> if an error occurs.</returns>
        </member>
        <member name="M:PHP.Core.NetworkUtils.getservbyport(System.Int32,System.String)">
            <summary>
            Retrieves service information corresponding to a port and protocol.
            </summary>
            <param name="port">The port number (network order).</param>
            <param name="proto">The protocol name or <B>null</B> if only <paramref name="port"/> should be matched.
            </param>
            <returns>Service information or <B>null</B> if an error occurs.</returns>
        </member>
        <member name="M:PHP.Core.NetworkUtils.GetServiceByPort(System.Int32,System.String)">
            <summary>
            Safe wrapper for <see cref="M:PHP.Core.NetworkUtils.getservbyport(System.Int32,System.String)"/> function call.
            </summary>
            <param name="port">The port number (network order).</param>
            <param name="proto">The protocol name or <B>null</B> if only <paramref name="port"/> should be matched.
            </param>
            <returns>Service information or <B>null</B> if an error occurs.</returns>
        </member>
        <member name="T:PHP.Core.NetworkUtils.WsaData32">
            <summary>
            Managed representation of the <c>WSADATA</c> structure.
            </summary>
        </member>
        <member name="T:PHP.Core.NetworkUtils.WsaData64">
            <summary>
            Managed representation of the <c>WSADATA</c> structure.
            </summary>
        </member>
        <member name="T:PHP.Core.NetworkUtils.ProtoEnt">
            <summary>
            Managed representation of the <c>protoent</c> structure.
            </summary>
        </member>
        <member name="M:PHP.Core.NetworkUtils.ProtoEnt.FromIntPtr(System.IntPtr)">
            <summary>
            Marshales native pointer to <see cref="T:PHP.Core.NetworkUtils.ProtoEnt"/> instance.
            </summary>
            <param name="ptr">Pointer returned by <see cref="M:PHP.Core.NetworkUtils.getprotobyname(System.String)"/> or <see cref="M:PHP.Core.NetworkUtils.getprotobynumber(System.Int32)"/>.</param>
            <remarks>The wrapper avoids freeing of pointer returned from winsoc native library. The returned pointer is managed by winsoc library and must not be freed by CLI.</remarks>
        </member>
        <member name="T:PHP.Core.NetworkUtils.ServEnt">
            <summary>
            Managed representation of the <c>servent</c> structure.
            </summary>
        </member>
        <member name="M:PHP.Core.NetworkUtils.ServEnt.FromIntPtr(System.IntPtr)">
            <summary>
            Marshales native pointer to <see cref="T:PHP.Core.NetworkUtils.ServEnt"/> instance.
            </summary>
            <param name="ptr">Pointer returned by <see cref="M:PHP.Core.NetworkUtils.getservbyname(System.String,System.String)"/> or <see cref="M:PHP.Core.NetworkUtils.getservbyport(System.Int32,System.String)"/>.</param>
            <remarks>The wrapper avoids freeing of pointer returned from winsoc native library. The returned pointer is managed by winsoc library and must not be freed by CLI.</remarks>
        </member>
        <member name="T:PHP.Core.Win32IconResource">
            <summary>
            Represents a Win32 icon resource.
            </summary>
            <remarks>
            Supports creation from an <B>.ICO</B> file and conversion to a <B>.RES</B> file. Contains a group of
            Win32 icons read from one <B>.ICO</B> file.
            </remarks>
        </member>
        <member name="F:PHP.Core.Win32IconResource.icons">
            <summary>
            The icons in the group.
            </summary>
        </member>
        <member name="M:PHP.Core.Win32IconResource.#ctor(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Win32IconResource"/> given an <B>.ICO</B> file stream.
            </summary>
            <param name="stream">The <B>.ICO</B> file stream.</param>
        </member>
        <member name="M:PHP.Core.Win32IconResource.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:PHP.Core.Win32IconResource"/> given an <B>.ICO</B> file path.
            </summary>
            <param name="icoFilePath">The <B>.ICO</B> file path.</param>
        </member>
        <member name="M:PHP.Core.Win32IconResource.WriteResourceHeader(System.IO.BinaryWriter,System.Int32,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Writes one resource header to a provided <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="w">The <see cref="T:System.IO.BinaryWriter"/> to write the header to.</param>
            <param name="dataLength">The length of the data that comprise this resource.</param>
            <param name="type">The resource type code.</param>
            <param name="id">The resource ID.</param>
            <param name="memoryFlags">The resource memory flags.</param>
        </member>
        <member name="M:PHP.Core.Win32IconResource.WriteToResFile(System.IO.Stream)">
            <summary>
            Writes the icon resource to a provided <B>.RES</B> file stream.
            </summary>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:PHP.Core.Win32IconResource.ReadFromIcoFile(System.IO.Stream)">
            <summary>
            Reads the icon resource from a provided <B>.ICO</B> file stream.
            </summary>
            <param name="stream">The input stream.</param>
            <exception cref="T:System.IO.InvalidDataException">The icon has an invalid format.</exception>
        </member>
        <member name="T:PHP.Core.Win32IconResource.Win32Icon">
            <summary>
            Represents one Win32 icon.
            </summary>
        </member>
        <member name="T:PHP.Core.DebugHelper">
            <summary>
            Debug helpers.
            </summary>
        </member>
        <member name="M:PHP.Core.DebugHelper.AssertNonNull(System.Int32,System.Object[])">
            <summary>
            Asserts exactly specified number of the references to be non-null.
            </summary>
        </member>
        <member name="M:PHP.Core.DebugHelper.AssertAllNonNull(System.Object[])">
            <summary>
            Asserts that the array is non-null and doesn't contain null references.
            </summary>
        </member>
        <member name="T:PHP.Core.ReflectionUtils">
            <summary>
            Utilities manipulating metadata via reflection.
            </summary>
        </member>
        <member name="M:PHP.Core.ReflectionUtils.SetUserEntryPoint(System.Reflection.Emit.ModuleBuilder,System.Reflection.MethodInfo)">
            <summary>
            Sets user entry point if this feature is supported.
            </summary>
        </member>
        <member name="M:PHP.Core.ReflectionUtils.ParseTypeId(System.Type,System.Int32@,System.String@,System.String@)">
            <summary>
            Parses the <paramref name="realType"/> into <paramref name="transientId"/>, <paramref name="sourceFile"/> and <paramref name="typeName"/>.
            </summary>
            <param name="realType">Type from within <see cref="T:PHP.Core.Reflection.TransientModule"/>, <see cref="T:PHP.Core.Reflection.ScriptModule"/> or <see cref="T:PHP.Core.Reflection.PureModule"/>.</param>
            <param name="transientId"><c>-1</c> or Id of transiend module.</param>
            <param name="sourceFile"><c>null</c> or relative file name of the contained type.</param>
            <param name="typeName">Cannot be null. PHP type name without the prefixed <c>&lt;</c>~<c>&gt;</c> information. CLR notation of namespaces.</param>
            <remarks>Handles special cases of types from ClassLibrary and Core.</remarks>
        </member>
        <member name="M:PHP.Core.ReflectionUtils.ParseTypeId(System.String,System.Int32@,System.String@,System.String@)">
            <summary>
            Parses the <paramref name="realTypeFullName"/> into <paramref name="transientId"/>, <paramref name="sourceFile"/> and <paramref name="typeName"/>.
            </summary>
            <param name="realTypeFullName">Expecting <see cref="P:System.Type.FullName"/> (type CLR full name, including <c>.</c>, <c>+</c>) of a type from within <see cref="T:PHP.Core.Reflection.TransientModule"/>, <see cref="T:PHP.Core.Reflection.ScriptModule"/> or <see cref="T:PHP.Core.Reflection.PureModule"/>.</param>
            <param name="transientId"><c>-1</c> or Id of transiend module.</param>
            <param name="sourceFile"><c>null</c> or relative file name of the contained type.</param>
            <param name="typeName">PHP type name without the prefixed <c>&lt;</c>~<c>&gt;</c> information. CLR notation of namespaces. Can be <c>null</c> reference if there is no type name (global function in transient module).</param>
        </member>
        <member name="T:PHP.Core.DateTimeUtils">
            <summary>
            Unix TimeStamp to DateTime conversion and vice versa
            </summary>
        </member>
        <member name="F:PHP.Core.DateTimeUtils.UtcStartOfUnixEpoch">
            <summary>
            Time 0 in terms of Unix TimeStamp.
            </summary>
        </member>
        <member name="M:PHP.Core.DateTimeUtils.UtcToUnixTimeStamp(System.DateTime)">
            <summary>
            Converts <see cref="T:System.DateTime"/> representing UTC time to UNIX timestamp.
            </summary>
            <param name="dt">Time.</param>
            <returns>Unix timestamp.</returns>
        </member>
        <member name="M:PHP.Core.DateTimeUtils.UnixTimeStampToUtc(System.Int32)">
            <summary>
            Converts UNIX timestamp (number of seconds from 1.1.1970) to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="timestamp">UNIX timestamp</param>
            <returns><see cref="T:System.DateTime"/> structure representing UTC time.</returns>
        </member>
        <member name="M:PHP.Core.DateTimeUtils.GetDaylightTimeDifference(System.DateTime,System.DateTime)">
            <summary>
            Gets the daylight saving time difference between two dates.
            </summary>
            <param name="src">Source date.</param>
            <param name="dst">Destination date.</param>
            <returns>
            The time span that has to be added to the source date's Daylight Saving Time Delta to get 
            destination date's one.
            </returns>
        </member>
        <member name="M:PHP.Core.DateTimeUtils.Max(System.DateTime,System.DateTime)">
            <summary>
            Determine maximum of three given <see cref="T:System.DateTime"/> values.
            </summary>
        </member>
        <member name="M:PHP.Core.DateTimeUtils.Max(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Determine maximum of three given <see cref="T:System.DateTime"/> values.
            </summary>
        </member>
        <member name="P:PHP.Core.DateTimeUtils.UtcTimeZone">
            <summary>
            UTC time zone.
            </summary>
        </member>
        <member name="M:PHP.Core.ClrNotationUtils.ToClrNotation(PHP.Core.QualifiedName,System.Int32,System.Int32)">
            <summary>
            Makes full CLR name from this instance. 
            </summary>
            <param name="qualifiedName">Qualified name to be converted to CLR notation.</param>
            <param name="genericParamCount">Number of generic parameters.</param>
            <param name="versionIndex">Index of the conditional version or 0 for unconditional.</param>
            <returns>Full CLR name.</returns>
        </member>
        <member name="M:PHP.Core.ClrNotationUtils.FromClrNotation(System.Type)">
            <summary>
            Handles PHP type and parses its name.
            </summary>
        </member>
        <member name="M:PHP.Core.ClrNotationUtils.FromClrNotation(System.String,System.Boolean)">
            <summary>
            Parses CLR full name. 
            </summary>
        </member>
        <member name="T:PHP.Core.SynchronizedCache`2">
            <summary>
            Implements cache mechanism to be used in multi-threaded environment.
            </summary>
            <typeparam name="K">The cache key type.</typeparam>
            <typeparam name="T">The cache value type.</typeparam>
        </member>
        <member name="F:PHP.Core.SynchronizedCache`2.cacheLock">
            <summary>
            The lock used to access the cache synchronously. Cannot be null.
            </summary>
        </member>
        <member name="F:PHP.Core.SynchronizedCache`2.innerCache">
            <summary>
            Cached values. Cannot be null.
            </summary>
        </member>
        <member name="F:PHP.Core.SynchronizedCache`2.updateFunction">
            <summary>
            The update function used when cache miss. Cannot be null.
            </summary>
        </member>
        <member name="M:PHP.Core.SynchronizedCache`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initialize the new instance of SynchronizedCache object.
            </summary>
            <param name="updateFunction">The update function used when cache miss.
            Note the function is called within the write lock exclusively.</param>
        </member>
        <member name="M:PHP.Core.SynchronizedCache`2.Get(`0)">
            <summary>
            Try to get an item from the cache. If the given <paramref name="key"/> is not found,
            the <see cref="F:PHP.Core.SynchronizedCache`2.updateFunction"/> is used to create new item.
            </summary>
            <param name="key">The key of the item.</param>
            the cache does not contain given <paramref name="key"/> yet.
            <returns>The item according to the given <paramref name="key"/>.</returns>
        </member>
        <member name="M:PHP.Core.SynchronizedCache`2.Update(`0,System.Func{`0,`1})">
            <summary>
            Update the value with the given <paramref name="key"/> using specified <paramref name="updateFunction"/>.
            </summary>
            <param name="key">Key of the value to be updated or added.</param>
            <param name="updateFunction">The update function used to get the value of the item. The parameter cannot be null.</param>
            <returns>The value of the item with given <paramref name="key"/>.</returns>
        </member>
        <member name="M:PHP.Core.SynchronizedCache`2.Update(`0)">
            <summary>
            Update the value with the given <paramref name="key"/> using default <see cref="F:PHP.Core.SynchronizedCache`2.updateFunction"/>.
            </summary>
            <param name="key">Key of the value to be updated or added.</param>
            <returns>The value of the item with given <paramref name="key"/>.</returns>
        </member>
        <member name="P:PHP.Core.SynchronizedCache`2.Count">
            <summary>
            Amount of items in the cache dictionary.
            </summary>
        </member>
        <member name="M:PHP.Core.DelegateExtensions.AndAlso``1(System.Predicate{``0},System.Predicate{``0})">
            <summary>
            Combine with another predicate function. Both functions must return true.
            </summary>
            <typeparam name="T">The type of predicate functions argument.</typeparam>
            <param name="predicate1">This predicate. Can be null.</param>
            <param name="predicate2">Another predicate. Can be null.</param>
            <returns>Combination of two given predicates or null if both arguments are null.</returns>
        </member>
        <member name="M:PHP.Core.DelegateExtensions.OrElse``1(System.Predicate{``0},System.Predicate{``0})">
            <summary>
            Combine with another predicate function. Predicates will be processed sequentially until one pass.
            </summary>
            <typeparam name="T">The type of predicate functions argument.</typeparam>
            <param name="predicate1">This predicate. Can be null.</param>
            <param name="predicate2">Another predicate. Can be null.</param>
            <returns>Combination of two given predicates or null if both arguments are null.</returns>
        </member>
        <member name="M:PHP.Core.NumberUtils.IsInt32(System.Int64)">
            <summary>
            Determines whether given <see cref="T:System.Int64"/> can be safely converted to <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="T:PHP.Core.DictionaryItemType">
            <summary>
            Type of an item in dictionary collection.
            </summary>
        </member>
        <member name="T:PHP.Core.InvalidItem">
            <summary>
            Auxiliary class which represents invalid key or value.
            </summary>
        </member>
        <member name="M:PHP.Core.InvalidItem.#ctor">
            <summary>Prevents instantiation.</summary>
        </member>
        <member name="F:PHP.Core.InvalidItem.Default">
            <summary>Invalid item singleton.</summary>
        </member>
        <member name="M:PHP.Core.InvalidItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
	    Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
	  </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:PHP.Core.WeakCache`1">
            <summary>
            Maps real objects to their associates (of type <typeparamref name="T"/>).
            </summary>
            <typeparam name="T">The type of objects associated with real objects.</typeparam>
            <remarks>
            The cache should store only the real objects that are alive, i.e. reachable from GC roots.
            It is assumed that there exists a (strong) reference from instances of <typeparamref name="T"/>
            to their associated real objects. Therefore holding the associates in this cache using strong
            references only would not work and a more sophisticated pattern is employed.
            </remarks>
        </member>
        <member name="M:PHP.Core.WeakCache`1.Add(System.Object,`0)">
            <summary>
            Adds a new real object - associate mapping.
            </summary>
        </member>
        <member name="M:PHP.Core.WeakCache`1.TryGetValue(System.Object,`0@)">
            <summary>
            Retrieves the associate for a given real object.
            </summary>
        </member>
        <member name="M:PHP.Core.WeakCache`1.CheckAllocation">
            <summary>
            Check whether it is reasonable to perform a weak reference sweep and delegates to <see cref="M:PHP.Core.WeakCache`1.WeakReferenceSweep"/>.
            </summary>
            <remarks>
            Inspired by <c>System.ComponentModel.WeakHashTable.ScavengeKeys</c> BCL internal class.
            </remarks>
        </member>
        <member name="M:PHP.Core.WeakCache`1.WeakReferenceSweep">
            <summary>
            Removes items representing real objects that are already dead.
            </summary>
        </member>
        <member name="M:PHP.Core.WeakCache`1.Resurrect(System.Object,`0)">
            <summary>
            Ensures that the associate of the given real object is held strongly.
            </summary>
            <remarks>
            Should be called from within the associate's finalizer when the real object is
            figured out to be still alive.
            </remarks>
        </member>
        <member name="T:PHP.Core.WeakCache`1.WeakCacheKey">
            <summary>
            Weak reference with overriden <see cref="M:PHP.Core.WeakCache`1.WeakCacheKey.GetHashCode"/> and <see cref="M:PHP.Core.WeakCache`1.WeakCacheKey.Equals(System.Object)"/>.
            </summary>
            <remarks>
            Delegating <see cref="M:PHP.Core.WeakCache`1.WeakCacheKey.GetHashCode"/> to the target and confirming equality with the target
            makes it possible to use the target (real object) as key when performing dictionary lookups.
            There's not need to create a new <see cref="T:PHP.Core.WeakCache`1.WeakCacheKey"/> just to call something like
            <see cref="M:PHP.Core.WeakCache`1.TryGetValue(System.Object,`0@)"/>.
            </remarks>
        </member>
        <member name="T:PHP.Core.GenericEnumerableAdapter`1">
            <summary>
            Makes it possible to use C# iterators to implement the <see cref="T:System.Collections.IDictionaryEnumerator"/>
            interface.
            </summary>
            <remarks>
            Optionally performs CLR to PHP wrapping on returned values.
            </remarks>
        </member>
        <member name="T:PHP.Core.GenericDictionaryAdapter`2">
            <summary>
            Makes it possible to use C# 2.0 iterators to implement the <see cref="T:System.Collections.IDictionaryEnumerator"/>
            interface.
            </summary>
            <remarks>
            Optionally performs CLR to PHP wrapping on returned keys and values.
            </remarks>
        </member>
        <member name="T:PHP.Core.Utilities.BaseScope">
            <summary>
            Base class for all the convenience dynamic objects for accessing global elements 
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.BaseScope.GetFullName(System.String)">
            <summary>
            Transforms given name to be full name including namespaces
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.BaseScope.wrapArgs(System.Object[])">
            <summary>
            Wrap all arguments to Phalanger objects only if the type is not primitive
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:PHP.Core.Utilities.GlobalScope">
            <summary>
            Convenience class for accessing global functions and global variables
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.GlobalScope.#ctor(PHP.Core.ScriptContext)">
            <summary>
            Initialize GlobalScope object
            </summary>
            <param name="currentContext"></param>
        </member>
        <member name="M:PHP.Core.Utilities.GlobalScope.#ctor(PHP.Core.ScriptContext,System.String)">
            <summary>
            Initialize GlobalScope object with namespace specified
            </summary>
            <param name="currentContext"></param>
            <param name="namespaceName"></param>
        </member>
        <member name="M:PHP.Core.Utilities.GlobalScope.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Specifies dynamic behavior for invoke operation for global function
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.GlobalScope.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Specifies dynamic behavior for get operation for global variable
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.GlobalScope.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Specifies dynamic behavior for set operation for global function
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.GlobalScope.TryInvokeMember(System.String,System.Object[],System.Object@)">
            <summary>
            Specifies dynamic behavior for invoke operation for global function
            </summary>
        </member>
        <member name="P:PHP.Core.Utilities.GlobalScope.Classes">
            <summary>
            Gets ClassesScope dynamic object that represents types defined in global scope
            </summary>
        </member>
        <member name="P:PHP.Core.Utilities.GlobalScope.Consts">
            <summary>
            Gets ConstsScope dynamic object that represents types defined in global scope
            </summary>
        </member>
        <member name="P:PHP.Core.Utilities.GlobalScope.Namespaces">
            <summary>
            Gets NamespaceScope dynamic object that represents namespaces defined in global scope
            </summary>
        </member>
        <member name="T:PHP.Core.Utilities.NamespaceScope">
            <summary>
            Dynamic Obeject for representing PHP namespaces
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.NamespaceScope.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Specifies dynamic behavior for invoke operation for global function
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.NamespaceScope.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Specifies dynamic behavior for get operation for global variable in namespace
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.NamespaceScope.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Specifies dynamic behavior for set operation for global function in namespace
            </summary>
        </member>
        <member name="T:PHP.Core.Utilities.ClassScope">
            <summary>
            Dynamic scope for reprensenting static members of class
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.ClassScope.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Specifies dynamic behavior for invoke operation for static method
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.ClassScope.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Specifies dynamic behavior for get operation for static variable
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.ClassScope.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Specifies dynamic behavior for set operation for static variable
            </summary>
        </member>
        <member name="T:PHP.Core.Utilities.ClassesScope">
            <summary>
            Dynamic Object for representing PHP classes
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.ClassesScope.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Creates new instance of specified PHP class 
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.ClassesScope.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Gets dynamic object representing classes
            </summary>
        </member>
        <member name="T:PHP.Core.Utilities.ConstsScope">
            <summary>
            Dynamic Object for representing PHP constants
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.ConstsScope.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Specifies dynamic behavior for get operation for a constant
            </summary>
        </member>
        <member name="M:PHP.Core.Utilities.ConstsScope.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Specifies dynamic behavior for set operation for a constant
            </summary>
        </member>
        <member name="M:PHP.Core.PhpTypeCodeEnum.ToType(PHP.Core.PhpTypeCode)">
            <summary>
            Retrieves <see cref="T:System.Type"/> from a specified <see cref="T:PHP.Core.PhpTypeCode"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpTypeCodeEnum.FromType(System.Type)">
            <summary>
            Retrieves <see cref="T:PHP.Core.PhpTypeCode"/> from a specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:PHP.Core.PhpTypeCodeEnum.FromObject(System.Object)">
            <summary>
            Retrieves <see cref="T:PHP.Core.PhpTypeCode"/> from a specified <paramref name="value"/> instance.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpTypeCodeEnum.IsDeeplyCopied(PHP.Core.PhpTypeCode)">
            <summary>
            <c>True</c> iff given <paramref name="code"/> represents value that can be copied (is IPhpCloneable and implements some logic in Copy method).
            </summary>
            <param name="code"><see cref="T:PHP.Core.PhpTypeCode"/>.</param>
            <returns>Wheter given <paramref name="code"/> represents value that can be copied.</returns>
        </member>
        <member name="T:PHP.Core.CopyReason">
            <summary>
            Reason why a variable should be copied.
            </summary>
        </member>
        <member name="F:PHP.Core.CopyReason.Assigned">
            <summary>
            Used when copied by operator =.
            </summary>
        </member>
        <member name="F:PHP.Core.CopyReason.PassedByCopy">
            <summary>
            If <see cref="T:PHP.Core.PhpDeepCopyAttribute"/> has been used on argument compiler generates deep-copy call
            with this copy reason.
            </summary>
        </member>
        <member name="F:PHP.Core.CopyReason.ReturnedByCopy">
            <summary>
            If <see cref="T:PHP.Core.PhpDeepCopyAttribute"/> has been used on return value compiler generates deep-copy call
            with this copy reason.
            </summary>
        </member>
        <member name="F:PHP.Core.CopyReason.Unknown">
            <summary>
            The reason is unknown.
            </summary>
        </member>
        <member name="T:PHP.Core.PhpWalkCallback">
            <summary>
            Called back by <see cref="M:PHP.Core.IPhpObjectGraphNode.Walk(PHP.Core.PhpWalkCallback,PHP.Core.ScriptContext)"/> when walking an object graph.
            </summary>
            <remarks>
            The parameter represents the node that is being visited. Return value represents the new
            node value that the original node will be replaced with in its container.
            </remarks>
        </member>
        <member name="T:PHP.Core.PhpVariable">
            <summary>
            Methods manipulating PHP variables.
            </summary>
            <remarks>
            <para>Implements some IPhp* interfaces for objects of arbitrary PHP.NET type particularly for CLR types.</para>
            </remarks>
        </member>
        <member name="F:PHP.Core.PhpVariable.TypeNameInt">
            <summary>
            PHP name for <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVariable.TypeNameLongInteger">
            <summary>
            PHP name for <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVariable.TypeNameDouble">
            <summary>
            PHP name for <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVariable.TypeNameBool">
            <summary>
            PHP name for <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVariable.TypeNameString">
            <summary>
            PHP name for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVariable.TypeNameVoid">
            <summary>
            PHP name for <see cref="T:System.Void"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVariable.TypeNameObject">
            <summary>
            PHP name for <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVariable.TypeNameNull">
            <summary>
            PHP name for <B>null</B>.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVariable.True">
            <summary>
            PHP name for <B>true</B> constant.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVariable.False">
            <summary>
            PHP name for <B>true</B> constant.
            </summary>
        </member>
        <member name="F:PHP.Core.PhpVariable.PrintIndentationLevel">
            <summary>
            Auxiliary variable holding the current level of indentation while printing a variable.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpVariable.PrintIndentation(System.IO.TextWriter)">
            <summary>
            Writes indentation spaces to <see cref="T:System.IO.TextWriter"/> according to <see cref="F:PHP.Core.PhpVariable.PrintIndentationLevel"/>.
            </summary>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> where to write spaces.</param>
        </member>
        <member name="M:PHP.Core.PhpVariable.Print(System.IO.TextWriter,System.Object)">
            <summary>
            Prints a content of the given variable.
            </summary>
            <param name="output">The output text stream.</param>
            <param name="obj">The variable to be printed.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:PHP.Core.PhpVariable.Print(System.Object)">
            <summary>
            Prints the variable to the console.
            </summary>
            <param name="obj">The variable to print.</param>
        </member>
        <member name="M:PHP.Core.PhpVariable.Dump(System.IO.TextWriter,System.Object)">
            <summary>
            Prints a content of the given variable and its type. 
            </summary>
            <param name="output">The output text stream.</param>
            <param name="obj">The variable to be printed.</param>
        </member>
        <member name="M:PHP.Core.PhpVariable.Dump(System.Object)">
            <summary>
            Dumps the variable to the console.
            </summary>
            <param name="obj">The variable to dump.</param>
        </member>
        <member name="M:PHP.Core.PhpVariable.Export(System.IO.TextWriter,System.Object)">
            <summary>
            Prints a content of the given variable in PHP language. 
            </summary>
            <param name="output">The output text stream.</param>
            <param name="obj">The variable to be printed.</param>
        </member>
        <member name="M:PHP.Core.PhpVariable.Export(System.Object)">
            <summary>
            Exports the variable to the console.
            </summary>
            <param name="obj">The variable to export.</param>
        </member>
        <member name="M:PHP.Core.PhpVariable.DeepCopy(System.Object)">
            <summary>
            Creates a deep copy of specified PHP variable.
            </summary>
            <param name="obj">The variable to copy.</param>
            <returns>
            A deep copy of <paramref name="obj"/> if it is of arbitrary PHP.NET type or 
            implements <see cref="T:PHP.Core.IPhpCloneable"/> interface. Otherwise, only a shallow copy can be made.
            </returns>
        </member>
        <member name="M:PHP.Core.PhpVariable.Copy(System.Object,PHP.Core.CopyReason)">
            <summary>
            Depending on the copy reason and configuration, makes 
            inplace copy, shallow copy, or a deep copy of a specified PHP variable.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpVariable.IsEmpty(System.Object)">
            <summary>
            Implements empty language construct.
            </summary>
            <param name="obj">The variable.</param>
            <returns>Whether the variable is empty according to PHP rules.</returns>
            <remarks>
            A variable is considered to be empty if it is undefined, <b>null</b>, 0, 0.0, <b>false</b>, "0", 
            empty string or empty string of bytes, object without properties, 
            </remarks>
            <exception cref="T:System.InvalidCastException">If <paramref name="obj"/> is not of PHP.NET type.</exception>
        </member>
        <member name="M:PHP.Core.PhpVariable.IsScalar(System.Object)">
            <summary>
            Checks whether a specified object is of scalar type.
            </summary>
            <param name="obj">The variable.</param>
            <returns>Whether <paramref name="obj"/> is either <see cref="T:System.Int32"/>, <see cref="T:System.Double"/>,
            <see cref="T:System.Boolean"/>, <see cref="T:System.Int64"/>, <see cref="T:System.String"/> or <see cref="M:PHP.Core.IPhpVariable.IsScalar"/>.</returns>
        </member>
        <member name="M:PHP.Core.PhpVariable.GetTypeName(System.Object)">
            <summary>
            Gets the PHP name of a type of a specified object.
            </summary>
            <param name="obj">The object which type name to get.</param>
            <returns>The PHP name of the type of <paramref name="obj"/>.</returns>
            <remarks>Returns CLR type name for variables of unknown type.</remarks>
        </member>
        <member name="M:PHP.Core.PhpVariable.GetTypeName(System.Type)">
            <summary>
            Gets the PHP name of a specified PHP non-primitive type.
            </summary>
            <param name="type">The PHP non-primitive type.</param>
            <returns>The PHP name of the <paramref name="type"/>.</returns>
            <remarks>Returns CLR type name for primitive types.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is a <B>null</B>.</exception>
        </member>
        <member name="M:PHP.Core.PhpVariable.HasPrimitiveType(System.Object)">
            <summary>
            Determines whether a type of a specified variable is PHP/CLR primitive type.
            Doesn't check for <c>object</c> primitive type as is is only a compiler construction.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpVariable.HasLiteralPrimitiveType(System.Object)">
            <summary>
            Determines whether a type of a specified variable is PHP/CLR primitive literal type.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpVariable.IsLiteralPrimitiveType(System.Type)">
            <summary>
            Checks whether the type is among Phalanger primitive ones.
            </summary>
            <param name="type">The type to be checked.</param>
            <exception cref="T:System.NullReferenceException"><paramref name="type"/> is a <B>null</B> reference.</exception>
        </member>
        <member name="M:PHP.Core.PhpVariable.GetAssignableTypeName(System.Type)">
            <summary>
            Gets the PHP name of a specified PHP non-primitive type.
            </summary>
            <param name="type">The PHP non-primitive type.</param>
            <returns>The PHP name of the <paramref name="type"/> or the type which can be assigned from its.</returns>
            <remarks>Returns CLR type name for primitive types.</remarks>
            <exception cref="T:System.NullReferenceException"><paramref name="type"/> is a <B>null</B> exception.</exception>
        </member>
        <member name="M:PHP.Core.PhpVariable.GetTypeCode(System.Object)">
            <summary>
            Returns <see cref="T:PHP.Core.PhpTypeCode"/> of specified object of arbitrary PHP.NET type.
            </summary>
            <param name="obj">The object of one of the PHP.NET Framework type.</param>
            <returns>The <see cref="T:PHP.Core.PhpTypeCode"/> of the <paramref name="obj"/></returns>
        </member>
        <member name="M:PHP.Core.PhpVariable.AsString(System.Object)">
            <summary>
            Casts or converts a specified variable representing a string in PHP into a string. 
            </summary>
            <param name="variable">The variable.</param>
            <returns>
            The string representation of <paramref name="variable"/> or 
            a <B>null</B> reference if the variable doesn't represent PHP string.
            </returns>
            <remarks>
            <para>
            The method should be used by the Class Library functions instead of 
            <c>variable <B>as</B> <see cref="T:System.String"/></c>.
            </para>
            <para>
            Converts only types which represents a string in PHP. 
            These are <see cref="T:System.String"/>, <see cref="T:PHP.Core.PhpString"/>, and <see cref="T:PHP.Core.PhpBytes"/>.
            Types like <see cref="T:System.Int32"/>, <see cref="T:System.Boolean"/> are not converted.
            </para>
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpVariable.IsString(System.Object)">
            <summary>
            Checks whether a variable represents a string in PHP.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Whether a variable represents PHP string.</returns>
            <remarks>
            The method should be used by the Class Library functions instead of 
            <c>variable <B>is</B> <see cref="T:System.String"/></c>.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpVariable.AsBytes(System.Object)">
            <summary>
            Casts or converts a specified variable into binary string. 
            The method should be used by the Class Library functions instead of 
            <c>variable <B>as</B> <see cref="T:PHP.Core.PhpBytes"/></c>.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The binary representation of <paramref name="variable"/> or a <B>null</B> reference.</returns>
        </member>
        <member name="M:PHP.Core.PhpVariable.Dereference(System.Object)">
            <summary>
            Dereferences a reference (if applicable).
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.PhpVariable.Dereference(System.Object@)">
            <summary>
            Dereferences a reference and returns the <see cref="T:PHP.Core.PhpReference"/>.
            </summary>
            <param name="variable">The variable to dereference, receives the dereferenced value.</param>
            <returns>The <paramref name="variable"/> as <see cref="T:PHP.Core.PhpReference"/>.</returns>
        </member>
        <member name="M:PHP.Core.PhpVariable.MakeReference(System.Object)">
            <summary>
            Boxes variable into a reference if it is not yet a reference.
            </summary>
            <param name="variable">The instance to box.</param>
            <returns>The reference.</returns>
            <remarks>
            Note that there has to be no other CLR reference pointing to the <paramref name="variable"/> 
            if it is reachable from PHP. In a case there is such a reference a deep copy has to take place.
            </remarks>
        </member>
        <member name="M:PHP.Core.PhpVariable.Unwrap(System.Object)">
            <summary>
            Unwraps a <see cref="T:PHP.Core.Reflection.DObject"/>, <see cref="T:PHP.Core.PhpBytes"/>, and <see cref="T:PHP.Core.PhpString"/>
            returning their real object.
            </summary>
            <param name="var">The object of a PHP type.</param>
            <returns>The real <paramref name="var"/>'s value (free of PHP-specific types).</returns>
        </member>
        <member name="M:PHP.Core.PhpVariable.IsValidName(System.String)">
            <summary>
            Checks whether a string is "valid" PHP variable identifier.
            </summary>
            <param name="name">The variable name.</param>
            <returns>
            Whether <paramref name="name"/> is "valid" name of variable, i.e. [_[:alpha:]][_0-9[:alpha:]]*.
            This doesn't say anything about whether a variable of such name can be used in PHP, e.g. <c>${0}</c> is ok.
            </returns>
        </member>
        <member name="T:PHP.Core.PhpArgument">
            <summary>
            Methods used for checking arguments of Class Library functions.
            </summary>
        </member>
        <member name="M:PHP.Core.PhpArgument.CheckCallback(PHP.Core.PhpCallback,PHP.Core.Reflection.DTypeDesc,System.String,System.Int32,System.Boolean)">
            <summary>
            Checks whether a target of callback argument can be invoked.
            </summary>
            <param name="callback">The callback to check.</param>
            <param name="caller">The class context used to bind the callback function.</param>
            <param name="argIndex">The index of argument starting from 1 or 0 if not applicable.</param>
            <param name="argName">A name of the argument or <B>null</B> reference if not applicable.</param>
            <param name="emptyAllowed">Whether an empty callback is allowed.</param>
            <returns>Whether the callback can be bound to its target or it is empty and that is allowed.</returns>
            <remarks>The callback is bound if it can be.</remarks>
        </member>
    </members>
</doc>
