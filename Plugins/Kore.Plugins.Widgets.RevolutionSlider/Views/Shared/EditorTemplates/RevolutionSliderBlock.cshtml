@using Kore.Plugins.Widgets.RevolutionSlider
@using Kore.Plugins.Widgets.RevolutionSlider.ContentBlocks
@using Kore.Web.ContentManagement
@using Kore.Web.Mvc.KoreUI

@model RevolutionSliderBlock

<div id="block-content">
    @using (var tabs = Html.KoreUI().Begin(new Kore.Web.Mvc.KoreUI.Tabs()))
    {
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.General), "tab-general");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.Navigation), "tab-navigation");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.Loops), "tab-loops");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.MobileVisibility), "tab-mobile-visibility");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.LayoutStyles), "tab-layout-styles");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.Parallax), "tab-parallax");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.PanZoom), "tab-pan-zoom");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.Other), "tab-other");

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.SliderId, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.RevolutionSlider().SliderDropDownListFor(m => m.SliderId, new { @class = "form-control", data_bind = "value: blockModel.sliderId" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ControlId, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ControlId, new { @class = "form-control", data_bind = "value: blockModel.controlId" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Delay, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.Delay, new { @class = "form-control", data_bind = "value: blockModel.delay" })
                        @Html.HelpTextFor(m => m.Delay)
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.StartHeight, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.StartHeight, new { @class = "form-control", data_bind = "value: blockModel.startHeight" })
                        @Html.HelpTextFor(m => m.StartHeight)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.StartWidth, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.StartWidth, new { @class = "form-control", data_bind = "value: blockModel.startWidth" })
                        @Html.HelpTextFor(m => m.StartWidth)
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.Shuffle, new { data_bind = "checked: blockModel.shuffle" }) @T(LocalizableStrings.RevolutionSliderBlock.Shuffle)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.KeyboardNavigation, new { data_bind = "checked: blockModel.keyboardNavigation" }) @T(LocalizableStrings.RevolutionSliderBlock.KeyboardNavigation)
                            </label>
                            @Html.HelpTextFor(m => m.KeyboardNavigation)
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.OnHoverStop, new { data_bind = "checked: blockModel.onHoverStop" }) @T(LocalizableStrings.RevolutionSliderBlock.OnHoverStop)
                            </label>
                            @Html.HelpTextFor(m => m.OnHoverStop)
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.DragBlockVertical, new { data_bind = "checked: blockModel.dragBlockVertical" }) @T(LocalizableStrings.RevolutionSliderBlock.DragBlockVertical)
                            </label>
                            @Html.HelpTextFor(m => m.DragBlockVertical)
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.TouchEnabled, new { data_bind = "checked: blockModel.touchEnabled" }) @T(LocalizableStrings.RevolutionSliderBlock.TouchEnabled)
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ThumbWidth, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ThumbWidth, new { @class = "form-control", data_bind = "value: blockModel.thumbWidth" })
                        @Html.HelpTextFor(m => m.ThumbWidth)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ThumbHeight, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ThumbHeight, new { @class = "form-control", data_bind = "value: blockModel.thumbHeight" })
                        @Html.HelpTextFor(m => m.ThumbHeight)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ThumbAmount, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ThumbAmount, new { @class = "form-control", data_bind = "value: blockModel.thumbAmount" })
                        @Html.HelpTextFor(m => m.ThumbAmount)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.HideThumbs, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.HideThumbs, new { @class = "form-control", data_bind = "value: blockModel.hideThumbs" })
                        @Html.HelpTextFor(m => m.HideThumbs)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationType, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.NavigationType, new { @class = "form-control", data_bind = "value: blockModel.navigationType" })
                        @Html.HelpTextFor(m => m.NavigationType)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationArrows, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.NavigationArrows, new { @class = "form-control", data_bind = "value: blockModel.navigationArrows" })
                        @Html.HelpTextFor(m => m.NavigationArrows)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationStyle, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.NavigationStyle, new { @class = "form-control", data_bind = "value: blockModel.navigationStyle" })
                        @Html.HelpTextFor(m => m.NavigationStyle)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationHAlign, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.NavigationHAlign, new { @class = "form-control", data_bind = "value: blockModel.navigationHAlign" })
                        @Html.HelpTextFor(m => m.NavigationHAlign)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationVAlign, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.NavigationVAlign, new { @class = "form-control", data_bind = "value: blockModel.navigationVAlign" })
                        @Html.HelpTextFor(m => m.NavigationVAlign)
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationHOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.NavigationHOffset, new { @class = "form-control", data_bind = "value: blockModel.navigationHOffset" })
                        @Html.HelpTextFor(m => m.NavigationHOffset)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationVOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.NavigationVOffset, new { @class = "form-control", data_bind = "value: blockModel.navigationVOffset" })
                        @Html.HelpTextFor(m => m.NavigationVOffset)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowLeftHAlign, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.SoloArrowLeftHAlign, new { @class = "form-control", data_bind = "value: blockModel.soloArrowLeftHAlign" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowRightHAlign, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.SoloArrowRightHAlign, new { @class = "form-control", data_bind = "value: blockModel.soloArrowRightHAlign" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowLeftVAlign, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.SoloArrowLeftVAlign, new { @class = "form-control", data_bind = "value: blockModel.soloArrowLeftVAlign" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowRightVAlign, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.SoloArrowRightVAlign, new { @class = "form-control", data_bind = "value: blockModel.soloArrowRightVAlign" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowLeftHOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SoloArrowLeftHOffset, new { @class = "form-control", data_bind = "value: blockModel.soloArrowLeftHOffset" })
                        @Html.HelpTextFor(m => m.SoloArrowLeftHOffset)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowRightHOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SoloArrowRightHOffset, new { @class = "form-control", data_bind = "value: blockModel.soloArrowRightHOffset" })
                        @Html.HelpTextFor(m => m.SoloArrowRightHOffset)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowLeftVOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SoloArrowLeftVOffset, new { @class = "form-control", data_bind = "value: blockModel.soloArrowLeftVOffset" })
                        @Html.HelpTextFor(m => m.SoloArrowLeftVOffset)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowRightVOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SoloArrowRightVOffset, new { @class = "form-control", data_bind = "value: blockModel.soloArrowRightVOffset" })
                        @Html.HelpTextFor(m => m.SoloArrowRightVOffset)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SwipeVelocity, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SwipeVelocity, new { @class = "form-control", data_bind = "value: blockModel.swipeVelocity" })
                        @Html.HelpTextFor(m => m.SwipeVelocity)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SwipeMaxTouches, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SwipeMaxTouches, new { @class = "form-control", data_bind = "value: blockModel.swipeMaxTouches" })
                        @Html.HelpTextFor(m => m.SwipeMaxTouches)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SwipeMinTouches, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SwipeMinTouches, new { @class = "form-control", data_bind = "value: blockModel.swipeMinTouches" })
                        @Html.HelpTextFor(m => m.SwipeMinTouches)
                    </div>
                </div>
            </div>
        }

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.StartWithSlide, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.StartWithSlide, new { @class = "form-control", data_bind = "value: blockModel.startWithSlide" })
                        @Html.HelpTextFor(m => m.StartWithSlide)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.StopAtSlide, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.StopAtSlide, new { @class = "form-control", data_bind = "value: blockModel.stopAtSlide" })
                        @Html.HelpTextFor(m => m.StopAtSlide)
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.StopAfterLoops, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.StopAfterLoops, new { @class = "form-control", data_bind = "value: blockModel.stopAfterLoops" })
                        @Html.HelpTextFor(m => m.StopAfterLoops)
                    </div>
                </div>
            </div>
        }

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.HideCaptionAtLimit, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.HideCaptionAtLimit, new { @class = "form-control", data_bind = "value: blockModel.hideCaptionAtLimit" })
                        @Html.HelpTextFor(m => m.HideCaptionAtLimit)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.HideAllCaptionAtLimit, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.HideAllCaptionAtLimit, new { @class = "form-control", data_bind = "value: blockModel.hideAllCaptionAtLimit" })
                        @Html.HelpTextFor(m => m.HideAllCaptionAtLimit)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.HideSliderAtLimit, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.HideSliderAtLimit, new { @class = "form-control", data_bind = "value: blockModel.hideSliderAtLimit" })
                        @Html.HelpTextFor(m => m.HideSliderAtLimit)
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.HideNavDelayOnMobile, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.HideNavDelayOnMobile, new { @class = "form-control", data_bind = "value: blockModel.hideNavDelayOnMobile" })
                        @Html.HelpTextFor(m => m.HideNavDelayOnMobile)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.HideThumbsUnderResolution, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.HideThumbsUnderResolution, new { @class = "form-control", data_bind = "value: blockModel.hideThumbsUnderResolution" })
                        @Html.HelpTextFor(m => m.HideThumbsUnderResolution)
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.HideThumbsOnMobile, new { data_bind = "checked: blockModel.hideThumbsOnMobile" }) @T(LocalizableStrings.RevolutionSliderBlock.HideThumbsOnMobile)
                            </label>
                            @Html.HelpTextFor(m => m.HideThumbsOnMobile)
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.HideBulletsOnMobile, new { data_bind = "checked: blockModel.hideBulletsOnMobile" }) @T(LocalizableStrings.RevolutionSliderBlock.HideBulletsOnMobile)
                            </label>
                            @Html.HelpTextFor(m => m.HideBulletsOnMobile)
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.HideArrowsOnMobile, new { data_bind = "checked: blockModel.hideArrowsOnMobile" }) @T(LocalizableStrings.RevolutionSliderBlock.HideArrowsOnMobile)
                            </label>
                            @Html.HelpTextFor(m => m.HideArrowsOnMobile)
                        </div>
                    </div>
                </div>
            </div> 
        }

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.Spinner, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.Spinner, new { @class = "form-control", data_bind = "value: blockModel.spinner" })
                        @Html.HelpTextFor(m => m.Spinner)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.MinHeight, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.MinHeight, new { @class = "form-control", data_bind = "value: blockModel.minHeight" })
                        @Html.HelpTextFor(m => m.MinHeight)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.FullScreenOffsetContainer, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.FullScreenOffsetContainer, new { @class = "form-control", data_bind = "value: blockModel.fullScreenOffsetContainer" })
                        @Html.HelpTextFor(m => m.FullScreenOffsetContainer)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.FullScreenOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.FullScreenOffset, new { @class = "form-control", data_bind = "value: blockModel.fullScreenOffset" })
                        @Html.HelpTextFor(m => m.FullScreenOffset)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.FullScreenOffsetUnit, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.FullScreenOffsetUnit, new { @class = "form-control", data_bind = "value: blockModel.fullScreenOffsetUnit" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.Shadow, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.Shadow, new { @class = "form-control", data_bind = "value: blockModel.shadow" })
                        @Html.HelpTextFor(m => m.Shadow)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.DottedOverlay, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.DottedOverlay, new { @class = "form-control", data_bind = "value: blockModel.dottedOverlay" })
                        @Html.HelpTextFor(m => m.DottedOverlay)
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.HideTimerBar, new { data_bind = "checked: blockModel.hideTimerBar" }) @T(LocalizableStrings.RevolutionSliderBlock.HideTimerBar)
                            </label>
                            @Html.HelpTextFor(m => m.HideTimerBar)
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.FullWidth, new { data_bind = "checked: blockModel.fullWidth" }) @T(LocalizableStrings.RevolutionSliderBlock.FullWidth)
                            </label>
                            @Html.HelpTextFor(m => m.FullWidth)
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.AutoHeight, new { data_bind = "checked: blockModel.autoHeight" }) @T(LocalizableStrings.RevolutionSliderBlock.AutoHeight)
                            </label>
                            @Html.HelpTextFor(m => m.AutoHeight)
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.FullScreenAlignForce, new { data_bind = "checked: blockModel.fullScreenAlignForce" }) @T(LocalizableStrings.RevolutionSliderBlock.FullScreenAlignForce)
                            </label>
                            @Html.HelpTextFor(m => m.FullScreenAlignForce)
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ForceFullWidth, new { data_bind = "checked: blockModel.forceFullWidth" }) @T(LocalizableStrings.RevolutionSliderBlock.ForceFullWidth)
                            </label>
                            @Html.HelpTextFor(m => m.ForceFullWidth)
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.FullScreen, new { data_bind = "checked: blockModel.fullScreen" }) @T(LocalizableStrings.RevolutionSliderBlock.FullScreen)
                            </label>
                            @Html.HelpTextFor(m => m.FullScreen)
                        </div>
                    </div>
                </div>
            </div> 
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.Parallax, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.Parallax, new { @class = "form-control", data_bind = "value: blockModel.parallax" })
                        @Html.HelpTextFor(m => m.Parallax)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ParallaxLevels, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ParallaxLevels, new { @class = "form-control", data_bind = "value: blockModel.parallaxLevels" })
                        @Html.HelpTextFor(m => m.ParallaxLevels)
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ParallaxBgFreeze, new { data_bind = "checked: blockModel.parallaxBgFreeze" }) @T(LocalizableStrings.RevolutionSliderBlock.ParallaxBgFreeze)
                            </label>
                            @Html.HelpTextFor(m => m.ParallaxBgFreeze)
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ParallaxDisableOnMobile, new { data_bind = "checked: blockModel.parallaxDisableOnMobile" }) @T(LocalizableStrings.RevolutionSliderBlock.ParallaxDisableOnMobile)
                            </label>
                            @Html.HelpTextFor(m => m.ParallaxDisableOnMobile)
                        </div>
                    </div>
                </div>
            </div>
        }

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.PanZoomDisableOnMobile, new { data_bind = "checked: blockModel.panZoomDisableOnMobile" }) @T(LocalizableStrings.RevolutionSliderBlock.PanZoomDisableOnMobile)
                            </label>
                            @Html.HelpTextFor(m => m.PanZoomDisableOnMobile)
                        </div>
                    </div>
                </div>
            </div>
        }

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.SimplifyAll, new { data_bind = "checked: blockModel.simplifyAll" }) @T(LocalizableStrings.RevolutionSliderBlock.SimplifyAll)
                            </label>
                            @Html.HelpTextFor(m => m.SimplifyAll)
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

<script type="text/javascript">
    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function (blockModel) {
            blockModel.sliderId = ko.observable(0);
            blockModel.controlId = ko.observable("revolution-slider");
            blockModel.delay = ko.observable(9000);
            blockModel.startHeight = ko.observable(500);
            blockModel.startWidth = ko.observable(960);
            blockModel.shuffle = ko.observable(false);
            blockModel.keyboardNavigation = ko.observable(true);
            blockModel.onHoverStop = ko.observable(true);
            blockModel.thumbWidth = ko.observable(100);
            blockModel.thumbHeight = ko.observable(50);
            blockModel.thumbAmount = ko.observable(3);
            blockModel.hideThumbs = ko.observable(0);
            blockModel.navigationType = ko.observable(1); // Bullet
            blockModel.navigationArrows = ko.observable(1); // Solo
            blockModel.navigationStyle = ko.observable(4); // Round
            blockModel.navigationHAlign = ko.observable(1); // Center
            blockModel.navigationVAlign = ko.observable(2); // Bottom
            blockModel.navigationHOffset = ko.observable(30);
            blockModel.navigationVOffset = ko.observable(30);
            blockModel.soloArrowLeftHAlign = ko.observable(0); // Left
            blockModel.soloArrowRightHAlign = ko.observable(2); // Right
            blockModel.soloArrowLeftVAlign = ko.observable(1); // Center
            blockModel.soloArrowRightVAlign = ko.observable(1); // Center
            blockModel.soloArrowLeftHOffset = ko.observable(20);
            blockModel.soloArrowRightHOffset = ko.observable(20);
            blockModel.soloArrowLeftVOffset = ko.observable(0);
            blockModel.soloArrowRightVOffset = ko.observable(0);
            blockModel.touchEnabled = ko.observable(true);
            blockModel.swipeVelocity = ko.observable(0.7);
            blockModel.swipeMaxTouches = ko.observable(1);
            blockModel.swipeMinTouches = ko.observable(1);
            blockModel.dragBlockVertical = ko.observable(false);
            blockModel.startWithSlide = ko.observable(0);
            blockModel.stopAtSlide = ko.observable(-1);
            blockModel.stopAfterLoops = ko.observable(-1);
            blockModel.hideCaptionAtLimit = ko.observable(0);
            blockModel.hideAllCaptionAtLimit = ko.observable(0);
            blockModel.hideSliderAtLimit = ko.observable(0);
            blockModel.hideNavDelayOnMobile = ko.observable(1500);
            blockModel.hideThumbsOnMobile = ko.observable(false);
            blockModel.hideBulletsOnMobile = ko.observable(false);
            blockModel.hideArrowsOnMobile = ko.observable(false);
            blockModel.hideThumbsUnderResolution = ko.observable(0);
            blockModel.spinner = ko.observable(3); // Spinner4
            blockModel.hideTimerBar = ko.observable(false);
            blockModel.fullWidth = ko.observable(false);
            blockModel.autoHeight = ko.observable(false);
            blockModel.minHeight = ko.observable(false);
            blockModel.fullScreenAlignForce = ko.observable(false);
            blockModel.forceFullWidth = ko.observable(false);
            blockModel.fullScreen = ko.observable(false);
            blockModel.fullScreenOffsetContainer = ko.observable(null);
            blockModel.fullScreenOffset = ko.observable(0);
            blockModel.fullScreenOffsetUnit = ko.observable(0); // Pixels
            blockModel.shadow = ko.observable(0);
            blockModel.dottedOverlay = ko.observable(0); // None
            blockModel.parallax = ko.observable(0); // Mouse
            blockModel.parallaxBgFreeze = ko.observable(true);
            blockModel.parallaxLevels = ko.observable("10,7,4,3,2,5,4,3,2,1");
            blockModel.parallaxDisableOnMobile = ko.observable(false);
            blockModel.panZoomDisableOnMobile = ko.observable(false);
            blockModel.simplifyAll = ko.observable(false);

            var data = ko.mapping.fromJSON(blockModel.blockValues());

            if ((isFunction(data) && data()) || data) {
                if (data.SliderId == undefined) {
                    // If this is not set, it means the contentBlock is new and we have nothing in blockValues
                    return;
                }
                blockModel.sliderId(data.SliderId());
                blockModel.controlId(data.ControlId());
                blockModel.delay(data.Delay());
                blockModel.startHeight(data.StartHeight());
                blockModel.startWidth(data.StartWidth());
                blockModel.shuffle(data.Shuffle());
                blockModel.keyboardNavigation(data.KeyboardNavigation());
                blockModel.onHoverStop(data.OnHoverStop());
                blockModel.thumbWidth(data.ThumbWidth());
                blockModel.thumbHeight(data.ThumbHeight());
                blockModel.thumbAmount(data.ThumbAmount());
                blockModel.hideThumbs(data.HideThumbs());
                blockModel.navigationType(data.NavigationType());
                blockModel.navigationArrows(data.NavigationArrows());
                blockModel.navigationStyle(data.NavigationStyle());
                blockModel.navigationHAlign(data.NavigationHAlign());
                blockModel.navigationVAlign(data.NavigationVAlign());
                blockModel.navigationHOffset(data.NavigationHOffset());
                blockModel.navigationVOffset(data.NavigationVOffset());
                blockModel.soloArrowLeftHAlign(data.SoloArrowLeftHAlign());
                blockModel.soloArrowRightHAlign(data.SoloArrowRightHAlign());
                blockModel.soloArrowLeftVAlign(data.SoloArrowLeftVAlign());
                blockModel.soloArrowRightVAlign(data.SoloArrowRightVAlign());
                blockModel.soloArrowLeftHOffset(data.SoloArrowLeftHOffset());
                blockModel.soloArrowRightHOffset(data.SoloArrowRightHOffset());
                blockModel.soloArrowLeftVOffset(data.SoloArrowLeftVOffset());
                blockModel.soloArrowRightVOffset(data.SoloArrowRightVOffset());
                blockModel.touchEnabled(data.TouchEnabled());
                blockModel.swipeVelocity(data.SwipeVelocity());
                blockModel.swipeMaxTouches(data.SwipeMaxTouches());
                blockModel.swipeMinTouches(data.SwipeMinTouches());
                blockModel.dragBlockVertical(data.DragBlockVertical());
                blockModel.startWithSlide(data.StartWithSlide());
                blockModel.stopAtSlide(data.StopAtSlide());
                blockModel.stopAfterLoops(data.StopAfterLoops());
                blockModel.hideCaptionAtLimit(data.HideCaptionAtLimit());
                blockModel.hideAllCaptionAtLimit(data.HideAllCaptionAtLimit());
                blockModel.hideSliderAtLimit(data.HideSliderAtLimit());
                blockModel.hideNavDelayOnMobile(data.HideNavDelayOnMobile());
                blockModel.hideThumbsOnMobile(data.HideThumbsOnMobile());
                blockModel.hideBulletsOnMobile(data.HideBulletsOnMobile());
                blockModel.hideArrowsOnMobile(data.HideArrowsOnMobile());
                blockModel.hideThumbsUnderResolution(data.HideThumbsUnderResolution());
                blockModel.spinner(data.Spinner());
                blockModel.hideTimerBar(data.HideTimerBar());
                blockModel.fullWidth(data.FullWidth());
                blockModel.autoHeight(data.AutoHeight());
                blockModel.minHeight(data.MinHeight());
                blockModel.fullScreenAlignForce(data.FullScreenAlignForce());
                blockModel.forceFullWidth(data.ForceFullWidth());
                blockModel.fullScreen(data.FullScreen());
                blockModel.fullScreenOffsetContainer(data.FullScreenOffsetContainer());
                blockModel.fullScreenOffset(data.FullScreenOffset());
                blockModel.fullScreenOffsetUnit(data.FullScreenOffsetUnit());
                blockModel.shadow(data.Shadow());
                blockModel.dottedOverlay(data.DottedOverlay());
                blockModel.parallax(data.Parallax());
                blockModel.parallaxBgFreeze(data.ParallaxBgFreeze());
                blockModel.parallaxLevels(data.ParallaxLevels());
                blockModel.parallaxDisableOnMobile(data.ParallaxDisableOnMobile());
                blockModel.panZoomDisableOnMobile(data.PanZoomDisableOnMobile());
                blockModel.simplifyAll(data.SimplifyAll());
            }
        };
        f.cleanUp = function (blockModel) {
            delete blockModel.sliderId;
            delete blockModel.controlId;
            delete blockModel.delay;
            delete blockModel.startHeight;
            delete blockModel.startWidth;
            delete blockModel.shuffle;
            delete blockModel.keyboardNavigation;
            delete blockModel.onHoverStop;
            delete blockModel.thumbWidth;
            delete blockModel.thumbHeight;
            delete blockModel.thumbAmount;
            delete blockModel.hideThumbs;
            delete blockModel.navigationType;
            delete blockModel.navigationArrows;
            delete blockModel.navigationStyle;
            delete blockModel.navigationHAlign;
            delete blockModel.navigationVAlign;
            delete blockModel.navigationHOffset;
            delete blockModel.navigationVOffset;
            delete blockModel.soloArrowLeftHAlign;
            delete blockModel.soloArrowRightHAlign;
            delete blockModel.soloArrowLeftVAlign;
            delete blockModel.soloArrowRightVAlign;
            delete blockModel.soloArrowLeftHOffset;
            delete blockModel.soloArrowRightHOffset;
            delete blockModel.soloArrowLeftVOffset;
            delete blockModel.soloArrowRightVOffset;
            delete blockModel.touchEnabled;
            delete blockModel.swipeVelocity;
            delete blockModel.swipeMaxTouches;
            delete blockModel.swipeMinTouches;
            delete blockModel.dragBlockVertical;
            delete blockModel.startWithSlide;
            delete blockModel.stopAtSlide;
            delete blockModel.stopAfterLoops;
            delete blockModel.hideCaptionAtLimit;
            delete blockModel.hideAllCaptionAtLimit;
            delete blockModel.hideSliderAtLimit;
            delete blockModel.hideNavDelayOnMobile;
            delete blockModel.hideThumbsOnMobile;
            delete blockModel.hideBulletsOnMobile;
            delete blockModel.hideArrowsOnMobile;
            delete blockModel.hideThumbsUnderResolution;
            delete blockModel.spinner;
            delete blockModel.hideTimerBar;
            delete blockModel.fullWidth;
            delete blockModel.autoHeight;
            delete blockModel.minHeight;
            delete blockModel.fullScreenAlignForce;
            delete blockModel.forceFullWidth;
            delete blockModel.fullScreen;
            delete blockModel.fullScreenOffsetContainer;
            delete blockModel.fullScreenOffset;
            delete blockModel.fullScreenOffsetUnit;
            delete blockModel.shadow;
            delete blockModel.dottedOverlay;
            delete blockModel.parallax;
            delete blockModel.parallaxBgFreeze;
            delete blockModel.parallaxLevels;
            delete blockModel.parallaxDisableOnMobile;
            delete blockModel.panZoomDisableOnMobile;
            delete blockModel.simplifyAll;
        };
        f.onBeforeSave = function (blockModel) {
            var data = {
                SliderId: blockModel.sliderId(),
                ControlId: blockModel.controlId(),
                Delay: blockModel.delay(),
                StartHeight: blockModel.startHeight(),
                StartWidth: blockModel.startWidth(),
                Shuffle: blockModel.shuffle(),
                KeyboardNavigation: blockModel.keyboardNavigation(),
                OnHoverStop: blockModel.onHoverStop(),
                ThumbWidth: blockModel.thumbWidth(),
                ThumbHeight: blockModel.thumbHeight(),
                ThumbAmount: blockModel.thumbAmount(),
                HideThumbs: blockModel.hideThumbs(),
                NavigationType: blockModel.navigationType(),
                NavigationArrows: blockModel.navigationArrows(),
                NavigationStyle: blockModel.navigationStyle(),
                NavigationHAlign: blockModel.navigationHAlign(),
                NavigationVAlign: blockModel.navigationVAlign(),
                NavigationHOffset: blockModel.navigationHOffset(),
                NavigationVOffset: blockModel.navigationVOffset(),
                SoloArrowLeftHAlign: blockModel.soloArrowLeftHAlign(),
                SoloArrowRightHAlign: blockModel.soloArrowRightHAlign(),
                SoloArrowLeftVAlign: blockModel.soloArrowLeftVAlign(),
                SoloArrowRightVAlign: blockModel.soloArrowRightVAlign(),
                SoloArrowLeftHOffset: blockModel.soloArrowLeftHOffset(),
                SoloArrowRightHOffset: blockModel.soloArrowRightHOffset(),
                SoloArrowLeftVOffset: blockModel.soloArrowLeftVOffset(),
                SoloArrowRightVOffset: blockModel.soloArrowRightVOffset(),
                TouchEnabled: blockModel.touchEnabled(),
                SwipeVelocity: blockModel.swipeVelocity(),
                SwipeMaxTouches: blockModel.swipeMaxTouches(),
                SwipeMinTouches: blockModel.swipeMinTouches(),
                DragBlockVertical: blockModel.dragBlockVertical(),
                StartWithSlide: blockModel.startWithSlide(),
                StopAtSlide: blockModel.stopAtSlide(),
                StopAfterLoops: blockModel.stopAfterLoops(),
                HideCaptionAtLimit: blockModel.hideCaptionAtLimit(),
                HideAllCaptionAtLimit: blockModel.hideAllCaptionAtLimit(),
                HideSliderAtLimit: blockModel.hideSliderAtLimit(),
                HideNavDelayOnMobile: blockModel.hideNavDelayOnMobile(),
                HideThumbsOnMobile: blockModel.hideThumbsOnMobile(),
                HideBulletsOnMobile: blockModel.hideBulletsOnMobile(),
                HideArrowsOnMobile: blockModel.hideArrowsOnMobile(),
                HideThumbsUnderResolution: blockModel.hideThumbsUnderResolution(),
                Spinner: blockModel.spinner(),
                HideTimerBar: blockModel.hideTimerBar(),
                FullWidth: blockModel.fullWidth(),
                AutoHeight: blockModel.autoHeight(),
                MinHeight: blockModel.minHeight(),
                FullScreenAlignForce: blockModel.fullScreenAlignForce(),
                ForceFullWidth: blockModel.forceFullWidth(),
                FullScreen: blockModel.fullScreen(),
                FullScreenOffsetContainer: blockModel.fullScreenOffsetContainer(),
                FullScreenOffset: blockModel.fullScreenOffset(),
                FullScreenOffsetUnit: blockModel.fullScreenOffsetUnit(),
                Shadow: blockModel.shadow(),
                DottedOverlay: blockModel.dottedOverlay(),
                Parallax: blockModel.parallax(),
                ParallaxBgFreeze: blockModel.parallaxBgFreeze(),
                ParallaxLevels: blockModel.parallaxLevels(),
                ParallaxDisableOnMobile: blockModel.parallaxDisableOnMobile(),
                PanZoomDisableOnMobile: blockModel.panZoomDisableOnMobile(),
                SimplifyAll: blockModel.simplifyAll()
            };
            blockModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>
