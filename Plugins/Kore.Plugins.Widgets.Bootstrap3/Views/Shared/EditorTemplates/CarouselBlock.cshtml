@using Kore.Web.ContentManagement

@model Kore.Plugins.Widgets.Bootstrap3.ContentBlocks.Bootstrap3CarouselBlock

<div id="block-content">
    <div class="col-sm-12 col-md-12">
        <div class="form-group">
            @Html.LabelFor(m => m.MediaFolder, new { @class = "control-label" })
            @Html.KoreCMS().MediaFoldersDropDownListFor(m => m.MediaFolder, new { @class = "form-control", data_bind = "value: mediaFolder" })
        </div>
    </div>
    <div class="col-sm-6 col-md-6">
        <div class="form-group">
            @Html.LabelFor(m => m.Interval, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Interval, new { @class = "form-control", data_bind = "value: interval" })
        </div>
    </div>
    <div class="col-sm-6 col-md-6">
        <div class="form-group">
            @Html.LabelFor(m => m.StartIndex, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.StartIndex, new { @class = "form-control", data_bind = "value: startIndex" })
        </div>
    </div>
    <div class="col-sm-4 col-md-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("Keyboard", new { data_bind = "checked: keyboard" }) React to Keyboard Events
            </label>
        </div>
    </div>
    <div class="col-sm-4 col-md-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("PauseOnHover", new { data_bind = "checked: pauseOnHover" }) Pause on Hover
            </label>
        </div>
    </div>
    <div class="col-sm-4 col-md-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("Wrap", new { data_bind = "checked: wrap" }) Cycle Continuously
            </label>
        </div>
    </div>
    <div class="col-sm-6 col-md-6">
        <div class="form-group">
            @Html.LabelFor(m => m.OnSlideEvent, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.OnSlideEvent, new { @class = "form-control", data_bind = "value: onSlideEvent" })
        </div>
    </div>
    <div class="col-sm-6 col-md-6">
        <div class="form-group">
            @Html.LabelFor(m => m.OnSlidEvent, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.OnSlidEvent, new { @class = "form-control", data_bind = "value: onSlidEvent" })
        </div>
    </div>
</div>

<script type="text/javascript">
    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function () {
            viewModel.mediaFolder = ko.observable("");
            viewModel.interval = ko.observable(0);
            viewModel.startIndex = ko.observable(0);
            viewModel.keyboard = ko.observable(true);
            viewModel.pauseOnHover = ko.observable(true);
            viewModel.wrap = ko.observable(true);
            viewModel.onSlideEvent = ko.observable("");
            viewModel.onSlidEvent = ko.observable("");

            var data = ko.mapping.fromJSON(viewModel.blockValues());

            if ((isFunction(data) && data()) || data) {
                if (data.MediaFolder == undefined) {
                    // If this is not set, it means the contentBlock is new and we have nothing in blockValues
                    return;
                }
                viewModel.mediaFolder(data.MediaFolder());
                viewModel.interval(data.Interval());
                viewModel.startIndex(data.StartIndex());
                viewModel.keyboard(data.Keyboard());
                viewModel.pauseOnHover(data.PauseOnHover());
                viewModel.wrap(data.Wrap());
                viewModel.onSlideEvent(data.OnSlideEvent());
                viewModel.onSlidEvent(data.OnSlidEvent());
            }
        };
        f.cleanUp = function () {
            delete viewModel.mediaFolder;
            delete viewModel.interval;
            delete viewModel.startIndex;
            delete viewModel.keyboard;
            delete viewModel.pauseOnHover;
            delete viewModel.wrap;
            delete viewModel.onSlideEvent;
            delete viewModel.onSlidEvent;
        };
        f.onBeforeSave = function () {
            var data = {
                MediaFolder: viewModel.mediaFolder(),
                Interval: viewModel.interval(),
                StartIndex: viewModel.startIndex(),
                Keyboard: viewModel.keyboard(),
                PauseOnHover: viewModel.pauseOnHover(),
                Wrap: viewModel.wrap(),
                OnSlideEvent: viewModel.onSlideEvent(),
                OnSlidEvent: viewModel.onSlidEvent()
            };

            viewModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>