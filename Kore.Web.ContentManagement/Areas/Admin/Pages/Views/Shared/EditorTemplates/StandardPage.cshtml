@model Kore.Web.ContentManagement.Areas.Admin.Pages.StandardPage

<div id="fields-content">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="form-group">
            @Html.Label("MetaKeywords", T(KoreCmsLocalizableStrings.Pages.PageTypes.StandardPage.MetaKeywords), new { @class = "control-label" })
            @Html.TextBox("MetaKeywords", null, new { @class = "form-control", data_bind = "value: pageVersion.metaKeywords" })
        </div>
    </div>
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="form-group">
            @Html.Label("MetaDescription", T(KoreCmsLocalizableStrings.Pages.PageTypes.StandardPage.MetaDescription), new { @class = "control-label" })
            @Html.TextBox("MetaDescription", null, new { @class = "form-control", data_bind = "value: pageVersion.metaDescription" })
        </div>
    </div>
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="form-group">
            @Html.Label("BodyContent", T(KoreCmsLocalizableStrings.Pages.PageTypes.StandardPage.BodyContent), new { @class = "control-label" })
            @Html.TextArea("BodyContent", null, new { @class = "form-control", data_bind = "wysiwyg: pageVersion.bodyContent, wysiwygConfig: pageVersion.tinyMCE_bodyContent" })
        </div>
    </div>
</div>

<script type="text/javascript">
    var pageModel = (function () {
        var f = {};
        f.updateModel = function () {
            viewModel.pageVersion.metaKeywords = ko.observable("");
            viewModel.pageVersion.metaDescription = ko.observable("");
            viewModel.pageVersion.bodyContent = ko.observable("");

            var data = ko.mapping.fromJSON(viewModel.pageVersion.fields());

            if (data) {
                if (data.MetaKeywords) {
                    viewModel.pageVersion.metaKeywords(data.MetaKeywords());
                }
                if (data.MetaDescription) {
                    viewModel.pageVersion.metaDescription(data.MetaDescription());
                }
                if (data.BodyContent) {
                    viewModel.pageVersion.bodyContent(data.BodyContent());
                }
            }

            viewModel.pageVersion.tinyMCE_bodyContent = koreDefaultTinyMCEConfig;
        };
        f.cleanUp = function () {
            delete viewModel.pageVersion.metaKeywords;
            delete viewModel.pageVersion.metaDescription;
            delete viewModel.pageVersion.bodyContent;
            delete viewModel.pageVersion.tinyMCE_bodyContent;
        };
        f.onBeforeSave = function () {
            var data = {
                MetaKeywords: viewModel.pageVersion.metaKeywords(),
                MetaDescription: viewModel.pageVersion.metaDescription(),
                BodyContent: viewModel.pageVersion.bodyContent()
            };
            viewModel.pageVersion.fields(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>