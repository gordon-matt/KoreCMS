<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PhpNetXml</name>
    </assembly>
    <members>
        <member name="T:PHP.Library.Xml.XmlLocalConfig">
            <summary>
            Script independent Zlib configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XmlLocalConfig.DeepCopy">
            <summary>
            Creates a deep copy of the configuration record.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlLocalConfig.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.XmlGlobalConfig">
            <summary>
            Script dependent MSSQL configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XmlGlobalConfig.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlGlobalConfig.DeepCopy">
            <summary>
            Creates a deep copy of the configuration record.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="T:PHP.Library.Xml.XmlConfiguration">
            <summary>
            Zlib extension configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XmlConfiguration.GetSetRestore(PHP.Core.LocalConfiguration,System.String,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets, or restores a value of a legacy configuration option.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XmlConfiguration.LegacyOptionsToXml(System.Xml.XmlTextWriter,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Writes MySql legacy options and their values to XML text stream.
            Skips options whose values are the same as default values of Phalanger.
            </summary>
            <param name="writer">XML writer.</param>
            <param name="options">A hashtable containing PHP names and option values. Consumed options are removed from the table.</param>
            <param name="writePhpNames">Whether to add "phpName" attribute to option nodes.</param>
        </member>
        <member name="M:PHP.Library.Xml.XmlConfiguration.RegisterLegacyOptions">
            <summary>
            Registers legacy ini-options.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XmlConfiguration.GetLocal(PHP.Core.ScriptContext)">
            <summary>
            Gets local configuration associated with a specified script context.
            </summary>
            <param name="context">Scritp context.</param>
            <returns>Local library configuration.</returns>
        </member>
        <member name="P:PHP.Library.Xml.XmlConfiguration.Local">
            <summary>
            Gets the library configuration associated with the current script context.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XmlConfiguration.DefaultLocal">
            <summary>
            Gets the default library configuration.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XmlConfiguration.Global">
            <summary>
            Gets the global library configuration.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.XmlLibraryDescriptor">
            <summary>
            Describes the class library assembly content and configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XmlLibraryDescriptor.Loaded(PHP.Core.PhpLibraryAttribute,PHP.Core.LibraryConfigStore)">
            <summary>
            Called by the Core after the library is loaded.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XmlLibraryDescriptor.ParseConfig(PHP.Core.ConfigContextBase,PHP.Core.PhpConfigurationContext,System.Xml.XmlNode)">
            <summary>
            Parses a configuration section belonging to the MSSQL library. 
            </summary>
            <param name="result">A configuration context.</param>
            <param name="context">The context of the configuration created by Phalanger Core.</param>
            <param name="section">A XML node containing the configuration or its part.</param>
            <returns>Updated configuration context.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlLibraryDescriptor.CreateConfigContext">
            <summary>
            Creates empty library configuration context.
            </summary>
            <returns>An initialized configuration context. Should not be a <B>null</B> reference.</returns>
        </member>
        <member name="P:PHP.Library.Xml.XmlLibraryDescriptor.Singleton">
            <summary>
            Stores one and only instance of the class that is created when the assembly is loaded.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.utf8_encode(System.Object)">
            <summary>
            This function encodes the string data to UTF-8, and returns the encoded version. UTF-8 is
            a standard mechanism used by Unicode for encoding wide character values into a byte stream.
            UTF-8 is transparent to plain ASCII characters, is self-synchronized (meaning it is 
            possible for a program to figure out where in the bytestream characters start) and can be
            used with normal string comparison functions for sorting and such. PHP encodes UTF-8
            characters in up to four bytes.
            </summary>
            <param name="data">An ISO-8859-1 string. </param>
            <returns>Returns the UTF-8 translation of data.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.utf8_decode(System.Object)">
            <summary>
            This function decodes data, assumed to be UTF-8 encoded, to ISO-8859-1.
            </summary>
            <param name="data">An ISO-8859-1 string. </param>
            <returns>Returns the UTF-8 translation of data.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.CreateNamespaceAware">
            <summary>
            Creates a new XML parser with XML namespace support and returns a resource handle referencing
            it to be used by the other XML functions. 
            </summary>
            <returns>Returns a resource handle for the new XML parser.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.CreateNamespaceAware(System.String)">
            <summary>
            Creates a new XML parser with XML namespace support and returns a resource handle referencing
            it to be used by the other XML functions. 
            </summary>
            <param name="encoding">
            The optional encoding specifies the character encoding for the input/output in PHP 4. Starting
            from PHP 5, the input encoding is automatically detected, so that the encoding parameter
            specifies only the output encoding. In PHP 4, the default output encoding is the same as the
            input charset. In PHP 5.0.0 and 5.0.1, the default output charset is ISO-8859-1, while in PHP
            5.0.2 and upper is UTF-8. The supported encodings are ISO-8859-1, UTF-8 and US-ASCII. 
            </param>
            <returns>Returns a resource handle for the new XML parser.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.CreateNamespaceAware(System.String,System.String)">
            <summary>
            Creates a new XML parser with XML namespace support and returns a resource handle referencing
            it to be used by the other XML functions. 
            </summary>
            <param name="encoding">
            The optional encoding specifies the character encoding for the input/output in PHP 4. Starting
            from PHP 5, the input encoding is automatically detected, so that the encoding parameter
            specifies only the output encoding. In PHP 4, the default output encoding is the same as the
            input charset. In PHP 5.0.0 and 5.0.1, the default output charset is ISO-8859-1, while in PHP
            5.0.2 and upper is UTF-8. The supported encodings are ISO-8859-1, UTF-8 and US-ASCII. 
            </param>
            <param name="namespaceSeparator">
            With a namespace aware parser tag parameters passed to the various handler functions will 
            consist of namespace and tag name separated by the string specified in seperator.
            </param>
            <returns>Returns a resource handle for the new XML parser.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.Create">
            <summary>
            Creates a new XML parser and returns a resource handle referencing it to be used by the other
            XML functions. 
            </summary>
            <returns>Returns a resource handle for the new XML parser.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.Create(System.String)">
            <summary>
            Creates a new XML parser and returns a resource handle referencing it to be used by the other
            XML functions. 
            </summary>
            <param name="encoding">
            The optional encoding specifies the character encoding for the input/output in PHP 4. Starting
            from PHP 5, the input encoding is automatically detected, so that the encoding parameter
            specifies only the output encoding. In PHP 4, the default output encoding is the same as the
            input charset. If empty string is passed, the parser attempts to identify which encoding the
            document is encoded in by looking at the heading 3 or 4 bytes. In PHP 5.0.0 and 5.0.1, the
            default output charset is ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8. The supported
            encodings are ISO-8859-1, UTF-8 and US-ASCII. 
            </param>
            <returns>Returns a resource handle for the new XML parser.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.Free(PHP.Core.PhpResource)">
            <summary>
            Frees the given XML parser. 
            </summary>
            <param name="parser">A reference to the XML parser to free.</param>
            <returns>
            This function returns FALSE if parser does not refer to a valid parser, or else it frees the 
            parser and returns TRUE.
            </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.Parse(PHP.Core.NamingContext,PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpResource,System.String)">
            <summary>
            Parses an XML document. The handlers for the configured events are called as many times as 
            necessary. 
            </summary>
            <param name="namingContext">Current namign context.</param>
            <param name="caller">Current caller desc.</param>
            <param name="parser">A reference to the XML parser to use.</param>
            <param name="data">
            Chunk of data to parse. A document may be parsed piece-wise by calling xml_parse() several 
            times with new data, as long as the is_final parameter is set and TRUE when the last data is 
            parsed. 
            </param>
            <returns>
            <para>Returns 1 on success or 0 on failure.</para>
            <para>
            For unsuccessful parses, error information can be retrieved with xml_get_error_code(), 
            xml_error_string(), xml_get_current_line_number(), xml_get_current_column_number() and 
            xml_get_current_byte_index(). 
            </para>
            </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.Parse(PHP.Core.NamingContext,PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpResource,System.String,System.Boolean)">
            <summary>
            Parses an XML document. The handlers for the configured events are called as many times as 
            necessary. 
            </summary>
            <param name="namingContext">Current namign context.</param>
            <param name="caller">Current caller desc.</param>
            <param name="parser">A reference to the XML parser to use.</param>
            <param name="data">
            Chunk of data to parse. A document may be parsed piece-wise by calling xml_parse() several 
            times with new data, as long as the is_final parameter is set and TRUE when the last data is 
            parsed. 
            </param>
            <param name="is_final">If set and TRUE, data is the last piece of data sent in this parse.</param>
            <returns>
            <para>Returns 1 on success or 0 on failure.</para>
            <para>
            For unsuccessful parses, error information can be retrieved with xml_get_error_code(), 
            xml_error_string(), xml_get_current_line_number(), xml_get_current_column_number() and 
            xml_get_current_byte_index(). 
            </para>
            </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.ParseIntoStruct(PHP.Core.NamingContext,PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpResource,System.String,PHP.Core.PhpReference)">
            <summary>
            This function parses an XML string into 2 parallel array structures, one (index) containing
            pointers to the location of the appropriate values in the values array. These last two 
            parameters must be passed by reference. 
            </summary>
            <param name="namingContext">Current namign context.</param>
            <param name="caller">Current caller desc.</param>
            <param name="parser">A reference to the XML parser. </param>
            <param name="data">A string containing the XML data. </param>
            <param name="values">An array containing the values of the XML data.</param>
            <returns>
            Returns 0 for failure and 1 for success. This is not the same as FALSE and TRUE, be careful
            with operators such as ===.
            </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.ParseIntoStruct(PHP.Core.NamingContext,PHP.Core.Reflection.DTypeDesc,PHP.Core.PhpResource,System.String,PHP.Core.PhpReference,PHP.Core.PhpReference)">
            <summary>
            This function parses an XML string into 2 parallel array structures, one (index) containing
            pointers to the location of the appropriate values in the values array. These last two 
            parameters must be passed by reference. 
            </summary>
            <param name="namingContext">Current namign context.</param>
            <param name="caller">Current caller desc.</param>
            <param name="parser">A reference to the XML parser. </param>
            <param name="data">A string containing the XML data. </param>
            <param name="values">An array containing the values of the XML data.</param>
            <param name="index">
            An array containing pointers to the location of the appropriate values in the $values.
            </param>
            <returns>
            Returns 0 for failure and 1 for success. This is not the same as FALSE and TRUE, be careful
            with operators such as ===.
            </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.SetOption(PHP.Core.PhpResource,System.Int32,System.Object)">
            <summary>
            Sets an option in an XML parser. 
            </summary>
            <param name="parser">A reference to the XML parser to set an option in. </param>
            <param name="option">
            One of the following options: XML_OPTION_CASE_FOLDING, XML_OPTION_SKIP_TAGSTART,
            XML_OPTION_SKIP_WHITE, XML_OPTION_TARGET_ENCODING.
            </param>
            <param name="value">The option's new value. </param>
            <returns>
            This function returns FALSE if parser does not refer to a valid parser, or if the option could
            not be set. Else the option is set and TRUE is returned.
            </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.GetOption(PHP.Core.PhpResource,System.Int32)">
            <summary>
            Gets an option value from an XML parser. 
            </summary>
            <param name="parser">A reference to the XML parser to get an option from. </param>
            <param name="option">
            Which option to fetch. XML_OPTION_CASE_FOLDING and XML_OPTION_TARGET_ENCODING are available.
            </param>
            <returns>
            This function returns FALSE if parser does not refer to a valid parser or if option isn't valid
            (generates also a E_WARNING). Else the option's value is returned. 
            </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.ErrorString(System.Int32)">
            <summary>
            Gets the XML parser error string associated with the given code.
            </summary>
            <param name="code">An error code from xml_get_error_code().</param>
            <returns>
            Returns a string with a textual description of the error code, or FALSE if no description 
            was found.
            </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.GetErrorCode(PHP.Core.PhpResource)">
            <summary>
            Gets the XML parser error code. 
            </summary>
            <param name="parser">A reference to the XML parser to get error code from.</param>
            <returns>
            This function returns FALSE if parser does not refer to a valid parser, or else it returns 
            one of the error codes.
            </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.GetCurrentByteIndex(PHP.Core.PhpResource)">
            <summary>
            Gets the current byte index of the given XML parser. 
            </summary>
            <param name="parser">A reference to the XML parser to get byte index from.</param>
            <returns>
            This function returns FALSE if parser does not refer to a valid parser, or else it returns 
            which byte index the parser is currently at in its data buffer (starting at 0). 
            </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.GetCurrentColumnNumber(PHP.Core.PhpResource)">
            <summary>
            Gets the current column number of the given XML parser. 
            </summary>
            <param name="parser">A reference to the XML parser to get column number from. </param>
            <returns>
            This function returns FALSE if parser does not refer to a valid parser, or else it returns 
            which column on the current line (as given by xml_get_current_line_number()) the parser is 
            currently at. 
            </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.GetCurrentLineNumber(PHP.Core.PhpResource)">
            <summary>
            Gets the current line number for the given XML parser. 
            </summary>
            <param name="parser">A reference to the XML parser to get line number from.</param>
            <returns>
            This function returns FALSE if parser does not refer to a valid parser, or else it returns 
            which line the parser is currently at in its data buffer. 
            </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.SetObject(PHP.Core.PhpResource,PHP.Core.PhpReference)">
            <summary>
            This function allows to use parser inside object. All callback functions could be set with 
            xml_set_element_handler() etc and assumed to be methods of object. 
            </summary>
            <param name="parser">A reference to the XML parser to use inside the object. </param>
            <param name="objRef">The object where to use the XML parser.</param>
            <returns>Returns TRUE on success or FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.SetDefaultHandler(PHP.Core.PhpResource,System.Object)">
            <summary>
            Sets the default handler function for the XML parser parser.
            </summary>
            <param name="parser">
            A reference to the XML parser to set up default handler function. 
            </param>
            <param name="default_handler_obj">
            String (or array) containing the name of a function that must exist when xml_parse() is 
            called for parser. 
            </param>
            <returns>Returns TRUE on success or FALSE on failure.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.SetUnparsedEntityDeclHandler(PHP.Core.PhpResource,System.Object)">
            <summary>
            Sets the unparsed entity declaration handler function for the XML parser parser. 
            </summary>
            <param name="parser">
            A reference to the XML parser to set up unparsed entity declaration handler function. 
            </param>
            <param name="unparsed_entity_decl_handler_obj">
            String (or array) containing the name of a function that must exist when xml_parse() is 
            called for parser. 
            </param>
            <returns>Returns TRUE on success or FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.SetElementHandler(PHP.Core.PhpResource,System.Object,System.Object)">
            <summary>
            Sets the element handler functions for the XML parser. start_element_handler and 
            end_element_handler are strings containing the names of functions that must exist 
            when xml_parse() is called for parser.  
            </summary>
            <param name="parser">
            A reference to the XML parser to set up start and end element handler functions. 
            </param>
            <param name="start_element_handler_obj">
            String (or array) containing the name of a function that must exist when xml_parse() is 
            called for parser. 
            </param>
            <param name="end_element_handler_obj">
            String (or array) containing the name of a function that must exist when xml_parse() is 
            called for parser. 
            </param>        
            <returns>Returns TRUE on success or FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.SetCharacterDataHandler(PHP.Core.PhpResource,System.Object)">
            <summary>
            Sets the character data handler function for the XML parser parser.  
            </summary>
            <param name="parser">
            A reference to the XML parser to set up character data handler function.
            </param>
            <param name="character_data_handler_obj">
            String (or array) containing the name of a function that must exist when xml_parse() is 
            called for parser. 
            </param>
            <returns>Returns TRUE on success or FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.SetStartNamespaceDeclHandler(PHP.Core.PhpResource,System.Object)">
            <summary>
            Set a handler to be called when a namespace is declared. Namespace declarations occur 
            inside start tags. But the namespace declaration start handler is called before the start 
            tag handler for each namespace declared in that start tag.  
            </summary>
            <param name="parser">
            A reference to the XML parser. 
            </param>
            <param name="start_namespace_decl_handler_obj">
            String (or array) containing the name of a function that must exist when xml_parse() is 
            called for parser. 
            </param>
            <returns>Returns TRUE on success or FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.SetEndNamespaceDeclHandler(PHP.Core.PhpResource,System.Object)">
            <summary>
            Set a handler to be called when leaving the scope of a namespace declaration. This will 
            be called, for each namespace declaration, after the handler for the end tag of the 
            element in which the namespace was declared. 
            </summary>
            <param name="parser">
            A reference to the XML parser.
            </param>
            <param name="end_namespace_decl_handler_obj">
            String (or array) containing the name of a function that must exist when xml_parse() is 
            called for parser. 
            </param>
            <returns>Returns TRUE on success or FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.SetNotationDeclHandler(PHP.Core.PhpResource,System.Object)">
            <summary>
            Sets the notation declaration handler function for the XML parser parser. 
            </summary>
            <param name="parser">
            A reference to the XML parser to set up notation declaration handler function. 
            </param>
            <param name="notation_decl_handler_obj">
            String (or array) containing the name of a function that must exist when xml_parse() is 
            called for parser. 
            </param>
            <returns>Returns TRUE on success or FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.SetProcessingInstructionHandler(PHP.Core.PhpResource,System.Object)">
            <summary>
            Sets the processing instruction (PI) handler function for the XML parser parser. 
            </summary>
            <param name="parser">
            A reference to the XML parser to set up processing instruction (PI) handler function.  
            </param>
            <param name="processing_instruction_handler_obj">
            String (or array) containing the name of a function that must exist when xml_parse() is 
            called for parser. 
            </param>
            <returns>Returns TRUE on success or FALSE on failure. </returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlParser.SetExternalEntityRefHandler(PHP.Core.PhpResource,System.Object)">
            <summary>
            Sets the external entity reference handler function for the XML parser parser.  
            </summary>
            <param name="parser">
            A reference to the XML parser to set up external entity reference handler function. 
            </param>
            <param name="external_entity_ref_handler_obj">
            String (or array) containing the name of a function that must exist when xml_parse() is 
            called for parser. 
            </param>
            <returns>Returns TRUE on success or FALSE on failure. </returns>
        </member>
        <member name="P:PHP.Library.Xml.XmlParser.ISO_8859_1_Encoding">
            <summary>
            ISO-8859-1 <see cref="T:System.Text.Encoding"/>.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Strings.invalid_xmlresource">
            <summary>
              Looks up a localized string similar to supplied resource is not a valid XML Parser resource.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Strings.not_parsed_data_left">
            <summary>
              Looks up a localized string similar to XML Parser contains not parsed data. Ensure to call &quot;xml_parse&quot; with is_final parameter set to &quot;true&quot;..
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XmlParserResource.ObjectToXmlCallback(System.Object)">
            <summary>
            Convert handler into <see cref="T:PHP.Core.PhpCallback"/> in XML-extension-manner.
            </summary>
            <param name="var"></param>
            <returns></returns>
        </member>
        <member name="P:PHP.Library.Xml.XmlParserResource.InputQueueIsEmpty">
            <summary>
            <c>True</c> iff the parser has no not-parsed data left.
            </summary>
        </member>
    </members>
</doc>
