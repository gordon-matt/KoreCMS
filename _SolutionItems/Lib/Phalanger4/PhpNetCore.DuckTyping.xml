<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PhpNetCore.DuckTyping</name>
    </assembly>
    <members>
        <member name="T:PHP.Core.DuckTyping.IDuckEnumerable`1">
            <summary>
            Use this type as a return type if you want to return 
            value enumerator from PHP type using duck typing
            </summary>
            <typeparam name="T">Enumerated elements will be casted to this type</typeparam>
        </member>
        <member name="T:PHP.Core.DuckTyping.IDuckType">
            <summary>
            Use this type as a interface of all values wrapped by duck types.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.IDuckType.OriginalObject">
            <summary>
            Gets original object this IDuckValue was created from. This allows passing of returned duck types as
            arguments for another duck type methods.
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.IDuckKeyValue`2">
            <summary>
            Represents key-value pair used by PHP duck typing
            </summary>
            <typeparam name="K">Key type</typeparam>
            <typeparam name="T">Value type</typeparam>
        </member>
        <member name="T:PHP.Core.DuckTyping.IDuckKeyedEnumerable`2">
            <summary>
            Use this type as a return type if you want to retrun
            key-value enumerator from PHP type using duck typing
            </summary>
            <typeparam name="K">Keys will be converted to this type</typeparam>
            <typeparam name="T">Values will be converted to this type</typeparam>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckKeyValue`2">
            <summary>
            Key-value implementation
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckEnumerableWrapper`1">
            <summary>
            Implements <seealso cref="T:PHP.Core.DuckTyping.IDuckEnumerable`1"/>
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckTypeBase">
            <summary>
            Common base implementation of IDuckType interface.
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckKeyedEnumerableWrapper`2">
            <summary>
            Implements <seealso cref="T:PHP.Core.DuckTyping.IDuckKeyedEnumerable`2"/>
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckModule">
            <summary>
            Describes one module which is being processed by duck type generator.
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckModule.#ctor(System.String)">
            <summary>
            Initializes DuckModule class.
            </summary>
            <param name="filename">Filename associated with the module.</param>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckModule.Filename">
            <summary>
            Gets the name of the file associated with this module.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckModule.Globals">
            <summary>
            Tells whether public global functions are present in the module.
            </summary>
            <remarks>
            Determines if the class which wraps global functions will be created. At the beginning 
            of the duck type generation this is set to false and when first global function
            declaration is found it is set to true.
            </remarks>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckModule.Types">
            <summary>
            Tells whether public global types are declared in the module.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckModule.GlobalClass">
            <summary>
            CodeDom type declaration which describes class which wraps global functions.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckModule.Classes">
            <summary>
            List of CodeDom type declarations which describes PHP class wrappers.
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckTypeGenerator">
            <summary>
            Collects information about duck types and then generates CodeDOM objects, which are used for
            the actual code.
            </summary>
            <remarks>
            The class is singleton.
            </remarks>
        </member>
        <member name="F:PHP.Core.DuckTyping.DuckTypeGenerator.moduleList">
            <summary>
            Modules which have been processed by the duck type generator.
            </summary>
        </member>
        <member name="F:PHP.Core.DuckTyping.DuckTypeGenerator.currentModule">
            <summary>
            Current module for storing type and function declarations.
            </summary>
        </member>
        <member name="F:PHP.Core.DuckTyping.DuckTypeGenerator.currentClass">
            <summary>
            Current class.
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.MakeCSharpName(System.String)">
            <summary>
            Makes a name that looks like C# name (upper case first char).
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.MakeCSharpFieldName(System.String)">
            <summary>
            Makes a name that looks like C# field name (lower case first char).
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.ProcessModule(PHP.Core.AST.GlobalCode)">
            <summary>
            Generate duck-type interface file for the specified AST.
            </summary>
            <param name="globalCode">Source AST</param>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.GenerateCodeUnits(PHP.Core.FullPath,System.String)">
            <summary>
            Generates code units that will be used for generating.
            </summary>
            <param name="targetPath"></param>
            <param name="targetNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.GenerateFactoryClass">
            <summary>
            Generates factory class which is used for creating 
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.VisitTypeDecl(PHP.Core.AST.TypeDecl)">
            <summary>
            Process class - set currentClass and process methods
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.GenerateTypeDecl(PHP.Core.PHPDocBlock,PHP.Core.AST.TypeDecl)">
            <summary>
            Generate type declaration
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.VisitFieldDeclList(PHP.Core.AST.FieldDeclList)">
            <summary>
            Add list of fields to the current class.
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.GenerateFieldCode(PHP.Core.PHPDocBlock,System.String)">
            <summary>
            Add field as a property with getter &amp; setter
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.VisitMethodDecl(PHP.Core.AST.MethodDecl)">
            <summary>
            Add method to the current class...
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.VisitFunctionDecl(PHP.Core.AST.FunctionDecl)">
            <summary>
            Add global function to the interface with global functions
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.GenerateFunctionCode(PHP.Core.PHPDocBlock,System.String)">
            <summary>
            Process function or method declaration and return corresponding CodeDom object.
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.ResolveType(System.String)">
            <summary>
            Transforms parsed type information into CLR type name.
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.ParseType(System.String[])">
            <summary>
            Parse PHP type from the comment and return CodeTypeReference.
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTypeGenerator.GenerateDuckInterfaces(System.Collections.Generic.IEnumerable{PHP.Core.AST.GlobalCode},System.String,System.String)">
            <summary>
            Generates duck type interfaces for given <paramref name="sourceAsts"/>.
            </summary>
            <param name="sourceAsts">Enumeration of <see cref="T:PHP.Core.AST.GlobalCode"/> - AST of source files containing PHP source code.</param>
            <param name="duckPath">Target path.</param>
            <param name="duckNamespace">Target namespace.</param>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckTypeGenerator.Instance">
            <summary>
            Singleton instance of the class.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.IDuckOptionalValue.IsValid">
            <summary>
            Gets a logical value indicating whether value represented by this object is valid.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.IDuckOptionalValue.Value">
            <summary>
            Gets an value represented by this object.
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.IDuckOptionalValue`1">
            <summary>
            Represents an generic optional value used in IDuckMultitype interface.
            </summary>
            <typeparam name="T">Type argument.</typeparam>
        </member>
        <member name="P:PHP.Core.DuckTyping.IDuckOptionalValue`1.IsValid">
            <summary>
            Gets a logical value indicating whether value represented by this object is valid.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.IDuckOptionalValue`1.Value">
            <summary>
            Gets an value represented by this object.
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.IDuckMultitype">
            <summary>
            
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.IDuckMultitype`2">
            <summary>
            Use this type as a return or input type if you want the function
            to return two different types of values. The values are represented
            by IDuckOptionalValue objects and should be specified by duck-typing
            compliant type.
            </summary>
            <typeparam name="T">Specifies a type of first optional value.</typeparam>
            <typeparam name="U">Specifies a type of second optional value.</typeparam>
        </member>
        <member name="P:PHP.Core.DuckTyping.IDuckMultitype`2.First">
            <summary>
            First optional value of the multitype.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.IDuckMultitype`2.Second">
            <summary>
            Second optional value of the multitype.
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.IDuckMultitype`3">
            <summary>
            Use this type as a return or input type if you want the function
            to return three different types of values. The values are represented
            by IDuckOptionalValue objects and should be specified by duck-typing
            compliant type.
            </summary>
            <typeparam name="T">Specifies a type of first optional value.</typeparam>
            <typeparam name="U">Specifies a type of second optional value.</typeparam>
            <typeparam name="V">Specifies a type of third optional value.</typeparam>
        </member>
        <member name="P:PHP.Core.DuckTyping.IDuckMultitype`3.First">
            <summary>
            First optional value of the multitype.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.IDuckMultitype`3.Second">
            <summary>
            Second optional value of the multitype.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.IDuckMultitype`3.Third">
            <summary>
            Third optional value of the multitype.
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckOptionalValue`1">
            <summary>
            Implementation of IDuckOptionalValue interface.
            </summary>
            <typeparam name="T">Type argument.</typeparam>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckOptionalValue`1.#ctor">
            <summary>
            Initializes an invalid instance of duck optional value. This means that the value
            contained is not meant to be read.
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckOptionalValue`1.#ctor(`0)">
            <summary>
            Initializes an valid instance of duck optional value. This means that the value
            contained can be read.
            </summary>
            <param name="value">Value of the object.</param>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckOptionalValue`1.Value">
            <summary>
            Gets an value represented by this object.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckOptionalValue`1.IsValid">
            <summary>
            Gets a logical value indicating whether value represented by this object is valid.
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckMultitype">
            <summary>
            Common implementation of IDuckMultitype interface.
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckMultitype`2">
            <summary>
            Implementation of IDuckMultitype interface.
            </summary>
            <typeparam name="T">Specifies a type of first optional value.</typeparam>
            <typeparam name="U">Specifies a type of second optional value.</typeparam>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckMultitype`2.#ctor(System.Object,System.Object)">
            <summary>
            Initializes an instance of DuckMultitype class implementing two-value IDuckMultitype interface.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckMultitype`2.First">
            <summary>
            First optional value of the multitype.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckMultitype`2.Second">
            <summary>
            Second optional value of the multitype.
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckMultitype`3">
            <summary>
            Implementation of IDuckMultitype interface.
            </summary>
            <typeparam name="T">Specifies a type of first optional value.</typeparam>
            <typeparam name="U">Specifies a type of second optional value.</typeparam>
            <typeparam name="V">Specifies a type of third optional value.</typeparam>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckMultitype`3.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes an instance of DuckMultitype class implementing three-value IDuckMultitype interface.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="third"></param>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckMultitype`3.First">
            <summary>
            First optional value of the multitype.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckMultitype`3.Second">
            <summary>
            Second optional value of the multitype.
            </summary>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckMultitype`3.Third">
            <summary>
            Third optional value of the multitype.
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckTypeAttribute">
            <summary>
            This attribute marks interface that is used with duck typing.
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckNameAttribute">
            <summary>
            Use this attribute when you want to use different name of property or method.
            </summary>
            <example>
            The following example demonstrates how to rename function from "php_name" to "PhpName":
            <code>
            [DuckType] 
            interface IDemo {
              [DuckName("php_name")]
              void PhpName();
            }
            </code>
            </example>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckTyping">
            <summary>
            Class that contains duck typing implementation
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTyping.#ctor">
            <summary>
            Singleton - initialize instance
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTyping.ImplementGlobalDuckType``1">
            <summary>
            Implements duck typed wrapper using interface <typeparamref name="T"/> 
            for global functions in the currently loaded PHP source and returns wrapped object.
            </summary>
            <typeparam name="T">Interface that must be marked using <seealso cref="T:PHP.Core.DuckTyping.DuckTypeAttribute"/> attribute
            and the attribute must be GlobalFunctions = true.</typeparam>
            <returns>Wrapped object</returns>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTyping.ImplementDuckType``1(System.Object)">
            <summary>
            Implements duck typed wrapper using interface <typeparamref name="T"/> 
            for the object <paramref name="o"/> and returns wrapped object.
            </summary>
            <typeparam name="T">Interface that must be marked using <seealso cref="T:PHP.Core.DuckTyping.DuckTypeAttribute"/> attribute</typeparam>
            <param name="o">Object to be wrapped</param>
            <returns>Wrapped object</returns>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTyping.EmitAll(System.Type,System.Type@,System.String@,System.Boolean)">
            <summary>
            Emit duck type implementation
            </summary>
            <param name="origType">Interface type</param>
            <param name="type">Emitted interface implementation</param>
            <param name="typeName">Generated type name</param>
            <param name="global">Is global.</param>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTyping.CreateConstructor(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo)">
            <summary> Creates constructor </summary>
            <remarks><code>
            class A : IDuck {
              public A(object o) { _obj = o; }
            }
            </code></remarks>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTyping.CreateEmptyConstructor(System.Reflection.Emit.TypeBuilder)">
            <summary> Creates empty constructor </summary>
            <remarks><code>
            class A : IDuck {
              public A() { }
            }
            </code></remarks>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTyping.CreateField(System.Reflection.Emit.TypeBuilder)">
            <summary> Creates field to store object </summary>
            <remarks><code>
            class A : IDuck {
              object _obj; 
            }
            </code></remarks>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTyping.ImplementProperty(System.Reflection.Emit.TypeBuilder,System.Reflection.PropertyInfo,System.Reflection.FieldInfo)">
            <summary> Implements property </summary>
            <remarks><code>
            class A : IDuck {
              /*type*/ Prop { 
                get {
            			Operators.GetProperty(this._obj, "Foo", null, false);
            			return /* .. type conversion .. */
                }
                set {
            			Operators.SetProperty(
            				new PhpReference(PhpVariable.Copy(ClrObject.WrapDynamic(argument#i), CopyReason.PassedByCopy)),
            				ref this._obj, "Foo", null, ScriptContext.Current);
            		}
              } 
            }
            </code></remarks>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTyping.ImplementMethod(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo,System.Reflection.FieldInfo,System.Boolean)">
            <summary> Implements method </summary>
            <remarks><code>
            class A : IDuck {
              /*type*/ Func(/*arguments*/) {
                sc = ScriptContext.Current;
            		// temporary array is created only when arguments.Length > 8 (otherwise AddFrame overload exists)
            		object[] tmp = new object[arguments.Length];  
            		tmp[#i] = new PhpReference(PhpVariable.Copy(ClrObject.WrapDynamic(argument#i), CopyReason.PassedByCopy));
            		sc.Stack.AddFrame(tmp);
            		return /* .. type conversion .. */
              }
            }
            </code></remarks>
        </member>
        <member name="M:PHP.Core.DuckTyping.DuckTyping.EmitReturn(PHP.Core.Emit.ILEmitter,System.Type,System.Boolean)">
            <summary> Emit PHP to CLR conversion </summary>
            <remarks>If the return type is interface marked using <seealso cref="T:PHP.Core.DuckTyping.DuckTypeAttribute"/>
            it is wrapped again.
            <code>
            // type is IDuckEnumerable&lt;T&gt;
            return new DuckEnumerableWrapper&lt;T&gt;(obj.GetForeachEnumerator(false, false, null))
            
            // type is IDuckKeyedEnumerable&lt;T&gt;
            return new DuckKeyedEnumerableWrapper&lt;T&gt;(obj.GetForeachEnumerator(true, false, null))
            
            // type is marked using [DuckType]
            return DuckTyping.Instance.ImplementDuckType&lt;T&gt;(obj);
            
            // otherwise uses standard ConvertToClr conversion method
            </code>
            </remarks>
        </member>
        <member name="P:PHP.Core.DuckTyping.DuckTyping.Instance">
            <summary>
            Singleton - returns instance of the object
            </summary>
        </member>
        <member name="T:PHP.Core.DuckTyping.DuckTyping.TypeTuple">
            <summary>
            Represents key for the type cache
            </summary>
        </member>
        <member name="M:PHP.Core.DuckTyping.ScriptContextExtension.NewObject``1(PHP.Core.ScriptContext)">
            <summary>
            To be used with DuckType(GlobalFunctions=true) only!
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PHP.Core.DuckTyping.ScriptContextExtension.NewObject``1(PHP.Core.ScriptContext,System.String,System.Object[])">
            <summary>
            Creates new object with given class name and arguments and then wraps it into
            a duck type specified in generic type arguments.
            </summary>
            <typeparam name="T">Duck type interface to be used for wrapping.</typeparam>
            <param name="context">Current context.</param>
            <param name="className">Class name which will be used for new object creation.</param>
            <param name="ctorArguments">Constructor arguments to be used.</param>
            <returns>Dynamic object wrapped into static wrapper.</returns>
        </member>
        <member name="M:PHP.Core.DuckTyping.ScriptContextExtension.NewObject``1(PHP.Core.ScriptContext,System.String,PHP.Core.NamingContext,System.Object[])">
            <summary>
            Creates new object with given class name, naming context and arguments and then wraps it into
            a duck type specified in generic type arguments.
            </summary>
            <typeparam name="T">Duck type interface to be used for wrapping.</typeparam>
            <param name="context">Current context.</param>
            <param name="className">Class name which will be used for new object creation.</param>
            <param name="namingContext">Naming context.</param>
            <param name="ctorArguments">Constructor arguments to be used.</param>
            <returns>Dynamic object wrapped into static wrapper.</returns>
        </member>
    </members>
</doc>
