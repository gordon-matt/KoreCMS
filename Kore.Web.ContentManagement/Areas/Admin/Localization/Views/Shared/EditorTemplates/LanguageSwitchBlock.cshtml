@using Kore.Web.ContentManagement.Areas.Admin.Localization

@model LanguageSwitchBlock

<div id="block-content">
    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.Style, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                @Html.EnumDropDownListFor(m => m.Style, null, new { @class = "form-control", data_bind = "value: blockModel.style" })
            </div>
        </div>
    </div>
    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m.IncludeInvariant, new { data_bind = "checked: blockModel.includeInvariant" }) @T(KoreCmsLocalizableStrings.ContentBlocks.LanguageSwitchBlock.IncludeInvariant)
                    </label>
                </div>
            </div>
        </div>
        <div class="form-group" data-bind="visible: includeInvariant() == true">
            @Html.LabelFor(m => m.InvariantText, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                @Html.TextBoxFor(m => m.InvariantText, new { @class = "form-control", data_bind = "value: blockModel.invariantText" })
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function () {
            viewModel.blockModel.style = ko.observable("");
            viewModel.blockModel.includeInvariant = ko.observable(false);
            viewModel.blockModel.invariantText = ko.observable("[ Invariant ]");

            var data = ko.mapping.fromJSON(viewModel.blockModel.blockValues());

            if (data) {
                if (data.Style) {
                    viewModel.blockModel.style(data.Style());
                }
                if (data.IncludeInvariant) {
                    viewModel.blockModel.includeInvariant(data.IncludeInvariant());
                }
                if (data.InvariantText) {
                    viewModel.blockModel.invariantText(data.InvariantText());
                }
            }
        };
        f.cleanUp = function () {
            delete viewModel.blockModel.style;
            delete viewModel.blockModel.includeInvariant;
            delete viewModel.blockModel.invariantText;
        };
        f.onBeforeSave = function () {
            var data = {
                Style: viewModel.blockModel.style(),
                IncludeInvariant: viewModel.blockModel.includeInvariant(),
                InvariantText: viewModel.blockModel.invariantText()
            };

            viewModel.blockModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>