<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PhpNetZlib</name>
    </assembly>
    <members>
        <member name="T:PHP.Library.Zlib.BinaryChunkQueue">
            <summary>
            Queue of binary chunks that can be pushed to and popped from.
            </summary>
        </member>
        <member name="F:PHP.Library.Zlib.BinaryChunkQueue._availableBytes">
            <summary>
            Available bytes within the binary chunk queue.
            </summary>
        </member>
        <member name="F:PHP.Library.Zlib.BinaryChunkQueue._chunks">
            <summary>
            List of chunks.
            </summary>
        </member>
        <member name="F:PHP.Library.Zlib.BinaryChunkQueue._position">
            <summary>
            Position within the first chunk, if possible (otherwise -1).
            </summary>
        </member>
        <member name="M:PHP.Library.Zlib.BinaryChunkQueue.Push(System.Byte[])">
            <summary>
            Pushes new chunk into the queue.
            </summary>
            <param name="chunk">Byte array.</param>
        </member>
        <member name="M:PHP.Library.Zlib.BinaryChunkQueue.EnqueueByteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pushes new chunk into the queue.
            </summary>
            <param name="chunk">Byte array.</param>
            <param name="offset">Offset of the valid area of the chunk.</param>
            <param name="length">Length of valid area of the chunk.</param>
        </member>
        <member name="M:PHP.Library.Zlib.BinaryChunkQueue.PushByteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pushes new chunk into the beginning of the queue.
            </summary>
            <param name="chunk">Byte array.</param>
            <param name="offset">Offset of the valid area of the chunk.</param>
            <param name="length">Length of valid area of the chunk.</param>
        </member>
        <member name="M:PHP.Library.Zlib.BinaryChunkQueue.DequeueByte">
            <summary>
            Pops a single byte from the queue, removing it in the process.
            </summary>
            <returns>Next byte value if there was any present, otherwise null.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.BinaryChunkQueue.PeekByte">
            <summary>
            Peeks a single byte from the queue.
            </summary>
            <returns>Next byte value if there was any present, otherwise null.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.BinaryChunkQueue.DequeueByteBlock(System.Int32)">
            <summary>
            Pops a byte block from the queue, removing it in the process.
            </summary>
            <param name="length">Requested length of the block.</param>
            <returns>Block of bytes of requested length if available, otherwise null.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.BinaryChunkQueue.SkipByteBlock(System.Int32)">
            <summary>
            Skips the given count of bytes in the queue.
            </summary>
            <param name="length">Number of bytes to skip.</param>
            <returns>True if the given count of bytes was available, otherwise false.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.BinaryChunkQueue.#ctor">
            <summary>
            Initializes new instance of the class.
            </summary>
        </member>
        <member name="P:PHP.Library.Zlib.BinaryChunkQueue.AvailableBytes">
            <summary>
            Gets total available bytes within the queue.
            </summary>
        </member>
        <member name="T:PHP.Library.Zlib.BinaryChunkQueue.Chunk">
            <summary>
            Internal representation of chunk.
            </summary>
        </member>
        <member name="M:PHP.Library.Zlib.BinaryChunkQueue.Chunk.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes new binary chunk.
            </summary>
            <param name="chunk">Non-null reference to byte array.</param>
            <param name="offset">Starting offset in the chunk.</param>
            <param name="length">Length of the valid area in the chunk.</param>
        </member>
        <member name="P:PHP.Library.Zlib.BinaryChunkQueue.Chunk.Bytes">
            <summary>
            Byte array.
            </summary>
        </member>
        <member name="P:PHP.Library.Zlib.BinaryChunkQueue.Chunk.Offset">
            <summary>
            Starting offset.
            </summary>
        </member>
        <member name="P:PHP.Library.Zlib.BinaryChunkQueue.Chunk.Length">
            <summary>
            Length of the chunk.
            </summary>
        </member>
        <member name="T:PHP.Library.Zlib.ZlibLocalConfig">
            <summary>
            Script independent Zlib configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibLocalConfig.DeepCopy">
            <summary>
            Creates a deep copy of the configuration record.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibLocalConfig.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML.
            </summary>
        </member>
        <member name="T:PHP.Library.Zlib.ZlibGlobalConfig">
            <summary>
            Script dependent MSSQL configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibGlobalConfig.Parse(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Loads configuration from XML.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibGlobalConfig.DeepCopy">
            <summary>
            Creates a deep copy of the configuration record.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="T:PHP.Library.Zlib.ZlibConfiguration">
            <summary>
            Zlib extension configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibConfiguration.GetSetRestore(PHP.Core.LocalConfiguration,System.String,System.Object,PHP.Library.IniAction)">
            <summary>
            Gets, sets, or restores a value of a legacy configuration option.
            </summary>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibConfiguration.LegacyOptionsToXml(System.Xml.XmlTextWriter,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Writes MySql legacy options and their values to XML text stream.
            Skips options whose values are the same as default values of Phalanger.
            </summary>
            <param name="writer">XML writer.</param>
            <param name="options">A hashtable containing PHP names and option values. Consumed options are removed from the table.</param>
            <param name="writePhpNames">Whether to add "phpName" attribute to option nodes.</param>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibConfiguration.RegisterLegacyOptions">
            <summary>
            Registers legacy ini-options.
            </summary>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibConfiguration.GetLocal(PHP.Core.ScriptContext)">
            <summary>
            Gets local configuration associated with a specified script context.
            </summary>
            <param name="context">Scritp context.</param>
            <returns>Local library configuration.</returns>
        </member>
        <member name="P:PHP.Library.Zlib.ZlibConfiguration.Local">
            <summary>
            Gets the library configuration associated with the current script context.
            </summary>
        </member>
        <member name="P:PHP.Library.Zlib.ZlibConfiguration.DefaultLocal">
            <summary>
            Gets the default library configuration.
            </summary>
        </member>
        <member name="P:PHP.Library.Zlib.ZlibConfiguration.Global">
            <summary>
            Gets the global library configuration.
            </summary>
        </member>
        <member name="T:PHP.Library.Zlib.ZlibLibraryDescriptor">
            <summary>
            Describes the class library assembly content and configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibLibraryDescriptor.Loaded(PHP.Core.PhpLibraryAttribute,PHP.Core.LibraryConfigStore)">
            <summary>
            Called by the Core after the library is loaded.
            </summary>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibLibraryDescriptor.ParseConfig(PHP.Core.ConfigContextBase,PHP.Core.PhpConfigurationContext,System.Xml.XmlNode)">
            <summary>
            Parses a configuration section belonging to the MSSQL library. 
            </summary>
            <param name="result">A configuration context.</param>
            <param name="context">The context of the configuration created by Phalanger Core.</param>
            <param name="section">A XML node containing the configuration or its part.</param>
            <returns>Updated configuration context.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibLibraryDescriptor.CreateConfigContext">
            <summary>
            Creates empty library configuration context.
            </summary>
            <returns>An initialized configuration context. Should not be a <B>null</B> reference.</returns>
        </member>
        <member name="P:PHP.Library.Zlib.ZlibLibraryDescriptor.Singleton">
            <summary>
            Stores one and only instance of the class that is created when the assembly is loaded.
            </summary>
        </member>
        <member name="T:PHP.Library.Zlib.Zlib">
            <summary>
            Implements PHP functions provided by multi-byte-string extension.
            </summary>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzClose(PHP.Core.PhpResource)">
            <summary>
            Closes the given gz-file pointer.
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <returns>Returns TRUE on success or FALSE on failure.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzOpen(System.String,System.String)">
            <summary>
            Opens a gzip (.gz) file for reading or writing. 
            </summary> 
            <param name="filename">The file name.</param>
            <param name="mode">
                As in fopen() (rb or wb) but can also include a compression level (wb9) or a strategy: f for filtered data as
                in wb6f, h for Huffman only compression as in wb1h.
            </param>
            <returns>
                <para>Returns a file pointer to the file opened, after that, everything you read from this file descriptor will be 
                transparently decompressed and what you write gets compressed.</para>
                <para>If the open fails, the function returns FALSE.</para>
            </returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzOpen(System.String,System.String,System.Int32)">
            <summary>
            Opens a gzip (.gz) file for reading or writing.
            </summary>
            <param name="filename">The file name.</param>
            <param name="mode">
                As in fopen() (rb or wb) but can also include a compression level (wb9) or a strategy: f for filtered data as
                in wb6f, h for Huffman only compression as in wb1h.
            </param>
            <param name="use_include_path">
                You can set this optional parameter to 1, if you want to search for the file in the include_path too.
            </param>
            <returns>
                <para>Returns a file pointer to the file opened, after that, everything you read from this file descriptor will be 
                transparently decompressed and what you write gets compressed.</para>
                <para>If the open fails, the function returns FALSE.</para>
            </returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzCompress(PHP.Core.PhpBytes)">
            <summary>
            This function compresses the given string using the ZLIB data format.
            </summary>
            <param name="data">The data to compress.</param>
            <returns>The compressed string or FALSE if an error occurred.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzCompress(PHP.Core.PhpBytes,System.Int32)">
            <summary>
            This function compress the given string using the ZLIB data format.
            </summary> 
            <param name="data">The data to compress.</param>
            <param name="level">The level of compression. Can be given as 0 for no compression up to 9 for maximum compression.</param>
            <returns>The compressed string or FALSE if an error occurred.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzUncompress(PHP.Core.PhpBytes)">
            <summary>
            This function uncompress a compressed string.
            </summary>
            <param name="data">The data compressed by gzcompress().</param>
            <returns>
                <para>
                    The original uncompressed data or FALSE on error.
                </para>
                <para>
                    The function will return an error if the uncompressed data is more than 32768 times the length of the compressed
                    input data or more than the optional parameter length.
                </para>
            </returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzUncompress(PHP.Core.PhpBytes,System.Int32)">
            <summary>
            This function uncompress a compressed string.
            </summary>
            <param name="data">The data compressed by gzcompress().</param>
            <param name="length">The maximum length of data to decode.</param>
            <returns>
                <para>
                    The original uncompressed data or FALSE on error.
                </para>
                <para>
                    The function will return an error if the uncompressed data is more than 32768 times the length of the compressed
                    input data or more than the optional parameter length.
                </para>
            </returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.ZlibCompress(System.Byte[]@,System.Byte[],System.Int32)">
            <summary>
            Reimplements function from zlib (compress2) that is not present in ZLIB.NET.
            </summary>
            <param name="dest">Destination array of bytes. May be trimmed if necessary.</param>
            <param name="source">Source array of bytes.</param>
            <param name="level">Level of compression.</param>
            <returns>Zlib status code.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.ZlibUncompress(System.Byte[]@,System.Byte[])">
            <summary>
            Reimplements function from zlib (uncompress) that is not present in ZLIB.NET.
            </summary>
            <param name="dest">Destination array of bytes. May be trimmed if necessary.</param>
            <param name="source">Source array of bytes.</param>
            <returns>Zlib status code.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzDeflate(PHP.Core.PhpBytes)">
            <summary>
            This function compress the given string using the DEFLATE data format.
            </summary>
            <param name="data">The data to deflate.</param>
            <returns>The deflated string or FALSE if an error occurred.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzDeflate(PHP.Core.PhpBytes,System.Int32)">
            <summary>
            This function compress the given string using the DEFLATE data format.
            </summary>
            <param name="data">The data to deflate.</param>
            <param name="level">
                The level of compression. Can be given as 0 for no compression up to 9 for maximum compression.
                If not given, the default compression level will be the default compression level of the zlib library.
            </param>
            <returns>The deflated string or FALSE if an error occurred.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzInflate(PHP.Core.PhpBytes)">
            <summary>
            This function inflate a deflated string.
            </summary> 
            <param name="data">The data compressed by gzdeflate().</param>
            <returns>
                <para>
                    The original uncompressed data or FALSE on error.
                </para>
                <para>
                    The function will return an error if the uncompressed data is more than 32768 times the length of 
                    the compressed input data or more than the optional parameter length.
                </para>
            </returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzInflate(PHP.Core.PhpBytes,System.Int64)">
            <summary>
            This function inflate a deflated string.
            </summary> 
            <param name="data">The data compressed by gzdeflate().</param>
            <param name="length">The maximum length of data to decode.</param>
            <returns>
                <para>
                    The original uncompressed data or FALSE on error.
                </para>
                <para>
                    The function will return an error if the uncompressed data is more than 32768 times the length of 
                    the compressed input data or more than the optional parameter length.
                </para>
            </returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzDecode(PHP.Core.PhpBytes)">
            <summary>
            This function returns a decoded version of the input data.
            </summary>
            <param name="data">The data to decode, encoded by gzencode().</param>
            <returns>The decoded string, or FALSE if an error occurred.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzDecode(PHP.Core.PhpBytes,System.Int32)">
            <summary>
            This function returns a decoded version of the input data.
            </summary>
            <param name="data">The data to decode, encoded by gzencode().</param>
            <param name="length">The maximum length of data to decode.</param>
            <returns>The decoded string, or FALSE if an error occurred.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzEncode(PHP.Core.PhpBytes)">
            <summary>
            This function returns a compressed version of the input data compatible with the output of the gzip program.
            </summary>
            <param name="data">The data to encode.</param>
            <returns>The encoded string, or FALSE if an error occurred.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzEncode(PHP.Core.PhpBytes,System.Int32)">
            <summary>
            This function returns a compressed version of the input data compatible with the output of the gzip program.
            </summary>
            <param name="data">The data to encode.</param>
            <param name="level">
                The level of compression. Can be given as 0 for no compression up to 9 for maximum compression. If not 
                given, the default compression level will be the default compression level of the zlib library.
            </param>
            <returns>The encoded string, or FALSE if an error occurred.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzEncode(PHP.Core.PhpBytes,System.Int32,System.Int32)">
            <summary>
            This function returns a compressed version of the input data compatible with the output of the gzip program.
            </summary>
            <param name="data">The data to encode.</param>
            <param name="level">
                The level of compression. Can be given as 0 for no compression up to 9 for maximum compression. If not 
                given, the default compression level will be the default compression level of the zlib library.
            </param>
            <param name="encoding_mode">
                <para>The encoding mode. Can be FORCE_GZIP (the default) or FORCE_DEFLATE.</para>
                <para>
                    If you use FORCE_DEFLATE, you get a standard zlib deflated string (inclusive zlib headers) after 
                    the gzip file header but without the trailing crc32 checksum.
                </para>
            </param>
            <returns>The encoded string, or FALSE if an error occurred.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzEof(PHP.Core.PhpResource)">
            <summary>
            Tests the given GZ file pointer for EOF.
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <returns>Returns TRUE if the gz-file pointer is at EOF or an error occurs; otherwise returns FALSE.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzRewind(PHP.Core.PhpResource)">
            <summary>
            Sets the file position indicator of the given gz-file pointer to the beginning of the file stream.
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <returns>Returns TRUE on success or FALSE on failure.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzSeek(PHP.Core.PhpResource,System.Int32)">
            <summary>
                <para>
                    Sets the file position indicator for the given file pointer to the given offset byte into the file stream. Equivalent
                    to calling (in C) gzseek(zp, offset, SEEK_SET).
                </para>
                <para>
                    If the file is opened for reading, this function is emulated but can be extremely slow. If the file is opened for 
                    writing, only forward seeks are supported; gzseek() then compresses a sequence of zeroes up to the new starting position. 
                </para>
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <param name="offset">The seeked offset.</param>
            <returns>Upon success, returns 0; otherwise, returns -1. Note that seeking past EOF is not considered an error.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzSeek(PHP.Core.PhpResource,System.Int32,System.Int32)">
            <summary>
                <para>
                    Sets the file position indicator for the given file pointer to the given offset byte into the file stream. Equivalent
                    to calling (in C) gzseek(zp, offset, SEEK_SET).
                </para>
                <para>
                    If the file is opened for reading, this function is emulated but can be extremely slow. If the file is opened for 
                    writing, only forward seeks are supported; gzseek() then compresses a sequence of zeroes up to the new starting position. 
                </para>
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <param name="offset">The seeked offset.</param>
            <param name="whence">
                whence values are: SEEK_SET (relative to origin), SEEK_CUR (relative to current position).
            </param>
            <returns>Upon success, returns 0; otherwise, returns -1. Note that seeking past EOF is not considered an error.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzTell(PHP.Core.PhpResource)">
            <summary>
            Gets the position of the given file pointer; i.e., its offset into the uncompressed file stream.
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <returns>The position of the file pointer or FALSE if an error occurs.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzFile(PHP.Core.ScriptContext,System.String)">
            <summary>
            This function is identical to readgzfile(), except that it returns the file in an array.
            </summary>
            <param name="context">Current script context, passed automatically by the caller.</param>
            <param name="filename">The file name.</param>
            <returns>An array containing the file, one line per cell.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzFile(PHP.Core.ScriptContext,System.String,System.Int32)">
            <summary>
            This function is identical to readgzfile(), except that it returns the file in an array.
            </summary>
            <param name="context">Current script context, passed automatically by the caller.</param>
            <param name="filename">The file name.</param>
            <param name="use_include_path">
                You can set this optional parameter to 1, if you want to search for the file in the include_path too.
            </param>
            <returns>An array containing the file, one line per cell.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzGetChar(PHP.Core.PhpResource)">
            <summary>
            Returns a string containing a single (uncompressed) character read from the given gz-file pointer.
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <returns>The uncompressed character or FALSE on EOF (unlike gzeof()).</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzGetString(PHP.Core.PhpResource,System.Int32)">
            <summary>
            Gets a (uncompressed) string of up to length - 1 bytes read from the given file pointer. Reading ends when length - 1 bytes 
            have been read, on a newline, or on EOF (whichever comes first). 
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <param name="length">The length of data to get.</param>
            <returns>The uncompressed string, or FALSE on error.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzGetStringStripped(PHP.Core.PhpResource,System.Int32)">
            <summary>
            Identical to gzgets(), except that gzgetss() attempts to strip any HTML and PHP tags from the text it reads.
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <param name="length">The length of data to get.</param>
            <returns>The uncompressed and striped string, or FALSE on error.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzGetStringStripped(PHP.Core.PhpResource,System.Int32,PHP.Core.PhpBytes)">
            <summary>
            Identical to gzgets(), except that gzgetss() attempts to strip any HTML and PHP tags from the text it reads.
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <param name="length">The length of data to get.</param>
            <param name="allowable_tags">You can use this optional parameter to specify tags which should not be stripped.</param>
            <returns>The uncompressed and striped string, or FALSE on error.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzPassthru(PHP.Core.PhpResource)">
            <summary>
            Reads to EOF on the given gz-file pointer from the current position and writes the (uncompressed) results to standard output.
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <returns>The number of uncompressed characters read from gz and passed through to the input, or FALSE on error.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzPutString(PHP.Core.PhpResource,PHP.Core.PhpBytes)">
            <summary>
            This function is an alias of gzwrite(), which writes the contents of string to the given gz-file.
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <param name="str">The string to write.</param>
            <returns>Returns the number of (uncompressed) bytes written to the given gz-file stream.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzPutString(PHP.Core.PhpResource,PHP.Core.PhpBytes,System.Int32)">
            <summary>
            This function is an alias of gzwrite(), which writes the contents of string to the given gz-file.
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <param name="str">The string to write.</param>
            <param name="length">
                The number of uncompressed bytes to write. If supplied, writing will stop after length (uncompressed) bytes have been 
                written or the end of string is reached, whichever comes first.
            </param>
            <returns>Returns the number of (uncompressed) bytes written to the given gz-file stream.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzRead(PHP.Core.PhpResource,System.Int32)">
            <summary>
            Reads up to length bytes from the given gz-file pointer. Reading stops when length (uncompressed) bytes 
            have been read or EOF is reached, whichever comes first.
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The data that have been read.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzWrite(PHP.Core.PhpResource,PHP.Core.PhpBytes)">
            <summary>
            Writes the contents of string to the given gz-file.
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <param name="str">The string to write.</param>
            <returns>Returns the number of (uncompressed) bytes written to the given gz-file stream.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.GzWrite(PHP.Core.PhpResource,PHP.Core.PhpBytes,System.Int32)">
            <summary>
            Writes the contents of string to the given gz-file.
            </summary>
            <param name="zp">The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().</param>
            <param name="str">The string to write.</param>
            <param name="length">
                The number of uncompressed bytes to write. If supplied, writing will stop after length (uncompressed) bytes have been 
                written or the end of string is reached, whichever comes first.
            </param>
            <returns>Returns the number of (uncompressed) bytes written to the given gz-file stream.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.ReadGzFile(System.String)">
            <summary>
            Reads a file, decompresses it and writes it to standard output.
            </summary> 
            <param name="filename">
                The file name. This file will be opened from the filesystem and its contents written to standard output.
            </param>
            <returns>
                Returns the number of (uncompressed) bytes read from the file. If an error occurs, FALSE is returned and 
                unless the function was called as @readgzfile, an error message is printed.
            </returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.ReadGzFile(System.String,System.Int32)">
            <summary>
            Reads a file, decompresses it and writes it to standard output.
            </summary> 
            <param name="filename">
                The file name. This file will be opened from the filesystem and its contents written to standard output.
            </param>
            <param name="use_include_path">
                You can set this optional parameter to 1, if you want to search for the file in the include_path too.
            </param>
            <returns>
                Returns the number of (uncompressed) bytes read from the file. If an error occurs, FALSE is returned and 
                unless the function was called as @readgzfile, an error message is printed.
            </returns>
        </member>
        <member name="M:PHP.Library.Zlib.Zlib.ZlibGetCodingType">
            <summary>
            Returns the coding type used for output compression.
            </summary>
            <returns>Possible return values are gzip, deflate, or FALSE.</returns>
        </member>
        <member name="T:PHP.Library.Zlib.Zlib.ForceConstants">
            <summary>
            Zlib force* constants.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
            <param name="sourceTextReader">The source TextReader to read from</param>
            <param name="target">Contains the array of characteres read from the source TextReader.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source TextReader.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToCharArray(System.Byte[])">
            <summary>
            Converts an array of bytes to an array of chars
            </summary>
            <param name="byteArray">The array of bytes to convert</param>
            <returns>The new array of chars</returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZInputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZInputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZOutputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZOutputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="T:PHP.Library.Zlib.DeflateFilterMode">
            <summary>
            Mode of DeflateFilter.
            </summary>
        </member>
        <member name="F:PHP.Library.Zlib.DeflateFilterMode.Normal">
            <summary>
            Normal compression.
            </summary>
        </member>
        <member name="F:PHP.Library.Zlib.DeflateFilterMode.Filter">
            <summary>
            Filter-only compression.
            </summary>
        </member>
        <member name="F:PHP.Library.Zlib.DeflateFilterMode.Huffman">
            <summary>
            Huffman-only compression.
            </summary>
        </member>
        <member name="T:PHP.Library.Zlib.ZlibFilter">
            <summary>
            Base for zlib filters. Contains generic algorithm for reading and writing into zlib stream.
            </summary>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibFilter.FilterInner(System.Byte[],System.Int32@,System.Boolean)">
            <summary>
            Performs the generic zlib stream filter operation.
            </summary>
            <param name="input">Input chunk of bytes.</param>
            <param name="inputOffset">Current position within the chunk.</param>
            <param name="closing">Value indicating whether the stream will be closed.</param>
            <returns>Array of available bytes (even empty one). Null on non-critical error.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibFilter.GetFlushFlags(System.Boolean)">
            <summary>
            Gets flush flags to be used with zlib operation.
            </summary>
            <param name="closing">Value indicating whether the stream will be closed.</param>
            <returns>Zlib flags.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibFilter.EndZlibOperation(ComponentAce.Compression.Libs.zlib.ZStream)">
            <summary>
            Ends the Zlib operation.
            </summary>
            <param name="zs">Zlib stream.</param>
            <returns>Zlib status.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibFilter.PerformZlibOperation(ComponentAce.Compression.Libs.zlib.ZStream,System.Int32)">
            <summary>
            Performs the Zlib operation.
            </summary>
            <param name="zs">Zlib stream.</param>
            <param name="flush">Flush flags.</param>
            <returns>Zlib status.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibFilter.InitZlibOperation(ComponentAce.Compression.Libs.zlib.ZStream)">
            <summary>
            Initializes the Zlib operation.
            </summary>
            <param name="zs">Zlib stream.</param>
            <returns>Zlib status.</returns>
        </member>
        <member name="M:PHP.Library.Zlib.ZlibFilter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:PHP.Library.Zlib.ZlibFilter.ZlibState">
            <summary>
            State of the filter.
            </summary>
        </member>
        <member name="T:PHP.Library.Zlib.DeflateFilter">
            <summary>
            Filter for deflate algorithm without any header or trailer. Filter mode is not currently supported.
            </summary>
        </member>
        <member name="T:PHP.Library.Zlib.InflateFilter">
            <summary>
            Filter for inflate algorithm without any header or trailer.
            </summary>
        </member>
        <member name="T:PHP.Library.Zlib.GzipCompresionFilter">
            <summary>
            Gzip compression filter.
            </summary>
        </member>
        <member name="T:PHP.Library.Zlib.GzipUncompressionFilter">
            <summary>
            Filter for gzip uncompression algorithm.
            </summary>
        </member>
        <member name="M:PHP.Library.Zlib.GzipUncompressionFilter.UpdateHeaderState">
            <summary>
            Changes state based on header flags. Is called by header-handling states only.
            </summary>
        </member>
        <member name="M:PHP.Library.Zlib.GzipUncompressionFilter.HeaderFlag(System.Byte)">
            <summary>
            Checks if a header flag is present.
            </summary>
            <param name="flag">Flag.</param>
            <returns>True if the header flag is valid, otherwise false.</returns>
        </member>
    </members>
</doc>
