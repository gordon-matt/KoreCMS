@using Kore.Plugins.Widgets.OwlCarousel
@using Kore.Web.ContentManagement
@using Kore.Plugins.Widgets.OwlCarousel.ContentBlocks

@model OwlCarouselBlock

<div id="block-content">
    @using (var tabs = Html.KoreUI().Begin(new Kore.Web.Mvc.KoreUI.Tabs()))
    {
        tabs.Tab(T(LocalizableStrings.OwlCarouselBlock.EditorTabs.General), "tab-general");
        tabs.Tab(T(LocalizableStrings.OwlCarouselBlock.EditorTabs.ItemOptions), "tab-item-options");
        tabs.Tab(T(LocalizableStrings.OwlCarouselBlock.EditorTabs.Advanced), "tab-advanced");
        tabs.Tab(T(LocalizableStrings.OwlCarouselBlock.EditorTabs.Callbacks), "tab-callbacks");

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.MediaFolder, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.MediaFolder, new { @class = "form-control", data_bind = "value: blockModel.mediaFolder" })
                            <span class="input-group-addon">
                                <a data-toggle="modal" href="javascript:void(0);" data-target="#myModal">
                                    <i class="kore-icon kore-icon-search"></i>
                                </a>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ControlId, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ControlId, new { @class = "form-control", data_bind = "value: blockModel.controlId" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SlideSpeed, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SlideSpeed, new { @class = "form-control", data_bind = "value: blockModel.slideSpeed" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.PaginationSpeed, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.PaginationSpeed, new { @class = "form-control", data_bind = "value: blockModel.paginationSpeed" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.RewindSpeed, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.RewindSpeed, new { @class = "form-control", data_bind = "value: blockModel.rewindSpeed" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.AutoPlay, new { data_bind = "checked: blockModel.autoPlay" }) @T(LocalizableStrings.OwlCarouselBlock.AutoPlay)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.StopOnHover, new { data_bind = "checked: blockModel.stopOnHover" }) @T(LocalizableStrings.OwlCarouselBlock.StopOnHover)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.Navigation, new { data_bind = "checked: blockModel.navigation" }) @T(LocalizableStrings.OwlCarouselBlock.Navigation)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.RewindNav, new { data_bind = "checked: blockModel.rewindNav" }) @T(LocalizableStrings.OwlCarouselBlock.RewindNav)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ScrollPerPage, new { data_bind = "checked: blockModel.scrollPerPage" }) @T(LocalizableStrings.OwlCarouselBlock.ScrollPerPage)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.Pagination, new { data_bind = "checked: blockModel.pagination" }) @T(LocalizableStrings.OwlCarouselBlock.Pagination)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.PaginationNumbers, new { data_bind = "checked: blockModel.paginationNumbers" }) @T(LocalizableStrings.OwlCarouselBlock.PaginationNumbers)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.Responsive, new { data_bind = "checked: blockModel.responsive" }) @T(LocalizableStrings.OwlCarouselBlock.Responsive)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.AutoPlaySpeed, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.AutoPlaySpeed, new { @class = "form-control", data_bind = "value: blockModel.autoPlaySpeed" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationText, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.NavigationText, new { @class = "form-control", data_bind = "value: blockModel.navigationText" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ResponsiveRefreshRate, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ResponsiveRefreshRate, new { @class = "form-control", data_bind = "value: blockModel.responsiveRefreshRate" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ResponsiveBaseWidth, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ResponsiveBaseWidth, new { @class = "form-control", data_bind = "value: blockModel.responsiveBaseWidth" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.BaseClass, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.BaseClass, new { @class = "form-control", data_bind = "value: blockModel.baseClass" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Theme, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.Theme, new { @class = "form-control", data_bind = "value: blockModel.theme" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.LazyLoad, new { data_bind = "checked: blockModel.lazyLoad" }) @T(LocalizableStrings.OwlCarouselBlock.LazyLoad)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.AutoHeight, new { data_bind = "checked: blockModel.autoHeight" }) @T(LocalizableStrings.OwlCarouselBlock.AutoHeight)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.MouseDrag, new { data_bind = "checked: blockModel.mouseDrag" }) @T(LocalizableStrings.OwlCarouselBlock.MouseDrag)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.TouchDrag, new { data_bind = "checked: blockModel.touchDrag" }) @T(LocalizableStrings.OwlCarouselBlock.TouchDrag)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.Items, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.Items, new { @class = "form-control", data_bind = "value: blockModel.items" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ItemsDesktop, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ItemsDesktop, new { @class = "form-control", data_bind = "value: blockModel.itemsDesktop" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ItemsDesktopSmall, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ItemsDesktopSmall, new { @class = "form-control", data_bind = "value: blockModel.itemsDesktopSmall" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ItemsTablet, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ItemsTablet, new { @class = "form-control", data_bind = "value: blockModel.itemsTablet" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ItemsTabletSmall, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ItemsTabletSmall, new { @class = "form-control", data_bind = "value: blockModel.itemsTabletSmall" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.ItemsMobile, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ItemsMobile, new { @class = "form-control", data_bind = "value: blockModel.itemsMobile" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ItemsCustom, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ItemsCustom, new { @class = "form-control", data_bind = "value: blockModel.itemsCustom" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.SingleItem, new { data_bind = "checked: blockModel.singleItem" }) @T(LocalizableStrings.OwlCarouselBlock.SingleItem)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ItemsScaleUp, new { data_bind = "checked: blockModel.itemsScaleUp" }) @T(LocalizableStrings.OwlCarouselBlock.ItemsScaleUp)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.LazyFollow, new { data_bind = "checked: blockModel.lazyFollow" }) @T(LocalizableStrings.OwlCarouselBlock.LazyFollow)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.DragBeforeAnimFinish, new { data_bind = "checked: blockModel.dragBeforeAnimFinish" }) @T(LocalizableStrings.OwlCarouselBlock.DragBeforeAnimFinish)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.AddClassActive, new { data_bind = "checked: blockModel.addClassActive" }) @T(LocalizableStrings.OwlCarouselBlock.AddClassActive)
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.JsonPath, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.JsonPath, new { @class = "form-control", data_bind = "value: blockModel.jsonPath" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.JsonSuccess, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.JsonSuccess, new { @class = "form-control", data_bind = "value: blockModel.jsonSuccess" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.LazyEffect, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.LazyEffect, new { @class = "form-control", data_bind = "value: blockModel.lazyEffect" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.TransitionStyle, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.TransitionStyle, new { @class = "form-control", data_bind = "value: blockModel.transitionStyle" })
                    </div>
                </div>
            </div>
        }

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.BeforeUpdate, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.BeforeUpdate, new { @class = "form-control", data_bind = "value: blockModel." })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AfterUpdate, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.AfterUpdate, new { @class = "form-control", data_bind = "value: blockModel.afterUpdate" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.BeforeInit, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.BeforeInit, new { @class = "form-control", data_bind = "value: blockModel.beforeInit" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AfterInit, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.AfterInit, new { @class = "form-control", data_bind = "value: blockModel.afterInit" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.BeforeMove, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.BeforeMove, new { @class = "form-control", data_bind = "value: blockModel.beforeMove" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.AfterMove, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.AfterMove, new { @class = "form-control", data_bind = "value: blockModel.afterMove" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AfterAction, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.AfterAction, new { @class = "form-control", data_bind = "value: blockModel.afterAction" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.StartDragging, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.StartDragging, new { @class = "form-control", data_bind = "value: blockModel.startDragging" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AfterLazyLoad, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.AfterLazyLoad, new { @class = "form-control", data_bind = "value: blockModel.afterLazyLoad" })
                    </div>
                </div>
            </div>
        }
    }

    <style type="text/css">
        .modal-dialog {
            width: 80% !important;
        }
    </style>

    <div class="modal fade" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" onclick="dismissModal();" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Select Folder</h4>
                </div>
                <div class="modal-body">
                    <iframe src="/filemanager/dialog.php?type=2&extensions=[&quot;&quot;]&fldr=&relative_url=1&field_id=MediaFolder&ignore_last_position=1" frameborder="0" style="overflow:hidden;min-height:600px; height:100%;width:100%" height="100%" width="100%"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var modalDismissed = false;

    function dismissModal() {
        modalDismissed = true;
        $('#myModal').modal('hide');
    };

    $(document).ready(function () {
        $('#myModal').on('hidden.bs.modal', function () {
            if (!modalDismissed) {
                var url = $('#MediaFolder').val();
                var idx = url.indexOf("Uploads");
                url = url.substring(idx);
                blockModel.mediaFolder(url);
            }
            modalDismissed = false;
        })
    });

    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function (blockModel) {
            blockModel.mediaFolder = ko.observable("");
            blockModel.controlId = ko.observable("owl-carousel");
            blockModel.slideSpeed = ko.observable(200);
            blockModel.paginationSpeed = ko.observable(800);
            blockModel.rewindSpeed = ko.observable(1000);
            blockModel.autoPlay = ko.observable(false);
            blockModel.autoPlaySpeed = ko.observable(5000);
            blockModel.stopOnHover = ko.observable(false);
            blockModel.navigation = ko.observable(false);
            blockModel.navigationText = ko.observable('["prev","next"]');
            blockModel.rewindNav = ko.observable(true);
            blockModel.scrollPerPage = ko.observable(false);
            blockModel.pagination = ko.observable(true);
            blockModel.paginationNumbers = ko.observable(false);
            blockModel.responsive = ko.observable(true);
            blockModel.responsiveRefreshRate = ko.observable(200);
            blockModel.responsiveBaseWidth = ko.observable('window');
            blockModel.baseClass = ko.observable('owl-carousel');
            blockModel.theme = ko.observable('owl-theme');
            blockModel.lazyLoad = ko.observable(false);
            blockModel.autoHeight = ko.observable(false);
            blockModel.mouseDrag = ko.observable(true);
            blockModel.touchDrag = ko.observable(true);
            blockModel.items = ko.observable(5);
            blockModel.itemsDesktop = ko.observable('[1199,4]');
            blockModel.itemsDesktopSmall = ko.observable('[979,3]');
            blockModel.itemsTablet = ko.observable('[768,2]');
            blockModel.itemsTabletSmall = ko.observable(null);
            blockModel.itemsMobile = ko.observable('[479,1]');
            blockModel.itemsCustom = ko.observable(null);
            blockModel.singleItem = ko.observable(false);
            blockModel.itemsScaleUp = ko.observable(false);
            blockModel.jsonPath = ko.observable(null);
            blockModel.jsonSuccess = ko.observable(null);
            blockModel.lazyFollow = ko.observable(true);
            blockModel.lazyEffect = ko.observable('fade');
            blockModel.dragBeforeAnimFinish = ko.observable(true);
            blockModel.addClassActive = ko.observable(false);
            blockModel.transitionStyle = ko.observable(null);
            blockModel.beforeUpdate = ko.observable(null);
            blockModel.afterUpdate = ko.observable(null);
            blockModel.beforeInit = ko.observable(null);
            blockModel.afterInit = ko.observable(null);
            blockModel.beforeMove = ko.observable(null);
            blockModel.afterMove = ko.observable(null);
            blockModel.afterAction = ko.observable(null);
            blockModel.startDragging = ko.observable(null);
            blockModel.afterLazyLoad = ko.observable(null);

            var data = ko.mapping.fromJSON(blockModel.blockValues());

            if ((isFunction(data) && data()) || data) {
                if (data.MediaFolder == undefined) {
                    // If this is not set, it means the contentBlock is new and we have nothing in blockValues
                    return;
                }
                blockModel.mediaFolder(data.MediaFolder());
                blockModel.controlId(data.ControlId());
                blockModel.slideSpeed(data.SlideSpeed());
                blockModel.paginationSpeed(data.PaginationSpeed());
                blockModel.rewindSpeed(data.RewindSpeed());
                blockModel.autoPlay(data.AutoPlay());
                blockModel.autoPlaySpeed(data.AutoPlaySpeed());
                blockModel.stopOnHover(data.StopOnHover());
                blockModel.navigation(data.Navigation());
                blockModel.navigationText(data.NavigationText());
                blockModel.rewindNav(data.RewindNav());
                blockModel.scrollPerPage(data.ScrollPerPage());
                blockModel.pagination(data.Pagination());
                blockModel.paginationNumbers(data.PaginationNumbers());
                blockModel.responsive(data.Responsive());
                blockModel.responsiveRefreshRate(data.ResponsiveRefreshRate());
                blockModel.responsiveBaseWidth(data.ResponsiveBaseWidth());
                blockModel.baseClass(data.BaseClass());
                blockModel.theme(data.Theme());
                blockModel.lazyLoad(data.LazyLoad());
                blockModel.autoHeight(data.AutoHeight());
                blockModel.mouseDrag(data.MouseDrag());
                blockModel.touchDrag(data.TouchDrag());
                blockModel.items(data.Items());
                blockModel.itemsDesktop(data.ItemsDesktop());
                blockModel.itemsDesktopSmall(data.ItemsDesktopSmall());
                blockModel.itemsTablet(data.ItemsTablet());
                blockModel.itemsTabletSmall(data.ItemsTabletSmall());
                blockModel.itemsMobile(data.ItemsMobile());
                blockModel.itemsCustom(data.ItemsCustom());
                blockModel.singleItem(data.SingleItem());
                blockModel.itemsScaleUp(data.ItemsScaleUp());
                blockModel.jsonPath(data.JsonPath());
                blockModel.jsonSuccess(data.JsonSuccess());
                blockModel.lazyFollow(data.LazyFollow());
                blockModel.lazyEffect(data.LazyEffect());
                blockModel.dragBeforeAnimFinish(data.DragBeforeAnimFinish());
                blockModel.addClassActive(data.AddClassActive());
                blockModel.transitionStyle(data.TransitionStyle());
                blockModel.beforeUpdate(data.BeforeUpdate());
                blockModel.afterUpdate(data.AfterUpdate());
                blockModel.beforeInit(data.BeforeInit());
                blockModel.afterInit(data.AfterInit());
                blockModel.beforeMove(data.BeforeMove());
                blockModel.afterMove(data.AfterMove());
                blockModel.afterAction(data.AfterAction());
                blockModel.startDragging(data.StartDragging());
                blockModel.afterLazyLoad(data.AfterLazyLoad());
            }
        };
        f.cleanUp= function (blockModel) {
            delete blockModel.mediaFolder;
            delete blockModel.controlId;
            delete blockModel.slideSpeed;
            delete blockModel.paginationSpeed;
            delete blockModel.rewindSpeed;
            delete blockModel.autoPlay;
            delete blockModel.autoPlaySpeed;
            delete blockModel.stopOnHover;
            delete blockModel.navigation;
            delete blockModel.navigationText;
            delete blockModel.rewindNav;
            delete blockModel.scrollPerPage;
            delete blockModel.pagination;
            delete blockModel.paginationNumbers;
            delete blockModel.responsive;
            delete blockModel.responsiveRefreshRate;
            delete blockModel.responsiveBaseWidth;
            delete blockModel.baseClass;
            delete blockModel.theme;
            delete blockModel.lazyLoad;
            delete blockModel.autoHeight;
            delete blockModel.mouseDrag;
            delete blockModel.touchDrag;
            delete blockModel.items;
            delete blockModel.itemsDesktop;
            delete blockModel.itemsDesktopSmall;
            delete blockModel.itemsTablet;
            delete blockModel.itemsTabletSmall;
            delete blockModel.itemsMobile;
            delete blockModel.itemsCustom;
            delete blockModel.singleItem;
            delete blockModel.itemsScaleUp;
            delete blockModel.jsonPath;
            delete blockModel.jsonSuccess;
            delete blockModel.lazyFollow;
            delete blockModel.lazyEffect;
            delete blockModel.dragBeforeAnimFinish;
            delete blockModel.addClassActive;
            delete blockModel.transitionStyle;
            delete blockModel.beforeUpdate;
            delete blockModel.afterUpdate;
            delete blockModel.beforeInit;
            delete blockModel.afterInit;
            delete blockModel.beforeMove;
            delete blockModel.afterMove;
            delete blockModel.afterAction;
            delete blockModel.startDragging;
            delete blockModel.afterLazyLoad;
        };
        f.onBeforeSave = function (blockModel) {
            var data = {
                MediaFolder: blockModel.mediaFolder(),
                ControlId: blockModel.controlId(),
                SlideSpeed: blockModel.slideSpeed(),
                PaginationSpeed: blockModel.paginationSpeed(),
                RewindSpeed: blockModel.rewindSpeed(),
                AutoPlay: blockModel.autoPlay(),
                AutoPlaySpeed: blockModel.autoPlaySpeed(),
                StopOnHover: blockModel.stopOnHover(),
                Navigation: blockModel.navigation(),
                NavigationText: blockModel.navigationText(),
                RewindNav: blockModel.rewindNav(),
                ScrollPerPage: blockModel.scrollPerPage(),
                Pagination: blockModel.pagination(),
                PaginationNumbers: blockModel.paginationNumbers(),
                Responsive: blockModel.responsive(),
                ResponsiveRefreshRate: blockModel.responsiveRefreshRate(),
                ResponsiveBaseWidth: blockModel.responsiveBaseWidth(),
                BaseClass: blockModel.baseClass(),
                Theme: blockModel.theme(),
                LazyLoad: blockModel.lazyLoad(),
                AutoHeight: blockModel.autoHeight(),
                MouseDrag: blockModel.mouseDrag(),
                TouchDrag: blockModel.touchDrag(),
                Items: blockModel.items(),
                ItemsDesktop: blockModel.itemsDesktop(),
                ItemsDesktopSmall: blockModel.itemsDesktopSmall(),
                ItemsTablet: blockModel.itemsTablet(),
                ItemsTabletSmall: blockModel.itemsTabletSmall(),
                ItemsMobile: blockModel.itemsMobile(),
                ItemsCustom: blockModel.itemsCustom(),
                SingleItem: blockModel.singleItem(),
                ItemsScaleUp: blockModel.itemsScaleUp(),
                JsonPath: blockModel.jsonPath(),
                JsonSuccess: blockModel.jsonSuccess(),
                LazyFollow: blockModel.lazyFollow(),
                LazyEffect: blockModel.lazyEffect(),
                DragBeforeAnimFinish: blockModel.dragBeforeAnimFinish(),
                AddClassActive: blockModel.addClassActive(),
                TransitionStyle: blockModel.transitionStyle(),
                BeforeUpdate: blockModel.beforeUpdate(),
                AfterUpdate: blockModel.afterUpdate(),
                BeforeInit: blockModel.beforeInit(),
                AfterInit: blockModel.afterInit(),
                BeforeMove: blockModel.beforeMove(),
                AfterMove: blockModel.afterMove(),
                AfterAction: blockModel.afterAction(),
                StartDragging: blockModel.startDragging(),
                AfterLazyLoad: blockModel.afterLazyLoad(),
            };
            blockModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>
