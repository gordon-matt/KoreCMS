@using Kore.Web.ContentManagement

@model Kore.Plugins.Widgets.Bootstrap3.Widgets.Bootstrap3ImageGalleryWidget

<div id="widget-content">
    <div class="col-sm-12 col-md-12">
        <div class="form-group">
            @Html.LabelFor(m => m.MediaFolder, new { @class = "control-label" })
            @Html.KoreCMS().MediaFoldersDropDownListFor(m => m.MediaFolder, new { @class = "form-control", data_bind = "value: mediaFolder" })
        </div>
    </div>
    <div class="col-sm-6 col-md-6">
        <div class="form-group">
            @Html.LabelFor(m => m.ImagesPerRowXS, new { @class = "control-label" })
            @Html.EnumDropDownListFor(m => m.ImagesPerRowXS, new { @class = "form-control", data_bind = "value: imagesPerRowXS" })
        </div>
    </div>
    <div class="col-sm-6 col-md-6">
        <div class="form-group">
            @Html.LabelFor(m => m.ImagesPerRowS, new { @class = "control-label" })
            @Html.EnumDropDownListFor(m => m.ImagesPerRowS, new { @class = "form-control", data_bind = "value: imagesPerRowS" })
        </div>
    </div>
    <div class="col-sm-6 col-md-6">
        <div class="form-group">
            @Html.LabelFor(m => m.ImagesPerRowM, new { @class = "control-label" })
            @Html.EnumDropDownListFor(m => m.ImagesPerRowM, new { @class = "form-control", data_bind = "value: imagesPerRowM" })
        </div>
    </div>
    <div class="col-sm-6 col-md-6">
        <div class="form-group">
            @Html.LabelFor(m => m.ImagesPerRowL, new { @class = "control-label" })
            @Html.EnumDropDownListFor(m => m.ImagesPerRowL, new { @class = "form-control", data_bind = "value: imagesPerRowL" })
        </div>
    </div>
</div>

<script type="text/javascript">
    function updateModel() {
        viewModel.mediaFolder = ko.observable("");
        viewModel.imagesPerRowXS = ko.observable(2);
        viewModel.imagesPerRowS = ko.observable(3);
        viewModel.imagesPerRowM = ko.observable(3);
        viewModel.imagesPerRowL = ko.observable(4);

        var data = ko.mapping.fromJSON(viewModel.widgetValues());

        if ((isFunction(data) && data()) || data) {
            if (data.MediaFolder == undefined) {
                // If this is not set, it means the widget is new and we have nothing in widgetValues
                return;
            }
            if (isFunction(data.MediaFolder)) {
                viewModel.mediaFolder(data.MediaFolder());
            }
            if (isFunction(data.ImagesPerRowXS)) {
                viewModel.imagesPerRowXS(data.ImagesPerRowXS());
            }
            if (isFunction(data.ImagesPerRowS)) {
                viewModel.imagesPerRowS(data.ImagesPerRowS());
            }
            if (isFunction(data.ImagesPerRowM)) {
                viewModel.imagesPerRowM(data.ImagesPerRowM());
            }
            if (isFunction(data.ImagesPerRowL)) {
                viewModel.imagesPerRowL(data.ImagesPerRowL());
            }
        }
    };

    function cleanUp() {
        delete viewModel.mediaFolder;
        delete viewModel.imagesPerRowXS;
        delete viewModel.imagesPerRowS;
        delete viewModel.imagesPerRowM;
        delete viewModel.imagesPerRowL;
    }

    function onBeforeSave() {
        var data = {
            MediaFolder: viewModel.mediaFolder(),
            ImagesPerRowXS: viewModel.imagesPerRowXS(),
            ImagesPerRowS: viewModel.imagesPerRowS(),
            ImagesPerRowM: viewModel.imagesPerRowM(),
            ImagesPerRowL: viewModel.imagesPerRowL()
        };

        viewModel.widgetValues(ko.mapping.toJSON(data));
    };

    function isFunction(functionToCheck) {
        var getType = {};
        return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
    }
</script>