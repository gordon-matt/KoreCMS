@using Kore.Plugins.Widgets.FlexSlider
@using Kore.Web.ContentManagement
@using Kore.Plugins.Widgets.FlexSlider.ContentBlocks

@model FlexSliderBlock

<div id="block-content">
    @using (var tabs = Html.KoreUI().Begin(new Kore.Web.Mvc.KoreUI.Tabs()))
    {
        tabs.Tab(T(LocalizableStrings.FlexSliderBlock.EditorTabs.General), "tab-general");
        tabs.Tab(T(LocalizableStrings.FlexSliderBlock.EditorTabs.Animation), "tab-animation");
        tabs.Tab(T(LocalizableStrings.FlexSliderBlock.EditorTabs.Navigation), "tab-navigation");
        tabs.Tab(T(LocalizableStrings.FlexSliderBlock.EditorTabs.Events), "tab-events");

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.MediaFolder, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.MediaFolder, new { @class = "form-control", data_bind = "value: blockModel.mediaFolder" })
                            <span class="input-group-addon">
                                <a data-toggle="modal" href="javascript:void(0);" data-target="#myModal">
                                    <i class="kore-icon kore-icon-search"></i>
                                </a>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ControlId, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ControlId, new { @class = "form-control", data_bind = "value: blockModel.controlId" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Namespace, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.Namespace, new { @class = "form-control", data_bind = "value: blockModel.namespace" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Selector, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.Selector, new { @class = "form-control", data_bind = "value: blockModel.selector" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("Randomize", new { data_bind = "checked: blockModel.randomize" }) @T(LocalizableStrings.FlexSliderBlock.Randomize)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("PauseOnAction", new { data_bind = "checked: blockModel.pauseOnAction" }) @T(LocalizableStrings.FlexSliderBlock.PauseOnAction)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("PauseOnHover", new { data_bind = "checked: blockModel.pauseOnHover" }) @T(LocalizableStrings.FlexSliderBlock.PauseOnHover)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("Touch", new { data_bind = "checked: blockModel.touch" }) @T(LocalizableStrings.FlexSliderBlock.Touch)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("Video", new { data_bind = "checked: blockModel.video" }) @T(LocalizableStrings.FlexSliderBlock.Video)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("Slideshow", new { data_bind = "checked: blockModel.slideshow" }) @T(LocalizableStrings.FlexSliderBlock.Slideshow)
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SlideshowSpeed, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SlideshowSpeed, new { @class = "form-control", data_bind = "value: blockModel.slideshowSpeed" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.StartAt, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.StartAt, new { @class = "form-control", data_bind = "value: blockModel.startAt" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.InitDelay, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.InitDelay, new { @class = "form-control", data_bind = "value: blockModel.initDelay" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Sync, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.Sync, new { @class = "form-control", data_bind = "value: blockModel.sync" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AsNavFor, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.AsNavFor, new { @class = "form-control", data_bind = "value: blockModel.asNavFor" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ItemWidth, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ItemWidth, new { @class = "form-control", data_bind = "value: blockModel.itemWidth" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ItemMargin, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ItemMargin, new { @class = "form-control", data_bind = "value: blockModel.itemMargin" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.MinItems, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.MinItems, new { @class = "form-control", data_bind = "value: blockModel.minItems" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.MaxItems, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.MaxItems, new { @class = "form-control", data_bind = "value: blockModel.maxItems" })
                    </div>
                </div>
            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.Animation, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.Animation, new { @class = "form-control", data_bind = "value: blockModel.animation" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Easing, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.Easing, new { @class = "form-control", data_bind = "value: blockModel.easing" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AnimationSpeed, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.AnimationSpeed, new { @class = "form-control", data_bind = "value: blockModel.animationSpeed" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Move, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.Move, new { @class = "form-control", data_bind = "value: blockModel.move" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.Direction, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.Direction, new { @class = "form-control", data_bind = "value: blockModel.direction" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("Reverse", new { data_bind = "checked: blockModel.reverse" }) @T(LocalizableStrings.FlexSliderBlock.Reverse)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("AnimationLoop", new { data_bind = "checked: blockModel.animationLoop" }) @T(LocalizableStrings.FlexSliderBlock.AnimationLoop)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("SmoothHeight", new { data_bind = "checked: blockModel.smoothHeight" }) @T(LocalizableStrings.FlexSliderBlock.SmoothHeight)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("UseCSS", new { data_bind = "checked: blockModel.useCSS" }) @T(LocalizableStrings.FlexSliderBlock.UseCSS)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="well">
                    <div class="form-group">
                        <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                        <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                            <div class="checkbox">
                                <label>
                                    @Html.CheckBox("DirectionNav", new { data_bind = "checked: blockModel.directionNav" }) @T(LocalizableStrings.FlexSliderBlock.DirectionNav)
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.PrevText, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                        <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                            @Html.TextBoxFor(m => m.PrevText, new { @class = "form-control", data_bind = "value: blockModel.prevText" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.NextText, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                        <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                            @Html.TextBoxFor(m => m.NextText, new { @class = "form-control", data_bind = "value: blockModel.nextText" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ControlNav, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.ControlNav, new { @class = "form-control", data_bind = "value: blockModel.controlNav" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ControlsContainer, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ControlsContainer, new { @class = "form-control", data_bind = "value: blockModel.controlsContainer" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ManualControls, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ManualControls, new { @class = "form-control", data_bind = "value: blockModel.manualControls" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="well">
                    <div class="form-group">
                        <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                        <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                            <div class="checkbox">
                                <label>
                                    @Html.CheckBox("PausePlay", new { data_bind = "checked: blockModel.pausePlay" }) @T(LocalizableStrings.FlexSliderBlock.PausePlay)
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.PauseText, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                        <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                            @Html.TextBoxFor(m => m.PauseText, new { @class = "form-control", data_bind = "value: blockModel.pauseText" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.PlayText, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                        <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                            @Html.TextBoxFor(m => m.PlayText, new { @class = "form-control", data_bind = "value: blockModel.playText" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("Keyboard", new { data_bind = "checked: blockModel.keyboard" }) @T(LocalizableStrings.FlexSliderBlock.Keyboard)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("MultipleKeyboard", new { data_bind = "checked: blockModel.multipleKeyboard" }) @T(LocalizableStrings.FlexSliderBlock.MultipleKeyboard)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBox("Mousewheel", new { data_bind = "checked: blockModel.mousewheel" }) @T(LocalizableStrings.FlexSliderBlock.Mousewheel)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.OnStart, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.OnStart, new { @class = "form-control", data_bind = "value: blockModel.onStart" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.OnEnd, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.OnEnd, new { @class = "form-control", data_bind = "value: blockModel.onEnd" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.OnBefore, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.OnBefore, new { @class = "form-control", data_bind = "value: blockModel.onBefore" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.OnAfter, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.OnAfter, new { @class = "form-control", data_bind = "value: blockModel.onAfter" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.OnAdded, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.OnAdded, new { @class = "form-control", data_bind = "value: blockModel.onAdded" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.OnRemoved, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextAreaFor(m => m.OnRemoved, new { @class = "form-control", data_bind = "value: blockModel.onRemoved" })
                    </div>
                </div>
            </div>
        }
    }

    <style type="text/css">
        .modal-dialog {
            width: 80% !important;
        }
    </style>

    <div class="modal fade" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" onclick="dismissModal();" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Select Image</h4>
                </div>
                <div class="modal-body">
                    <iframe src="/filemanager/dialog.php?type=1&fldr=&relative_url=1&field_id=MediaFolder&ignore_last_position=1" frameborder="0" style="overflow:hidden;min-height:600px; height:100%;width:100%" height="100%" width="100%"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var modalDismissed = false;

    function dismissModal() {
        modalDismissed = true;
        $('#myModal').modal('hide');
    };

    $(document).ready(function () {
        $('#myModal').on('hidden.bs.modal', function () {
            if (!modalDismissed) {
                var url = $('#MediaFolder').val();
                var idx = url.indexOf("Uploads");
                url = url.substring(idx);
                viewModel.blockModel.mediaFolder(url);
            }
            modalDismissed = false;
        })
    });

    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function () {
            viewModel.blockModel.mediaFolder = ko.observable("");
            viewModel.blockModel.controlId = ko.observable("slider");
            viewModel.blockModel.namespace = ko.observable(null);
            viewModel.blockModel.selector = ko.observable(null);
            viewModel.blockModel.startAt = ko.observable(0);
            viewModel.blockModel.slideshow = ko.observable(true);
            viewModel.blockModel.slideshowSpeed = ko.observable(7000);
            viewModel.blockModel.initDelay = ko.observable(0);
            viewModel.blockModel.randomize = ko.observable(false);
            viewModel.blockModel.pauseOnAction = ko.observable(true);
            viewModel.blockModel.pauseOnHover = ko.observable(false);
            viewModel.blockModel.touch = ko.observable(true);
            viewModel.blockModel.video = ko.observable(false);
            viewModel.blockModel.sync = ko.observable("");
            viewModel.blockModel.asNavFor = ko.observable("");
            viewModel.blockModel.itemWidth = ko.observable(0);
            viewModel.blockModel.itemMargin = ko.observable(0);
            viewModel.blockModel.minItems = ko.observable(0);
            viewModel.blockModel.maxItems = ko.observable(0);
            viewModel.blockModel.animation = ko.observable(0);
            viewModel.blockModel.animationSpeed = ko.observable(600);
            viewModel.blockModel.direction = ko.observable(0);
            viewModel.blockModel.reverse = ko.observable(false);
            viewModel.blockModel.move = ko.observable(0);
            viewModel.blockModel.animationLoop = ko.observable(true);
            viewModel.blockModel.smoothHeight = ko.observable(false);
            viewModel.blockModel.easing = ko.observable(1);
            viewModel.blockModel.useCSS = ko.observable(true);
            viewModel.blockModel.controlNav = ko.observable(1);
            viewModel.blockModel.directionNav = ko.observable(true);
            viewModel.blockModel.prevText = ko.observable("Previous");
            viewModel.blockModel.nextText = ko.observable("Next");
            viewModel.blockModel.pausePlay = ko.observable(false);
            viewModel.blockModel.pauseText = ko.observable("Pause");
            viewModel.blockModel.playText = ko.observable("Play");
            viewModel.blockModel.controlsContainer = ko.observable("");
            viewModel.blockModel.manualControls = ko.observable("");
            viewModel.blockModel.keyboard = ko.observable(true);
            viewModel.blockModel.multipleKeyboard = ko.observable(false);
            viewModel.blockModel.mousewheel = ko.observable(false);
            viewModel.blockModel.onStart = ko.observable(null);
            viewModel.blockModel.onEnd = ko.observable(null);
            viewModel.blockModel.onBefore = ko.observable(null);
            viewModel.blockModel.onAfter = ko.observable(null);
            viewModel.blockModel.onAdded = ko.observable(null);
            viewModel.blockModel.onRemoved = ko.observable(null);

            var data = ko.mapping.fromJSON(viewModel.blockModel.blockValues());

            if ((isFunction(data) && data()) || data) {
                if (data.MediaFolder == undefined) {
                    // If this is not set, it means the contentBlock is new and we have nothing in blockValues
                    return;
                }
                viewModel.blockModel.mediaFolder(data.MediaFolder());
                viewModel.blockModel.controlId(data.ControlId());
                viewModel.blockModel.namespace(data.Namespace());
                viewModel.blockModel.selector(data.Selector());
                viewModel.blockModel.startAt(data.StartAt());
                viewModel.blockModel.slideshow(data.Slideshow());
                viewModel.blockModel.slideshowSpeed(data.SlideshowSpeed());
                viewModel.blockModel.initDelay(data.InitDelay());
                viewModel.blockModel.randomize(data.Randomize());
                viewModel.blockModel.pauseOnAction(data.PauseOnAction());
                viewModel.blockModel.pauseOnHover(data.PauseOnHover());
                viewModel.blockModel.touch(data.Touch());
                viewModel.blockModel.video(data.Video());
                viewModel.blockModel.sync(data.Sync());
                viewModel.blockModel.asNavFor(data.AsNavFor());
                viewModel.blockModel.itemWidth(data.ItemWidth());
                viewModel.blockModel.itemMargin(data.ItemMargin());
                viewModel.blockModel.minItems(data.MinItems());
                viewModel.blockModel.maxItems(data.MaxItems());
                viewModel.blockModel.animation(data.Animation());
                viewModel.blockModel.animationSpeed(data.AnimationSpeed());
                viewModel.blockModel.direction(data.Direction());
                viewModel.blockModel.reverse(data.Reverse());
                viewModel.blockModel.move(data.Move());
                viewModel.blockModel.animationLoop(data.AnimationLoop());
                viewModel.blockModel.smoothHeight(data.SmoothHeight());
                viewModel.blockModel.easing(data.Easing());
                viewModel.blockModel.useCSS(data.UseCSS());
                viewModel.blockModel.controlNav(data.ControlNav());
                viewModel.blockModel.directionNav(data.DirectionNav());
                viewModel.blockModel.prevText(data.PrevText());
                viewModel.blockModel.nextText(data.NextText());
                viewModel.blockModel.pausePlay(data.PausePlay());
                viewModel.blockModel.pauseText(data.PauseText());
                viewModel.blockModel.playText(data.PlayText());
                viewModel.blockModel.controlsContainer(data.ControlsContainer());
                viewModel.blockModel.manualControls(data.ManualControls());
                viewModel.blockModel.keyboard(data.Keyboard());
                viewModel.blockModel.multipleKeyboard(data.MultipleKeyboard());
                viewModel.blockModel.mousewheel(data.Mousewheel());
                viewModel.blockModel.onStart(data.OnStart());
                viewModel.blockModel.onEnd(data.OnEnd());
                viewModel.blockModel.onBefore(data.OnBefore());
                viewModel.blockModel.onAfter(data.OnAfter());
                viewModel.blockModel.onAdded(data.OnAdded());
                viewModel.blockModel.onRemoved(data.OnRemoved());
            }
        };
        f.cleanUp = function () {
            delete viewModel.blockModel.mediaFolder;
            delete viewModel.blockModel.controlId;
            delete viewModel.blockModel.namespace;
            delete viewModel.blockModel.selector;
            delete viewModel.blockModel.startAt;
            delete viewModel.blockModel.slideshow;
            delete viewModel.blockModel.slideshowSpeed;
            delete viewModel.blockModel.initDelay;
            delete viewModel.blockModel.randomize;
            delete viewModel.blockModel.pauseOnAction;
            delete viewModel.blockModel.pauseOnHover;
            delete viewModel.blockModel.touch;
            delete viewModel.blockModel.video;
            delete viewModel.blockModel.sync;
            delete viewModel.blockModel.asNavFor;
            delete viewModel.blockModel.itemWidth;
            delete viewModel.blockModel.itemMargin;
            delete viewModel.blockModel.minItems;
            delete viewModel.blockModel.maxItems;
            delete viewModel.blockModel.animation;
            delete viewModel.blockModel.animationSpeed;
            delete viewModel.blockModel.direction;
            delete viewModel.blockModel.reverse;
            delete viewModel.blockModel.move;
            delete viewModel.blockModel.animationLoop;
            delete viewModel.blockModel.smoothHeight;
            delete viewModel.blockModel.easing;
            delete viewModel.blockModel.useCSS;
            delete viewModel.blockModel.controlNav;
            delete viewModel.blockModel.directionNav;
            delete viewModel.blockModel.prevText;
            delete viewModel.blockModel.nextText;
            delete viewModel.blockModel.pausePlay;
            delete viewModel.blockModel.pauseText;
            delete viewModel.blockModel.playText;
            delete viewModel.blockModel.controlsContainer;
            delete viewModel.blockModel.manualControls;
            delete viewModel.blockModel.keyboard;
            delete viewModel.blockModel.multipleKeyboard;
            delete viewModel.blockModel.mousewheel;
            delete viewModel.blockModel.onStart;
            delete viewModel.blockModel.onEnd;
            delete viewModel.blockModel.onBefore;
            delete viewModel.blockModel.onAfter;
            delete viewModel.blockModel.onAdded;
            delete viewModel.blockModel.onRemoved;
        };
        f.onBeforeSave = function () {
            var data = {
                MediaFolder: viewModel.blockModel.mediaFolder(),
                ControlId: viewModel.blockModel.controlId(),
                Namespace: viewModel.blockModel.namespace(),
                Selector: viewModel.blockModel.selector(),
                StartAt: viewModel.blockModel.startAt(),
                Slideshow: viewModel.blockModel.slideshow(),
                SlideshowSpeed: viewModel.blockModel.slideshowSpeed(),
                InitDelay: viewModel.blockModel.initDelay(),
                Randomize: viewModel.blockModel.randomize(),
                PauseOnAction: viewModel.blockModel.pauseOnAction(),
                PauseOnHover: viewModel.blockModel.pauseOnHover(),
                Touch: viewModel.blockModel.touch(),
                Video: viewModel.blockModel.video(),
                Sync: viewModel.blockModel.sync(),
                AsNavFor: viewModel.blockModel.asNavFor(),
                ItemWidth: viewModel.blockModel.itemWidth(),
                ItemMargin: viewModel.blockModel.itemMargin(),
                MinItems: viewModel.blockModel.minItems(),
                MaxItems: viewModel.blockModel.maxItems(),
                Animation: viewModel.blockModel.animation(),
                AnimationSpeed: viewModel.blockModel.animationSpeed(),
                Direction: viewModel.blockModel.direction(),
                Reverse: viewModel.blockModel.reverse(),
                Move: viewModel.blockModel.move(),
                AnimationLoop: viewModel.blockModel.animationLoop(),
                SmoothHeight: viewModel.blockModel.smoothHeight(),
                Easing: viewModel.blockModel.easing(),
                UseCSS: viewModel.blockModel.useCSS(),
                ControlNav: viewModel.blockModel.controlNav(),
                DirectionNav: viewModel.blockModel.directionNav(),
                PrevText: viewModel.blockModel.prevText(),
                NextText: viewModel.blockModel.nextText(),
                PausePlay: viewModel.blockModel.pausePlay(),
                PauseText: viewModel.blockModel.pauseText(),
                PlayText: viewModel.blockModel.playText(),
                ControlsContainer: viewModel.blockModel.controlsContainer(),
                ManualControls: viewModel.blockModel.manualControls(),
                Keyboard: viewModel.blockModel.keyboard(),
                MultipleKeyboard: viewModel.blockModel.multipleKeyboard(),
                Mousewheel: viewModel.blockModel.mousewheel(),
                OnStart: viewModel.blockModel.onStart(),
                OnEnd: viewModel.blockModel.onEnd(),
                OnBefore: viewModel.blockModel.onBefore(),
                OnAfter: viewModel.blockModel.onAfter(),
                OnAdded: viewModel.blockModel.onAdded(),
                OnRemoved: viewModel.blockModel.onRemoved()
            };
            viewModel.blockModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>
