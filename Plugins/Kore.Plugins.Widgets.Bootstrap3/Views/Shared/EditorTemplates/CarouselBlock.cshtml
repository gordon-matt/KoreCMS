@using Kore.Plugins.Widgets.Bootstrap3
@using Kore.Web.ContentManagement

@model Kore.Plugins.Widgets.Bootstrap3.ContentBlocks.Bootstrap3CarouselBlock

<div id="block-content">
    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.MediaFolder, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                <div class="input-group">
                    @Html.TextBoxFor(m => m.MediaFolder, new { @class = "form-control", data_bind = "value: blockModel.mediaFolder" })
                    <span class="input-group-addon">
                        <a data-toggle="modal" href="javascript:void(0);" data-target="#myModal">
                            <i class="kore-icon kore-icon-search"></i>
                        </a>
                    </span>
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Interval, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                @Html.TextBoxFor(m => m.Interval, new { @class = "form-control", data_bind = "value: blockModel.interval" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.StartIndex, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                @Html.TextBoxFor(m => m.StartIndex, new { @class = "form-control", data_bind = "value: blockModel.startIndex" })
            </div>
        </div>
    </div>
    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                <div class="checkbox">
                    <label>
                        @Html.CheckBox("Keyboard", new { data_bind = "checked: blockModel.keyboard" }) @T(LocalizableStrings.ContentBlocks.CarouselBlock.Keyboard)
                    </label>
                </div>
                <div class="checkbox">
                    <label>
                        @Html.CheckBox("PauseOnHover", new { data_bind = "checked: blockModel.pauseOnHover" }) @T(LocalizableStrings.ContentBlocks.CarouselBlock.PauseOnHover)
                    </label>
                </div>
                <div class="checkbox">
                    <label>
                        @Html.CheckBox("Wrap", new { data_bind = "checked: blockModel.wrap" }) @T(LocalizableStrings.ContentBlocks.CarouselBlock.Wrap)
                    </label>
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.OnSlideEvent, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                @Html.TextBoxFor(m => m.OnSlideEvent, new { @class = "form-control", data_bind = "value: blockModel.onSlideEvent" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.OnSlidEvent, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
            <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                @Html.TextBoxFor(m => m.OnSlidEvent, new { @class = "form-control", data_bind = "value: blockModel.onSlidEvent" })
            </div>
        </div>
    </div>

    <style type="text/css">
        .modal-dialog {
            width: 80% !important;
        }
    </style>

    <div class="modal fade" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" onclick="dismissModal();" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Select Image</h4>
                </div>
                <div class="modal-body">
                    <iframe src="/filemanager/dialog.php?type=1&relative_url=1&fldr=&field_id=MediaFolder&ignore_last_position=1" frameborder="0" style="overflow:hidden;min-height:600px; height:100%;width:100%" height="100%" width="100%"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var modalDismissed = false;

    function dismissModal() {
        modalDismissed = true;
        $('#myModal').modal('hide');
    };

    $(document).ready(function () {
        $('#myModal').on('hidden.bs.modal', function () {
            if (!modalDismissed) {
                var url = $('#MediaFolder').val();
                var idx = url.indexOf("Uploads");
                url = url.substring(idx);
                viewModel.blockModel.mediaFolder(url);
            }
            modalDismissed = false;
        })
    });

    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function () {
            viewModel.blockModel.mediaFolder = ko.observable("");
            viewModel.blockModel.interval = ko.observable(0);
            viewModel.blockModel.startIndex = ko.observable(0);
            viewModel.blockModel.keyboard = ko.observable(true);
            viewModel.blockModel.pauseOnHover = ko.observable(true);
            viewModel.blockModel.wrap = ko.observable(true);
            viewModel.blockModel.onSlideEvent = ko.observable("");
            viewModel.blockModel.onSlidEvent = ko.observable("");

            var data = ko.mapping.fromJSON(viewModel.blockModel.blockValues());

            if ((isFunction(data) && data()) || data) {
                if (data.MediaFolder == undefined) {
                    // If this is not set, it means the contentBlock is new and we have nothing in blockValues
                    return;
                }
                viewModel.blockModel.mediaFolder(data.MediaFolder());
                viewModel.blockModel.interval(data.Interval());
                viewModel.blockModel.startIndex(data.StartIndex());
                viewModel.blockModel.keyboard(data.Keyboard());
                viewModel.blockModel.pauseOnHover(data.PauseOnHover());
                viewModel.blockModel.wrap(data.Wrap());
                viewModel.blockModel.onSlideEvent(data.OnSlideEvent());
                viewModel.blockModel.onSlidEvent(data.OnSlidEvent());
            }
        };
        f.cleanUp = function () {
            delete viewModel.blockModel.mediaFolder;
            delete viewModel.blockModel.interval;
            delete viewModel.blockModel.startIndex;
            delete viewModel.blockModel.keyboard;
            delete viewModel.blockModel.pauseOnHover;
            delete viewModel.blockModel.wrap;
            delete viewModel.blockModel.onSlideEvent;
            delete viewModel.blockModel.onSlidEvent;
        };
        f.onBeforeSave = function () {
            var data = {
                MediaFolder: viewModel.blockModel.mediaFolder(),
                Interval: viewModel.blockModel.interval(),
                StartIndex: viewModel.blockModel.startIndex(),
                Keyboard: viewModel.blockModel.keyboard(),
                PauseOnHover: viewModel.blockModel.pauseOnHover(),
                Wrap: viewModel.blockModel.wrap(),
                OnSlideEvent: viewModel.blockModel.onSlideEvent(),
                OnSlidEvent: viewModel.blockModel.onSlidEvent()
            };

            viewModel.blockModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>