<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PhpNetCore.CodeDom</name>
    </assembly>
    <members>
        <member name="T:PHP.Core.Reflection.CodeDomCompilationUnit">
            <summary>
            Support class for CodeDOM implementation. 
            Provides methods for parsing the PHP code into AST.
            </summary>
            <remarks>Used to parse isolated text containin PHP code. So, neither module nor assembly is known.</remarks>
        </member>
        <member name="M:PHP.Core.Reflection.CodeDomCompilationUnit.#ctor(System.Boolean)">
            <summary>
            Creates new compilation unit for parsing PHP code
            </summary>
            <param name="isPure">Is the unit parsing PURE code?</param>
        </member>
        <member name="M:PHP.Core.Reflection.CodeDomCompilationUnit.ParseString(System.String,System.Text.Encoding,PHP.Core.PhpSourceFile,PHP.Core.LanguageFeatures)">
            <summary>
            Parse PHP code and return its AST.
            </summary>
            <param name="code">The PHP code to be parsed.</param>
            <param name="encoding">Encoding of the source code.</param>
            <param name="lang">Language features that may change parser behavior.</param>
            <param name="file">PHP Source file with the file name &amp; location</param>
            <returns>Returns the parsed AST node.</returns>
        </member>
        <member name="T:PHP.Core.Reflection.CodeDomCompilationUnit.ParserErrorSink">
            <summary>
            Implements trivial error sink that throws exception with the first error
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.CodeDomAssembly.#ctor(PHP.Core.CodeDom.CodeDomModule)">
            <param name="module">Can be null, but then property <see cref="P:PHP.Core.CodeDom.CodeDomAssembly.Module"/> must be initialized later.</param>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeProvider.references">
            <summary>Referenced assemblies</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeProvider.CreateCompiler">
            <summary>
            Returns a PHP code compiler.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeProvider.CreateGenerator">
            <summary>
            Returns a PHP code generator.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the
            specified text writer, using the specified options.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeProvider.GetConverter(System.Type)">
            <summary>
            Gets a <see cref="T:System.ComponentModel.TypeConverter"/> for the specified data type.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeProvider.CreateParser">
            <summary> 
            Returns a PHP code parser. 
            </summary> 
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeProvider.FileExtension">
            <summary>
            Gets the default file name extension to use for PHP source code files.
            </summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeProvider.LanguageOptions">
            <summary>
            Gets a language features identifier.
            </summary>
        </member>
        <member name="T:PHP.Core.CodeDom.Helper">
            <summary>Conntains helper members for PHP-to-CodeDOM translator</summary>
            <remarks>
            These members may appear in CodeDOM which originates from user-typed PHP code.
            It is because PHP-to-CodeDOM translator is not designed to be universal.
            It is primary designed to translate CodeDOM-to-PHP-generator-generated code back to PHP and it supports only very few PHP spoecialities.  
            These helper members usually stands for somethink that cannot be repserented in CodeDOM but in PHP can.
            The aim of these members is NOT to substitute PHP behavior and implement it for CodeDOM.
            The aim of these members is to translate CodeDOM-unsupported feature from PHP to CodeDOM somehow.
            In the future it may allow CodeDOM-to-PHP translator to translate such construct to PHP to the same code that have generated it.
            In order to avoid usage of these members by users members are hidden and obsolete.
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.Helper.GetTypeName(System.CodeDom.CodeTypeReference,System.Boolean)">
            <summary>Translates type specification used by CodeDOM to string that can be used for <see cref="M:System.Type.GetType(System.String)"/>.</summary>
            <param name="t">A <see cref="T:System.CodeDom.CodeTypeReference"/></param>
            <param name="GenericArgs">True for include generic args in string (otherwise only grave and number will be included)</param>
            <returns>Type name</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.Helper.GetType(System.CodeDom.CodeTypeReference,System.Collections.Generic.IDictionary{System.String,System.String},System.String[],System.Collections.Generic.IList{System.String})">
            <summary>Tries to get <see cref="T:System.Type"/> from <see cref="T:System.CodeDom.CodeTypeReference"/></summary>
            <param name="t">A <see cref="T:System.CodeDom.CodeTypeReference"/></param>
            <param name="aliases"></param>
            <param name="imports"></param>
            <param name="references"></param>
            <returns><see cref="T:System.Type"/> if found or null.</returns>
        </member>
        <member name="F:PHP.Core.CodeDom.Helper.unset">
            <summary>unset PHP pseudo-function is translated as assignment of this field ot a variable (with exception of local variables for which Ã¼nset is translated to assign of null because it is what PHP actually does)</summary>
            <remarks>Note: assigning null to anything else than local variable is not the same think as unsetting it!</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.Helper.CallIndirectStatic(System.Type,System.String,System.Object[])">
            <summary>Indirectly calls static method. Intended only to be CodeDOM replacement for PHP indirect static method call</summary>
            <param name="type">Type to invoke method on</param>
            <param name="name">Name of method</param>
            <param name="params">Parameters of method</param>
            <returns>Retrn value of invoked method</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.Helper.CallIndirectInstance(System.Object,System.String,System.Object[])">
            <summary>Indirectly calls instance method. Intended only to be CodeDOM replacement for PHP indirect instance method call</summary>
            <param name="instance">Instance to invoke method on</param>
            <param name="name">Name of method</param>
            <param name="params">Parameters of method</param>
            <returns>Retrn value of invoked method</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.Helper.iif(System.Boolean,System.Object,System.Object)">
            <summary>CodeDOM replacement for PHP conditional operator ?:</summary>
            <param name="Condition">Boolean expression</param>
            <param name="True">Returned whne <paramref name="Condition"/> is True</param>
            <param name="False">Returned when <paramref name="Condition"/> is False</param>
            <returns><paramref name="True"/> or <paramref name="False"/> depending on <paramref name="Condition"/></returns>
        </member>
        <member name="M:PHP.Core.CodeDom.Helper.ReturnFirst(System.Object,System.Object)">
            <summary>Returns first argument</summary>
            <param name="First">Argument being returned</param>
            <param name="Second">No meaning</param>
            <returns><paramref name="First"/></returns>
        </member>
        <member name="M:PHP.Core.CodeDom.Helper.ReturnNull(System.Object)">
            <summary>Returns null</summary>
            <param name="anything">Anything, no meaning</param>
            <returns>null</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.Helper.Print(System.String,PHP.Core.ScriptContext)">
            <summary>Echos parameter and returns 1</summary>
            <param name="ToPrint">String to echo</param>
            <param name="PHPContext">COntext to echo <paramref name="ToPrint"/> through</param>
            <returns>1</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.Helper.NoError(System.Object)">
            <summary>Returns its parameter</summary>
            <param name="obj">Parameter to return</param>
            <returns><paramref name="obj"/></returns>
        </member>
        <member name="T:PHP.Core.CodeDom.Helper.IndirectStFldAccess">
            <summary>Creating instance of this class and using it's <see cref="P:PHP.Core.CodeDom.Helper.IndirectStFldAccess.Access">Access</see> property stands in CodeDOM for PHP indirect access to static field (MyClass::$$field)</summary>
            <remarks>The <see cref="P:PHP.Core.CodeDom.Helper.IndirectStFldAccess.Access">Access</see> is currently not implemented and throws <see cref="T:System.NotImplementedException"/>.</remarks>
        </member>
        <member name="F:PHP.Core.CodeDom.Helper.IndirectStFldAccess.type">
            <summary>Type <see cref="F:PHP.Core.CodeDom.Helper.IndirectStFldAccess.field"/> is field of</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.Helper.IndirectStFldAccess.field">
            <summary>Name of field to access to</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.Helper.IndirectStFldAccess.#ctor(System.Type,System.String)">
            <summary>CTor</summary>
            <param name="type">Type <paramref name="field"/> is field of</param>
            <param name="field">Name of field to be accessed</param>
        </member>
        <member name="P:PHP.Core.CodeDom.Helper.IndirectStFldAccess.Access">
            <summary>If implemented provides access to field given in constructor</summary>
            <remarks>Actually neither setter nor getter is implemented and both throw <see cref="T:System.NotImplementedException"/></remarks>
            <exception cref="T:System.NotImplementedException">Always</exception>
        </member>
        <member name="T:PHP.Core.CodeDom.Helper.IndirectInstFldAccess">
            <summary>Creating instance of this class and using it's <see cref="P:PHP.Core.CodeDom.Helper.IndirectInstFldAccess.Access">Access</see> property stands in CodeDOM for PHP indirect access to instance field ($instance-&gt;$field)</summary>
            <remarks>The <see cref="P:PHP.Core.CodeDom.Helper.IndirectInstFldAccess.Access">Access</see> is currently not implemented and throws <see cref="T:System.NotImplementedException"/>.</remarks>
        </member>
        <member name="F:PHP.Core.CodeDom.Helper.IndirectInstFldAccess.instance">
            <summary>Instance <see cref="F:PHP.Core.CodeDom.Helper.IndirectInstFldAccess.field"/> is field of</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.Helper.IndirectInstFldAccess.field">
            <summary>Name of field to access to</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.Helper.IndirectInstFldAccess.#ctor(System.Object,System.String)">
            <summary>CTor</summary>
            <param name="instance">Instance <paramref name="field"/> is field of</param>
            <param name="field">Name of field to be accessed</param>
        </member>
        <member name="P:PHP.Core.CodeDom.Helper.IndirectInstFldAccess.Access">
            <summary>If implemented provides access to field given in constructor</summary>
            <remarks>Actually neither setter nor getter is implemented and both throw <see cref="T:System.NotImplementedException"/></remarks>
            <exception cref="T:System.NotImplementedException">Always</exception>
        </member>
        <member name="T:PHP.Core.CodeDom.Helper.IndirectVarAccess">
            <summary>Creating instance of this class and using it's <see cref="P:PHP.Core.CodeDom.Helper.IndirectVarAccess.Access">Access</see> property stands in CodeDOM for PHP indirect access variable ($$var)</summary>
            <remarks>The <see cref="P:PHP.Core.CodeDom.Helper.IndirectVarAccess.Access">Access</see> is currently not implemented and throws <see cref="T:System.NotImplementedException"/>.</remarks>
        </member>
        <member name="F:PHP.Core.CodeDom.Helper.IndirectVarAccess.field">
            <summary>Name of variable to access to</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.Helper.IndirectVarAccess.#ctor(System.String)">
            <summary>CTor</summary>
            <param name="field">Name of variable to be accessed</param>
        </member>
        <member name="P:PHP.Core.CodeDom.Helper.IndirectVarAccess.Access">
            <summary>If implemented provides access to variable with name given in constructor</summary>
            <remarks>Actually neither setter nor getter is implemented and both throw <see cref="T:System.NotImplementedException"/></remarks>
            <exception cref="T:System.NotImplementedException">Always</exception>
        </member>
        <member name="T:PHP.Core.CodeDom.Keywords">
            <summary>
            Keywords (forbidden identifiers).
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.Keywords.IsKeyword(System.String)">
            <summary>
            Determines whether a given string is a keyword.
            </summary>
            <param name="str">A string.</param>
            <returns><B>True</B> if <paramref name="str"/> is a keyword, <B>false</B> otherwise.</returns>
        </member>
        <member name="T:PHP.Core.CodeDom.SpecialWords">
            <summary>
            Special words (allowed identifiers).
            </summary>
        </member>
        <member name="T:PHP.Core.CodeDom.Tokens">
            <summary>
            Non-word tokens (brackets, operators, etc).
            </summary>
        </member>
        <member name="T:PHP.Core.CodeDom.WhiteSpace">
            <summary>
            White space characters.
            </summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser">
            <summary>Implements <see cref="T:System.CodeDom.Compiler.ICodeParser"/> for PHP language</summary>
            <remarks>The purpose of this class is to translate code tree representation that is used by PHP internally to .NET's CodeDOM.</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.Parse(System.IO.TextReader)">
            <summary>Compiles the specified text stream into a <see cref="T:System.CodeDom.CodeCompileUnit"/>.</summary>
            <param name="codeStream">A <see cref="T:System.IO.TextReader"/> that is used to read the code to be parsed.</param>
            <returns>A <see cref="T:System.CodeDom.CodeCompileUnit"/> containing the code model produced from parsing the code.</returns>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.delegateMode">
            <summary>Containd value of the <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.DelegateMode"/> property</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.eventMode">
            <summary>Contains value of the <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.EventMode"/> property.</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.DelegateMode">
            <summary>Mode of translating delegate-like constructs</summary>
            <remarks>PHP creates delegate using sth. like new System:::EventHandler(array($this, "mtd"))</remarks>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.EventMode">
            <summary>Mode of translating event-attach/detach-like constructs</summary>
            <remarks>PHP attaches/detaches events using sth. like $instance->Event-Add(delegate) resp. $instance->Event-Remove(delegate)</remarks>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.DelegateModes">
            <summary>Possible way of recognizing delegates</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.DelegateModes.ByType">
            <summary>Try to find type (only in already compiled DLLs). If type being constructed is delegate, translate as creation of delegate.</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.DelegateModes.AllPossible">
            <summary>All constructors that are feed by CTor non-associative array with 2 elements, where 2nd is string literal, ale treated as ctors of delegate.</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.DelegateModes.None">
            <summary>No delegate CTors are produced</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.EventModes">
            <summary>Possible ways of recognizing events</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.EventModes.WithDelegateOnly">
            <summary>Only when argument is creation of delegate</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.EventModes.AllPossible">
            <summary>All statements in format (somethink)->Name->Add(something) (or Remove)</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.EventModes.None">
            <summary>No event attach/remove statements are produced</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation">
            <summary>Implements translation for <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser"/></summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.eventMode">
            <summary>Contains value of the <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.EventMode"/> property.</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.delegateMode">
            <summary>Containd value of the <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.DelegateMode"/> property</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.owner">
            <summary>Owner of this instance</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.#ctor(PHP.Core.CodeDom.PhpCodeDomParser.EventModes,PHP.Core.CodeDom.PhpCodeDomParser.DelegateModes,PHP.Core.CodeDom.PhpCodeDomParser)">
            <summary>CTor</summary>
            <param name="eventMode">Mode of translating event-attach/detach-like constructs</param>
            <param name="delegateMode">Mode of translating delegate-like constructs</param>
            <param name="owner">Instance of <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser"/> that created this instance</param>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.LooksLikeDelegate(PHP.Core.AST.NewEx)">
            <summary>Guess if <see cref="T:PHP.Core.AST.NewEx"/> creates new delegate or not</summary>
            <param name="New">Expression to make guess for</param>
            <returns>Booleand indicating if expression should be treated as delegate cÂ¨reation depending on <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.DelegateMode"/>.</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.GetType(System.CodeDom.CodeTypeReference)">
            <summary>Tries to get <see cref="T:System.Type"/> from <see cref="T:System.CodeDom.CodeTypeReference"/></summary>
            <param name="t">A <see cref="T:System.CodeDom.CodeTypeReference"/></param>
            <returns><see cref="T:System.Type"/> if found or null.</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CanBeDelegateConstruction(PHP.Core.AST.NewEx)">
            <summary>Returns value indicating if <see cref="T:PHP.Core.AST.NewEx"/> can syntactically be creation of delegate</summary>
            <param name="New">Expression to makde decission for</param>
            <returns>
            True for <see cref="T:PHP.Core.AST.NewEx">NewEx</see>s with one argument which is
            <see cref="T:PHP.Core.AST.ArrayEx"/> with 2 non-associative (without index) elements (no rereferce elements)
            and 2nd element's value is <see cref="T:PHP.Core.AST.StringLiteral"/>.
            </returns>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.currentFile">
            <summary>Stores name of file currently being translated</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.currentClass">
            <summary>Stores name of class currently being translated</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.currentMethod">
            <summary>Stores fully qualified name of method currently beigng translated</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.currentFunction">
            <summary>Stores name of method currently being translated</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.currentNamespace">
            <summary>Stores name of namespace currently being translated</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.getIC(System.Object)">
            <summary>Converts anything to <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> if it is implemented by that 'anything'</summary>
            <param name="obj">Object to convert</param>
            <returns><paramref name="obj"/> if it implements <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/>; null otherwise</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.getICodeBlockContext(System.Object)">
            <summary>Converts anything to <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ICodeBlockContext"/> if it is implemented by that 'anything'</summary>
            <param name="obj">Object to convert</param>
            <returns><paramref name="obj"/> if it implements <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ICodeBlockContext"/>; null otherwise</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodAndBlock(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext@,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ICodeBlockContext@,PHP.Core.AST.LangElement)">
            <summary>Helper for translation for block-level statements. Performs type conversion from <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase"/> to <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext"/> and from <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext"/> to <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ICodeBlockContext"/></summary>
            <param name="methodQ">Something that should be <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext"/></param>
            <param name="blockQ">Something that may be <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext"/></param>
            <param name="method">Returns <paramref name="methodQ"/></param>
            <param name="block">Returns <paramref name="blockQ"/> if <paramref name="blockQ"/> is <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ICodeBlockContext"/>, otherwise null</param>
            <param name="errorElement">The element to throw <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"/> on</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"><paramref name="methodQ"/> is not <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext"/></exception>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.__SwitchVarName">
            <summary>Counter for <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.SwitchVarName"/></summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.__Labels1">
            <summary>Counter of start labels for <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.LabelName(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.Loops,System.Boolean)"/></summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.__Labels2">
            <summary>Counter of end labels for <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.LabelName(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.Loops,System.Boolean)"/></summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.#cctor">
            <summary>Initializer</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.LabelName(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.Loops,System.Boolean)">
            <summary>Gets unique name of label for loop</summary>
            <param name="type">Type of loop to get label for</param>
            <param name="start">True if this is label of start of loop; otherwise false</param>
            <returns>Name of label</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IsProperty(PHP.Core.AST.DirectVarUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase)">
            <summary>Gets value indicationg if given <see cref="T:PHP.Core.AST.DirectVarUse"/> refers to property or field</summary>
            <param name="use"><see cref="T:PHP.Core.AST.DirectVarUse"/> to make resolution for</param>
            <param name="method">GetUserEntryPoint used for resolving context</param>
            <returns>True if <paramref name="use"/> reffres to property, false if it reffers to field or resolution cannot be done</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.GetType(PHP.Core.AST.VarLikeConstructUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase)">
            <summary>Tryes to get type of <see cref="T:PHP.Core.AST.VarLikeConstructUse"/></summary>
            <param name="use"><see cref="T:PHP.Core.AST.VarLikeConstructUse"/> to get type of</param>
            <param name="method">GetUserEntryPoint used for resolving context</param>
            <returns>Type of value returned by given member. Type of <see cref="T:System.Object"/> if type cannot be infered.</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IsProperty(PHP.Core.AST.DirectStFldUse)">
            <summary>Gets value indicationg if given <see cref="T:PHP.Core.AST.DirectStFldUse"/> refers to property or field</summary>
            <param name="use"><see cref="T:PHP.Core.AST.DirectStFldUse"/> to make resolution for</param>
            <returns>True if <paramref name="use"/> reffres to property, false if it reffers to field or resolution cannot be done</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TypeEquals(System.CodeDom.CodeTypeReference,System.CodeDom.CodeTypeReference)">
            <summary>Compares two <see cref="T:System.CodeDom.CodeTypeReference">CodeTypeReferences</see></summary>
            <param name="T1">A <see cref="T:System.CodeDom.CodeTypeReference"/></param>
            <param name="T2">A <see cref="T:System.CodeDom.CodeTypeReference"/></param>
            <returns>true if both arguments represents the same type (or both are null); false otherwise</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.getPragma(System.Int32)">
            <summary>Gets <see cref="T:System.CodeDom.CodeLinePragma"/> for given line</summary>
            <param name="Line">Line number (0-based)</param>
            <returns><see cref="T:PHP.Core.CodeDom.CodeLinePragmaNoWrite"/> with <see cref="P:System.CodeDom.CodeLinePragma.FileName"/> set to <see cref="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.currentFile"/></returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.Parse(System.String)">
            <summary>Compiles the specified string into a <see cref="T:System.CodeDom.CodeCompileUnit"/>.</summary>
            <param name="codeText">A <see cref="T:System.String"/> that contains code to be parsed.</param>
            <returns>A <see cref="T:System.CodeDom.CodeCompileUnit"/> containing the code model produced from parsing the code.</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.Translate(PHP.Core.AST.GlobalCode)">
            <summary>Translates tree of PHP code into .NET's CodeDOM tree representation</summary>
            <param name="gc">Parsed PHP code</param>
            <returns><paramref name="gc"/> translated into <see cref="T:System.CodeDom.CodeCompileUnit"/></returns>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">PHP construct that is not (currently) supported for translation into CodeDOM has been reached.</exception>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.imports">
            <summary>Contains value of the <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.Imports"/> property</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateBlock(System.Collections.Generic.IEnumerable{PHP.Core.AST.Statement},PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates sequence of PHP statements into sequence of CodeDOM objects</summary>
            <param name="statements">Statements to translate</param>
            <param name="method">GetUserEntryPoint context in which the statements are placed</param>
            <param name="block">Block context in which the statemenst are placed</param>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateBlock(System.Collections.Generic.IEnumerable{PHP.Core.AST.TypeMemberDecl},PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates sequence of members of Type into sequence of CodeDOM objects</summary>
            <param name="members">Members to translate</param>
            <param name="block">Block context in which the statemenst are placed</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Some block contains unsupported construct (as goes from <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateMemberList(PHP.Core.AST.ConstDeclList,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateMemberList(PHP.Core.AST.FieldDeclList,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateMethod(PHP.Core.AST.MethodDecl,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateGenericQualifiedName(PHP.Core.GenericQualifiedName,System.Boolean)">
            <summary>Translates PHP <see cref="T:PHP.Core.GenericQualifiedName"/> into COdeDOM <see cref="T:System.CodeDom.CodeTypeReference"/></summary>
            <param name="PHPName">PHP type name to be translated</param>
            <param name="IntoFull">True to emit fully qualified name; otherwise only last part of name will be emitted</param>
            <returns>Representation of <paramref name="PHPName"/> in CodeDOM</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateAttribute(PHP.Core.AST.CustomAttribute)">
            <summary>Translates PHP application of custom attribute into CodeDOM one</summary>
            <param name="Attribute">Attribute to translate</param>
            <returns>CodeDom representation of <paramref name="Attribute"/>. May return null if <paramref name="Attribute"/> should be skipped.</returns>
            <remarks>Property/field initialization is ignored</remarks> 
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Expression used to initialize attribute is either not supported or is not supported in this context (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateConditions(System.Collections.Generic.List{PHP.Core.AST.ConditionalStmt},System.Int32,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates "flat" PHP if statement into recursive CodeDOM equivalent (like C# uses)</summary>
            <param name="Conditions">List of 'if', 'elseif' and 'else' clausules</param>
            <param name="start">Index to <paramref name="Conditions"/> where to start with translation</param>
            <param name="Method">GetUserEntryPoint for declaring local variables</param>
            <param name="block">Block to add statements to</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> &gt;= <paramref name="Conditions"/>.<see cref="P:System.Collections.Generic.List`1.Count">Count</see></exception>
            <exception cref="T:System.ArgumentException"><paramref name="start"/> = <paramref name="Conditions"/>.<see cref="P:System.Collections.Generic.List`1.Count">Count</see> and <see cref="P:PHP.Core.AST.ConditionalStmt.Condition"/> of current condition is null</exception>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            Current condition is else condition (has <see cref="P:PHP.Core.AST.ConditionalStmt.Condition"/> null) and it is not the last condition.
            =or=
            Expression in condition is not supported (as goes from <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)
            </exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translates PHP expression to CodeDOM expression</summary>
            <param name="Expression">Expression to translate</param>
            <param name="method">GetUserEntryPoint with declaration of local variables</param>
            <returns>CodeDOM representation of <paramref name="Expression"/></returns>
            <param name="IC">Context for inserting statements when expression cannot be inlined. (Can be null)</param>
            <remarks>Not all expressions can be translated to do exactly same thing</remarks>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            <paramref name="Expression"/> is <see cref="T:PHP.Core.AST.RefAssignEx"/>
            =or=
            <paramref name="Expression"/> is <see cref="T:PHP.Core.AST.EmptyEx"/>
            =or=
            <paramref name="Expression"/> is <see cref="T:PHP.Core.AST.IncludingEx"/>
            =or=
            <paramref name="Expression"/> is of another unknown and thus unsupported type
            =or=
            Some sub-expression is not supported (as goes from <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateVariableUse(PHP.Core.AST.VariableUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateBinaryOperation(PHP.Core.AST.BinaryEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateConcatExpression(PHP.Core.AST.ConcatEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateGenericQualifiedName(PHP.Core.GenericQualifiedName,System.Boolean)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateTypeRef(PHP.Core.AST.TypeRef,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateList(PHP.Core.AST.ListEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateNew(PHP.Core.AST.NewEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateShellExec(PHP.Core.AST.ShellEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateUnaryOperator(PHP.Core.AST.UnaryEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateVarLikeConstructUse(PHP.Core.AST.VarLikeConstructUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateArray(PHP.Core.AST.ArrayEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)
            </exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateBinaryOperator(PHP.Core.AST.Operations,PHP.Core.AST.LangElement)">
            <summary>Translates PHP binary operator to CodeDOM binary operator</summary>
            <param name="op">Operator to translate (make sure that it is binary operator)</param>
            <returns>CodeDOM equivalent of <paramref name="op"/></returns>
            <remarks>Translates only binary operators, and only some of them - only thos rhat have equivalent in CodeDOM</remarks>
            <param name="element">Element to thrown <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"/> on</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"><paramref name="op"/> is either not a binary operator or it is not supported by this function</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateAssignOperatorToNonAssign(PHP.Core.AST.Operations,PHP.Core.AST.LangElement)">
             <summary>Translates PHP assign shortcut operator to CodeDOM non-assign operator this operator is shortcut to</summary>
             <param name="op">Operator to be translated</param>
             <returns>Translated operator</returns>
             <param name="element">Element to thrown <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"/> on</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"><paramref name="op"/> is not of supported operators (not all PHP assign shortcuts are supported by this function)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateBinaryOperation(PHP.Core.AST.BinaryEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translates PHP binary operation into as close as possible equivalent in CodeDOM</summary>
            <param name="Operation">Operation to translated</param>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="IC">Context for adding statements</param>
            <returns>Operation translated</returns>
            <remarks>
            Some operations are not translated 1:1.
            If operand non-1:1-translated operation has side effect, the side effect can occure multiple times!
            Namely: Assign shotrcuts (/=, .=, *=, ...) and boolean Xor.
            Some operations are translate as core function calls instead of operators (bitwise xor, shifts)
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateUnaryOperator(PHP.Core.AST.UnaryEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translates unary operator from PHP to CodeDOM</summary>
            <param name="op">Operator to translate</param>
            <param name="method">GetUserEntryPoint for defining local variables</param>
            <param name="IC">Context for adding statements</param>
            <returns>Translated expression</returns>
            <remarks>Since there is no support for unary operators in CodeDOM, translations are not 1:1.</remarks>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Unknown unary operator =or= Sub-expression is not supported (as goes from <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateNew(PHP.Core.AST.NewEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translates call of PHP constructor to CodeDOM</summary>
            <param name="New">CTor to translate</param>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="IC">COntext for adding statements</param>
            <returns>Translated sxpression</returns>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">One of sub-expressions is not supported (as goes from <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateTypeRef(PHP.Core.AST.TypeRef,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateParams(System.Collections.Generic.IList{PHP.Core.AST.ActualParam},PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext,System.Reflection.ParameterInfo[])"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateDelegateCreation(PHP.Core.AST.NewEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translates delegate creation from PHP to CodeDOM</summary>
            <param name="New">Expression used to create delegate.
            Delegate must be created using <see cref="T:PHP.Core.AST.NewEx"/> with only one parameter type <see cref="T:PHP.Core.AST.ArrayEx"/> that consits of 2 <see cref="T:PHP.Core.AST.ValueItem"/>-s without index where <see cref="P:PHP.Core.AST.ValueItem.ValueExpr">ValueExpr</see> of 2nd item is <see cref="T:PHP.Core.AST.StringLiteral"/>.</param>
            <param name="method">GetUserEntryPoint for declaring local variables.</param>
            <param name="IC">Context for inserting statements</param>
            <returns>Translated expression</returns>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            <paramref name="New"/> does not obey rules menitoned above.
            =or=
            Expression used as delegate's object is not supported (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>). 
            </exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateDirectVarUse(PHP.Core.AST.DirectVarUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase)">
            <summary>Gets name of variable from <see cref="T:PHP.Core.AST.DirectVarUse"/></summary>
            <param name="dvu"><see cref="T:PHP.Core.AST.DirectVarUse"/> to be translated</param>
            <param name="method">GetUserEntryPoint fro declaring local variables</param>
            <returns>Name of variable used</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateVariableUse(PHP.Core.AST.VariableUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translate use of variable in PHP into CodeDOM</summary>
            <param name="use"><see cref="T:PHP.Core.AST.VariableUse"/> to be translated</param>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="IC">Block for inserting aditional statements</param>
            <returns>Expression containing access to variale</returns>
            <remarks>Not each kind of access to variable in PHP can be repsesented in CodeDOM. Namely indirect accesses cannot. They are represented via objects from <see cref="T:PHP.Core.CodeDom.Helper"/> class. This is done only for CodeDOM pusposes. So translated indirect access cannot be used in runtime, because it is not implemented (by now).</remarks>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            <paramref name="use"/> is neither of <see cref="T:PHP.Core.AST.ItemUse"/> <see cref="T:PHP.Core.AST.DirectVarUse"/>, <see cref="T:PHP.Core.AST.IndirectVarUse"/>, <see cref="T:PHP.Core.AST.DirectStFldUse"/>, <see cref="T:PHP.Core.AST.DirectStFldUse"/>
            =or=
            some sub-construct is not supported (as comes from <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateVariableUse(PHP.Core.AST.VariableUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateVarLikeConstructUse(PHP.Core.AST.VarLikeConstructUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateGenericQualifiedName(PHP.Core.GenericQualifiedName,System.Boolean)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateDirectVarUse(PHP.Core.AST.DirectVarUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateDirectStFldUse(PHP.Core.AST.DirectStFldUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)
            =or=
            Attempt to use static variable inside method that is not member of class.
            </exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateDirectVarUse(PHP.Core.AST.DirectVarUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translates <see cref="T:PHP.Core.AST.DirectVarUse"/> ($obj-&gt;var) to <see cref="T:System.CodeDom.CodeFieldReferenceExpression"/> or <see cref="T:System.CodeDom.CodePropertyReferenceExpression"/></summary>
            <param name="use">A <see cref="T:PHP.Core.AST.DirectVarUse"/> to translate. <paramref name="use"/>.<see cref="P:PHP.Core.AST.VarLikeConstructUse.IsMemberOf">IsMemberOf</see> must not be null.</param>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="IC">Block for inserting aditional statements</param>
            <returns><see cref="T:System.CodeDom.CodeFieldReferenceExpression"/> or <see cref="T:System.CodeDom.CodePropertyReferenceExpression"/></returns>
            <exception cref="T:System.NullReferenceException"><paramref name="use"/>.<see cref="P:PHP.Core.AST.VarLikeConstructUse.IsMemberOf">IsMemberOf</see> is null (it represents $var instead of $obj-&gt;var)</exception>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Sub-construct is not supported (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateVarLikeConstructUse(PHP.Core.AST.VarLikeConstructUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateDirectStFldUse(PHP.Core.AST.DirectStFldUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translates <see cref="T:PHP.Core.AST.DirectStFldUse"/> (class::$var) to <see cref="T:System.CodeDom.CodeFieldReferenceExpression"/> or <see cref="T:System.CodeDom.CodePropertyReferenceExpression"/></summary>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="IC">Block for inserting aditional statements</param>
            <param name="use">A <see cref="T:PHP.Core.AST.DirectStFldUse"/> to translate</param>
            <returns><see cref="T:System.CodeDom.CodeFieldReferenceExpression"/> or <see cref="T:System.CodeDom.CodePropertyReferenceExpression"/></returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.GetHintMethod(System.CodeDom.CodeExpression,System.String,System.Int32,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase)">
            <summary>Attempts to get method being called</summary>
            <param name="target">Object method is invoked on</param>
            <param name="name">GetUserEntryPoint name</param>
            <param name="parcount">Number of parameters</param>
            <param name="context">Context</param>
            <returns>If found returns method of target object with given name and possibly same number of parameters; null otherwise</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateVarLikeConstructUse(PHP.Core.AST.VarLikeConstructUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translates <see cref="T:PHP.Core.AST.VarLikeConstructUse"/> to CodeDOM <see cref="T:System.CodeDom.CodeExpression"/>.</summary>
            <param name="use"><see cref="T:PHP.Core.AST.VarLikeConstructUse"/> to translate</param>
            <param name="method">method for declaring variables</param>
            <param name="IC">Blosk for inserting aditional statements</param>
            <returns><see cref="T:System.CodeDom.CodeExpression"/> that repsesents <paramref name="use"/></returns>
            <remarks>
            This method deals with method calls. Only direct method calls are fully implemented. Indirect calls are implemented via helper method of <see cref="T:PHP.Core.CodeDom.Helper"/>. Semantic of helper method is not exactly the same as of PHP indirect call. Type parameters for indirect calls are ignored!
            Variable usages are passed to <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateVariableUse(PHP.Core.AST.VariableUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>.
            </remarks>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            Attempt to translate call of instance method without instance specified.
            =or=
            <paramref name="use"/> is neither of <see cref="T:PHP.Core.AST.DirectFcnCall"/>, <see cref="T:PHP.Core.AST.IndirectFcnCall"/>, <see cref="T:PHP.Core.AST.StaticMtdCall"/>, <see cref="T:PHP.Core.AST.IndirectStMtdCall"/>, <see cref="T:PHP.Core.AST.VariableUse"/>
            =or=
            Sub-construct is not supported (as goes from <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateVarLikeConstructUse(PHP.Core.AST.VarLikeConstructUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateParams(System.Collections.Generic.IList{PHP.Core.AST.ActualParam},PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext,System.Reflection.ParameterInfo[])"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateTypeRef(PHP.Core.AST.TypeRef,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateVariableUse(PHP.Core.AST.VariableUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)
            </exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateParams(System.Collections.Generic.IList{PHP.Core.AST.ActualParam},PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext,System.Reflection.ParameterInfo[])">
            <summary>Translates list of PHP actual parameters of method to list of CodeDOM expressions</summary>
            <param name="Params">Parameters to be translated</param>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="IC">Context for inserting additional statements</param>
            <returns>Array of expressions translated from PHP to CodeDOM for each parameter</returns>
            <param name="TargetSignature">Parameter hints. Size doesn't have to match size of <paramref name="Params"/>. Can be even empty or null.</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">May be thrown by <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateParam(PHP.Core.AST.ActualParam,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext,System.Reflection.ParameterInfo)"/>.</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateParam(PHP.Core.AST.ActualParam,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext,System.Reflection.ParameterInfo)">
            <summary>Translates actual parameter of method from PHP to CodeDOM</summary>
            <param name="Param">Parameter to be translated</param>
            <param name="method">GetUserEntryPoint fro declaring variables</param>
            <param name="IC">Context for inserting additional statements</param>
            <param name="Hint">May contain casting hint for parameter. Currently utilized only with arrays.</param> 
            <returns>Expression thet represents parameter translated from PHP to CodeDOM</returns>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">My be thrown by <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/></exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateArray(PHP.Core.AST.ArrayEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translates PHP array "constructor" to CodeDOM</summary>
            <param name="array">Array "constructor" to be translated</param>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="IC">Context for adding aditional statements</param>
            <returns>Translated expression</returns>
            <remarks>
            If <paramref name="array"/> does not contain any associative item (it is item with <see cref="P:PHP.Core.AST.Item.Index"/> != null) array initialization is translated inline like C# object[] = new object[]{item1,item2,item3}.
            This does not require <paramref name="IC"/>.
            If there is any associative item in the list, expression is translated using <paramref name="IC"/> as creation of new variable of type <see cref="T:PHP.Core.PhpArray"/> and then filled using <see cref="M:PHP.Core.PhpArray.SetArrayItem(System.Object)"/> for non-associative items and <see cref="M:PHP.Core.PhpArray.SetArrayItem(System.Object,System.Object)"/> for associative ones.
            In this case function returns refernce to newly created variable.
            </remarks>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            Array contains item passed by reference.
            =or=
            Array contains item that is neither <see cref="T:PHP.Core.AST.ValueItem"/> nor <see cref="T:PHP.Core.AST.RefItem"/>
            =or=
            Array contains an associative item and <paramref name="IC"/> is null
            =or=
            Any sub-expression contains unsupported construct (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateNotAssociativeArrayItems(System.Collections.Generic.IEnumerable{PHP.Core.AST.Item},PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext,PHP.Core.AST.ArrayEx)"/>)
            </exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CommonBase(System.Type,System.Type,System.Boolean)">
            <summary>Attempts to determine commn base type of 2 types</summary>
            <param name="t1">A <see cref="T:System.Type"/></param>
            <param name="t2">A <see cref="T:System.Type"/></param>
            <param name="iface">True to return interface if no class is possible</param>
            <returns>Common base type of <paramref name="t1"/> and <paramref name="t2"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="t1"/> or <paramref name="t2"/> is null</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.GetTypeOfExpression(System.CodeDom.CodeExpression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase)">
            <summary>Attempts to determine return type of an expression</summary>
            <param name="expression">Expression to determine type of</param>
            <param name="context">Context. May be null, but certain expressions requires context to be known</param>
            <returns>Type returned by expression; null if not successfull</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateNotAssociativeArrayItems(System.Collections.Generic.IEnumerable{PHP.Core.AST.Item},PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext,PHP.Core.AST.ArrayEx)">
            <summary>Translates list of items of non-associative (no indexes, values only) array initialization to CodeDOM list of expressions</summary>
            <param name="items">Items to translate</param>
            <param name="method">method for declaring local variables</param>
            <param name="IC">Context for adding additional statements</param>
            <param name="array">Array to throw <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"/> on in case it cannot be thrown on item</param>
            <returns>Array of <see cref="T:System.CodeDom.CodeExpression"/> taht represents content of array</returns>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            A passed-by-reference item of array reached.
            =or=
            Any sub-expression contains unsupported construct (<see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)
            </exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateShellExec(PHP.Core.AST.ShellEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translates PHP execution expression `` to CodeDom call of <see cref="M:PHP.Core.Execution.ShellExec(System.String)"/> method</summary>
            <param name="command">Command do translate</param>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="IC">Block for inserting additional statements</param>
            <returns>Translated expression</returns>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Some of sub-expressions are not supported (as goes from <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.Translate__const(PHP.Core.AST.PseudoConstUse)">
            <summary>Translates PHP pseudo-constant to CodeDOM (one-way)</summary>
            <param name="__">PseudoConstant to translate</param>
            <returns>Literal that represents this pseudo-constant</returns>
            <remarks>This is one-way translation</remarks>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"><paramref name="__"/> is unknown type of pseudo-constant</exception>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.arrUnqCnt">
            <summary>Helper variable for <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateList(PHP.Core.AST.ListEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/></summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateList(PHP.Core.AST.ListEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translates PHP list expression to CodeDOM</summary>
            <param name="list">Expression to translate</param>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="IC">Block for inserting statements. Can be null, but see exceptions.</param>
            <returns>Translated statements</returns>
            <remarks>Inserts additional statements into <paramref name="IC"/></remarks>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"><paramref name="IC"/> is null</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateIsSet(PHP.Core.AST.IssetEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translates PHP isset construct to CodeDOM equivalent</summary>
            <param name="isset">Expression to translate</param>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="IC">Context for inserting additional statements</param>
            <returns>Translated expression</returns>
            <remarks>
            isset is translated using and-separated list if tests of identity with null
            isset($a,$b,$c) is translated as (a != null) &amp;&amp; ((b != null) &amp;&amp; (c != null))  
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateIsSetList(System.Collections.Generic.List{PHP.Core.AST.VariableUse},System.Int32,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translate list of variables in argument list of isset PHP construct to sequence of CodeDOM null tests concatenated using boolean and operator.</summary>
            <param name="list">Arguments of isset</param>
            <param name="start">Index in <paramref name="list"/> where to start translation</param>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="IC">Context for inserting additional statements</param>
            <returns>Translated expression</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateConcatExpressionList(System.Collections.Generic.IList{PHP.Core.AST.Expression},System.Int32,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Converts list of expressions contained in <see cref="T:PHP.Core.AST.ConcatEx"/> to recursive CodeDOM expression</summary>
            <param name="List">List containing expressions to convert</param>
            <param name="Start">Index of expression to start conversion from</param>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="IC">Context for inserting additional statements</param>
            <returns><see cref="T:System.CodeDom.CodeExpression"/> containin translated expression</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="List"/> contains less items then <paramref name="Start"/> + 1 =or= <paramref name="Start"/> is less than zero</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateConcatExpression(PHP.Core.AST.ConcatEx,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)">
            <summary>Translates "flat" PHP <see cref="T:PHP.Core.AST.ConcatEx"/> to recursive CodeDOM <see cref="T:System.CodeDom.CodeBinaryOperatorExpression"/></summary>
            <param name="c">Expression to translate</param>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="IC">Context for inserting additional statements</param>
            <returns>Translated expression</returns>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"><paramref name="c"/>.<see cref="P:PHP.Core.AST.ConcatEx.Expressions">List</see> contains no expression</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateGenericParameterDeclaration(PHP.Core.Reflection.GenericParameterDesc)">
            <summary>Translates declaration of generic parameter (in header of type) from PHP to CodeDOM</summary>
            <param name="GPar">PHP Generic parameter declaration</param>
            <returns>CodeDOM representation of <paramref name="GPar"/></returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateFormalTypeParam(PHP.Core.AST.FormalTypeParam)">
            <summary>Translates declaration of generic parameter (in header of method) from PHP to CodeDOM</summary>
            <param name="GPar">PHP Generic parameter declaration</param>
            <returns>CodeDOM representation of <paramref name="GPar"/></returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateParameter(PHP.Core.AST.FormalParam)">
            <summary>Translate declaration of formal parameter of method from PHP to CodeDOM</summary>
            <param name="Param">Parameter to be translated</param>
            <returns><paramref name="Param"/>'s representation in COdeDOM</returns>
            <remarks>Ignores parameter initialization!</remarks>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Custom attribute initialization contains unsupported construct (<see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateAttribute(PHP.Core.AST.CustomAttribute)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateModifiers(PHP.Core.PhpMemberAttributes)">
            <summary>Translates <see cref="T:PHP.Core.PhpMemberAttributes"/> to <see cref="T:System.CodeDom.MemberAttributes"/></summary>
            <param name="Modifiers">A <see cref="T:PHP.Core.PhpMemberAttributes"/> to translate</param>
            <returns><paramref name="Modifiers"/>'s representation in <see cref="T:System.CodeDom.MemberAttributes"/></returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateTypeRef(PHP.Core.AST.TypeRef,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase)">
            <summary>Translates <see cref="T:PHP.Core.AST.TypeRef"/> to <see cref="T:System.CodeDom.CodeTypeReference"/></summary>
            <param name="typeRef"><see cref="T:PHP.Core.AST.TypeRef"/> to be translated</param>
            <returns><see cref="T:System.CodeDom.CodeTypeReference"/> representation of <paramref name="typeRef"/></returns>
            <remarks>Indirect type reference (<see cref="T:PHP.Core.AST.IndirectTypeRef"/> is currently not supported)</remarks>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            <paramref name="typeRef"/> is <see cref="T:PHP.Core.AST.IndirectTypeRef"/>
            =or=
            <paramref name="typeRef"/> is neither <see cref="T:PHP.Core.AST.DirectTypeRef"/> nor <see cref="T:PHP.Core.AST.PrimitiveTypeRef"/>
            =or=
            some sub-construct is not supported (as comes from <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateTypeRef(PHP.Core.AST.TypeRef,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.getCLRName(PHP.Core.QualifiedName)"/>)
            </exception>
            <param name="context">Context for current-type detrmination. Can be null.</param>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateClassConst(PHP.Core.AST.ClassConstantDecl,PHP.Core.AST.ConstDeclList)">
            <summary>Translates declaration of PHP class-level constant to CodeDOM static constant field</summary>
            <param name="Const">Constant to be translated</param>
            <param name="List">List in which <paramref name="Const"/> is declared</param>
            <returns>CodeDOM representation of <paramref name="Const"/></returns>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Custom attribute initialization expression or constant initialization expression is not either supported or supported in current context (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateField(PHP.Core.AST.FieldDecl,PHP.Core.AST.FieldDeclList,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates declaration of PHP class-level field to CodeDOM field</summary>
            <param name="Field">Field to be translated</param>
            <param name="List">List in which <paramref name="Field"/> is declared</param>
            <param name="block">If field requires property, property is added to this block</param>
            <returns>CodeDOM representation of <paramref name="Field"/></returns>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Custom attribute initialization expression or variable initialization expression is not either supported or supported in current context (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateNamespace(PHP.Core.AST.NamespaceDecl,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates PHP namespace declarartion and its content to CodeDOM and emits it into containing block</summary>
            <param name="sNamespace">Declaration of PHP namespace to be translated</param>
            <param name="block">Block this namespace is containded in (should be <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.FileContext"/>)</param>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateTypeDecl(PHP.Core.AST.TypeDecl,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates declaration of PHP type to CodeDOM and emits its content</summary>
            <param name="sType">PHP type declaration to be translated</param>
            <param name="block">Block the type is contained in (should be <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.FileContext"/> or <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.NamespaceContext"/>)</param>
            <remarks>When translating base types and interfaces, first must be translatedd and added to list base class!</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateMethod(PHP.Core.AST.MethodDecl,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates header of method from PHP to CodeDOM</summary>
            <param name="Method">GetUserEntryPoint to translate</param>
            <param name="block">Block this method is member of</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            GetUserEntryPoint cannot be added to <paramref name="block"/>.
            =or=
            Some statement contained in method is not supported or consists of unsupported constructs (see <c>TranslateStatement</c>)
            =or=
            Some construct in method header is usupported (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateAttribute(PHP.Core.AST.CustomAttribute)"/>,<see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateParameter(PHP.Core.AST.FormalParam)"/>
            </exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateMemberList(PHP.Core.AST.ConstDeclList,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates list of class-level declared contants into CodeDOM declarations of constant fields</summary>
            <param name="List">List of constants to translate</param>
            <param name="block">Block representing type in which constants are declared</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Custom attribute initialization expression or constant initialization expression is not either supported or supported in current context (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateClassConst(PHP.Core.AST.ClassConstantDecl,PHP.Core.AST.ConstDeclList)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateMemberList(PHP.Core.AST.FieldDeclList,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates list of class-level declared fields into CodeDOM declarations of fields</summary>
            <param name="List">List of fields to translate</param>
            <param name="block">Block representing type in which fields are declared</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Custom attribute initialization expression or variable initialization expression is not either supported or supported in current context (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateField(PHP.Core.AST.FieldDecl,PHP.Core.AST.FieldDeclList,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)"/>)</exception>        
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.WhileStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates while statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Expression or statement used in this statement is not supported (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateBlock(System.Collections.Generic.IEnumerable{PHP.Core.AST.Statement},PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.BlockStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates block statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <remarks>Blocks are flattened</remarks>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Some statemen is not supported <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateBlock(System.Collections.Generic.IEnumerable{PHP.Core.AST.Statement},PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)"/></exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.ForeachStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates for-each statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Expression or statement used in this statement is not supported (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateBlock(System.Collections.Generic.IEnumerable{PHP.Core.AST.Statement},PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateVariableUse(PHP.Core.AST.VariableUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.ForStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates for statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            Parent block does not support adding of required statements.
            =or=
            Any sub-statement or expression in for loop is not supported (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateBlock(System.Collections.Generic.IEnumerable{PHP.Core.AST.Statement},PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)
            </exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.IfStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates if statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Part of If statement is not supported (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateConditions(System.Collections.Generic.List{PHP.Core.AST.ConditionalStmt},System.Int32,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)"/>) =or= if statement cannot be placed in current block =or= <paramref name="method"/> is not <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext"/></exception>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.switch_case">
            <summary>Counter for labels used by <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.SwitchStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)"/></summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.SwitchStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates switch statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <remarks>Switch is translates to if-s and goto-s</remarks>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            Item of switch statement is neither <see cref="T:PHP.Core.AST.CaseItem"/> nor <see cref="T:PHP.Core.AST.DefaultItem"/>
            =or=
            Parent block does not support adding required statements
            =or=
            Statement or expression insite switch statement is not supported (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateBlock(System.Collections.Generic.IEnumerable{PHP.Core.AST.Statement},PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)
            </exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.TryStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates try statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Some part of statement is not supported (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateBlock(System.Collections.Generic.IEnumerable{PHP.Core.AST.Statement},PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateDirectVarUse(PHP.Core.AST.DirectVarUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.EmptyStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates empty statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <remarks>This method actually does nothing</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.EchoStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates echo statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Statement cannot be added to current block =or= Expression is not supported (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.ExpressionStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates expression statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Statement cannot be added to curent block =or= Part of expression is not supported (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)</exception>
            <remarks>If expression contained in statement is <see cref="T:PHP.Core.AST.ValueAssignEx"/> then <see cref="T:System.CodeDom.CodeAssignStatement"/> is produced; otheriwise <see cref="T:System.CodeDom.CodeExpressionStatement"/>.</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateEvent(PHP.Core.AST.DirectFcnCall,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translate event attach or detach from PHP to CodeDOM</summary>
            <param name="dfc">Expression used to attach/detach event in PHP</param>
            <param name="method">GetUserEntryPoint for declaring local variables</param>
            <param name="block">Block for inserting statements</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            Any sub-construct is not supported (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateVarLikeConstructUse(PHP.Core.AST.VarLikeConstructUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)
            =or=
            Name of event accessor is neither Add nor Remove
            =or=
            <paramref name="dfc"/> is invalid
            </exception>
            <remarks>
            PHP adds/removes event listeners using syntax (target)-&gt;EventName-&gt;Add/Remove((listener)) this requires <paramref name="dfc"/> to:
            <see cref="P:PHP.Core.AST.DirectFcnCall.QualifiedName">QualifiedName</see> is 'Add' or 'Remove',
            <see cref="P:PHP.Core.AST.FunctionCall.CallSignature">CallSignature</see>.<see cref="P:PHP.Core.AST.CallSignature.GenericParams">GenericParams</see> is empty,
            <see cref="P:PHP.Core.AST.FunctionCall.CallSignature">CallSignature</see>.<see cref="P:PHP.Core.AST.CallSignature.Parameters">Parameters</see> has one item - the evcent listener,
            <see cref="P:PHP.Core.AST.VarLikeConstructUse.IsMemberOf">IsMemberOf</see> is <see cref="T:PHP.Core.AST.DirectVarUse"/> with name of the event in <see cref="P:PHP.Core.AST.DirectVarUse.VarName">VarName</see>,
            <see cref="P:PHP.Core.AST.VarLikeConstructUse.IsMemberOf">IsMemberOf</see>.<see cref="P:PHP.Core.AST.VarLikeConstructUse.IsMemberOf">IsMemberOf</see> is not null (it is target of event).
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.GotoStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates goto statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Statement cannot be added into current block</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.JumpStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates jump statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            Break/continue argument is not integral literal.
            =or=
            Current block does not support adding goto statements (for break/continue).
            =or=
            Current block does not (correctly) support adding of <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest"/> (for break/continue).
            =or=
            Current block does not support reaturn statements (for return)
            =or=
            Return expression is not supported (as goes from <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)
            </exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.LabelStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates label statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Current block does not allow adding of this type of statement</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.StaticStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates static statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            <paramref name="method"/> is not <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext"/>.
            =or=
            Parent of <paramref name="method"/> does not accept field declaration.
            =or=
            There are two static variables with same name in the method.
            =or=
            <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/> does not support expression used to initialize the variable (if any).
            </exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.ThrowStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates throw statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Expression that produces exception being thrown is not supported (see <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateExpression(PHP.Core.AST.Expression,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateStatement(PHP.Core.AST.UnsetStmt,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>Translates unset statement from PHP to CodeDOM</summary><param name="statement">Statement to translate</param><param name="method">GetUserEntryPoint for declaring local variables</param><param name="block">Block for adding statements</param>
            <remarks>
            All unset statements are translated as assignment of null, which is actual behavior of PHP only for local variables.
            In order to distinguish if translation is correct or not localo variables are set directly to null and in other cases <see cref="F:PHP.Core.CodeDom.Helper.unset"/> is used
            </remarks>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Unseted variable consists of unsupported construct (<see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateVariableUse(PHP.Core.AST.VariableUse,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext)"/>)</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.getCLRName(PHP.Core.QualifiedName)">
            <summary>Gets CLR name of <see cref="T:PHP.Core.QualifiedName"/> without trailing dot (.)</summary>
            <param name="name"><see cref="T:PHP.Core.QualifiedName"/> to get name for.</param>
            <returns>CLR name of <see cref="T:PHP.Core.QualifiedName"/> without trailing dot (.)</returns>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.EventMode">
            <summary>Mode of translating event-attach/detach-like constructs</summary>
            <remarks>PHP attaches/detaches events using sth. like $instance->Event-Add(delegate) resp. $instance->Event-Remove(delegate)</remarks>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.DelegateMode">
            <summary>Mode of translating delegate-like constructs</summary>
            <remarks>PHP creates delegate using sth. like new System:::EventHandler(array($this, "mtd"))</remarks>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CurrentContext">
            <summary>Gets expression that gets current context fot PHP script</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.SwitchVarName">
            <summary>Gets name for variable to switch by (used when translating the switch statement)</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.Imports">
            <summary>List of currently imported namespaces</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.Loops">
            <summary>Types of PHP loops</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.Loops.Switch">
            <summary>switch</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.Loops.For">
            <summary>for</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.Loops.Foreach">
            <summary>foreach</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.Loops.While">
            <summary>do, while</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.dAnd">
            <summary>Helper delgate for <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TranslateModifiers(PHP.Core.PhpMemberAttributes)"/></summary>
            <param name="PHP">Member attribute to be compared with internal value using internal type of comparison</param>
            <returns>Result of comperison</returns>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase">
            <summary>Represent context for local variables</summary>
            <remarks>
            This class implements context where no local variables are present (such as class or namespace).
            Derived class for methods (and CTors, accessors etc.) is <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext"/>
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase.GetEnumerator">
            <summary>If overriden in derived class returns <see cref="T:System.Collections.Generic.List`1[System.String]"/> that enumerates through list of names of local variables.</summary>
            <returns>Instance of <see cref="T:System.Collections.Generic.IEnumerator`1[System.String]"/> that enumerates through list of names of local variables (if current context supports local variables; otherwise it enumerates through empty list of items)</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase.Contains(System.String)">
            <summary>Gets value indicating if given name is contained in list of local variables</summary>
            <param name="Name">Name to search for</param>
            <returns>True if name if present otherwise false</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/></summary>
            <returns><see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase.GetEnumerator"/></returns>
            <remarks>Use type-safe <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase.GetEnumerator"/> instead.</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase.Add(System.String@)">
            <summary>If implemented in derived class adds name of local variable into list of local variables' names and declares that variable</summary>
            <param name="name">Name of variable to add. Note: This method can change the name</param>
            <returns>Variable declaration (or null if no variable was added due to duplicity)</returns>
            <exception cref="T:System.NotSupportedException">This implementation throws it always. Any implementation can throw it if any or specific variable cannot be added.</exception>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase.Item(System.String)">
            <summary>If implemented in derived class gets <see cref="T:System.CodeDom.CodeVariableDeclarationStatement"/> for variable with given name</summary>
            <param name="index">Name of variable</param>
            <remarks>If derived class returns true from <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase.CanAdd"/>, it must support this property</remarks>
            <exception cref="T:System.NotImplementedException">This property is not implemented in derived class. This implementation throws it always.</exception>
            <example cref="T:System.Collections.Generic.KeyNotFoundException">Variable with name <paramref name="index"/> is not declared</example>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase.CanAdd">
            <summary>Returns value indicating if local variables can be added into this context</summary>
            <returns>This implementation always returns false</returns>
            <remarks>Instance returning true must support <see craf="Add"/>, <see cref="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase.GetEnumerator"/> and <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase.Item(System.String)"/></remarks>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContextBase.Class">
            <summary>If implemented in derived class returns class the method is in or null if method is not in class</summary>
            <returns>This implementation always returns null</returns>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext">
            <summary>Provides base class for all containers the code can be placed inside such as file, namespace, class, method, try clausule etc.</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext.AddObject(System.CodeDom.CodeObject,PHP.Core.AST.LangElement)">
            <summary>Adds <see cref="T:System.CodeDom.CodeObject"/> into current context</summary>
            <param name="Object"><see cref="T:System.CodeDom.CodeObject"/> to be added</param>
            <returns><paramref name="Object"/></returns>
            <param name="throwOn">Element to throw <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"/> on</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Object of type <b>T</b> is not supported in this block</exception>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ICodeBlockContext">
            <summary>Interface represents block of code where statements can be added and inserted</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext">
            <summary>Interface that allows inserting statements into itseltf</summary>
            <remarks>Used when some PHP inline expression cannot be represented inline in CodeDOM</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext.Insert(System.CodeDom.CodeStatement,PHP.Core.AST.LangElement)">
            <summary>Inserts statement into context</summary>
            <param name="Statement">Statement co insetr</param>
            <param name="throwOn">Element to throw <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"/> on if insertion is not supported</param>
            <returns><paramref name="Statement"/></returns>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Insertion is not supported</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ICodeBlockContext.SetInsertContextAfter(System.CodeDom.CodeStatement)">
            <summary>Moves place where <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> works after specified statement</summary>
            <param name="Statement">Statement after which <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> will insert statements</param>
            <exception cref="T:System.ArgumentException"><paramref name="Statement"/> is not one of statements in block</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ICodeBlockContext.SetInsertContextBefore(System.CodeDom.CodeStatement)">
            <summary>Moves place where <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> works before specified statement</summary>
            <param name="Statement">Statement before which <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> will insert statements</param>
            <exception cref="T:System.ArgumentException"><paramref name="Statement"/> is not one of statements in block</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ICodeBlockContext.ResetInserContextToStart">
            <summary>Moves place where <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> works at the beginning of block</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ICodeBlockContext.ResetInsertContextToEnd">
            <summary>Moves place where <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> works at the end of block</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest">
            <summary>Represents request for creating break (jump) statement target</summary>
            <remarks>Thare must be specific support for this in acutal implementation of <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext"/>.</remarks>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest.levels">
            <summary>Containd value of the <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest.Levels"/> property</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest.type">
            <summary>Contains value of the <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest.Type"/> property</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest.#ctor(System.Int32,PHP.Core.AST.JumpStmt.Types,PHP.Core.AST.LangElement)">
            <summary>CTor</summary>
            <param name="levels">Levels to break from current level (1 is default)</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="levels"/> is less than 1</exception>
            <param name="type">Type of this jump (continue or break)</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"><paramref name="type"/> is neither <see cref="F:PHP.Core.AST.JumpStmt.Types.Break"/> nor <see cref="F:PHP.Core.AST.JumpStmt.Types.Continue"/></exception>
            <param name="throwOn">Element to throw <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"/> on</param>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest.target">
            <summary>Contains value of the <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest.Target"/> property</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest.Type">
            <summary>Type of this jump. Can be <see cref="F:PHP.Core.AST.JumpStmt.Types.Continue"/> or <see cref="F:PHP.Core.AST.JumpStmt.Types.Break"/></summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest.Levels">
            <summary>Levels to break</summary>
            <remarks><see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext"/> implementation is allowed to decrease this property when it implements one of levels being "broken" (for, foreach, switch, do, while).</remarks>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest.Target">
            <summary>This property is used by implementation of <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext"/> to return name of lable that will became target of jump</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext">
            <summary>Common base for all block statements (statements that can contain another statements)</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.method">
            <summary>Contains value of the <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.Method"/> property</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.parent">
            <summary>Contains value of the <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.Parent"/> property</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.owner">
            <summary>Contains value of the <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.Owner"/> property</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.#ctor(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation)">
            <summary>CTor</summary>
            <param name="method">GetUserEntryPoint the block lies in</param>
            <param name="block">Immediate parent of this block if it is not <paramref name="method"/></param>
            <param name="owner">Owner of this instance</param>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.InsertionPoint">
            <summary>Index where inserted statemens are added. -1 means end of statement list.</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.Insert(System.CodeDom.CodeStatement,PHP.Core.AST.LangElement)">
            <summary>Inserts statement into method</summary>
            <param name="Statement">Statement co insetr</param>
            <param name="throwOn">Ignored</param>
            <returns><paramref name="Statement"/></returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.SetInsertContextAfter(System.CodeDom.CodeStatement)">
            <summary>Moves place where <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> works after specified statement</summary>
            <param name="Statement">Statement after which <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> will insert statements</param>
            <exception cref="T:System.ArgumentException"><paramref name="Statement"/> is not one of statements in block</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.SetInsertContextBefore(System.CodeDom.CodeStatement)">
            <summary>Moves place where <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> works before specified statement</summary>
            <param name="Statement">Statement before which <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> will insert statements</param>
            <exception cref="T:System.ArgumentException"><paramref name="Statement"/> is not one of statements in block</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.ResetInserContextToStart">
            <summary>Moves place where <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> works at the beginning of block</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.ResetInsertContextToEnd">
            <summary>Moves place where <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> works at the end of block</summary>
            <remarks>This is default state</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.AddObject(System.CodeDom.CodeObject,PHP.Core.AST.LangElement)">
            <summary>Adds object into current context</summary>
            <param name="Object">Object to add</param>
            <returns><paramref name="Object"/></returns>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            <paramref name="Object"/> is neither <see cref="T:System.CodeDom.CodeExpression"/> nor <see cref="T:System.CodeDom.CodeStatement"/> nor <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest"/>
            <param name="throwOn">Element to thrown <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"/> on</param>
            </exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.GetJumpLabel(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest,PHP.Core.AST.LangElement)">
            <summary>If overriden in derived class writes name of labe to jump to into given parameter</summary>
            <param name="Jump">Represents type of jump (break or continue) and is target of assignment of name of lable to jump to.</param>
            <param name="throwOn">Element to thrown <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"/> on</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">This implementation throws it always</exception>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.Statements">
            <summary>Statements in this block</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.IsLoop">
            <summary>Identifies this block as loop block</summary>
            <remarks>This is for translation of break statements. Loops are for, do, while, foreach and switch</remarks>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.Context">
            <summary>Statement this block is context for</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.Method">
            <summary>GetUserEntryPoint this block lies in</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.Parent">
            <summary>Immediate parent of this block if it is another block statement</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.AnyParent">
            <summary>Immediate parent of this block. It can be another block or method.</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext.Owner">
            <summary>Owner ofÂ¨this instance</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext">
            <summary>Represents context for local variable inside any method</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.declarations">
            <summary>Declaration statements</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.#ctor(System.CodeDom.CodeMemberMethod,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IBlockContext)">
            <summary>CTor</summary>
            <param name="Context">GetUserEntryPoint that will becomme context for this instance</param>
            <param name="parent">Parent of this method (ie. class)</param>
            <remarks>Do not add formal parameters to method after passed here!</remarks>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.parent">
            <summary>Contains value of the <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.Parent"/> property</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.context">
            <summary>Context of this block</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.list">
            <summary>List of names of local variables (including method formal parameters)</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.LastIndex">
            <summary>Index of last local variable declaration statement added to method</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.Add(System.String@)">
            <summary>Adds name of local variable into list of local variables' names and declaret that variable.</summary>
            <param name="name">Name of variable to add. Note: This method can chnge the name.</param>
            <returns>Variable declaration (or null if no variable was added due to duplicity)</returns>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.rename_hack">
            <summary>local variable renaming hacks</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.Contains(System.String)">
            <summary>Gets value indicating if given name is contained in list of local variables</summary>
            <param name="Name">Name to search for</param>
            <returns>True if name if present otherwise false</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.GetEnumerator">
            <summary>Returns <see cref="T:System.Collections.Generic.IEnumerator`1[System.String]"/> that enumerates through list of names of local variables.</summary>
            <returns>Instance of <see cref="T:System.Collections.Generic.IEnumerator`1[System.String]"/> that enumerates through list of names of local variables</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.AddObject(System.CodeDom.CodeObject,PHP.Core.AST.LangElement)">
            <summary>Adds <see cref="T:System.CodeDom.CodeObject"/> into this method context</summary>
            <param name="Object">Object to be added</param>
            <param name="throwOn">Element to throw <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"/> on</param>
            <returns><paramref name="Object"/><paramref name="Object"/> is neither <see cref="T:System.CodeDom.CodeExpression"/> nor <see cref="T:System.CodeDom.CodeStatement"/></returns> 
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.InsertionPoint">
            <summary>Index where inserted statemens are added. -1 means end of statement list.</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.Insert(System.CodeDom.CodeStatement,PHP.Core.AST.LangElement)">
            <summary>Inserts statement into method</summary>
            <param name="Statement">Statement co insetr</param>
            <param name="throwOn">Ignored</param>
            <returns><paramref name="Statement"/></returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.SetInsertContextAfter(System.CodeDom.CodeStatement)">
            <summary>Moves place where <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> works after specified statement</summary>
            <param name="Statement">Statement after which <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> will insert statements</param>
            <exception cref="T:System.ArgumentException"><paramref name="Statement"/> is not one of statements in block</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.SetInsertContextBefore(System.CodeDom.CodeStatement)">
            <summary>Moves place where <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> works before specified statement</summary>
            <param name="Statement">Statement before which <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> will insert statements</param>
            <exception cref="T:System.ArgumentException"><paramref name="Statement"/> is not one of statements in block</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.ResetInserContextToStart">
            <summary>Moves place where <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> works at the beginning of block</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.ResetInsertContextToEnd">
            <summary>Moves place where <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IStatementInsertContext"/> works at the end of block</summary>
            <remarks>This is default state</remarks>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.staticVariables">
            <summary>Contains value of the <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.StaticVariables"/> property</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.Context">
            <summary>GetUserEntryPoint represented by this context</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.Parent">
            <summary>Parent of this method (ie. class)</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.CanAdd">
            <summary>Returns value indicating if local variables can be added into this context</summary>
            <returns>This implementation always returns true</returns>    
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.Item(System.String)">
            <summary>Gets declaration statement for given variable</summary>
            <param name="index">name of variable to get declaration staatement for</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Variable with name <paramref name="index"/> is not declared</exception>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.StaticVariables">
            <summary>Dictionary of static variables. Contains PHP names of static variables as keys and CodeDOM field names as values.</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext.Class">
            <summary>If block containing this method is <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TypeContext"/> returns it</summary>
            <returns>Parent block of this method if it is <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TypeContext"/>; otherwise null</returns>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TryStatementContext">
            <summary>Represents block of statements in try clausule</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TryStatementContext.#ctor(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext,System.CodeDom.CodeTryCatchFinallyStatement,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation)">
            <summary>CTor</summary>
            <param name="method">GetUserEntryPoint in which statement lies</param>
            <param name="parent">Immediate parent of this statement (null if it lies directly in method)</param>
            <param name="context">Try-Catch-Finally statement which is context for this class</param>
            <param name="owner">owner of this instance</param>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TryStatementContext.context">
            <summary>Current context</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TryStatementContext.Statements">
            <summary>Statements in try clausule</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TryStatementContext.Context">
            <summary>Current context</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TryStatementContext.IsLoop">
            <summary>Try is not loop</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CatchStatementContext">
            <summary>Represents block of statements in catch clausule</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CatchStatementContext.#ctor(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext,System.CodeDom.CodeTryCatchFinallyStatement,System.Int32,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation)">
            <summary>CTor</summary>
            <param name="method">GetUserEntryPoint in which statement lies</param>
            <param name="parent">Immediate parent of this statement (null if it lies directly in method)</param>
            <param name="context">Try-Catch-Finally statement which is context for this class</param>
            <param name="index">Index of catch clausule in statement</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is greater than or equal to count of catch clausules in <paramref name="context"/></exception>
            <param name="owner">Owner of this instance</param>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CatchStatementContext.context">
            <summary>Current context</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CatchStatementContext.index">
            <summary>Index of catch clausule in context</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CatchStatementContext.Statements">
            <summary>Statements in catch clausule</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CatchStatementContext.Context">
            <summary>Current context</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CatchStatementContext.Clausule">
            <summary>Catch clausule that is context for this block</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CatchStatementContext.IsLoop">
            <summary>Catch is not loop</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.FinallyStatementContext">
            <summary>Represents block of statements in finally clausule</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.FinallyStatementContext.#ctor(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext,System.CodeDom.CodeTryCatchFinallyStatement,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation)">
            <summary>CTor</summary>
            <param name="method">GetUserEntryPoint in which statement lies</param>
            <param name="parent">Immediate parent of this statement (null if it lies directly in method)</param>
            <param name="context">Try-Catch-Finally statement which is context for this class</param>
            <param name="owner">Owner of this instance</param>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.FinallyStatementContext.context">
            <summary>Current context</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.FinallyStatementContext.Statements">
            <summary>Statements in finally clausule</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.FinallyStatementContext.Context">
            <summary>Current context</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.FinallyStatementContext.IsLoop">
            <summary>Finally is not loop</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IfStatementContext">
            <summary>Represents context for 'if' and 'else' clausules of if statement</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IfStatementContext.context">
            <summary>Context of this block</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IfStatementContext.else">
            <summary>True if this block represents 'else' clausule; otherwise false</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IfStatementContext.#ctor(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext,System.CodeDom.CodeConditionStatement,System.Boolean,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation)">
            <summary>CTor</summary>
            <param name="method">GetUserEntryPoint this statement is contained in</param>
            <param name="block">Immediate parent of this statement. Null if it is <paramref name="method"/>.</param>
            <param name="context">Context this statement represents</param>
            <param name="else">True if this instance represents an 'else' clausule. Otherwise false.</param>
            <param name="owner">Owner of this intance</param>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IfStatementContext.Statements">
            <summary>Statements in this block</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IfStatementContext.IsLoop">
            <summary>If is not a loop</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.IfStatementContext.Context">
            <summary>Context for this block</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CaseContext">
            <summary>Represents context for case or default clausule of switch statement</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CaseContext.endlabel">
            <summary>Name of label after whole switch statement</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CaseContext.#ctor(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext,System.CodeDom.CodeConditionStatement,System.String,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation)">
            <summary>CTor</summary>
            <param name="method">GetUserEntryPoint this block is contained in</param>
            <param name="block">Block that is immediate parent of this switch statement. Null if it is <paramref name="method"/>.</param>
            <param name="context">Context for this case clausule</param>
            <param name="endlabel">Name of label after whole switch statement</param>
            <param name="owner">Owner of this instance</param>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CaseContext.context">
            <summary>If statement that is context for this case clausule</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CaseContext.GetJumpLabel(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest,PHP.Core.AST.LangElement)">
            <summary>Writes name of label after the switch statement into given variable</summary>
            <param name="throwOn">Ignored</param>
            <param name="Jump">Request for label</param>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CaseContext.IsLoop">
            <summary>Switch is a loop</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CaseContext.Context">
            <summary>Context for this block</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CaseContext.Statements">
            <summary>Statemenst for this case clausule</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ForStatementContext">
            <summary>Represents context for for statement</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ForStatementContext.#ctor(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.MethodContext,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.BlockStatementContext,System.CodeDom.CodeIterationStatement,System.String,System.String,PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation)">
            <summary>Ctor</summary>
            <param name="method">GetUserEntryPoint the statement is in</param>
            <param name="block">Block that is immediate parent of the statement (null if immediate parent is <paramref name="method"/>)</param>
            <param name="context">Context of this statement</param>
            <param name="endlabel">Label after whole for statement</param>
            <param name="firstlabel">Label just before end of for statement</param>
            <param name="owner">Owner of this instance</param>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ForStatementContext.endlabel">
            <summary>Label after whole for statement</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ForStatementContext.firstlabel">
            <summary>Label just before end of for statement</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ForStatementContext.context">
            <summary>COdeDOM representation of for statement</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ForStatementContext.GetJumpLabel(PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.CodeBreakTargetRequest,PHP.Core.AST.LangElement)">
            <summary>Writes label for break/or continue to given variable</summary>
            <param name="Jump">Variable to write name of label to</param>
            <param name="throwOn">Ignored</param>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ForStatementContext.IsLoop">
            <summary>True - For is a loop</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ForStatementContext.Context">
            <summary>Context of this statement</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.ForStatementContext.Statements">
            <summary>Collection of statements inside this statement</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.FileContext">
            <summary>Represents block context for whole file</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.FileContext.context">
            <summary><see cref="T:System.CodeDom.CodeCompileUnit"/> that represents the file</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.FileContext.#ctor(System.CodeDom.CodeCompileUnit)">
            <summary>CTor</summary>
            <param name="context"><see cref="T:System.CodeDom.CodeCompileUnit"/> that represents the file</param>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.FileContext.AddObject(System.CodeDom.CodeObject,PHP.Core.AST.LangElement)">
            <summary>Adds <see cref="T:System.CodeDom.CodeObject"/> into current file</summary>
            <param name="Object"><see cref="T:System.CodeDom.CodeObject"/> to be added</param>
            <returns><paramref name="Object"/></returns>
            <param name="throwOn">Element to throw <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"/> on</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Object of type <b>T</b> is not supported in this block</exception>
            <remarks>File-level supports only <see cref="T:System.CodeDom.CodeCommentStatement"/>, <see cref="T:System.CodeDom.CodeNamespace"/> and <see cref="T:System.CodeDom.CodeTypeDeclaration"/> (including <see cref="T:System.CodeDom.CodeTypeDelegate"/>)</remarks>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.NamespaceContext">
            <summary>Represents namespace</summary> 
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.NamespaceContext.context">
            <summary><see cref="T:System.CodeDom.CodeCompileUnit"/> that represents the file</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.NamespaceContext.#ctor(System.CodeDom.CodeNamespace)">
            <summary>CTor</summary>
            <param name="context"><see cref="T:System.CodeDom.CodeNamespace"/> that represents the namespace</param>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.NamespaceContext.AddObject(System.CodeDom.CodeObject,PHP.Core.AST.LangElement)">
            <summary>Adds <see cref="T:System.CodeDom.CodeObject"/> into current namespace</summary>
            <param name="Object"><see cref="T:System.CodeDom.CodeObject"/> to be added</param>
            <returns><paramref name="Object"/></returns>
            <param name="throwOn">Element to throw <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"/> on</param>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">Object represented by <paramref name="Object"/> is not supported in this block</exception>
            <remarks>Namespace-level supports only <see cref="T:System.CodeDom.CodeCommentStatement"/> and <see cref="T:System.CodeDom.CodeTypeDeclaration"/> (including <see cref="T:System.CodeDom.CodeTypeDelegate"/>)</remarks>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TypeContext">
            <summary>Represents type (Class, Structure, Enumeration, Delegate, Interface)</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TypeContext.context">
            <summary><see cref="T:System.CodeDom.CodeTypeDeclaration"/> that represents this type</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TypeContext.#ctor(System.CodeDom.CodeTypeDeclaration)">
            <summary>CTor</summary>
            <param name="context"><see cref="T:System.CodeDom.CodeTypeDeclaration"/> that represents the type</param>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TypeContext.AddObject(System.CodeDom.CodeObject,PHP.Core.AST.LangElement)">
            <summary>Adds <see cref="T:System.CodeDom.CodeObject"/> into current type</summary>
            <param name="Object"><see cref="T:System.CodeDom.CodeObject"/> to be added. This must be <see cref="T:System.CodeDom.CodeTypeMember"/></param>
            <returns><paramref name="Object"/></returns>
            <exception cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"><paramref name="Object"/> is not <see cref="T:System.CodeDom.CodeTypeMember"/> or object represented by <paramref name="Object"/> is not supported in current block debending on what kind of type is represented by current block</exception>
            <remarks>
            Following checks are performed:
            <list type="list">
            <item>Fields cannot be added into interfaces</item>
            <item>Only static constant fields can be added into enumerations</item>
            <item>Nothiong can be added into delegates</item>
            </list>
            </remarks>
            <param name="throwOn">Element to throw <see cref="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException"/> on</param>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TypeContext.FieldsAndProperties">
            <summary>Contains dictionary of properties and fields defined on this class (no inherited members) keyed by its names</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TypeContext.getPropertyOrField(System.String)">
            <summary>Gets property or field defined on this class with given name</summary>
            <param name="Name">Name of member to get</param>
            <returns>Member with given name which is <see cref="T:System.CodeDom.CodeMemberField"/> or <see cref="T:System.CodeDom.CodeMemberProperty"/> or null if there is no such member</returns>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpCodeDomParserImplementation.TypeContext.Context">
            <summary><see cref="T:System.CodeDom.CodeTypeDeclaration"/> that represents this type</summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException">
            <summary>Represents error meaning that something is not supported fro PHP-to-CodeDOM translation</summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException.element">
            <summary>Element that caused the error</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException.#ctor(System.String,PHP.Core.AST.LangElement)">
            <summary>CTor from message and element</summary>
            <param name="message">Exception message</param>
            <param name="element">Element that casused the exception</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException.#ctor(System.String,System.Exception,PHP.Core.AST.LangElement)">
            <summary>CTor from message, inner exception and element</summary>
            <param name="message">Exception message</param>
            <param name="element">Element that casused the exception</param>
            <param name="innerException">Exception thatcaused this exception</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException.Message">
            <summary>Gets a message that describes the current exception.</summary>
            <returns>The error message that explains the reason for the exception, or an empty ("").</returns>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException.Element">
            <summary>Element that caused the exception</summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException.Position">
            <summary><see cref="T:PHP.Core.Text.Span">Position</see> of <see cref="P:PHP.Core.CodeDom.PhpCodeDomParser.PhpToCodeDomNotSupportedException.Element"/></summary>
        </member>
        <member name="T:PHP.Core.CodeDom.CodeLinePragmaNoWrite">
            <summary>This <see cref="T:System.CodeDom.CodeLinePragma"/> is reported by PHP-&gt;COdeDOM translator bud should be ignored by COdeDOM-&gt;PHP translator</summary>
        </member>
        <member name="M:PHP.Core.CodeDom.CodeLinePragmaNoWrite.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the System.CodeDom.CodeLinePragma class.</summary>
            <param name="fileName">The file name of the associated file.</param>
            <param name="Line">The line number to store a reference to.</param>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeCompiler">
            <summary>
            PHP <see cref="T:System.CodeDom.Compiler.ICodeCompiler"/> implementation.
            </summary>
            <remarks>
            Since Beta 3, the compiler is not based on <see cref="T:System.CodeDom.Compiler.CodeCompiler"/> but compiles
            in a separate appdomain without spawning a new <c>phpc</c> process.
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
            <summary>
            Compiles an assembly from the <see cref="N:System.CodeDom"/> tree contained in the specified
            <see cref="T:System.CodeDom.CodeCompileUnit"/>, using the specified compiler settings. 
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
            <summary>
            Compiles an assembly based on the <see cref="N:System.CodeDom"/> trees contained in the specified array of
            <see cref="T:System.CodeDom.CodeCompileUnit"/> objects, using the specified compiler settings.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
            <summary>
            Compiles an assembly from the source code contained within the specified file, using the specified compiler settings.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
            <summary>
            Compiles an assembly from the source code contained within the specified files, using the specified compiler settings.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
            <summary>
            Compiles an assembly from the specified string containing source code, using the specified compiler settings.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
            <summary>
            Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeCompiler.Compile(PHP.Core.CompilationParameters,System.CodeDom.Compiler.CompilerParameters)">
            <summary>
            Performs the compilation.
            </summary>
            <param name="parameters">Parameters that already contain the source files/streams to compile.</param>
            <param name="options">The options specified by CodeCom user.</param>
            <returns>The compiler results.</returns>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeCompiler.SetupCompilerParameters(PHP.Core.CompilationParameters,System.CodeDom.Compiler.CompilerParameters)">
            <summary>
            Sets up <paramref name="parameters"/> according to the supplied <paramref name="options"/>.
            </summary>
            <param name="parameters">The parameters to set up.</param>
            <param name="options">The options passed to CodeDom.</param>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeCompiler.ResolveReferencedAssemblies(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
            <summary>
            Adjusts <see cref="T:System.CodeDom.Compiler.CompilerParameters"/>' referenced assemblies according to a given compile unit.
            </summary>
            <param name="options">The compiler parameters.</param>
            <param name="e">The compile unit.</param>
            <remarks>
            Copied from the <see cref="T:System.CodeDom.Compiler.CodeCompiler"/> implementation.
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeCompiler.DetermineSourceRoot(PHP.Core.CompilationParameters)">
            <summary>
            Determines the source root for a compilation based on the source file paths and output path.
            </summary>
            <param name="parameters">The parameters describing source files and the output file.</param>
            <returns>A suitable source root, preferrably a common superdirectory of all sources.</returns>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeCompiler.CodeDomErrorSink">
            <summary>
            An error sink that adds errors to <see cref="T:System.CodeDom.Compiler.CompilerResults"/>.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeCompiler.CodeDomErrorSink.#ctor(System.CodeDom.Compiler.CompilerResults)">
            <summary>
            Creates a new <see cref="T:PHP.Core.CodeDom.PhpCodeCompiler.CodeDomErrorSink"/> with a specified <see cref="T:System.CodeDom.Compiler.CompilerResults"/>.
            </summary>
            <param name="results">The compiler results.</param>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeCompiler.CodeDomErrorSink.Add(System.Int32,System.String,PHP.Core.ErrorSeverity,System.Int32,System.String,PHP.Core.ErrorPosition)">
            <summary>
            Called when an error/warning should be reported.
            </summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeCompiler.AppCompilerStack">
            <summary>
            Manages a stack of <see cref="T:PHP.Core.ApplicationCompiler"/> instances.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeCompiler.AppCompilerStack.compileCounterTreshold">
            <summary>
            Maximum number of compilations without checking the number of assemblies loaded to the
            remote appdomain.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeCompiler.AppCompilerStack.stack">
            <summary>
            The stack.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeCompiler.AppCompilerStack.Compile(PHP.Core.ErrorSink,PHP.Core.CompilationParameters)">
            <summary>
            Compiles in a seperate appdomain utilitizing one of the compilers on the stack.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeCompiler.AppCompilerStack.StackItem.Compiler">
            <summary>
            A compiler that compiles in a separate appdomain.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeCompiler.AppCompilerStack.StackItem.CompileCounter">
            <summary>
            Counts compilations performed by the <see cref="F:PHP.Core.CodeDom.PhpCodeCompiler.AppCompilerStack.StackItem.Compiler"/>.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeCompiler.AppCompilerStack.StackItem.RemoteAssemblyCount">
            <summary>
            The number of assemblies loaded to the remote compilation appdomain after the first compilation.
            </summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeCompiler.AppCompilerStack.CallBackDisplay">
            <summary>
            Works around the lack of <see cref="T:System.SerializableAttribute"/> on display classes generated
            by C# compiler when an anonymous method is used.
            </summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpCodeGenerator">
            <summary>
            PHP <see cref="T:System.CodeDom.Compiler.ICodeGenerator"/> implementation.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeGenerator.typeIsInterface">
            <summary>
            Open instance delegate that works around the extends/implements issue in base types.
            </summary>
            <remarks>
            http://lab.msdn.microsoft.com/productfeedback/viewfeedback.aspx?feedbackid=a5d4c475-18d2-4121-b282-6583f1695e45
            </remarks>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeGenerator.inCompileUnit">
            <summary>
            <B>True</B> if generating code to a compile unit (between &lt;? ?&gt;), <B>false</B> otherwise.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeGenerator.importedNamespaces">
            <summary>
            Imports generated so far.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeGenerator.previousImportedNamespaces">
            <summary>
            Imports generated so far.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeGenerator.classHasParent">
            <summary>
            <B>True</B> if the class that is currently being generated has a base class (i.e. is not a parent-less
            PHP class.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeGenerator.assemblyAttributes">
            <summary>
            Custom attributes that should be applied to the compile unit that is being generated.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeGenerator.isFieldConstantCache">
            <summary>
            Stores information about literalness of fields.
            </summary>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeGenerator.lastAssembly">
            <summary>
            The assembly in which the last <see cref="M:PHP.Core.CodeDom.PhpCodeGenerator.IsFieldConstant(System.CodeDom.CodeTypeReferenceExpression,System.String)"/> lookup succeeded.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
            <summary>
            Gets a value indicating whether the specified code generation support is provided.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.IsValidIdentifier(System.String)">
            <summary>
            Gets a value indicating whether the specified value is a valid identifier.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.CreateEscapedIdentifier(System.String)">
            <summary>
            Creates an escaped identifier for the specified value.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.CreateValidIdentifier(System.String)">
            <summary>
            Creates a valid identifier for the specified value.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
            <summary>
            Gets the name of the specified data type.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
            <summary>
            Generates code for the specified type.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.QuoteSnippetString(System.String)">
            <summary>
            Converts the specified string by formatting it with escape codes.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
            <summary>
            Generates code for the specified argument reference expression.
            </summary>
            <remarks><c>$NAME</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
            <summary>
            Generates code for the specified array creation expression.
            </summary>
            <remarks><c>array(INITIALIZER1, INITIALIZER1, ...)</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
            <summary>
            Generates code for the specified array indexer expression.
            </summary>
            <remarks><c>TARGET[INDEX1][INDEX2]...</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
            <summary>
            Generates code for the specified assignment statement.
            </summary>
            <remarks><c>LEFT = RIGHT</c> or <c>LEFT.TARGET->set_Item(LEFT.INDICES, RIGHT)</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
            <summary>
            Generates code for the specified attach event statement.
            </summary>
            <remarks><c>EVENT->Add(LISTENER);</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
            <summary>
            Generates code for the specified attribute block end.
            </summary>
            <remarks><c>:]</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
            <summary>
            Generates code for the specified attribute block start.
            </summary>
            <remarks><c>[:</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
            <summary>
            Generates code for the specified base reference expression.
            </summary>
            <remarks><c>parent</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
            <summary>
            Generates code for the specified cast expression.
            </summary>
            <remarks><c>(TARGETTYPE)EXPRESSION</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
            <summary>
            Generates code for the specified comment.
            </summary>
            <remarks><c>// TEXT</c> or <c>/** TEST */</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
            <summary>
            Generates code for the specified compile unit.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
            <summary>
            Generates code for the end of a compile unit.
            </summary>
            <remarks><c>?&gt;</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
            <summary>
            Generates code for the start of a compile unit.
            </summary>
            <remarks><c>&lt;?</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
            <summary>
            Generates code for the specified conditional statement.
            </summary>
            <remarks><c>if (CONDITION) TRUESTATEMENTS; else FALSESTATEMENTS</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Generates code for the specified constructor.
            </summary>
            <remarks><c>[CA]MODIFIERS function __construct(PARAMETERS) : parent(BASECTORARGS) BODY</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
            <summary>
            Generates code for the specified code default value expression.
            </summary>
            <remarks><c>NULL</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
            <summary>
            Generates code for the specified delegate creation expression.
            </summary>
            <remarks><c>new DELEGATETYPE(array(TARGETOBJECT, METHODNAME))</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
            <summary>
            Generates code for the specified delegate invoke expression.
            </summary>
            <remarks><c>TARGETOBJECT-&gt;Invoke(PARAMETERS)</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
            <summary>
            Generates code for the specified direction expression.
            </summary>
            <remarks><c>EXPRESSION</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Generates code for the specified entry point method.
            </summary>
            <remarks><c>public function Main() BODY</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Generates code for the specified event.
            </summary>
            <remarks>Not supported.</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
            <summary>
            Generates code for the specified event reference expression.
            </summary>
            <remarks><c>TARGETOBJECT-&gt;EVENTNAME</c> or <c>TARGETOBJECT::EVENTNAME</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
            <summary>
            Generates code for the specified expression statement.
            </summary>
            <remarks>EXPRESSION;</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
            <summary>
            Generates code for the specified member field.
            </summary>
            <remarks><c>public/protected/private static/const NAME/$NAME = INITEXPRESSION;</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
            <summary>
            Generates code for the specified field reference expression.
            </summary>
            <remarks><c>TARGETOBJECT-&gt;FIELDNAME</c> or <c>TARGETOBJECT::FIELDNAME</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
            <summary>
            Generates code for the specified goto statement.
            </summary>
            <remarks><c>goto LABEL;</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
            <summary>
            Generates code for the specified indexer expression.
            </summary>
            <remarks><c>TARGET->get_Item(INDEX1, INDEX2)...</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
            <summary>
            Generates code for the specified iteration statement.
            </summary>
            <remarks><c>INIT; while(TEST) STATEMENTS INCREMENT</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
            <summary>
            Generates code for the specified labeled statement.
            </summary>
            <remarks><c>LABEL: STATEMENT</c> or <c>LABEL:</c> if <param name="e"/>.<see cref="P:System.CodeDom.CodeLabeledStatement.Statement">Statement</see> is  null</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
            <summary>
            Generates code for the specified line pragma end.
            </summary>
            <remarks><c>#pragma default line #pragma default file</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
            <summary>
            Generates code for the specified line pragma start.
            </summary>
            <remarks><c>#pragma file FILENAME #pragma line LINENUMBER</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Generates code for the specified method.
            </summary>
            <remarks><c>public/protected/private abstract/final/static function(PARAMETERS) BODY/;</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
            <summary>
            Generates code for the specified method invoke expression.
            </summary>
            <remarks><c>TARGETOBJECT-&gt;METHODNAME&lt;:TYPEARGS:&gt;(PARAMETERS)</c> or
            <c>TYPEREF::METHODNAME&lt;:TYPEARGS:&gt;(PARAMETERS)</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
            <summary>
            Generates code for the specified method reference expression.
            </summary>
            <remarks><c>TARGETOBJECT-&gt;METHODNAME&lt;:TYPEARGS:&gt;</c> or
            <c>TYPEREF::METHODNAME&lt;:TYPEARGS:&gt;</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
            <summary>
            Generates code for the specified method return statement.
            </summary>
            <remarks><c>return EXPRESSION;</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
            <summary>
            Generates code for the specified namespace declaration.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
            <summary>
            Generates code for the end of a namespace.
            </summary>
            <remarks><c>}</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.FullClrNamespaceToShort(System.String)">
            <summary>
            Converts CLR namespace name to some short form used as alias.
            </summary>
            <param name="name"></param>
            <returns></returns>
            <remarks>System.Xml.Linq to SXLinq.</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
            <summary>
            Generates code for the specified namespace import.
            </summary>
            <remarks><c>import namespace NAMESPACE;</c></remarks>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeGenerator.currentNamespace">
            <summary>
            Current namespace, CLR notation
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
            <summary>
            Generates code for the start of a namespace.
            </summary>
            <remarks><c>namespace NAME {</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
            <summary>
            Generates code for the specified object creation expression.
            </summary>
            <remarks><c>new CREATETYPE(PARAMETERS)</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Generates code for the specified parameter declaration expression.
            </summary>
            <remarks><c>[CA]TYPE &amp;$NAME</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Generates code for the specified property.
            </summary>
            <remarks>Not supported.</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
            <summary>
            Generates code for the specified property reference expression.
            </summary>
            <remarks><c>TARGETOBJECT-&gt;PROPERTYNAME</c> or <c>TARGETOBJECT::PROPERTYNAME</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
            <summary>
            Generates code for the specified property set value reference expression.
            </summary>
            <remarks>Not supported.</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
            <summary>
            Generates code for the specified remove event statement.
            </summary>
            <remarks><c>EVENT->Remove(LISTENER);</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
            <summary>
            Outputs the code of the specified literal code fragment expression.
            </summary>
            <remarks><c>VALUE</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
            <summary>
            Outputs the code of the specified literal code fragment class member.
            </summary>
            <remarks><c>TEXT</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
            <summary>
            Generates code for the specified this reference expression.
            </summary>
            <remarks><c>$this</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
            <summary>
            Generates code for the specified throw exception statement.
            </summary>
            <remarks><c>throw TOTHROW;</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
            <summary>
            Generates code for the specified try...catch...finally statement.
            </summary>
            <remarks><c>try BLOCK catch (TYPE1 $VAR1) BLOCK1 ... FINALLYBLOCK</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
            <summary>
            Generates code for the specified class constructor.
            </summary>
            <remarks>Not supported.</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
            <summary>
            Generates code for the specified type of expression.
            </summary>
            <remarks><c>System:::Type::GetType("BASETYPE")</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Generates code for the specified end class.
            </summary>
            <remarks><c>}</c></remarks>
        </member>
        <member name="F:PHP.Core.CodeDom.PhpCodeGenerator.globalTypes">
            <summary>
            Known global types. Used when outputting a type to resolve it properly and fully qualified.
            </summary>
            <remarks>
            This list is never cleared in this instance!
            Cleared automatically when <see cref="T:PHP.Core.CodeDom.PhpCodeProvider"/> creates new instance of <see cref="T:PHP.Core.CodeDom.PhpCodeGenerator"/>.
            
            This list caches global types introduced within this instance.
            </remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Generates code for the specified start class.
            </summary>
            <remarks><c>partial class/interface NAME extends BASE implements/extends IFACES {</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Generates code for the specified variable declaration statement.
            </summary>
            <remarks><c>$NAME = INITEXPRESSION;</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
            <summary>
            Generates code for the specified variable reference expression.
            </summary>
            <remarks><c>$VARIABLENAME</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GeneratePhpStatements(System.CodeDom.CodeStatementCollection,System.Boolean,System.Boolean)">
            <summary>
            Generates code for the given statements.
            </summary>
            <param name="statements">The statements.</param>
            <param name="forceBlock"><B>True</B> to force braced block even if the number of statements is less than
            two, <B>false</B> otherwise.</param>
            <param name="elseClosing"><B>True</B> to suppress generating newline if
            <see cref="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing"/> is set.</param>
            <remarks><c>STATEMENT</c> or <c>{ STATEMENTS }</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GeneratePhpStatements(System.CodeDom.CodeStatementCollection,System.Boolean)">
            <summary>
            Generates code for the given statements.
            </summary>
            <remarks><c>STATEMENT</c> or <c>{ STATEMENTS }</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.GeneratePhpStatements(System.CodeDom.CodeStatementCollection)">
            <summary>
            Generates code for the given statements.
            </summary>
            <remarks><c>STATEMENT</c> or <c>{ STATEMENTS }</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputVariable(System.String)">
            <summary>
            Outputs a variable reference.
            </summary>
            <remarks><c>$NAME</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
            <summary>
            Outputs member access modifier.
            </summary>
            <remarks><c>public/protected/private</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
            <summary>
            Outputs field scope modifier.
            </summary>
            <remarks><c>const/static</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
            <summary>
            Outputs member (method in particular) scope modifier.
            </summary>
            <remarks><c>abstract/final static</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputTypeModifiers(System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Outputs type (class and interface) modifiers.
            </summary>
            <remarks><c>partial class/interface</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
            <summary>
            Outputs field direction (used for formal parameters).
            </summary>
            <remarks><c>&amp;</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputMemberReference(System.CodeDom.CodeExpression,System.String,System.Boolean,System.CodeDom.CodeTypeReferenceCollection)">
            <summary>
            Outputs reference to an instance or static member.
            </summary>
            <param name="target">An expression denoting the instance or type (if <B>null</B>, <c>$this</c> is assumed).
            </param>
            <param name="name">The member name.</param>
            <param name="variable"><B>True</B> if the member is a variable (i.e. property), <b>false</b> otherwise.</param>
            <param name="typeArgs">Optional type arguments if this is a method reference.</param>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputArrayIndexerExpression(System.CodeDom.CodeExpression,System.CodeDom.CodeExpressionCollection)">
            <summary>
            Outputs an array indexer expression, i.e. a target followed by brackets.
            </summary>
            <remarks><c>TARGET[INDEX1]...</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputTypeParameters(System.CodeDom.CodeTypeParameterCollection)">
            <summary>
            Outputs type parameter declaration (part of generic type and generic method declaration).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputInstantiation(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpressionCollection)">
            <summary>
            Outputs type instantiation.
            </summary>
            <remarks><c>new TYPE(ARGUMENTS)</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputInvocation(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpressionCollection)">
            <summary>
            Outputs method invocation.
            </summary>
            <remarks><c>METHOD(ARGUMENTS)</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputActualArguments(System.CodeDom.CodeExpressionCollection)">
            <summary>
            Outputs actual arguments including the parentheses.
            </summary>
            <remarks><c>(ARGUMENTS)</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
            <summary>
            Outputs custom attribute declarations.
            </summary>
            <remarks><c>[ATTR1(PARAMETERS1), ATTR2(PARAMETERS2), ...]</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
            <summary>
            Outputs a custom attribute argument (named or unnamed).
            </summary>
            <remarks><c>VALUE/$NAME = VALUE</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputAttributes(System.CodeDom.CodeAttributeDeclarationCollection,System.Boolean)">
            <summary>
            Outputs custom attributes.
            </summary>
            <remarks><c>[ATTR1(PARAMETERS1), ATTR2(PARAMETERS2), ...]</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.OutputAttributes(System.CodeDom.CodeAttributeDeclarationCollection,System.Boolean,System.String)">
            <summary>
            Outputs custom attributes.
            </summary>
            <param name="attributes">The attributes to output.</param>
            <param name="inLine"><B>True</B> to output the attributes inline (e.g. parameter attrs.),
            <B>false</B> to output the parameters to a separate line.</param>
            <param name="prefix">The prefix to use (e.g. <c>return:</c>).</param>
            <remarks><c>[PREFIX ATTR1(PARAMETERS1), ATTR2(PARAMETERS2), ...]</c></remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.IsFieldConstant(System.CodeDom.CodeTypeReferenceExpression,System.String)">
            <summary>
            Tries to determine whether the supplied <see cref="T:System.CodeDom.CodeTypeReferenceExpression"/> - name pair denotes
            a property (to be generated with the <B>$</B> prefix) or a constant.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpCodeGenerator.TryIsFieldConstant(System.Reflection.Assembly,System.String,System.String,System.Boolean@)">
            <summary>
            Tries to determine whether there is a given literal field in the specified assembly.
            </summary>
        </member>
        <member name="P:PHP.Core.CodeDom.PhpCodeGenerator.NullToken">
            <summary>
            Gets the token that represents a null reference.
            </summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpModifierAttributeConverter">
            <summary>
            Abstract base for <see cref="T:PHP.Core.CodeDom.PhpMemberAttributeConverter"/> and <see cref="T:PHP.Core.CodeDom.PhpTypeAttributeConverter"/>.
            </summary>
            <remarks>This is almost identical to what C# and VB uses, i.e. conversion between string and an
            arbitrary type based on arrays that hold corresponding name-value pairs at the same indices.</remarks>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpModifierAttributeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpModifierAttributeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpModifierAttributeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the arguments.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpModifierAttributeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpModifierAttributeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from GetStandardValues is an exclusive list.
            </summary>
        </member>
        <member name="M:PHP.Core.CodeDom.PhpModifierAttributeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list.
            </summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpMemberAttributeConverter">
            <summary>
            Provides conversion between strings and <see cref="T:System.CodeDom.MemberAttributes"/>.
            </summary>
        </member>
        <member name="T:PHP.Core.CodeDom.PhpTypeAttributeConverter">
            <summary>
            Provides conversion between strings and <see cref="T:System.Reflection.TypeAttributes"/>.
            </summary>
        </member>
    </members>
</doc>
