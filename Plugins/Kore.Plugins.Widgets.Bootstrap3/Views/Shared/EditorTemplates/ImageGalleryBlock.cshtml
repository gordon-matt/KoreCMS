@using Kore.Web.ContentManagement

@model Kore.Plugins.Widgets.Bootstrap3.ContentBlocks.Bootstrap3ImageGalleryBlock

<div id="block-content" class="row">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="form-group">
            @Html.LabelFor(m => m.MediaFolder, new { @class = "control-label" })
            <div class="input-group">
                @Html.TextBoxFor(m => m.MediaFolder, new { @class = "form-control", data_bind = "value: mediaFolder" })
                <span class="input-group-addon">
                    <a data-toggle="modal" href="javascript:void(0);" data-target="#myModal">
                        <i class="kore-icon kore-icon-search"></i>
                    </a>
                </span>
            </div>
        </div>
    </div>
    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.ImagesPerRowXS, new { @class = "control-label" })
            @Html.EnumDropDownListFor(m => m.ImagesPerRowXS, new { @class = "form-control", data_bind = "value: imagesPerRowXS" })
        </div>
    </div>
    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.ImagesPerRowS, new { @class = "control-label" })
            @Html.EnumDropDownListFor(m => m.ImagesPerRowS, new { @class = "form-control", data_bind = "value: imagesPerRowS" })
        </div>
    </div>
    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.ImagesPerRowM, new { @class = "control-label" })
            @Html.EnumDropDownListFor(m => m.ImagesPerRowM, new { @class = "form-control", data_bind = "value: imagesPerRowM" })
        </div>
    </div>
    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.ImagesPerRowL, new { @class = "control-label" })
            @Html.EnumDropDownListFor(m => m.ImagesPerRowL, new { @class = "form-control", data_bind = "value: imagesPerRowL" })
        </div>
    </div>

    <div class="modal fade" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Select Image</h4>
                </div>
                <div class="modal-body">
                    <iframe src="/filemanager/dialog.php?type=1&relative_url=1&fldr=&field_id=MediaFolder" frameborder="0" style="overflow:hidden;min-height:600px; height:100%;width:100%" height="100%" width="100%"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $('#myModal').on('hidden.bs.modal', function () {
            var url = $('#MediaFolder').val();
            var idx = url.indexOf("Uploads");
            url = url.substring(idx);
            viewModel.mediaFolder(url);
        })
    });

    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function () {
            viewModel.mediaFolder = ko.observable("");
            viewModel.imagesPerRowXS = ko.observable(2);
            viewModel.imagesPerRowS = ko.observable(3);
            viewModel.imagesPerRowM = ko.observable(3);
            viewModel.imagesPerRowL = ko.observable(4);

            var data = ko.mapping.fromJSON(viewModel.blockValues());

            if ((isFunction(data) && data()) || data) {
                if (data.MediaFolder == undefined) {
                    // If this is not set, it means the contentBlock is new and we have nothing in blockValues
                    return;
                }
                if (isFunction(data.MediaFolder)) {
                    viewModel.mediaFolder(data.MediaFolder());
                }
                if (isFunction(data.ImagesPerRowXS)) {
                    viewModel.imagesPerRowXS(data.ImagesPerRowXS());
                }
                if (isFunction(data.ImagesPerRowS)) {
                    viewModel.imagesPerRowS(data.ImagesPerRowS());
                }
                if (isFunction(data.ImagesPerRowM)) {
                    viewModel.imagesPerRowM(data.ImagesPerRowM());
                }
                if (isFunction(data.ImagesPerRowL)) {
                    viewModel.imagesPerRowL(data.ImagesPerRowL());
                }
            }
        };
        f.cleanUp = function () {
            delete viewModel.mediaFolder;
            delete viewModel.imagesPerRowXS;
            delete viewModel.imagesPerRowS;
            delete viewModel.imagesPerRowM;
            delete viewModel.imagesPerRowL;
        };
        f.onBeforeSave = function () {
            var data = {
                MediaFolder: viewModel.mediaFolder(),
                ImagesPerRowXS: viewModel.imagesPerRowXS(),
                ImagesPerRowS: viewModel.imagesPerRowS(),
                ImagesPerRowM: viewModel.imagesPerRowM(),
                ImagesPerRowL: viewModel.imagesPerRowL()
            };

            viewModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>