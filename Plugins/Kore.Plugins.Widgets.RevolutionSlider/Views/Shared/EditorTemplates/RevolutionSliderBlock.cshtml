@using Kore.Plugins.Widgets.RevolutionSlider
@using Kore.Plugins.Widgets.RevolutionSlider.ContentBlocks
@using Kore.Web.ContentManagement
@using Kore.Web.Mvc.KoreUI

@model RevolutionSliderBlock

<div id="block-content">
    @using (var tabs = Html.KoreUI().Begin(new Kore.Web.Mvc.KoreUI.Tabs()))
    {
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.General), "tab-general");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.Navigation), "tab-navigation");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.Loops), "tab-loops");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.MobileVisibility), "tab-mobile-visibility");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.LayoutStyles), "tab-layout-styles");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.Parallax), "tab-parallax");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.PanZoom), "tab-pan-zoom");
        tabs.Tab(T(LocalizableStrings.RevolutionSliderBlock.EditorTabs.Other), "tab-other");

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.SliderId, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.RevolutionSlider().SliderDropDownListFor(m => m.SliderId, new { @class = "form-control", data_bind = "value: sliderId" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ControlId, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ControlId, new { @class = "form-control", data_bind = "value: controlId" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Delay, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.Delay, new { @class = "form-control", data_bind = "value: delay" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.StartHeight, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.StartHeight, new { @class = "form-control", data_bind = "value: startHeight" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.StartWidth, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.StartWidth, new { @class = "form-control", data_bind = "value: startWidth" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.Shuffle, new { data_bind = "checked: shuffle" }) @T(LocalizableStrings.RevolutionSliderBlock.Shuffle)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.KeyboardNavigation, new { data_bind = "checked: keyboardNavigation" }) @T(LocalizableStrings.RevolutionSliderBlock.KeyboardNavigation)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.OnHoverStop, new { data_bind = "checked: onHoverStop" }) @T(LocalizableStrings.RevolutionSliderBlock.OnHoverStop)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.DragBlockVertical, new { data_bind = "checked: dragBlockVertical" }) @T(LocalizableStrings.RevolutionSliderBlock.DragBlockVertical)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.TouchEnabled, new { data_bind = "checked: touchEnabled" }) @T(LocalizableStrings.RevolutionSliderBlock.TouchEnabled)
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ThumbWidth, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ThumbWidth, new { @class = "form-control", data_bind = "value: thumbWidth" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ThumbHeight, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ThumbHeight, new { @class = "form-control", data_bind = "value: thumbHeight" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ThumbAmount, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ThumbAmount, new { @class = "form-control", data_bind = "value: thumbAmount" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.HideThumbs, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.HideThumbs, new { @class = "form-control", data_bind = "value: hideThumbs" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationType, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.NavigationType, new { @class = "form-control", data_bind = "value: navigationType" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationArrows, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.NavigationArrows, new { @class = "form-control", data_bind = "value: navigationArrows" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationStyle, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.NavigationStyle, new { @class = "form-control", data_bind = "value: navigationStyle" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationHAlign, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.NavigationHAlign, new { @class = "form-control", data_bind = "value: navigationHAlign" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationVAlign, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.NavigationVAlign, new { @class = "form-control", data_bind = "value: navigationVAlign" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationHOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.NavigationHOffset, new { @class = "form-control", data_bind = "value: navigationHOffset" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NavigationVOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.NavigationVOffset, new { @class = "form-control", data_bind = "value: navigationVOffset" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowLeftHAlign, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.SoloArrowLeftHAlign, new { @class = "form-control", data_bind = "value: soloArrowLeftHAlign" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowRightHAlign, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.SoloArrowRightHAlign, new { @class = "form-control", data_bind = "value: soloArrowRightHAlign" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowLeftVAlign, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.SoloArrowLeftVAlign, new { @class = "form-control", data_bind = "value: soloArrowLeftVAlign" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowRightVAlign, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.SoloArrowRightVAlign, new { @class = "form-control", data_bind = "value: soloArrowRightVAlign" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowLeftHOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SoloArrowLeftHOffset, new { @class = "form-control", data_bind = "value: soloArrowLeftHOffset" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowRightHOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SoloArrowRightHOffset, new { @class = "form-control", data_bind = "value: soloArrowRightHOffset" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowLeftVOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SoloArrowLeftVOffset, new { @class = "form-control", data_bind = "value: soloArrowLeftVOffset" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SoloArrowRightVOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SoloArrowRightVOffset, new { @class = "form-control", data_bind = "value: soloArrowRightVOffset" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SwipeVelocity, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SwipeVelocity, new { @class = "form-control", data_bind = "value: swipeVelocity" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SwipeMaxTouches, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SwipeMaxTouches, new { @class = "form-control", data_bind = "value: swipeMaxTouches" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SwipeMinTouches, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.SwipeMinTouches, new { @class = "form-control", data_bind = "value: swipeMinTouches" })
                    </div>
                </div>
            </div>
        }

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.StartWithSlide, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.StartWithSlide, new { @class = "form-control", data_bind = "value: startWithSlide" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.StopAtSlide, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.StopAtSlide, new { @class = "form-control", data_bind = "value: stopAtSlide" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.StopAfterLoops, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.StopAfterLoops, new { @class = "form-control", data_bind = "value: stopAfterLoops" })
                    </div>
                </div>
            </div>
        }

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.HideCaptionAtLimit, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.HideCaptionAtLimit, new { @class = "form-control", data_bind = "value: hideCaptionAtLimit" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.HideAllCaptionAtLimit, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.HideAllCaptionAtLimit, new { @class = "form-control", data_bind = "value: hideAllCaptionAtLimit" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.HideSliderAtLimit, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.HideSliderAtLimit, new { @class = "form-control", data_bind = "value: hideSliderAtLimit" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.HideNavDelayOnMobile, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.HideNavDelayOnMobile, new { @class = "form-control", data_bind = "value: hideNavDelayOnMobile" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.HideThumbsUnderResolution, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.HideThumbsUnderResolution, new { @class = "form-control", data_bind = "value: hideThumbsUnderResolution" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.HideThumbsOnMobile, new { data_bind = "checked: hideThumbsOnMobile" }) @T(LocalizableStrings.RevolutionSliderBlock.HideThumbsOnMobile)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.HideBulletsOnMobile, new { data_bind = "checked: hideBulletsOnMobile" }) @T(LocalizableStrings.RevolutionSliderBlock.HideBulletsOnMobile)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.HideArrowsOnMobile, new { data_bind = "checked: hideArrowsOnMobile" }) @T(LocalizableStrings.RevolutionSliderBlock.HideArrowsOnMobile)
                            </label>
                        </div>
                    </div>
                </div>
            </div> 
        }

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.Spinner, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.Spinner, new { @class = "form-control", data_bind = "value: spinner" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.MinHeight, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.MinHeight, new { @class = "form-control", data_bind = "value: minHeight" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.FullScreenOffsetContainer, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.FullScreenOffsetContainer, new { @class = "form-control", data_bind = "value: fullScreenOffsetContainer" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.FullScreenOffset, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.FullScreenOffset, new { @class = "form-control", data_bind = "value: fullScreenOffset" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.FullScreenOffsetUnit, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.FullScreenOffsetUnit, new { @class = "form-control", data_bind = "value: fullScreenOffsetUnit" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.Shadow, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.Shadow, new { @class = "form-control", data_bind = "value: shadow" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.DottedOverlay, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.DottedOverlay, new { @class = "form-control", data_bind = "value: dottedOverlay" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.HideTimerBar, new { data_bind = "checked: hideTimerBar" }) @T(LocalizableStrings.RevolutionSliderBlock.HideTimerBar)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.FullWidth, new { data_bind = "checked: fullWidth" }) @T(LocalizableStrings.RevolutionSliderBlock.FullWidth)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.AutoHeight, new { data_bind = "checked: autoHeight" }) @T(LocalizableStrings.RevolutionSliderBlock.AutoHeight)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.FullScreenAlignForce, new { data_bind = "checked: fullScreenAlignForce" }) @T(LocalizableStrings.RevolutionSliderBlock.FullScreenAlignForce)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ForceFullWidth, new { data_bind = "checked: forceFullWidth" }) @T(LocalizableStrings.RevolutionSliderBlock.ForceFullWidth)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.FullScreen, new { data_bind = "checked: fullScreen" }) @T(LocalizableStrings.RevolutionSliderBlock.FullScreen)
                            </label>
                        </div>
                    </div>
                </div>
            </div> 
        }
        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.Parallax, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.EnumDropDownListFor(m => m.Parallax, new { @class = "form-control", data_bind = "value: parallax" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ParallaxLevels, new { @class = "control-label col-xs-12 col-sm-4 col-md-3 col-lg-3" })
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        @Html.TextBoxFor(m => m.ParallaxLevels, new { @class = "form-control", data_bind = "value: parallaxLevels" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ParallaxBgFreeze, new { data_bind = "checked: parallaxBgFreeze" }) @T(LocalizableStrings.RevolutionSliderBlock.ParallaxBgFreeze)
                            </label>
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.ParallaxDisableOnMobile, new { data_bind = "checked: parallaxDisableOnMobile" }) @T(LocalizableStrings.RevolutionSliderBlock.ParallaxDisableOnMobile)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.PanZoomDisableOnMobile, new { data_bind = "checked: panZoomDisableOnMobile" }) @T(LocalizableStrings.RevolutionSliderBlock.PanZoomDisableOnMobile)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }

        using (var tab = tabs.BeginPanel())
        {
            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                <div class="form-group">
                    <label class="control-label col-xs-12 col-sm-4 col-md-3 col-lg-3"></label>
                    <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.SimplifyAll, new { data_bind = "checked: simplifyAll" }) @T(LocalizableStrings.RevolutionSliderBlock.SimplifyAll)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

<script type="text/javascript">
    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function () {
            viewModel.sliderId = ko.observable(0);
            viewModel.controlId = ko.observable("revolution-slider");
            viewModel.delay = ko.observable(9000);
            viewModel.startHeight = ko.observable(500);
            viewModel.startWidth = ko.observable(960);
            viewModel.shuffle = ko.observable(false);
            viewModel.keyboardNavigation = ko.observable(true);
            viewModel.onHoverStop = ko.observable(true);
            viewModel.thumbWidth = ko.observable(100);
            viewModel.thumbHeight = ko.observable(50);
            viewModel.thumbAmount = ko.observable(3);
            viewModel.hideThumbs = ko.observable(0);
            viewModel.navigationType = ko.observable(1); // Bullet
            viewModel.navigationArrows = ko.observable(1); // Solo
            viewModel.navigationStyle = ko.observable(4); // Round
            viewModel.navigationHAlign = ko.observable(1); // Center
            viewModel.navigationVAlign = ko.observable(2); // Bottom
            viewModel.navigationHOffset = ko.observable(30);
            viewModel.navigationVOffset = ko.observable(30);
            viewModel.soloArrowLeftHAlign = ko.observable(0); // Left
            viewModel.soloArrowRightHAlign = ko.observable(2); // Right
            viewModel.soloArrowLeftVAlign = ko.observable(1); // Center
            viewModel.soloArrowRightVAlign = ko.observable(1); // Center
            viewModel.soloArrowLeftHOffset = ko.observable(20);
            viewModel.soloArrowRightHOffset = ko.observable(20);
            viewModel.soloArrowLeftVOffset = ko.observable(0);
            viewModel.soloArrowRightVOffset = ko.observable(0);
            viewModel.touchEnabled = ko.observable(true);
            viewModel.swipeVelocity = ko.observable(0.7);
            viewModel.swipeMaxTouches = ko.observable(1);
            viewModel.swipeMinTouches = ko.observable(1);
            viewModel.dragBlockVertical = ko.observable(false);
            viewModel.startWithSlide = ko.observable(0);
            viewModel.stopAtSlide = ko.observable(-1);
            viewModel.stopAfterLoops = ko.observable(-1);
            viewModel.hideCaptionAtLimit = ko.observable(0);
            viewModel.hideAllCaptionAtLimit = ko.observable(0);
            viewModel.hideSliderAtLimit = ko.observable(0);
            viewModel.hideNavDelayOnMobile = ko.observable(1500);
            viewModel.hideThumbsOnMobile = ko.observable(false);
            viewModel.hideBulletsOnMobile = ko.observable(false);
            viewModel.hideArrowsOnMobile = ko.observable(false);
            viewModel.hideThumbsUnderResolution = ko.observable(0);
            viewModel.spinner = ko.observable(3); // Spinner4
            viewModel.hideTimerBar = ko.observable(false);
            viewModel.fullWidth = ko.observable(false);
            viewModel.autoHeight = ko.observable(false);
            viewModel.minHeight = ko.observable(false);
            viewModel.fullScreenAlignForce = ko.observable(false);
            viewModel.forceFullWidth = ko.observable(false);
            viewModel.fullScreen = ko.observable(false);
            viewModel.fullScreenOffsetContainer = ko.observable(null);
            viewModel.fullScreenOffset = ko.observable(0);
            viewModel.fullScreenOffsetUnit = ko.observable(0); // Pixels
            viewModel.shadow = ko.observable(0);
            viewModel.dottedOverlay = ko.observable(0); // None
            viewModel.parallax = ko.observable(0); // Mouse
            viewModel.parallaxBgFreeze = ko.observable(true);
            viewModel.parallaxLevels = ko.observable("10,7,4,3,2,5,4,3,2,1");
            viewModel.parallaxDisableOnMobile = ko.observable(false);
            viewModel.panZoomDisableOnMobile = ko.observable(false);
            viewModel.simplifyAll = ko.observable(false);

            var data = ko.mapping.fromJSON(viewModel.blockValues());

            if ((isFunction(data) && data()) || data) {
                if (data.SliderId == undefined) {
                    // If this is not set, it means the contentBlock is new and we have nothing in blockValues
                    return;
                }
                viewModel.sliderId(data.SliderId());
                viewModel.controlId(data.ControlId());
                viewModel.delay(data.Delay());
                viewModel.startHeight(data.StartHeight());
                viewModel.startWidth(data.StartWidth());
                viewModel.shuffle(data.Shuffle());
                viewModel.keyboardNavigation(data.KeyboardNavigation());
                viewModel.onHoverStop(data.OnHoverStop());
                viewModel.thumbWidth(data.ThumbWidth());
                viewModel.thumbHeight(data.ThumbHeight());
                viewModel.thumbAmount(data.ThumbAmount());
                viewModel.hideThumbs(data.HideThumbs());
                viewModel.navigationType(data.NavigationType());
                viewModel.navigationArrows(data.NavigationArrows());
                viewModel.navigationStyle(data.NavigationStyle());
                viewModel.navigationHAlign(data.NavigationHAlign());
                viewModel.navigationVAlign(data.NavigationVAlign());
                viewModel.navigationHOffset(data.NavigationHOffset());
                viewModel.navigationVOffset(data.NavigationVOffset());
                viewModel.soloArrowLeftHAlign(data.SoloArrowLeftHAlign());
                viewModel.soloArrowRightHAlign(data.SoloArrowRightHAlign());
                viewModel.soloArrowLeftVAlign(data.SoloArrowLeftVAlign());
                viewModel.soloArrowRightVAlign(data.SoloArrowRightVAlign());
                viewModel.soloArrowLeftHOffset(data.SoloArrowLeftHOffset());
                viewModel.soloArrowRightHOffset(data.SoloArrowRightHOffset());
                viewModel.soloArrowLeftVOffset(data.SoloArrowLeftVOffset());
                viewModel.soloArrowRightVOffset(data.SoloArrowRightVOffset());
                viewModel.touchEnabled(data.TouchEnabled());
                viewModel.swipeVelocity(data.SwipeVelocity());
                viewModel.swipeMaxTouches(data.SwipeMaxTouches());
                viewModel.swipeMinTouches(data.SwipeMinTouches());
                viewModel.dragBlockVertical(data.DragBlockVertical());
                viewModel.startWithSlide(data.StartWithSlide());
                viewModel.stopAtSlide(data.StopAtSlide());
                viewModel.stopAfterLoops(data.StopAfterLoops());
                viewModel.hideCaptionAtLimit(data.HideCaptionAtLimit());
                viewModel.hideAllCaptionAtLimit(data.HideAllCaptionAtLimit());
                viewModel.hideSliderAtLimit(data.HideSliderAtLimit());
                viewModel.hideNavDelayOnMobile(data.HideNavDelayOnMobile());
                viewModel.hideThumbsOnMobile(data.HideThumbsOnMobile());
                viewModel.hideBulletsOnMobile(data.HideBulletsOnMobile());
                viewModel.hideArrowsOnMobile(data.HideArrowsOnMobile());
                viewModel.hideThumbsUnderResolution(data.HideThumbsUnderResolution());
                viewModel.spinner(data.Spinner());
                viewModel.hideTimerBar(data.HideTimerBar());
                viewModel.fullWidth(data.FullWidth());
                viewModel.autoHeight(data.AutoHeight());
                viewModel.minHeight(data.MinHeight());
                viewModel.fullScreenAlignForce(data.FullScreenAlignForce());
                viewModel.forceFullWidth(data.ForceFullWidth());
                viewModel.fullScreen(data.FullScreen());
                viewModel.fullScreenOffsetContainer(data.FullScreenOffsetContainer());
                viewModel.fullScreenOffset(data.FullScreenOffset());
                viewModel.fullScreenOffsetUnit(data.FullScreenOffsetUnit());
                viewModel.shadow(data.Shadow());
                viewModel.dottedOverlay(data.DottedOverlay());
                viewModel.parallax(data.Parallax());
                viewModel.parallaxBgFreeze(data.ParallaxBgFreeze());
                viewModel.parallaxLevels(data.ParallaxLevels());
                viewModel.parallaxDisableOnMobile(data.ParallaxDisableOnMobile());
                viewModel.panZoomDisableOnMobile(data.PanZoomDisableOnMobile());
                viewModel.simplifyAll(data.SimplifyAll());
            }
        };
        f.cleanUp = function () {
            delete viewModel.sliderId;
            delete viewModel.controlId;
            delete viewModel.delay;
            delete viewModel.startHeight;
            delete viewModel.startWidth;
            delete viewModel.shuffle;
            delete viewModel.keyboardNavigation;
            delete viewModel.onHoverStop;
            delete viewModel.thumbWidth;
            delete viewModel.thumbHeight;
            delete viewModel.thumbAmount;
            delete viewModel.hideThumbs;
            delete viewModel.navigationType;
            delete viewModel.navigationArrows;
            delete viewModel.navigationStyle;
            delete viewModel.navigationHAlign;
            delete viewModel.navigationVAlign;
            delete viewModel.navigationHOffset;
            delete viewModel.navigationVOffset;
            delete viewModel.soloArrowLeftHAlign;
            delete viewModel.soloArrowRightHAlign;
            delete viewModel.soloArrowLeftVAlign;
            delete viewModel.soloArrowRightVAlign;
            delete viewModel.soloArrowLeftHOffset;
            delete viewModel.soloArrowRightHOffset;
            delete viewModel.soloArrowLeftVOffset;
            delete viewModel.soloArrowRightVOffset;
            delete viewModel.touchEnabled;
            delete viewModel.swipeVelocity;
            delete viewModel.swipeMaxTouches;
            delete viewModel.swipeMinTouches;
            delete viewModel.dragBlockVertical;
            delete viewModel.startWithSlide;
            delete viewModel.stopAtSlide;
            delete viewModel.stopAfterLoops;
            delete viewModel.hideCaptionAtLimit;
            delete viewModel.hideAllCaptionAtLimit;
            delete viewModel.hideSliderAtLimit;
            delete viewModel.hideNavDelayOnMobile;
            delete viewModel.hideThumbsOnMobile;
            delete viewModel.hideBulletsOnMobile;
            delete viewModel.hideArrowsOnMobile;
            delete viewModel.hideThumbsUnderResolution;
            delete viewModel.spinner;
            delete viewModel.hideTimerBar;
            delete viewModel.fullWidth;
            delete viewModel.autoHeight;
            delete viewModel.minHeight;
            delete viewModel.fullScreenAlignForce;
            delete viewModel.forceFullWidth;
            delete viewModel.fullScreen;
            delete viewModel.fullScreenOffsetContainer;
            delete viewModel.fullScreenOffset;
            delete viewModel.fullScreenOffsetUnit;
            delete viewModel.shadow;
            delete viewModel.dottedOverlay;
            delete viewModel.parallax;
            delete viewModel.parallaxBgFreeze;
            delete viewModel.parallaxLevels;
            delete viewModel.parallaxDisableOnMobile;
            delete viewModel.panZoomDisableOnMobile;
            delete viewModel.simplifyAll;
        };
        f.onBeforeSave = function () {
            var data = {
                SliderId: viewModel.sliderId(),
                ControlId: viewModel.controlId(),
                Delay: viewModel.delay(),
                StartHeight: viewModel.startHeight(),
                StartWidth: viewModel.startWidth(),
                Shuffle: viewModel.shuffle(),
                KeyboardNavigation: viewModel.keyboardNavigation(),
                OnHoverStop: viewModel.onHoverStop(),
                ThumbWidth: viewModel.thumbWidth(),
                ThumbHeight: viewModel.thumbHeight(),
                ThumbAmount: viewModel.thumbAmount(),
                HideThumbs: viewModel.hideThumbs(),
                NavigationType: viewModel.navigationType(),
                NavigationArrows: viewModel.navigationArrows(),
                NavigationStyle: viewModel.navigationStyle(),
                NavigationHAlign: viewModel.navigationHAlign(),
                NavigationVAlign: viewModel.navigationVAlign(),
                NavigationHOffset: viewModel.navigationHOffset(),
                NavigationVOffset: viewModel.navigationVOffset(),
                SoloArrowLeftHAlign: viewModel.soloArrowLeftHAlign(),
                SoloArrowRightHAlign: viewModel.soloArrowRightHAlign(),
                SoloArrowLeftVAlign: viewModel.soloArrowLeftVAlign(),
                SoloArrowRightVAlign: viewModel.soloArrowRightVAlign(),
                SoloArrowLeftHOffset: viewModel.soloArrowLeftHOffset(),
                SoloArrowRightHOffset: viewModel.soloArrowRightHOffset(),
                SoloArrowLeftVOffset: viewModel.soloArrowLeftVOffset(),
                SoloArrowRightVOffset: viewModel.soloArrowRightVOffset(),
                TouchEnabled: viewModel.touchEnabled(),
                SwipeVelocity: viewModel.swipeVelocity(),
                SwipeMaxTouches: viewModel.swipeMaxTouches(),
                SwipeMinTouches: viewModel.swipeMinTouches(),
                DragBlockVertical: viewModel.dragBlockVertical(),
                StartWithSlide: viewModel.startWithSlide(),
                StopAtSlide: viewModel.stopAtSlide(),
                StopAfterLoops: viewModel.stopAfterLoops(),
                HideCaptionAtLimit: viewModel.hideCaptionAtLimit(),
                HideAllCaptionAtLimit: viewModel.hideAllCaptionAtLimit(),
                HideSliderAtLimit: viewModel.hideSliderAtLimit(),
                HideNavDelayOnMobile: viewModel.hideNavDelayOnMobile(),
                HideThumbsOnMobile: viewModel.hideThumbsOnMobile(),
                HideBulletsOnMobile: viewModel.hideBulletsOnMobile(),
                HideArrowsOnMobile: viewModel.hideArrowsOnMobile(),
                HideThumbsUnderResolution: viewModel.hideThumbsUnderResolution(),
                Spinner: viewModel.spinner(),
                HideTimerBar: viewModel.hideTimerBar(),
                FullWidth: viewModel.fullWidth(),
                AutoHeight: viewModel.autoHeight(),
                MinHeight: viewModel.minHeight(),
                FullScreenAlignForce: viewModel.fullScreenAlignForce(),
                ForceFullWidth: viewModel.forceFullWidth(),
                FullScreen: viewModel.fullScreen(),
                FullScreenOffsetContainer: viewModel.fullScreenOffsetContainer(),
                FullScreenOffset: viewModel.fullScreenOffset(),
                FullScreenOffsetUnit: viewModel.fullScreenOffsetUnit(),
                Shadow: viewModel.shadow(),
                DottedOverlay: viewModel.dottedOverlay(),
                Parallax: viewModel.parallax(),
                ParallaxBgFreeze: viewModel.parallaxBgFreeze(),
                ParallaxLevels: viewModel.parallaxLevels(),
                ParallaxDisableOnMobile: viewModel.parallaxDisableOnMobile(),
                PanZoomDisableOnMobile: viewModel.panZoomDisableOnMobile(),
                SimplifyAll: viewModel.simplifyAll()
            };
            viewModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>
