@using Kore.Plugins.Ecommerce.Simple
@using Kore.Web.Mvc

@model PayPalSettings

<div id="settings-content">
    <div class="form-group">
        @Html.LabelFor(m => m.ProductionUrl, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.ProductionUrl, new { @class = "form-control", data_bind = "value: productionUrl" })
        @Html.ValidationMessageFor(m => m.ProductionUrl)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.SandboxUrl, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.SandboxUrl, new { @class = "form-control", data_bind = "value: sandboxUrl" })
        @Html.ValidationMessageFor(m => m.SandboxUrl)
    </div>
    <div class="form-group">
        <div class="checkbox">
            <label>
                @Html.CheckBoxFor(m => m.UseSandboxMode, new { data_bind = "checked: useSandboxMode" }) @T(LocalizableStrings.Settings.PayPal.UseSandboxMode)
            </label>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Merchant, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.Merchant, new { @class = "form-control", data_bind = "value: merchant" })
        @Html.ValidationMessageFor(m => m.Merchant)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.CurrencyCode, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.CurrencyCode, new { @class = "form-control", data_bind = "value: currencyCode" })
        @Html.ValidationMessageFor(m => m.CurrencyCode)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.PdtToken, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.PdtToken, new { @class = "form-control", data_bind = "value: pdtToken" })
        @Html.ValidationMessageFor(m => m.PdtToken)
    </div>
</div>

<script type="text/javascript">
    function updateModel(data) {
        viewModel.productionUrl = ko.observable("https://www.paypal.com/us/cgi-bin/webscr");
        viewModel.sandboxUrl = ko.observable("https://www.sandbox.paypal.com/cgi-bin/webscr");
        viewModel.useSandboxMode = ko.observable(true);
        viewModel.merchant = ko.observable("");
        viewModel.currencyCode = ko.observable("USD");
        viewModel.pdtToken = ko.observable("");

        if (data) {
            if (data.ProductionUrl) {
                viewModel.productionUrl(data.ProductionUrl);
            }
            if (data.SandboxUrl) {
                viewModel.sandboxUrl(data.SandboxUrl);
            }
            if (typeof data.UseSandboxMode === 'boolean') {
                viewModel.useSandboxMode(data.UseSandboxMode);
            }
            if (data.Merchant) {
                viewModel.merchant(data.Merchant);
            }
            if (data.CurrencyCode) {
                viewModel.currencyCode(data.CurrencyCode);
            }
            if (data.PdtToken) {
                viewModel.pdtToken(data.PdtToken);
            }
        }
    };

    function cleanUp() {
        delete viewModel.productionUrl;
        delete viewModel.sandboxUrl;
        delete viewModel.useSandboxMode;
        delete viewModel.merchant;
        delete viewModel.currencyCode;
        delete viewModel.pdtToken;
    }

    function onBeforeSave() {
        var data = {
            ProductionUrl: viewModel.productionUrl(),
            SandboxUrl: viewModel.sandboxUrl(),
            UseSandboxMode: viewModel.useSandboxMode(),
            Merchant: viewModel.merchant(),
            CurrencyCode: viewModel.currencyCode(),
            PdtToken: viewModel.pdtToken()
        };

        viewModel.value(ko.mapping.toJSON(data));
    };
</script>