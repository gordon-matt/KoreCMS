@using Kore.Web.ContentManagement.Areas.Admin.Localization

@model LanguageSwitchBlock

<div id="block-content">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="form-group">
            @Html.LabelFor(m => m.Style, new { @class = "control-label" })
            @Html.EnumDropDownListFor(m => m.Style, null, new { @class = "form-control", data_bind = "value: style" })
        </div>
    </div>
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12" data-bind="visible: style() == 3">
        <div class="form-group">
            @Html.LabelFor(m => m.CustomTemplatePath, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.CustomTemplatePath, new { @class = "form-control", data_bind = "value: customTemplatePath" })
        </div>
    </div>
    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.MessageText, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.MessageText, new { @class = "form-control", data_bind = "value: messageText" })
        </div>
    </div>
    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
        <div class="checkbox">
            <label>
                @Html.CheckBoxFor(m => m.UseUrlPrefix, new { data_bind = "checked: useUrlPrefix" }) Use URL Prefix
            </label>
        </div>
    </div>
</div>

<script type="text/javascript">
    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function () {
            viewModel.style = ko.observable("");
            viewModel.customTemplatePath = ko.observable("");
            viewModel.useUrlPrefix = ko.observable(false);
            viewModel.messageText = ko.observable("");

            var data = ko.mapping.fromJSON(viewModel.blockValues());

            if (data) {
                if (data.Style) {
                    viewModel.style(data.Style());
                }
                if (data.CustomTemplatePath) {
                    viewModel.customTemplatePath(data.CustomTemplatePath());
                }
                if (data.UseUrlPrefix) {
                    viewModel.useUrlPrefix(data.UseUrlPrefix());
                }
                if (data.MessageText) {
                    viewModel.messageText(data.MessageText());
                }
            }
        };
        f.cleanUp = function () {
            delete viewModel.style;
            delete viewModel.customTemplatePath;
            delete viewModel.useUrlPrefix;
            delete viewModel.messageText;
        };
        f.onBeforeSave = function () {
            var data = {
                Style: viewModel.style(),
                CustomTemplatePath: viewModel.customTemplatePath(),
                UseUrlPrefix: viewModel.useUrlPrefix(),
                MessageText: viewModel.messageText()
            };

            viewModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>