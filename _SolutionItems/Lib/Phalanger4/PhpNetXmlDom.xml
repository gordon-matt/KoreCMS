<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PhpNetXmlDom</name>
    </assembly>
    <members>
        <member name="T:PHP.Library.Xml.XMLReader">
            <summary>
            DOM node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.attributeCount">
            <summary>
            The number of attributes on the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.baseURI">
            <summary>
            The base URI of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.depth">
            <summary>
            Depth of the node in the tree, starting at 0.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.hasAttributes">
            <summary>
            Indicates if node has attributes.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.hasValue">
            <summary>
            Indicates if node has a text value.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.isDefault">
            <summary>
            Indicates if attribute is defaulted from DTD.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.isEmptyElement">
            <summary>
            Indicates if node is an empty element tag.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.localName">
            <summary>
            The local name of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.name">
            <summary>
            The qualified name of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.namespaceURI">
            <summary>
            The URI of the namespace associated with the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.nodeType">
            <summary>
            The node type for the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.prefix">
            <summary>
            The prefix of the namespace associated with the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.value">
            <summary>
            The text value of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.XMLReader.xmlLang">
            <summary>
            The xml:lang scope which the node resides.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.XMLReader.FileUriResolver">
            <summary>
            HTML-encoded paths are converted into unix path. Probably .Net trying to assume we're a web-server.
            Original URI from PHP: file:///Z%3A%5CPhalanger%5CTesting%5CTests%5CXml%5CxmlReader/dtdexample.dtd
            Uri.ToString(): file:///Z:/Phalanger/Testing/Tests/Xml/xmlReader/dtdexample.dtd 
            Uri.LocalPath: /Z:/Phalanger/Testing/Tests/Xml/xmlReader/dtdexample.dtd
            As a workaround, we simply load Uri.ToString() into a new Uri (so the resulting LocalPath is correct).
            Result: Z:\Phalanger\Testing\Tests\Xml\xmlReader\dtdexample.dtd
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMAttr">
            <summary>
            DOM attribute.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMNode">
            <summary>
            DOM node.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.CheckedChildOperation(PHP.Library.Xml.DOMNode,PHP.Library.Xml.DOMNode,PHP.Library.Xml.DOMNode.NodeAction)">
            <summary>
            Performs a child-adding action with error checks.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.insertBefore(PHP.Library.Xml.DOMNode,PHP.Library.Xml.DOMNode)">
            <summary>
            Adds a new child before a reference node.
            </summary>
            <param name="newNode">The new node.</param>
            <param name="refNode">The reference node. If not supplied, <paramref name="newNode"/> is appended
            to the children.</param>
            <returns>The inserted node.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.replaceChild(PHP.Library.Xml.DOMNode,PHP.Library.Xml.DOMNode)">
            <summary>
            Replaces a child node.
            </summary>
            <param name="newNode">The new node.</param>
            <param name="oldNode">The old node.</param>
            <returns>The inserted node.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.appendChild(PHP.Library.Xml.DOMNode)">
            <summary>
            Adds a new child at the end of the children.
            </summary>
            <param name="newNode">The node to add.</param>
            <returns>The node added.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.removeChild(PHP.Library.Xml.DOMNode)">
            <summary>
            Removes a child from the list of children.
            </summary>
            <param name="oldNode">The node to remove.</param>
            <returns>The removed node.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.hasChildNodes">
            <summary>
            Checks if the node has children.
            </summary>
            <returns><B>True</B> if this node has children, <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.hasAttributes">
            <summary>
            Checks if the node has attributes.
            </summary>
            <returns><B>True</B> if this node has attributes, <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.lookupPrefix(System.String)">
            <summary>
            Gets the namespace prefix of the node based on the namespace URI.
            </summary>
            <param name="namespaceUri">The namespace URI.</param>
            <returns>The prefix of the namespace or <B>null</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.lookupNamespaceUri(System.String)">
            <summary>
            Gets the namespace URI of the node based on the prefix.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns>The namespace URI or <B>null</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.isDefaultNamespace(System.String)">
            <summary>
            Determines whether the given URI is the default namespace.
            </summary>
            <param name="namespaceUri">The namespace URI.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.normalize">
            <summary>
            Normalizes the node.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.cloneNode(System.Boolean)">
            <summary>
            Creates a copy of the node.
            </summary>
            <param name="deep">Indicates whether to copy all descendant nodes. This parameter is
            defaulted to <B>false</B>.</param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.isSameNode(PHP.Library.Xml.DOMNode)">
            <summary>
            Indicates if two nodes are the same node.
            </summary>
            <param name="anotherNode">The other node.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.isSupported(System.String,System.String)">
            <summary>
            Checks if a feature is supported for the specified version.
            </summary>
            <param name="feature">The feature to test.</param>
            <param name="version">The version number of the <paramref name="feature"/> to test.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.getFeature(System.String,System.String)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.getUserData(System.String)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.setUserData(System.String,System.Object,PHP.Library.Xml.DOMUserDataHandler)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.compareDocumentPosition(PHP.Library.Xml.DOMNode)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMNode.isEqualNode(PHP.Library.Xml.DOMNode)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.nodeName">
            <summary>
            Returns the name of the node (exact meaning depends on the particular subtype).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.nodeValue">
            <summary>
            Returns or sets the value of the node (exact meaning depends on the particular subtype).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.nodeType">
            <summary>
            Returns the type of the node (to be overriden).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.parentNode">
            <summary>
            Returns the parent of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.childNodes">
            <summary>
            Returns all children of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.firstChild">
            <summary>
            Returns the first child of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.lastChild">
            <summary>
            Returns the last child of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.previousSibling">
            <summary>
            Returns the previous sibling of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.nextSibling">
            <summary>
            Returns the next sibling of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.attributes">
            <summary>
            Returns a map of attributes of this node (overriden in <see cref="T:PHP.Library.Xml.DOMElement"/>).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.ownerDocument">
            <summary>
            This function returns the document the current node belongs to.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.namespaceURI">
            <summary>
            Returns the namespace URI of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.prefix">
            <summary>
            Returns or sets the namespace prefix of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.localName">
            <summary>
            Returns the local name of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.baseURI">
            <summary>
            Returns the base URI of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNode.textContent">
            <summary>
            Returns or sets the text content of the node.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMAttr.__construct(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:PHP.Library.Xml.DOMAttr"/> object.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMAttr.isId">
            <summary>
            Checks if attribute is a defined ID.
            </summary>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="P:PHP.Library.Xml.DOMAttr.nodeName">
            <summary>
            Returns the name of the attribute.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMAttr.nodeValue">
            <summary>
            Returns or sets the value of the attribute.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMAttr.namespaceURI">
            <summary>
            Returns the namespace URI of the attribute.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMAttr.nodeType">
            <summary>
            Returns the type of the node (<see cref="F:PHP.Library.Xml.NodeType.Attribute"/>).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMAttr.name">
            <summary>
            Returns the name of the attribute.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMAttr.value">
            <summary>
            Returns or sets the value of this attribute
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMAttr.specified">
            <summary>
            Always returns <B>true</B> as in PHP 5.1.6.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMAttr.ownerElement">
            <summary>
            Returns the <see cref="T:PHP.Library.Xml.DOMElement"/> to which this attribute belongs.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMAttr.schemaTypeInfo">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMDocument">
            <summary>
            DOM document.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.createElement(System.String,System.String)">
            <summary>
            Creates an element with the specified name and inner text.
            </summary>
            <param name="tagName">The qualified name of the element.</param>
            <param name="value">The inner text (value) of the element.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.DOMElement"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.createDocumentFragment">
            <summary>
            Creates a new document fragment.
            </summary>
            <returns>A new <see cref="T:PHP.Library.Xml.DOMDocumentFragment"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.createTextNode(System.String)">
            <summary>
            Creates a new text node with the specified text.
            </summary>
            <param name="data">The text for the text node.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.DOMText"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.createComment(System.String)">
            <summary>
            Creates a comment node containing the specified data.
            </summary>
            <param name="data">The comment data.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.DOMComment"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.createCDATASection(System.String)">
            <summary>
            Creates a CDATA section containing the specified data.
            </summary>
            <param name="data">The content of the new CDATA section.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.DOMCdataSection"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.createProcessingInstruction(System.String,System.String)">
            <summary>
            Creates a processing instruction with the specified name and data.
            </summary>
            <param name="target">The name of the processing instruction.</param>
            <param name="data">The data for the processing instruction.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.DOMProcessingInstruction"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.createAttribute(System.String)">
            <summary>
            Creates an attribute with the specified name.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.DOMAttr"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.createEntityReference(System.String)">
            <summary>
            Creates an entity reference with the specified name.
            </summary>
            <param name="name">The name of the entity reference.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.DOMEntityReference"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.createElementNS(System.String,System.String,System.String)">
            <summary>
            Creates an element with the specified namespace URI and qualified name.
            </summary>
            <param name="namespaceUri">The namespace URI of the element.</param>
            <param name="qualifiedName">The qualified name of the element.</param>
            <param name="value">The inner text (value) of the element.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.DOMElement"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.createAttributeNS(System.String,System.String)">
            <summary>
            Creates an attribute with the specified namespace URI and qualified name.
            </summary>
            <param name="namespaceUri">The namespace URI of the attribute.</param>
            <param name="qualifiedName">The qualified name of the attribute.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.DOMAttr"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.getElementsByTagName(System.String)">
            <summary>
            Gets all descendant elements with the matching tag name.
            </summary>
            <param name="name">The tag name. Use <B>*</B> to return all elements within the element tree.</param>
            <returns>A <see cref="T:PHP.Library.Xml.DOMNodeList"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.getElementsByTagNameNS(System.String,System.String)">
            <summary>
            Gets all descendant elements with the matching namespace URI and local name.
            </summary>
            <param name="namespaceUri">The namespace URI.</param>
            <param name="localName">The local name. Use <B>*</B> to return all elements within the element tree.</param>
            <returns>A <see cref="T:PHP.Library.Xml.DOMNodeList"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.getElementById(System.String)">
            <summary>
            Not yet implemented.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.importNode(PHP.Library.Xml.DOMNode,System.Boolean)">
            <summary>
            Imports a node from another document to the current document.
            </summary>
            <param name="importedNode">The node being imported.</param>
            <param name="deep"><B>True</B> to perform deep clone; otheriwse <B>false</B>.</param>
            <returns>The imported <see cref="T:PHP.Library.Xml.DOMNode"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.adoptNode(PHP.Library.Xml.DOMNode)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.normalizeDocument">
            <summary>
            Puts the entire XML document into a &quot;normal&quot; form.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.renameNode(PHP.Library.Xml.DOMNode,System.String,System.String)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.load(PHP.Library.Xml.DOMDocument,System.String,System.Int32)">
            <summary>
            Loads the XML document from the specified URL.
            </summary>
            <param name="instance">The <see cref="T:PHP.Library.Xml.DOMDocument"/> instance or <B>null</B>.</param>
            <param name="fileName">URL for the file containing the XML document to load.</param>
            <param name="options">Undocumented.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.DOMDocument"/> or <B>false</B> if <paramref name="instance"/>p
            is <B>null</B>, <B>true</B> or <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.loadXML(PHP.Library.Xml.DOMDocument,System.String,System.Int32)">
            <summary>
            Loads the XML document from the specified string.
            </summary>
            <param name="instance">The <see cref="T:PHP.Library.Xml.DOMDocument"/> instance or <B>null</B>.</param>
            <param name="xmlString">The XML string.</param>
            <param name="options">Undocumented.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.DOMDocument"/> or <B>false</B> if <paramref name="instance"/>p
            is <B>null</B>, <B>true</B> or <B>false</B> otherwise.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.loadXMLInternal(System.String,System.Int32,System.Boolean)">
            <summary>
            Loads provided XML string into this <see cref="T:PHP.Library.Xml.DOMDocument"/>.
            </summary>
            <param name="xmlString">String representing XML document.</param>
            <param name="options">PHP options.</param>
            <param name="isHtml">Whether the <paramref name="xmlString"/> represents XML generated from HTML document (then it may contain some invalid XML characters).</param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.save(System.String,System.Int32)">
            <summary>
            Saves the XML document to the specified stream.
            </summary>
            <param name="fileName">The location of the file where the document should be saved.</param>
            <param name="options">Unsupported.</param>
            <returns>The number of bytes written or <B>false</B> on error.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.saveXML(PHP.Library.Xml.DOMNode)">
            <summary>
            Returns the string representation of this document.
            </summary>
            <param name="node">The node to dump (the entire document if <B>null</B>).</param>
            <returns>The string representation of the document / the specified node or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.CheckHtmlErrors(HtmlAgilityPack.HtmlDocument,System.String)">
            <summary>
            Processes HTML errors, if any.
            </summary>
            <param name="htmlDoc"><see cref="T:HtmlAgilityPack.HtmlDocument"/> instance to process errors from.</param>
            <param name="filename">HTML file name or <c>null</c> if HTML has been loaded from a string.</param>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.loadHTML(System.String)">
            <summary>
            Loads HTML from a string.
            </summary>
            <param name="source">
            String containing HTML document.
            </param>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.loadHTMLFile(System.String)">
            <summary>
            Loads HTML from a file.
            </summary>
            <param name="sourceFile">
            Path to a file containing HTML document.
            </param>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.loadHTML(System.IO.TextReader,System.String)">
            <summary>
            Load HTML DOM from given <paramref name="stream"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.saveHTML">
            <summary>
            Not implemented (TODO: need an HTML parser for this).
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.saveHTMLFile(System.String)">
            <summary>
            Not implemented (TODO: need an HTML parser for this).
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.xinclude(System.Int32)">
            <summary>
            Not implemented (TODO: need a XInclude implementation for this).
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.validate">
            <summary>
            Not implemented (System.Xml does not support post-load DTD validation).
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.schemaValidate(System.String)">
            <summary>
            Validates the document against the specified XML schema.
            </summary>
            <param name="schemaFile">URL for the file containing the XML schema to load.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.schemaValidateSource(System.String)">
            <summary>
            Validates the document against the specified XML schema.
            </summary>
            <param name="schemaString">The XML schema string.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.relaxNGValidate(System.String)">
            <summary>
            Not implemented (TODO: will need a Relax NG validator for this).
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocument.relaxNGValidateSource(System.String)">
            <summary>
            Not implemented (TODO: will need a Relax NG validator for this).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.nodeName">
            <summary>
            Returns &quot;#document&quot;.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.nodeValue">
            <summary>
            Returns <B>null</B>.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.nodeType">
            <summary>
            Returns the type of the node (<see cref="F:PHP.Library.Xml.NodeType.Document"/>).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.doctype">
            <summary>
            Returns the node containing the DOCTYPE declaration.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.implementation">
            <summary>
            Returns the DOM implementation.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.documentElement">
            <summary>
            Returns the root element of this document.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.actualEncoding">
            <summary>
            Returns the encoding of this document.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.xmlEncoding">
            <summary>
            Returns the encoding of this document.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.encoding">
            <summary>
            Returns or set the encoding of this document.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.xmlStandalone">
            <summary>
            Returns or sets the standalone flag of this document.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.standalone">
            <summary>
            Returns or sets the standalone flag of this document.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.xmlVersion">
            <summary>
            Returns or sets the XML version of this document.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.version">
            <summary>
            Returns or sets the XML version of this document.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.strictErrorChecking">
            <summary>
            Returns <B>true</B>.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.documentURI">
            <summary>
            Returns the base URI of this document.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.config">
            <summary>
            Returns <B>null</B>.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.formatOutput">
            <summary>
            Returns or sets whether XML is formatted by <see cref="M:PHP.Library.Xml.DOMDocument.save(System.String,System.Int32)"/> and <see cref="M:PHP.Library.Xml.DOMDocument.saveXML(PHP.Library.Xml.DOMNode)"/>.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.validateOnParse">
            <summary>
            Returns of sets whether XML is validated against schema by <see cref="M:PHP.Library.Xml.DOMDocument.load(PHP.Library.Xml.DOMDocument,System.String,System.Int32)"/> and
            <see cref="M:PHP.Library.Xml.DOMDocument.loadXML(PHP.Library.Xml.DOMDocument,System.String,System.Int32)"/>.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.resolveExternals">
            <summary>
            Returns <B>false</B>.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.preserveWhiteSpace">
            <summary>
            Returns or sets whether whitespace should be preserved by this XML document.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.recover">
            <summary>
            Returns <B>false</B>.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocument.substituteEntities">
            <summary>
            Returns <B>false</B>.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMDocumentFragment">
            <summary>
            DOM document fragment.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMDocumentFragment.appendXML(System.String)">
            <summary>
            Appends (well-formed) XML data to this document fragment.
            </summary>
            <param name="data">The data to append.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocumentFragment.nodeName">
            <summary>
            Returns &quot;#document-fragment&quot;.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocumentFragment.nodeValue">
            <summary>
            Returns <B>null</B>.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocumentFragment.namespaceURI">
            <summary>
            Returns the namespace URI of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocumentFragment.nodeType">
            <summary>
            Returns the type of the node (<see cref="F:PHP.Library.Xml.NodeType.DocumentFragment"/>).
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMElement">
            <summary>
            DOM element.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.getAttribute(System.String)">
            <summary>
            Returns the value of an attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>The attribute value or empty string.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.getAttributeNS(System.String,System.String)">
            <summary>
            Returns the value of an attribute.
            </summary>
            <param name="namespaceUri">The attribute namespace URI.</param>
            <param name="localName">The attribute local name.</param>
            <returns>The attribute value or empty string.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.setAttribute(System.String,System.String)">
            <summary>
            Sets the value of a attribute (creates new one if it does not exist).
            </summary>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
            <returns><B>True</B> on success, <B>false</B> on failure.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.setAttributeNS(System.String,System.String,System.String)">
            <summary>
            Sets the value of a attribute (creates new one if it does not exist).
            </summary>
            <param name="namespaceUri">The attribute namespace URI.</param>
            <param name="qualifiedName">The attribute qualified name.</param>
            <param name="value">The attribute value.</param>
            <returns><B>True</B> on success, <B>false</B> on failure.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.removeAttribute(System.String)">
            <summary>
            Removes an attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns><B>True</B> on success, <B>false</B> on failure.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.removeAttributeNS(System.String,System.String)">
            <summary>
            Removes an attribute.
            </summary>
            <param name="namespaceUri">The attribute namespace URI.</param>
            <param name="localName">The attribute local name.</param>
            <returns><B>True</B> on success, <B>false</B> on failure.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.getAttributeNode(System.String)">
            <summary>
            Returns an attribute node.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>The attribute or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.getAttributeNodeNS(System.String,System.String)">
            <summary>
            Returns an attribute node.
            </summary>
            <param name="namespaceUri">The attribute namespace URI.</param>
            <param name="localName">The attribute local name.</param>
            <returns>The attribute or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.setAttributeNode(PHP.Library.Xml.DOMAttr)">
            <summary>
            Adds new attribute node to the element.
            </summary>
            <param name="attribute">The attribute node.</param>
            <returns>Old node if the attribute has been replaced or <B>null</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.setAttributeNodeNS(PHP.Library.Xml.DOMAttr)">
            <summary>
            Adds new attribute node to the element.
            </summary>
            <param name="attribute">The attribute node.</param>
            <returns>Old node if the attribute has been replaced or <B>null</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.removeAttributeNode(PHP.Library.Xml.DOMAttr)">
            <summary>
            Removes an attribute node from the element.
            </summary>
            <param name="attribute">The attribute node.</param>
            <returns>Old node if the attribute has been removed or <B>null</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.hasAttribute(System.String)">
            <summary>
            Checks whether an attribute exists.
            </summary>
            <param name="name">The attribute name.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.hasAttributeNS(System.String,System.String)">
            <summary>
            Checks whether an attribute exists.
            </summary>
            <param name="namespaceUri">The attribute namespace URI.</param>
            <param name="localName">The attribute local name.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.getElementsByTagName(System.String)">
            <summary>
            Gets all descendant elements with the matching tag name.
            </summary>
            <param name="name">The tag name. Use <B>*</B> to return all elements within the element tree.</param>
            <returns>A <see cref="T:PHP.Library.Xml.DOMNodeList"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.getElementsByTagNameNS(System.String,System.String)">
            <summary>
            Gets all descendant elements with the matching namespace URI and local name.
            </summary>
            <param name="namespaceUri">The namespace URI.</param>
            <param name="localName">The local name. Use <B>*</B> to return all elements within the element tree.</param>
            <returns>A <see cref="T:PHP.Library.Xml.DOMNodeList"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.setIdAttribute(System.String,System.Boolean)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.setIdAttributeNS(System.String,System.String,System.Boolean)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMElement.setIdAttributeNode(PHP.Library.Xml.DOMAttr,System.Boolean)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMElement.nodeName">
            <summary>
            Returns the name of the element.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMElement.nodeValue">
            <summary>
            Returns or sets the value (inner text) of the element.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMElement.namespaceURI">
            <summary>
            Returns the namespace URI of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMElement.nodeType">
            <summary>
            Returns the type of the node (<see cref="F:PHP.Library.Xml.NodeType.Element"/>).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMElement.attributes">
            <summary>
            Returns a map of attributes of this node (see <see cref="T:PHP.Library.Xml.DOMNamedNodeMap"/>).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMElement.tagName">
            <summary>
            Returns the tag name.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMElement.schemaTypeInfo">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMEntity">
            <summary>
            DOM entity.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMEntity.nodeType">
            <summary>
            Returns the type of the node (<see cref="F:PHP.Library.Xml.NodeType.Entity"/>).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMEntity.publicId">
            <summary>
            Returns the public identifier of this entity.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMEntity.systemId">
            <summary>
            Returns the system identifier of this entity.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMEntity.notationName">
            <summary>
            Returns the name of the optional NDATA attribute.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMEntity.actualEncoding">
            <summary>
            Always returns <B>null</B> as in PHP 5.1.6.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMEntity.encoding">
            <summary>
            Always returns <B>null</B> as in PHP 5.1.6.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMEntity.version">
            <summary>
            Always returns <B>null</B> as in PHP 5.1.6.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMEntityReference">
            <summary>
            DOM entity reference.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMEntityReference.nodeName">
            <summary>
            Returns the name of the entity reference.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMEntityReference.nodeValue">
            <summary>
            Returns <B>null</B>.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMEntityReference.namespaceURI">
            <summary>
            Returns <B>null</B>.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMEntityReference.nodeType">
            <summary>
            Returns the type of the node (<see cref="F:PHP.Library.Xml.NodeType.EntityReference"/>).
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.ExceptionCode">
            <summary>
            Enumerates <see cref="T:PHP.Library.Xml.DOMException"/> codes.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.IndexOutOfBounds">
            <summary>
            Index or size is negative, or greater than the allowed value. 
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.StringTooLong">
            <summary>
            The specified range of text does not fit into a string.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.BadHierarchy">
            <summary>
            A node is inserted somewhere it doesn't belong.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.WrongDocument">
            <summary>
            A node is used in a different document than the one that created it.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.InvalidCharacter">
            <summary>
            An invalid or illegal character is specified, such as in a name.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.DataNotAllowed">
            <summary>
            Data is specified for a node which does not support data.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.DomModificationNotAllowed">
            <summary>
            An attempt is made to modify an object where modifications are not allowed.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.NotFound">
            <summary>
            An attempt is made to reference a node in a context where it does not exist.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.NotSupported">
            <summary>
            The implementation does not support the requested type of object or operation.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.AttributeInUse">
            <summary>
            An attempt is made to add an attribute that is already in use elsewhere.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.InvalidState">
            <summary>
            An attempt is made to use an object that is not, or is no longer, usable.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.SyntaxError">
            <summary>
            An invalid or illegal string is specified.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.ModificationNotAllowed">
            <summary>
            An attempt is made to modify the type of the underlying object.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.NamespaceError">
            <summary>
            An attempt is made to create or change an object in a way which is incorrect with
            regard to namespaces.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.InvalidAccess">
            <summary>
            A parameter or an operation is not supported by the underlying object.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.ExceptionCode.ValidationError">
            <summary>
            A call to a method such as <B>insertBefore</B> or <B>removeChild</B> would make the
            node invalid with respect to &quot;partial validity&quot;, this exception would be
            raised and the operation would not be done. 
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMException">
            <summary>
            The exception thrown by the DOM extension.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMException.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Creates a new instance (short constructor).
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMException.Throw(PHP.Library.Xml.ExceptionCode)">
            <summary>
            Throws a <see cref="T:PHP.Library.Xml.DOMException"/> user exception with the given code.
            </summary>
            <param name="code">The exception code.</param>
            <exception cref="T:PHP.Core.PhpUserException"/>
        </member>
        <member name="M:PHP.Library.Xml.DOMException.Throw(PHP.Library.Xml.ExceptionCode,System.String)">
            <summary>
            Throws a <see cref="T:PHP.Library.Xml.DOMException"/> user exception with the given code and message.
            </summary>
            <param name="code">The exception code.</param>
            <param name="message">The exception message.</param>
            <exception cref="T:PHP.Core.PhpUserException"/>
        </member>
        <member name="P:PHP.Library.Xml.DOMException.code">
            <summary>
            Returns the exception code.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMNodeList">
            <summary>
            DOM node list.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMNodeList.item(System.Int32)">
            <summary>
            Retrieves a node specified by an index.
            </summary>
            <param name="index">The index.</param>
            <returns>The node or <B>NULL</B> if the <paramref name="index"/> is invalid.</returns>
        </member>
        <member name="P:PHP.Library.Xml.DOMNodeList.length">
            <summary>
            Returns the number of nodes in the list.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMNamedNodeMap">
            <summary>
            DOM named node map.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMNamedNodeMap.getNamedItem(System.String)">
            <summary>
            Retrieves a node specified by name.
            </summary>
            <param name="name">The (local) name of the node to retrieve.</param>
            <returns>A node with the specified (local) node name or <B>null</B> if no node is found.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNamedNodeMap.setNamedItem(PHP.Library.Xml.DOMNode)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMNamedNodeMap.removeNamedItem(System.String)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMNamedNodeMap.item(System.Int32)">
            <summary>
            Retrieves a node specified by an index.
            </summary>
            <param name="index">The index.</param>
            <returns>The node or <B>null</B> if <paramref name="index"/> is invalid.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNamedNodeMap.getNamedItemNS(System.String,System.String)">
            <summary>
            Retrieves a node specified by local name and namespace URI.
            </summary>
            <param name="namespaceUri">The namespace URI.</param>
            <param name="localName">The local name.</param>
            <returns>A node with the specified local name and namespace URI, or <B>null</B> if no node is found.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMNamedNodeMap.setNamedItemNS(PHP.Library.Xml.DOMNode)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMNamedNodeMap.removeNamedItemNS(System.String,System.String)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNamedNodeMap.length">
            <summary>
            Returns the number of nodes in the map.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMStringList">
            <summary>
            DOM string list. Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMNameList">
            <summary>
            DOM name list. Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMImplementationList">
            <summary>
            DOM implementation list. Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMStringExtend">
            <summary>
            DOM string extend. Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMImplementation">
            <summary>
            DOM implementation.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMImplementation.getFeature(PHP.Library.Xml.DOMImplementation,System.String,System.String)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMImplementation.hasFeature(PHP.Library.Xml.DOMImplementation,System.String,System.String)">
            <summary>
            Tests if this DOM implementation implements a specific feature.
            </summary>
            <param name="instance">The <see cref="T:PHP.Library.Xml.DOMImplementation"/> instance or <B>null</B>.</param>
            <param name="feature">The feature.</param>
            <param name="version">The feature version.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMImplementation.createDocumentType(PHP.Library.Xml.DOMImplementation,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:PHP.Library.Xml.DOMDocumentType"/>.
            </summary>
            <param name="instance">The <see cref="T:PHP.Library.Xml.DOMImplementation"/> instance or <B>null</B>.</param>
            <param name="qualifiedName">Name of the document type.</param>
            <param name="publicId">The public identifier of the document type.</param>
            <param name="systemId">The system identifier of the document type.</param>
            <returns>The <see cref="T:PHP.Library.Xml.DOMDocumentType"/>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMImplementation.createDocument(PHP.Library.Xml.DOMImplementation,System.String,System.String,PHP.Library.Xml.DOMDocumentType)">
            <summary>
            Creates a new <see cref="T:PHP.Library.Xml.DOMDocument"/>.
            </summary>
            <param name="instance">The <see cref="T:PHP.Library.Xml.DOMImplementation"/> instance or <B>null</B>.</param>
            <param name="namespaceUri">The namespace URI of the root element to create.</param>
            <param name="qualifiedName">The qualified name of the document element.</param>
            <param name="docType">The type of document to be created.</param>
            <returns>The <see cref="T:PHP.Library.Xml.DOMDocument"/>.</returns>
        </member>
        <member name="T:PHP.Library.Xml.DOMImplementationSource">
            <summary>
            DOM implementation source.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMImplementationSource.getDomimplementation(System.String)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMImplementationSource.getDomimplementations(System.String)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMConfiguration">
            <summary>
            DOM configuration (not implemented in PHP 5.1.6).
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMUserDataHandler">
            <summary>
            DOM user data handler (not implemented in PHP 5.1.6).
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMLocator">
            <summary>
            DOM locator (not implemented in PHP 5.1.6).
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMDomError">
            <summary>
            The DOM error (not implemented in PHP 5.1.6).
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMErrorHandler">
            <summary>
            DOM error handler (not implemented in PHP 5.1.6).
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMTypeinfo">
            <summary>
            DOM type info (not implemented in PHP 5.1.6).
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMDocumentType">
            <summary>
            DOM document type.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocumentType.nodeType">
            <summary>
            Returns the type of the node (<see cref="F:PHP.Library.Xml.NodeType.DocumentType"/>).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocumentType.name">
            <summary>
            Returns the name of this document type.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocumentType.entities">
            <summary>
            Returns a map of the entities declared by this document type.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocumentType.notations">
            <summary>
            Returns a map of the entities declared by this document type.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocumentType.publicId">
            <summary>
            Returns the value of the public identifier of this document type.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocumentType.systemId">
            <summary>
            Gets the value of the system identifier on this document type.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMDocumentType.internalSubset">
            <summary>
            Gets the value of the DTD internal subset on this document type.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMNotation">
            <summary>
            DOM notation.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNotation.publicId">
            <summary>
            Returns the value of the public identifier on the notation declaration.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNotation.systemId">
            <summary>
            Returns the value of the system identifier on the notation declaration.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNotation.nodeName">
            <summary>
            Returns the name of the notation node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNotation.nodeValue">
            <summary>
            Returns or sets the value of the notation node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMNotation.attributes">
            <summary>
            Returns the attributes of this notation node.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMProcessingInstruction">
            <summary>
            DOM processing instruction.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMProcessingInstruction.nodeName">
            <summary>
            Returns the name of the processing instruction.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMProcessingInstruction.nodeValue">
            <summary>
            Returns or sets the value of the processing instruction.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMProcessingInstruction.namespaceURI">
            <summary>
            Returns the namespace URI of the processing instruction.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMProcessingInstruction.nodeType">
            <summary>
            Returns the type of the node (<see cref="F:PHP.Library.Xml.NodeType.ProcessingInstruction"/>).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMProcessingInstruction.target">
            <summary>
            Returns the target (name) of the processing instruction.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMProcessingInstruction.data">
            <summary>
            Returns or sets the data (value) of the processing instruction.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMNameSpaceNode">
            <summary>
            DOM namespace node (unsupported).
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMCharacterData">
            <summary>
            DOM character data.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMCharacterData.substringData(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring of the full string from the specified range.
            </summary>
            <param name="offset">The position within the string to start retrieving.</param>
            <param name="count">The number of characters to retrieve.</param>
            <returns>The substring corresponding to the specified range or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMCharacterData.appendData(System.String)">
            <summary>
            Appends the specified string to the end of the character data of the node.
            </summary>
            <param name="arg">The string to insert into the existing string.</param>
            <returns><B>True</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMCharacterData.insertData(System.Int32,System.String)">
            <summary>
            Inserts the specified string at the specified character offset. 
            </summary>
            <param name="offset">The position within the string to insert the supplied string data.</param>
            <param name="arg">The string data that is to be inserted into the existing string.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMCharacterData.deleteData(System.Int32,System.Int32)">
            <summary>
            Removes a range of characters from the node.
            </summary>
            <param name="offset">The position within the string to start deleting.</param>
            <param name="count">The number of characters to delete.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMCharacterData.replaceData(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces the specified number of characters starting at the specified offset with the specified string.
            </summary>
            <param name="offset">The position within the string to start replacing.</param>
            <param name="count">The number of characters to replace.</param>
            <param name="arg">The new data that replaces the old string data.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="P:PHP.Library.Xml.DOMCharacterData.data">
            <summary>
            Returns or sets the data of the node.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMCharacterData.length">
            <summary>
            Returns the length of the data in characters.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMText">
            <summary>
            DOM text.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMText.splitText(System.Int32)">
            <summary>
            Splits the node into two nodes at the specified offset, keeping both in the tree as siblings.
            </summary>
            <param name="offset">The offset at which to split the node.</param>
            <returns>The new node.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMText.isWhitespaceInElementContent">
            <summary>
            Determines whether this text node is empty / whitespace only.
            </summary>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMText.isElementContentWhitespace">
            <summary>
            Determines whether this text node is empty / whitespace only.
            </summary>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMText.replaceWholeText(System.String)">
            <summary>
            Not implemented in PHP 5.1.6.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMText.nodeName">
            <summary>
            Returns &quot;#text&quot;.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMText.nodeValue">
            <summary>
            Returns or sets the text.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMText.namespaceURI">
            <summary>
            Returns <B>null</B>.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMText.nodeType">
            <summary>
            Returns the type of the node (<see cref="F:PHP.Library.Xml.NodeType.Text"/>).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMText.wholeText">
            <summary>
            Gets the concatenated values of the node and all its child nodes.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMCdataSection">
            <summary>
            DOM character data section.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMCdataSection.nodeName">
            <summary>
            Returns &quot;#cdata-section&quot;.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMCdataSection.nodeType">
            <summary>
            Returns the type of the node (<see cref="F:PHP.Library.Xml.NodeType.CharacterDataSection"/>).
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMComment">
            <summary>
            DOM comment.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMComment.nodeName">
            <summary>
            Returns &quot;#comment&quot;.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMComment.nodeValue">
            <summary>
            Returns or sets the text.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMComment.namespaceURI">
            <summary>
            Returns <B>null</B>.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.DOMComment.nodeType">
            <summary>
            Returns the type of the node (<see cref="F:PHP.Library.Xml.NodeType.Comment"/>).
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.DOMXPath">
            <summary>
            DOM XPath implementation.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.DOMXPath.registerNamespace(System.String,System.String)">
            <summary>
            Registeres the given namespace with the collection of known namespaces.
            </summary>
            <param name="prefix">The prefix to associate with the namespace being registered.</param>
            <param name="uri">The namespace to register.</param>
            <returns><B>True</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMXPath.query(System.String,PHP.Library.Xml.DOMNode)">
            <summary>
            Evaluates the given XPath expression.
            </summary>
            <param name="expr">The expression to evaluate.</param>
            <param name="context">The context node for doing relative XPath queries. By default, the queries are
            relative to the root element.</param>
            <returns>The <see cref="T:PHP.Library.Xml.DOMNodeList"/> containg the result or <B>false</B> on error.</returns>
        </member>
        <member name="M:PHP.Library.Xml.DOMXPath.evaluate(System.String,PHP.Library.Xml.DOMNode)">
            <summary>
            Evaluates the given XPath expression and returns a typed result if possible.
            </summary>
            <param name="expr">The expression to evaluate.</param>
            <param name="context">The context node for doing relative XPath queries. By default, the queries are
            relative to the root element.</param>
            <returns>A typed result if possible or a <see cref="T:PHP.Library.Xml.DOMNodeList"/> containing all nodes matching the
            given <paramref name="expr"/>.</returns>
        </member>
        <member name="P:PHP.Library.Xml.DOMXPath.document">
            <summary>
            Returns the <see cref="T:PHP.Library.Xml.DOMDocument"/> associated with this object.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.SimpleXMLElement">
            <summary>
            The one and only class comprising the SimpleXML extension.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.SimpleXMLElement.className">
            <summary>
            Name of a class, which will be used when initializing children. Class which extends SimpleXmlElement HAS to be used. 
            Non-null value means, that this instance of<see cref="T:PHP.Library.Xml.SimpleXMLElement"/> was initialized with specified className.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.SimpleXMLElement._element">
            <summary>
            Non-<B>null</B> except for construction (between ctor and <see cref="M:PHP.Library.Xml.SimpleXMLElement.__construct(System.String,System.Int32,System.Boolean)"/>
            or <see cref="P:PHP.Library.Xml.SimpleXMLElement.XmlElement"/> setter invocation).
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.SimpleXMLElement._namespaceManager">
            <summary>
            Lazily created namespace manager used for XPath queries.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.SimpleXMLElement.XmlAttribute">
            <summary>
            The attribute (if this instance represents an individual attribute).
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.SimpleXMLElement.iterationType">
            <summary>
            Specifies iteration behavior of this instance (what it actually represents).
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.SimpleXMLElement.iterationNamespace">
            <summary>
            The prefix or namespace URI of the elements/attributes that should be iterated and dumped.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.SimpleXMLElement.intermediateElements">
            <summary>
            A list of names of elements representing the path in the document that should be added
            when a field or item is written to this instance.
            </summary>
            <remarks>
            This field supports <c>$doc->elem1->elem2->elem3 = "value"</c>, which creates <c>elem1</c>,
            <c>elem2</c>, and <c>elem3</c> if they do not already exist. Becomes non-<B>null</B> when
            an unknown element is read.
            </remarks>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.Create(System.String)">
            <summary>
            Creates a new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or a derived class.
            </summary>
            <param name="className">The name of the class to create or <B>null</B>.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or a derived class.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.Create(System.String,System.Xml.XmlElement,PHP.Library.Xml.SimpleXMLElement.IterationType,PHP.Library.Xml.SimpleXMLElement.IterationNamespace)">
            <summary>
            Creates a new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or a derived class.
            </summary>
            <param name="className">The name of the class to create or <B>null</B>.</param>
            <param name="xmlElement">The <see cref="P:PHP.Library.Xml.SimpleXMLElement.XmlElement"/> to wrap.</param>
            <param name="iterationType">Iteration behavior of new instance.</param>
            <param name="iterationNamespace">The namespace URI of the elements/attributes that should be iterated and dumped.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or a derived class.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.Create(System.String,System.Xml.XmlElement,PHP.Library.Xml.SimpleXMLElement.IterationType)">
            <summary>
            Creates a new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or a derived class.
            </summary>
            <param name="className">The name of the class to create or <B>null</B>.</param>
            <param name="xmlElement">The <see cref="P:PHP.Library.Xml.SimpleXMLElement.XmlElement"/> to wrap.</param>
            <param name="iterationType">Iteration behavior of new instance.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or a derived class.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.Create(System.String,System.Xml.XmlElement)">
            <summary>
            Creates a new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or a derived class.
            </summary>
            <param name="xmlElement">The <see cref="P:PHP.Library.Xml.SimpleXMLElement.XmlElement"/> to wrap.</param>
            <param name="className">The name of the class to create or <B>null</B>.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or a derived class.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.Create(System.String,System.Xml.XmlAttribute,PHP.Library.Xml.SimpleXMLElement.IterationNamespace)">
            <summary>
            Creates a new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or a derived class.
            </summary>
            <param name="className">The name of the class to create or <B>null</B>.</param>
            <param name="xmlAttribute">The <see cref="P:PHP.Library.Xml.SimpleXMLElement.XmlElement"/> to wrap.</param>
            <param name="iterationNamespace">The namespace URI of the elements/attributes that should be iterated and dumped.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or a derived class.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.Create(System.String,System.Xml.XmlAttribute)">
            <summary>
            Creates a new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or a derived class.
            </summary>
            <param name="className">The name of the class to create or <B>null</B>.</param>
            <param name="xmlAttribute">The <see cref="P:PHP.Library.Xml.SimpleXMLElement.XmlElement"/> to wrap.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or a derived class.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.ToPhpBytes">
            <summary>
            Internal to-<see cref="T:PHP.Core.PhpBytes"/> conversion.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.ToString(System.Boolean,System.Boolean@)">
            <summary>
            Internal to-<see cref="T:System.String"/> conversion.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.ToString">
            <summary>
            String representation of the XML element.
            </summary>
            <returns>XML element content.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.ToInteger">
            <summary>
            Internal to-<see cref="T:System.Int32"/> conversion.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.ToLongInteger">
            <summary>
            Internal to-<see cref="T:System.Int64"/> conversion.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.ToDouble">
            <summary>
            Internal to-<see cref="T:System.Double"/> conversion.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.ToBoolean">
            <summary>
            Internal to-<see cref="T:System.Boolean"/> conversion.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.PropertyIterator">
            <summary>
            Internal dump enumeration.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.CloneObjectInternal(PHP.Core.Reflection.DTypeDesc,PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            Invoked when the instance is being cloned.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.PropertyReadHandler(System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean@)">
            <summary>
            Property reading (i.e. child element getter).
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.PropertyWriteHandler(System.Object,System.Object,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Property writing (i.e. child element setter).
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.PropertyUnsetHandler(System.String,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            Property unsetting (i.e. child element remover).
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.PropertyIssetHandler(System.String,PHP.Core.Reflection.DTypeDesc,System.Boolean@)">
            <summary>
            Property isset testing (i.e. child element existence test).
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.GetPhpInnerText(System.Xml.XmlNode)">
            <summary>
            Get inner text, child elements only (not recursive).
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.GetPhpChildElement(System.Xml.XmlNode)">
            <summary>
            Returns given child node as a SimpleXMLElement, or as a simple string.
            It depends on its child nodes. (Because of PHP; node is represented as a string, if it has a child node of type Text)
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.ToPhpArray">
            <summary>
            Overrides conversion of SimpleXMLElement to array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.asXML(System.String)">
            <summary>
            Return a well-formed XML string based on this <see cref="T:PHP.Library.Xml.SimpleXMLElement"/>.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.xpath(System.String)">
            <summary>
            Runs an XPath query on the XML data.
            </summary>
            <param name="path">The XPath query string.</param>
            <returns>A <see cref="T:PHP.Core.PhpArray"/> of <see cref="T:PHP.Library.Xml.SimpleXMLElement"/>s or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.registerXPathNamespace(System.String,System.String)">
            <summary>
            Creates a prefix/ns context for the next XPath query.
            </summary>
            <param name="prefix">The namespace prefix.</param>
            <param name="namespaceUri">The namespace URI.</param>
            <returns><B>True</B> on success, <B>false</B> on error.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.attributes(System.String,System.Boolean)">
            <summary>
            Identifies the element's attributes.
            </summary>
            <param name="ns">Namespace URI or prefix of the attributes to identify.</param>
            <param name="isPrefix">If <B>true</B> <paramref name="ns"/> denotes a prefix, if <B>false</B> it
            is a namespace URI.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> wrapping the same element but enumerating and
            dumping only the matching attributes.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.children(System.String,System.Boolean)">
            <summary>
            Identifies the element's child elements.
            </summary>
            <param name="ns">Namespace URI or prefix of the elements to identify.</param>
            <param name="isPrefix">If <B>true</B> <paramref name="ns"/> denotes a prefix, if <B>false</B> it
            is a namespace URI.</param>
            <returns>A new <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> wrapping the same element but enumerating and
            dumping only the matching elements.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.getNamespaces(System.Boolean)">
            <summary>
            Returns namespaces used by children of this node.
            </summary>
            <param name="recursive">If <B>true</B> returns namespaces used by all children recursively.</param>
            <returns>An <see cref="T:PHP.Core.PhpArray"/> keyed by prefix with values being namespace URIs.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.getDocNamespaces(System.Boolean)">
            <summary>
            Returns namespaces used by the document.
            </summary>
            <param name="recursive">If <B>true</B> returns namespaces used by all nodes recursively.</param>
            <returns>An <see cref="T:PHP.Core.PhpArray"/> keyed by prefix with values being namespace URIs.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.getName">
            <summary>
            Gets the name of the XML element.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.addChild(System.String,System.String,System.String)">
            <summary>
            Adds a child element to this XML element.
            </summary>
            <param name="qualifiedName">The qualified name of the element to add.</param>
            <param name="value">The optional element value.</param>
            <param name="namespaceUri">The optional element namespace URI.</param>
            <returns>The <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> of the child.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.addAttribute(System.String,System.String,System.String)">
            <summary>
            Adds an attribute to this XML element.
            </summary>
            <param name="qualifiedName">The qualified name of the attribute to add.</param>
            <param name="value">The attribute value.</param>
            <param name="namespaceUri">The optional attribute namespace URI.</param>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.GetChildElementValue(System.String,System.Xml.XmlElement)">
            <summary>
            Wraps a node or returns its inner text if it is an element containing nothing but text.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.GetNodeText(System.Xml.XmlNode)">
            <summary>
            Returns the text data if the supplied node is treated as &quot;text&quot;.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.GetNodeNamespaces(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Returns an array of namespaces used by children of the given node (recursively).
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.GetSiblingForIndex(System.Int32)">
            <summary>
            Returns the <paramref name="index"/>th sibling with the same local name and namespace URI or <B>null</B>.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.GetAttributeForIndex(System.Int32)">
            <summary>
            Returns the <param name="index"/>th attribute with the current namespace URI or<B>null</B>.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.BuildUpIntermediateElements">
            <summary>
            Creates elements stored in <see cref="F:PHP.Library.Xml.SimpleXMLElement.intermediateElements"/> when it turns out that
            there will be a write.
            </summary>
            <remarks><seealso cref="F:PHP.Library.Xml.SimpleXMLElement.intermediateElements"/></remarks>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.count">
            <summary>
            Count childs in the element.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PHP.Library.Xml.SimpleXMLElement.IterationType">
            <summary>
            Specifies mostly the iteration (<c>foreach</c>) behavior of a <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> instance.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.SimpleXMLElement.IterationType.None">
            <summary>
            The instance represents a nonexistent element.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.SimpleXMLElement.IterationType.Attribute">
            <summary>
            The instance represents an attribute.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.SimpleXMLElement.IterationType.AttributeList">
            <summary>
            The instance represents the attribute list of an element.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.SimpleXMLElement.IterationType.Element">
            <summary>
            The instance represents an element and iteration will include its siblings.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.SimpleXMLElement.IterationType.ChildElements">
            <summary>
            The instance represents an element and iteration will include its child elements.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.IterationNamespace.CreateWithPrefix(System.String,System.Xml.XmlNode)">
            <summary>
            Create namespace iteration type by prefix.
            </summary>
            <param name="prefix"></param>
            <param name="relatedNode"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.IterationNamespace.CreateWithPrefix(System.Xml.XmlNode)">
            <summary>
            Create namespace iteration type by prefix.
            </summary>
            <param name="relatedNode"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.IterationNamespace.CreateWithNamespace(System.String)">
            <summary>
            Create namespace iteration type by full namespace URI. Attributes with default namespace (with empty prefix) will not be included.
            </summary>
            <param name="namespaceUri"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.IterationNamespace.IsIn(System.Xml.XmlNode)">
            <summary>
            Determine if the given XML node has the namespace.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXMLElement.IterationNamespace.GetFirstChildIn(System.Xml.XmlNode,System.String)">
            <summary>
            Get the node[prefix:name] or node[name, ns] according to the namespace iteration type.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:PHP.Library.Xml.SimpleXMLElement.IterationNamespace.namespacePrefix">
            <summary>
            The namespace prefix. If it is not null, the prefix is used.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.SimpleXMLElement.IterationNamespace.namespaceUri">
            <summary>
            The namespace of included elements/attributes. (Namespace of prefix if prefix is used)
            This value is always not null valid namespace (or empty string).
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.XSLTProcessor">
            <summary>
            Implements the XSLT processor.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XSLTProcessor.#cctor">
            <summary>
            Determines whether Mvp.Xml is available and reflects the MvpXslTransform type.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XSLTProcessor.importStylesheet(PHP.Library.Xml.DOMDocument)">
            <summary>
            Import a stylesheet.
            </summary>
            <param name="doc">The imported style sheet passed as a <see cref="T:PHP.Library.Xml.DOMDocument"/> object.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XSLTProcessor.transformToDoc(PHP.Library.Xml.IXmlDomNode)">
            <summary>
            Transforms the source node to a <see cref="T:PHP.Library.Xml.DOMDocument"/> applying the stylesheet given by the
            <see cref="M:PHP.Library.Xml.XSLTProcessor.importStylesheet(PHP.Library.Xml.DOMDocument)"/> method.
            </summary>
            <param name="node">The node to be transformed.</param>
            <returns>The resulting <see cref="T:PHP.Library.Xml.DOMDocument"/> or <B>false</B> on error.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XSLTProcessor.transformToUri(PHP.Library.Xml.DOMDocument,System.String)">
            <summary>
            Transforms the source node to an URI applying the stylesheet given by the
            <see cref="M:PHP.Library.Xml.XSLTProcessor.importStylesheet(PHP.Library.Xml.DOMDocument)"/> method.
            </summary>
            <param name="doc">The document to transform.</param>
            <param name="uri">The destination URI.</param>
            <returns>Returns the number of bytes written or <B>false</B> if an error occurred.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XSLTProcessor.transformToXml(PHP.Library.Xml.DOMDocument)">
            <summary>
            Transforms the source node to a string applying the stylesheet given by the
            <see cref="M:PHP.Library.Xml.XSLTProcessor.importStylesheet(PHP.Library.Xml.DOMDocument)"/> method.
            </summary>
            <param name="doc">The document to transform.</param>
            <returns>The result of the transformation as a string or FALSE on error.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XSLTProcessor.setParameter(System.String,System.Object,System.String)">
            <summary>
             Sets value for a parameter.
            </summary>
            <param name="ns">The namespace URI of the XSLT parameter.</param>
            <param name="name">The local name of the XSLT parameter or an array of name =&gt; option pairs.</param>
            <param name="value">The new value of the XSLT parameter.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XSLTProcessor.getParameter(System.String,System.String)">
            <summary>
            Gets value of a parameter.
            </summary>
            <param name="ns">The namespace URI of the XSLT parameter.</param>
            <param name="name">The local name of the XSLT parameter.</param>
            <returns>The value of the parameter or NULL if it's not set.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XSLTProcessor.removeParameter(System.String,System.String)">
            <summary>
            Removes a parameter.
            </summary>
            <param name="ns">The namespace URI of the XSLT parameter.</param>
            <param name="name">The local name of the XSLT parameter.</param>
            <returns><B>True</B> or <B>false</B>.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XSLTProcessor.hasExsltSupport">
            <summary>
            Determine if this extension has EXSLT support.
            </summary>
            <returns><B>False</B>.</returns>
            <remarks>
            A EXSLT implementation for the .NET XSL can be found here
            <A href="http://mvp-xml.sourceforge.net/exslt/">http://mvp-xml.sourceforge.net/exslt/</A>.</remarks>
        </member>
        <member name="M:PHP.Library.Xml.XSLTProcessor.registerPHPFunctions(System.Object)">
            <summary>
            Enables the ability to use PHP functions as XSLT functions.
            </summary>
            <param name="restrict">A string or array denoting function(s) to be made callable.</param>
        </member>
        <member name="T:HtmlAgilityPack.HtmlAttribute">
            <summary>
            Represents an HTML attribute.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttribute.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another attribute. Comparison is based on attributes' name.
            </summary>
            <param name="obj">An attribute to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the names comparison.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttribute.Clone">
            <summary>
            Creates a duplicate of this attribute.
            </summary>
            <returns>The cloned attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttribute.Remove">
            <summary>
            Removes this attribute from it's parents collection
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.Line">
            <summary>
            Gets the line number of this attribute in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.LinePosition">
            <summary>
            Gets the column number of this attribute in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.Name">
            <summary>
            Gets the qualified name of the attribute.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.OriginalName">
            <summary>
            Name of attribute with original case
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.OwnerDocument">
            <summary>
            Gets the HTML document to which this attribute belongs.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.OwnerNode">
            <summary>
            Gets the HTML node to which this attribute belongs.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.QuoteType">
            <summary>
            Specifies what type of quote the data should be wrapped in
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.StreamPosition">
            <summary>
            Gets the stream position of this attribute in the document, relative to the start of the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.Value">
            <summary>
            Gets or sets the value of the attribute.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.XPath">
            <summary>
            Gets a valid XPath string that points to this Attribute
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.AttributeValueQuote">
            <summary>
            An Enum representing different types of Quotes used for surrounding attribute values
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.AttributeValueQuote.None">
            <summary>
            Not an attribute.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.AttributeValueQuote.SingleQuote">
            <summary>
            A single quote mark '
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.AttributeValueQuote.DoubleQuote">
            <summary>
            A double quote mark "
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlAttributeCollection">
            <summary>
            Represents a combined list and collection of HTML nodes.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Add(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Adds supplied item to collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.System#Collections#Generic#ICollection{HtmlAgilityPack#HtmlAttribute}#Clear">
            <summary>
            Explicit clear
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Contains(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Retreives existence of supplied item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.CopyTo(HtmlAgilityPack.HtmlAttribute[],System.Int32)">
            <summary>
            Copies collection to array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.System#Collections#Generic#IEnumerable{HtmlAgilityPack#HtmlAttribute}#GetEnumerator">
            <summary>
            Get Explicit enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Explicit non-generic enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.IndexOf(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Retrieves the index for the supplied item, -1 if not found
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Insert(System.Int32,HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Inserts given item into collection at supplied index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.System#Collections#Generic#ICollection{HtmlAgilityPack#HtmlAttribute}#Remove(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Explicit collection remove
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the attribute at the specified index.
            </summary>
            <param name="index">The index of the attribute to remove.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Add(System.String,System.String)">
            <summary>
            Adds a new attribute to the collection with the given values
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Append(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Inserts the specified attribute as the last attribute in the collection.
            </summary>
            <param name="newAttribute">The attribute to insert. May not be null.</param>
            <returns>The appended attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Append(System.String)">
            <summary>
            Creates and inserts a new attribute as the last attribute in the collection.
            </summary>
            <param name="name">The name of the attribute to insert.</param>
            <returns>The appended attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Append(System.String,System.String)">
            <summary>
            Creates and inserts a new attribute as the last attribute in the collection.
            </summary>
            <param name="name">The name of the attribute to insert.</param>
            <param name="value">The value of the attribute to insert.</param>
            <returns>The appended attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Contains(System.String)">
            <summary>
            Checks for existance of attribute with given name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Prepend(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Inserts the specified attribute as the first node in the collection.
            </summary>
            <param name="newAttribute">The attribute to insert. May not be null.</param>
            <returns>The prepended attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Remove(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Removes a given attribute from the list.
            </summary>
            <param name="attribute">The attribute to remove. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Remove(System.String)">
            <summary>
            Removes an attribute from the list, using its name. If there are more than one attributes with this name, they will all be removed.
            </summary>
            <param name="name">The attribute's name. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.RemoveAll">
            <summary>
            Remove all attributes in the list.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.AttributesWithName(System.String)">
            <summary>
            Returns all attributes with specified name. Handles case insentivity
            </summary>
            <param name="attributeName">Name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Remove">
            <summary>
            Removes all attributes from the collection
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Clear">
            <summary>
            Clears the attribute collection
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttributeCollection.Item(System.String)">
            <summary>
            Gets a given attribute from the list using its name.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttributeCollection.Count">
            <summary>
            Gets the number of elements actually contained in the list.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttributeCollection.IsReadOnly">
            <summary>
            Gets readonly status of colelction
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttributeCollection.Item(System.Int32)">
            <summary>
            Gets the attribute at the specified index.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlCommentNode">
            <summary>
            Represents an HTML comment.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNode">
            <summary>
            Represents an HTML node.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNode.HtmlNodeTypeNameComment">
            <summary>
            Gets the name of a comment node. It is actually defined as '#comment'.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNode.HtmlNodeTypeNameDocument">
            <summary>
            Gets the name of the document node. It is actually defined as '#document'.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNode.HtmlNodeTypeNameText">
            <summary>
            Gets the name of a text node. It is actually defined as '#text'.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNode.ElementsFlags">
            <summary>
            Gets a collection of flags that define specific behaviors for specific element nodes.
            The table contains a DictionaryEntry list with the lowercase tag name as the Key, and a combination of HtmlElementFlags as the Value.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.#cctor">
            <summary>
            Initialize HtmlNode. Builds a list of all tags that have special allowances
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.#ctor(HtmlAgilityPack.HtmlNodeType,HtmlAgilityPack.HtmlDocument,System.Int32)">
            <summary>
            Initializes HtmlNode, providing type, owner and where it exists in a collection
            </summary>
            <param name="type"></param>
            <param name="ownerdocument"></param>
            <param name="index"></param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CreateNavigator">
            <summary>
            Creates a new XPathNavigator object for navigating this HTML node.
            </summary>
            <returns>An XPathNavigator object. The XPathNavigator is positioned on the node from which the method was called. It is not positioned on the root of the document.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CanOverlapElement(System.String)">
            <summary>
            Determines if an element node can be kept overlapped.
            </summary>
            <param name="name">The name of the element node to check. May not be <c>null</c>.</param>
            <returns>true if the name is the name of an element node that can be kept overlapped, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CreateNode(System.String)">
            <summary>
            Creates an HTML node from a string representing literal HTML.
            </summary>
            <param name="html">The HTML text.</param>
            <returns>The newly created node instance.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.IsCDataElement(System.String)">
            <summary>
            Determines if an element node is a CDATA element node.
            </summary>
            <param name="name">The name of the element node to check. May not be null.</param>
            <returns>true if the name is the name of a CDATA element node, false otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.IsClosedElement(System.String)">
            <summary>
            Determines if an element node is closed.
            </summary>
            <param name="name">The name of the element node to check. May not be null.</param>
            <returns>true if the name is the name of a closed element node, false otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.IsEmptyElement(System.String)">
            <summary>
            Determines if an element node is defined as empty.
            </summary>
            <param name="name">The name of the element node to check. May not be null.</param>
            <returns>true if the name is the name of an empty element node, false otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.IsOverlappedClosingElement(System.String)">
            <summary>
            Determines if a text corresponds to the closing tag of an node that can be kept overlapped.
            </summary>
            <param name="text">The text to check. May not be null.</param>
            <returns>true or false.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Ancestors">
            <summary>
            Returns a collection of all ancestor nodes of this element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Ancestors(System.String)">
            <summary>
            Get Ancestors with matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.AncestorsAndSelf">
            <summary>
            Returns a collection of all ancestor nodes of this element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.AncestorsAndSelf(System.String)">
            <summary>
            Gets all anscestor nodes and the current node
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.AppendChild(HtmlAgilityPack.HtmlNode)">
            <summary>
            Adds the specified node to the end of the list of children of this node.
            </summary>
            <param name="newChild">The node to add. May not be null.</param>
            <returns>The node added.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.AppendChildren(HtmlAgilityPack.HtmlNodeCollection)">
            <summary>
            Adds the specified node to the end of the list of children of this node.
            </summary>
            <param name="newChildren">The node list to add. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.ChildAttributes(System.String)">
            <summary>
            Gets all Attributes with name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Clone">
            <summary>
            Creates a duplicate of the node
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CloneNode(System.String)">
            <summary>
            Creates a duplicate of the node and changes its name at the same time.
            </summary>
            <param name="newName">The new name of the cloned node. May not be <c>null</c>.</param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CloneNode(System.String,System.Boolean)">
            <summary>
            Creates a duplicate of the node and changes its name at the same time.
            </summary>
            <param name="newName">The new name of the cloned node. May not be null.</param>
            <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CloneNode(System.Boolean)">
            <summary>
            Creates a duplicate of the node.
            </summary>
            <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CopyFrom(HtmlAgilityPack.HtmlNode)">
            <summary>
            Creates a duplicate of the node and the subtree under it.
            </summary>
            <param name="node">The node to duplicate. May not be <c>null</c>.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CopyFrom(HtmlAgilityPack.HtmlNode,System.Boolean)">
            <summary>
            Creates a duplicate of the node.
            </summary>
            <param name="node">The node to duplicate. May not be <c>null</c>.</param>
            <param name="deep">true to recursively clone the subtree under the specified node, false to clone only the node itself.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CreateRootNavigator">
            <summary>
            Creates an XPathNavigator using the root of this document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.DescendantNodes">
            <summary>
            Gets all Descendant nodes for this node and each of child nodes
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.DescendantNodesAndSelf">
            <summary>
            Returns a collection of all descendant nodes of this element, in document order
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Descendants">
            <summary>
            Gets all Descendant nodes in enumerated list
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Descendants(System.String)">
            <summary>
            Get all descendant nodes with matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.DescendantsAndSelf">
            <summary>
            Returns a collection of all descendant nodes of this element, in document order
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.DescendantsAndSelf(System.String)">
            <summary>
            Gets all descendant nodes including this node
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Element(System.String)">
            <summary>
            Gets first generation child node matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Elements(System.String)">
            <summary>
            Gets matching first generation child nodes matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.GetAttributeValue(System.String,System.String)">
            <summary>
            Helper method to get the value of an attribute of this node. If the attribute is not found, the default value will be returned.
            </summary>
            <param name="name">The name of the attribute to get. May not be <c>null</c>.</param>
            <param name="def">The default value to return if not found.</param>
            <returns>The value of the attribute if found, the default value if not found.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Helper method to get the value of an attribute of this node. If the attribute is not found, the default value will be returned.
            </summary>
            <param name="name">The name of the attribute to get. May not be <c>null</c>.</param>
            <param name="def">The default value to return if not found.</param>
            <returns>The value of the attribute if found, the default value if not found.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.GetAttributeValue(System.String,System.Boolean)">
            <summary>
            Helper method to get the value of an attribute of this node. If the attribute is not found, the default value will be returned.
            </summary>
            <param name="name">The name of the attribute to get. May not be <c>null</c>.</param>
            <param name="def">The default value to return if not found.</param>
            <returns>The value of the attribute if found, the default value if not found.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.InsertAfter(HtmlAgilityPack.HtmlNode,HtmlAgilityPack.HtmlNode)">
            <summary>
            Inserts the specified node immediately after the specified reference node.
            </summary>
            <param name="newChild">The node to insert. May not be <c>null</c>.</param>
            <param name="refChild">The node that is the reference node. The newNode is placed after the refNode.</param>
            <returns>The node being inserted.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.InsertBefore(HtmlAgilityPack.HtmlNode,HtmlAgilityPack.HtmlNode)">
            <summary>
            Inserts the specified node immediately before the specified reference node.
            </summary>
            <param name="newChild">The node to insert. May not be <c>null</c>.</param>
            <param name="refChild">The node that is the reference node. The newChild is placed before this node.</param>
            <returns>The node being inserted.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.PrependChild(HtmlAgilityPack.HtmlNode)">
            <summary>
            Adds the specified node to the beginning of the list of children of this node.
            </summary>
            <param name="newChild">The node to add. May not be <c>null</c>.</param>
            <returns>The node added.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.PrependChildren(HtmlAgilityPack.HtmlNodeCollection)">
            <summary>
            Adds the specified node list to the beginning of the list of children of this node.
            </summary>
            <param name="newChildren">The node list to add. May not be <c>null</c>.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Remove">
            <summary>
            Removes node from parent collection
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.RemoveAll">
            <summary>
            Removes all the children and/or attributes of the current node.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.RemoveAllChildren">
            <summary>
            Removes all the children of the current node.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.RemoveChild(HtmlAgilityPack.HtmlNode)">
            <summary>
            Removes the specified child node.
            </summary>
            <param name="oldChild">The node being removed. May not be <c>null</c>.</param>
            <returns>The node removed.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.RemoveChild(HtmlAgilityPack.HtmlNode,System.Boolean)">
            <summary>
            Removes the specified child node.
            </summary>
            <param name="oldChild">The node being removed. May not be <c>null</c>.</param>
            <param name="keepGrandChildren">true to keep grand children of the node, false otherwise.</param>
            <returns>The node removed.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.ReplaceChild(HtmlAgilityPack.HtmlNode,HtmlAgilityPack.HtmlNode)">
            <summary>
            Replaces the child node oldChild with newChild node.
            </summary>
            <param name="newChild">The new node to put in the child list.</param>
            <param name="oldChild">The node being replaced in the list.</param>
            <returns>The node replaced.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.SelectNodes(System.String)">
            <summary>
            Selects a list of nodes matching the <see cref="P:HtmlAgilityPack.HtmlNode.XPath"/> expression.
            </summary>
            <param name="xpath">The XPath expression.</param>
            <returns>An <see cref="T:HtmlAgilityPack.HtmlNodeCollection"/> containing a collection of nodes matching the <see cref="P:HtmlAgilityPack.HtmlNode.XPath"/> query, or <c>null</c> if no node matched the XPath expression.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.SelectSingleNode(System.String)">
            <summary>
            Selects the first XmlNode that matches the XPath expression.
            </summary>
            <param name="xpath">The XPath expression. May not be null.</param>
            <returns>The first <see cref="T:HtmlAgilityPack.HtmlNode"/> that matches the XPath query or a null reference if no matching node was found.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.SetAttributeValue(System.String,System.String)">
            <summary>
            Helper method to set the value of an attribute of this node. If the attribute is not found, it will be created automatically.
            </summary>
            <param name="name">The name of the attribute to set. May not be null.</param>
            <param name="value">The value for the attribute.</param>
            <returns>The corresponding attribute instance.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteContentTo(System.IO.TextWriter)">
            <summary>
            Saves all the children of the node to the specified TextWriter.
            </summary>
            <param name="outText">The TextWriter to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteContentTo">
            <summary>
            Saves all the children of the node to a string.
            </summary>
            <returns>The saved string.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteTo(System.IO.TextWriter)">
            <summary>
            Saves the current node to the specified TextWriter.
            </summary>
            <param name="outText">The TextWriter to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Saves the current node to the specified XmlWriter.
            </summary>
            <param name="writer">The XmlWriter to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteTo">
            <summary>
            Saves the current node to a string.
            </summary>
            <returns>The saved string.</returns>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Attributes">
            <summary>
            Gets the collection of HTML attributes for this node. May not be null.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.ChildNodes">
            <summary>
            Gets all the children of the node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Closed">
            <summary>
            Gets a value indicating if this node has been closed or not.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.ClosingAttributes">
            <summary>
            Gets the collection of HTML attributes for the closing tag. May not be null.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.FirstChild">
            <summary>
            Gets the first child of the node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.HasAttributes">
            <summary>
            Gets a value indicating whether the current node has any attributes.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.HasChildNodes">
            <summary>
            Gets a value indicating whether this node has any child nodes.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.HasClosingAttributes">
            <summary>
            Gets a value indicating whether the current node has any attributes on the closing tag.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Id">
            <summary>
            Gets or sets the value of the 'id' HTML attribute. The document must have been parsed using the OptionUseIdAttribute set to true.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.InnerHtml">
            <summary>
            Gets or Sets the HTML between the start and end tags of the object.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.InnerText">
            <summary>
            Gets or Sets the text between the start and end tags of the object.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.LastChild">
            <summary>
            Gets the last child of the node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Line">
            <summary>
            Gets the line number of this node in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.LinePosition">
            <summary>
            Gets the column number of this node in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Name">
            <summary>
            Gets or sets this node's name.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.NextSibling">
            <summary>
            Gets the HTML node immediately following this element.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.NodeType">
            <summary>
            Gets the type of this node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.OriginalName">
            <summary>
            The original unaltered name of the tag
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.OuterHtml">
            <summary>
            Gets or Sets the object and its content in HTML.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.OwnerDocument">
            <summary>
            Gets the <see cref="T:HtmlAgilityPack.HtmlDocument"/> to which this node belongs.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.ParentNode">
            <summary>
            Gets the parent of this node (for nodes that can have parents).
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.PreviousSibling">
            <summary>
            Gets the node immediately preceding this node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.StreamPosition">
            <summary>
            Gets the stream position of this node in the document, relative to the start of the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.XPath">
            <summary>
            Gets a valid XPath string that points to this node
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlCommentNode.Comment">
            <summary>
            Gets or Sets the comment text of the node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlCommentNode.InnerHtml">
            <summary>
            Gets or Sets the HTML between the start and end tags of the object. In the case of a text node, it is equals to OuterHtml.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlCommentNode.OuterHtml">
            <summary>
            Gets or Sets the object and its content in HTML.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlDocument">
            <summary>
            Represents a complete HTML document.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionAddDebuggingAttributes">
            <summary>
            Adds Debugging attributes to node. Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionAutoCloseOnEnd">
            <summary>
            Defines if closing for non closed nodes must be done at the end or directly in the document.
            Setting this to true can actually change how browsers render the page. Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionCheckSyntax">
            <summary>
            Defines if non closed nodes will be checked at the end of parsing. Default is true.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionComputeChecksum">
            <summary>
            Defines if a checksum must be computed for the document while parsing. Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionDefaultStreamEncoding">
            <summary>
            Defines the default stream encoding to use. Default is System.Text.Encoding.Default.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionExtractErrorSourceText">
            <summary>
            Defines if source text must be extracted while parsing errors.
            If the document has a lot of errors, or cascading errors, parsing performance can be dramatically affected if set to true.
            Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionExtractErrorSourceTextMaxLength">
            <summary>
            Defines the maximum length of source text or parse errors. Default is 100.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionFixNestedTags">
            <summary>
            Defines if LI, TR, TH, TD tags must be partially fixed when nesting errors are detected. Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionOutputAsXml">
            <summary>
            Defines if output must conform to XML, instead of HTML.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionOutputOptimizeAttributeValues">
            <summary>
            Defines if attribute value output must be optimized (not bound with double quotes if it is possible). Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionOutputOriginalCase">
            <summary>
            Defines if name must be output with it's original case. Useful for asp.net tags and attributes
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionOutputUpperCase">
            <summary>
            Defines if name must be output in uppercase. Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionReadEncoding">
            <summary>
            Defines if declared encoding must be read from the document.
            Declared encoding is determined using the meta http-equiv="content-type" content="text/html;charset=XXXXX" html node.
            Default is true.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionStopperNodeName">
            <summary>
            Defines the name of a node that will throw the StopperNodeException when found as an end node. Default is null.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionUseIdAttribute">
            <summary>
            Defines if the 'id' attribute must be specifically used. Default is true.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionWriteEmptyNodes">
            <summary>
            Defines if empty nodes must be written as closed during output. Default is false.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.#ctor">
            <summary>
            Creates an instance of an HTML document.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateNavigator">
            <summary>
            Creates a new XPathNavigator object for navigating this HTML document.
            </summary>
            <returns>An XPathNavigator object. The XPathNavigator is positioned on the root of the document.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.GetXmlName(System.String)">
            <summary>
            Gets a valid XML name.
            </summary>
            <param name="name">Any text.</param>
            <returns>A string that is a valid XML name.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.HtmlEncode(System.String,HtmlAgilityPack.AttributeValueQuote)">
            <summary>
            Applies HTML encoding to a specified string.
            </summary>
            <param name="html">The input string to encode. May not be null.</param>
            <param name="attrQuote">Quotes used to encapsulate this string, used to escape characters properly.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.IsXmlCharData(System.Char)">
            <summary>
            Checks whether given <paramref name="c"/> is valid XML data character.
            </summary>
            <param name="c">Character to check.</param>
            <remarks>See <c>XmlCharType.bin</c> resource file within <c>System.Xml.dll</c>.
            5th bit of each byte is flag determining this validity of corresponding character.</remarks>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.IsWhiteSpace(System.Int32)">
            <summary>
            Determines if the specified character is considered as a whitespace character.
            </summary>
            <param name="c">The character to check.</param>
            <returns>true if if the specified character is considered as a whitespace character.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateAttribute(System.String)">
            <summary>
            Creates an HTML attribute with the specified name.
            </summary>
            <param name="name">The name of the attribute. May not be null.</param>
            <returns>The new HTML attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an HTML attribute with the specified name.
            </summary>
            <param name="name">The name of the attribute. May not be null.</param>
            <param name="value">The value of the attribute.</param>
            <returns>The new HTML attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateComment">
            <summary>
            Creates an HTML comment node.
            </summary>
            <returns>The new HTML comment node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateComment(System.String)">
            <summary>
            Creates an HTML comment node with the specified comment text.
            </summary>
            <param name="comment">The comment text. May not be null.</param>
            <returns>The new HTML comment node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateElement(System.String)">
            <summary>
            Creates an HTML element node with the specified name.
            </summary>
            <param name="name">The qualified name of the element. May not be null.</param>
            <returns>The new HTML node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateTextNode">
            <summary>
            Creates an HTML text node.
            </summary>
            <returns>The new HTML text node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateTextNode(System.String)">
            <summary>
            Creates an HTML text node with the specified text.
            </summary>
            <param name="text">The text of the node. May not be null.</param>
            <returns>The new HTML text node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncoding(System.IO.Stream)">
            <summary>
            Detects the encoding of an HTML stream.
            </summary>
            <param name="stream">The input stream. May not be null.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncoding(System.String)">
            <summary>
            Detects the encoding of an HTML file.
            </summary>
            <param name="path">Path for the file containing the HTML document to detect. May not be null.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncoding(System.IO.TextReader)">
            <summary>
            Detects the encoding of an HTML text provided on a TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML. May not be null.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncodingAndLoad(System.String)">
            <summary>
            Detects the encoding of an HTML document from a file first, and then loads the file.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncodingAndLoad(System.String,System.Boolean)">
            <summary>
            Detects the encoding of an HTML document from a file first, and then loads the file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="detectEncoding">true to detect encoding, false otherwise.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncodingHtml(System.String)">
            <summary>
            Detects the encoding of an HTML text.
            </summary>
            <param name="html">The input html text. May not be null.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.GetElementbyId(System.String)">
            <summary>
            Gets the HTML node with the specified 'id' attribute value.
            </summary>
            <param name="id">The attribute id to match. May not be null.</param>
            <returns>The HTML node with the matching id or null if not found.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String,System.Boolean)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String,System.Text.Encoding)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.TextReader)">
            <summary>
            Loads the HTML document from the specified TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML data into the document. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.LoadHtml(System.String)">
            <summary>
            Loads the HTML document from the specified string.
            </summary>
            <param name="html">String containing the HTML document to load. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.IO.Stream)">
            <summary>
            Saves the HTML document to the specified stream.
            </summary>
            <param name="outStream">The stream to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the HTML document to the specified stream.
            </summary>
            <param name="outStream">The stream to which you want to save. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.String)">
            <summary>
            Saves the mixed document to the specified file.
            </summary>
            <param name="filename">The location of the file where you want to save the document.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.String,System.Text.Encoding)">
            <summary>
            Saves the mixed document to the specified file.
            </summary>
            <param name="filename">The location of the file where you want to save the document. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.IO.StreamWriter)">
            <summary>
            Saves the HTML document to the specified StreamWriter.
            </summary>
            <param name="writer">The StreamWriter to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.IO.TextWriter)">
            <summary>
            Saves the HTML document to the specified TextWriter.
            </summary>
            <param name="writer">The TextWriter to which you want to save. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the HTML document to the specified XmlWriter.
            </summary>
            <param name="writer">The XmlWriter to which you want to save.</param>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.DeclaredEncoding">
            <summary>
            Gets the document's declared encoding.
            Declared encoding is determined using the meta http-equiv="content-type" content="text/html;charset=XXXXX" html node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.DocumentNode">
            <summary>
            Gets the root node of the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.Encoding">
            <summary>
            Gets the document's output encoding.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.ParseErrors">
            <summary>
            Gets a list of parse errors found in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.Remainder">
            <summary>
            Gets the remaining text.
            Will always be null if OptionStopperNodeName is null.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.RemainderOffset">
            <summary>
            Gets the offset of Remainder in the original Html text.
            If OptionStopperNodeName is null, this will return the length of the original Html text.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.StreamEncoding">
            <summary>
            Gets the document's stream encoding.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlElementFlag">
            <summary>
            Flags that describe the behavior of an Element node.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlElementFlag.CData">
            <summary>
            The node is a CDATA node.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlElementFlag.Empty">
            <summary>
            The node is empty. META or IMG are example of such nodes.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlElementFlag.Closed">
            <summary>
            The node will automatically be closed during parsing.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlElementFlag.CanOverlap">
            <summary>
            The node can overlap.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlEntity">
            <summary>
            A utility class to replace special characters by entities and vice-versa.
            Follows HTML 4.0 specification found at http://www.w3.org/TR/html4/sgml/entities.html
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.DeEntitize(System.String)">
            <summary>
            Replace known entities by characters.
            </summary>
            <param name="text">The source text.</param>
            <returns>The result text.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.Entitize(HtmlAgilityPack.HtmlNode)">
            <summary>
            Clone and entitize an HtmlNode. This will affect attribute values and nodes' text. It will also entitize all child nodes.
            </summary>
            <param name="node">The node to entitize.</param>
            <returns>An entitized cloned node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.Entitize(System.String)">
            <summary>
            Replace characters above 127 by entities.
            </summary>
            <param name="text">The source text.</param>
            <returns>The result text.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.Entitize(System.String,System.Boolean)">
            <summary>
            Replace characters above 127 by entities.
            </summary>
            <param name="text">The source text.</param>
            <param name="useNames">If set to false, the function will not use known entities name. Default is true.</param>
            <returns>The result text.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.Entitize(System.String,System.Boolean,System.Boolean)">
            <summary>
            Replace characters above 127 by entities.
            </summary>
            <param name="text">The source text.</param>
            <param name="useNames">If set to false, the function will not use known entities name. Default is true.</param>
            <param name="entitizeQuotAmpAndLtGt">If set to true, the [quote], [ampersand], [lower than] and [greather than] characters will be entitized.</param>
            <returns>The result text</returns>
        </member>
        <member name="P:HtmlAgilityPack.HtmlEntity.EntityName">
            <summary>
            A collection of entities indexed by name.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlEntity.EntityValue">
            <summary>
            A collection of entities indexed by value.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNodeCollection">
            <summary>
            Represents a combined list and collection of HTML nodes.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initialize the HtmlNodeCollection with the base parent node
            </summary>
            <param name="parentnode">The base node of the collection</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Add(HtmlAgilityPack.HtmlNode)">
            <summary>
            Add node to the collection
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Clear">
            <summary>
            Clears out the collection of HtmlNodes. Removes each nodes reference to parentnode, nextnode and prevnode
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Contains(HtmlAgilityPack.HtmlNode)">
            <summary>
            Gets existence of node in collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.CopyTo(HtmlAgilityPack.HtmlNode[],System.Int32)">
            <summary>
            Copy collection to array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.System#Collections#Generic#IEnumerable{HtmlAgilityPack#HtmlNode}#GetEnumerator">
            <summary>
            Get Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get Explicit Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.IndexOf(HtmlAgilityPack.HtmlNode)">
            <summary>
            Get index of node
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Insert(System.Int32,HtmlAgilityPack.HtmlNode)">
            <summary>
            Insert node at index
            </summary>
            <param name="index"></param>
            <param name="node"></param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Remove(HtmlAgilityPack.HtmlNode)">
            <summary>
            Remove node
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.RemoveAt(System.Int32)">
            <summary>
            Remove <see cref="T:HtmlAgilityPack.HtmlNode"/> at index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.FindFirst(HtmlAgilityPack.HtmlNodeCollection,System.String)">
            <summary>
            Get first instance of node in supplied collection
            </summary>
            <param name="items"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Append(HtmlAgilityPack.HtmlNode)">
            <summary>
            Add node to the end of the collection
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.FindFirst(System.String)">
            <summary>
            Get first instance of node with name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.GetNodeIndex(HtmlAgilityPack.HtmlNode)">
            <summary>
            Get index of node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Prepend(HtmlAgilityPack.HtmlNode)">
            <summary>
            Add node to the beginning of the collection
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Remove(System.Int32)">
            <summary>
            Remove node at index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Replace(System.Int32,HtmlAgilityPack.HtmlNode)">
            <summary>
            Replace node at index
            </summary>
            <param name="index"></param>
            <param name="node"></param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Descendants">
            <summary>
            Get all node descended from this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Descendants(System.String)">
            <summary>
            Get all node descended from this collection with matching name
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Elements">
            <summary>
            Gets all first generation elements in collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Elements(System.String)">
            <summary>
            Gets all first generation elements matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.Nodes">
            <summary>
            All first generation nodes in collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.Item(HtmlAgilityPack.HtmlNode)">
            <summary>
            Gets a given node from the list.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.Item(System.String)">
            <summary>
            Get node with tag name
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.Count">
            <summary>
            Gets the number of elements actually contained in the list.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.IsReadOnly">
            <summary>
            Is collection read only
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.Item(System.Int32)">
            <summary>
            Gets the node at the specified index.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNodeNavigator">
            <summary>
            Represents an HTML navigator on an HTML document seen as a data store.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML data into the document.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.Clone">
            <summary>
            Creates a new HtmlNavigator positioned at the same node as this HtmlNavigator.
            </summary>
            <returns>A new HtmlNavigator object positioned at the same node as the original HtmlNavigator.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of the HTML attribute with the specified LocalName and NamespaceURI.
            </summary>
            <param name="localName">The local name of the HTML attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute. Unsupported with the HtmlNavigator implementation.</param>
            <returns>The value of the specified HTML attribute. String.Empty or null if a matching attribute is not found or if the navigator is not positioned on an element node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.GetNamespace(System.String)">
            <summary>
            Returns the value of the namespace node corresponding to the specified local name.
            Always returns string.Empty for the HtmlNavigator implementation.
            </summary>
            <param name="name">The local name of the namespace node.</param>
            <returns>Always returns string.Empty for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            Determines whether the current HtmlNavigator is at the same position as the specified HtmlNavigator.
            </summary>
            <param name="other">The HtmlNavigator that you want to compare against.</param>
            <returns>true if the two navigators have the same position, otherwise, false.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            Moves to the same position as the specified HtmlNavigator.
            </summary>
            <param name="other">The HtmlNavigator positioned on the node that you want to move to.</param>
            <returns>true if successful, otherwise false. If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the HTML attribute with matching LocalName and NamespaceURI.
            </summary>
            <param name="localName">The local name of the HTML attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute. Unsupported with the HtmlNavigator implementation.</param>
            <returns>true if the HTML attribute is found, otherwise, false. If false, the position of the navigator does not change.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToFirst">
            <summary>
            Moves to the first sibling of the current node.
            </summary>
            <returns>true if the navigator is successful moving to the first sibling node, false if there is no first sibling or if the navigator is currently positioned on an attribute node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToFirstAttribute">
            <summary>
            Moves to the first HTML attribute.
            </summary>
            <returns>true if the navigator is successful moving to the first HTML attribute, otherwise, false.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToFirstChild">
            <summary>
            Moves to the first child of the current node.
            </summary>
            <returns>true if there is a first child node, otherwise false.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the first namespace node of the current element.
            Always returns false for the HtmlNavigator implementation.
            </summary>
            <param name="scope">An XPathNamespaceScope value describing the namespace scope.</param>
            <returns>Always returns false for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToId(System.String)">
            <summary>
            Moves to the node that has an attribute of type ID whose value matches the specified string.
            </summary>
            <param name="id">A string representing the ID value of the node to which you want to move. This argument does not need to be atomized.</param>
            <returns>true if the move was successful, otherwise false. If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToNamespace(System.String)">
            <summary>
            Moves the XPathNavigator to the namespace node with the specified local name. 
            Always returns false for the HtmlNavigator implementation.
            </summary>
            <param name="name">The local name of the namespace node.</param>
            <returns>Always returns false for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToNext">
            <summary>
            Moves to the next sibling of the current node.
            </summary>
            <returns>true if the navigator is successful moving to the next sibling node, false if there are no more siblings or if the navigator is currently positioned on an attribute node. If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToNextAttribute">
            <summary>
            Moves to the next HTML attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the next namespace node.
            Always returns falsefor the HtmlNavigator implementation.
            </summary>
            <param name="scope">An XPathNamespaceScope value describing the namespace scope.</param>
            <returns>Always returns false for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToParent">
            <summary>
            Moves to the parent of the current node.
            </summary>
            <returns>true if there is a parent node, otherwise false.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToPrevious">
            <summary>
            Moves to the previous sibling of the current node.
            </summary>
            <returns>true if the navigator is successful moving to the previous sibling node, false if there is no previous sibling or if the navigator is currently positioned on an attribute node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToRoot">
            <summary>
            Moves to the root node to which the current node belongs.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.BaseURI">
            <summary>
            Gets the base URI for the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.CurrentDocument">
            <summary>
            Gets the current HTML document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.CurrentNode">
            <summary>
            Gets the current HTML node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.HasAttributes">
            <summary>
            Gets a value indicating whether the current node has child nodes.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.HasChildren">
            <summary>
            Gets a value indicating whether the current node has child nodes.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.LocalName">
            <summary>
            Gets the name of the current HTML node without the namespace prefix.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.Name">
            <summary>
            Gets the qualified name of the current node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.NamespaceURI">
            <summary>
            Gets the namespace URI (as defined in the W3C Namespace Specification) of the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.NameTable">
            <summary>
            Gets the <see cref="T:System.Xml.XmlNameTable"/> associated with this implementation.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.NodeType">
            <summary>
            Gets the type of the current node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.Prefix">
            <summary>
            Gets the prefix associated with the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.Value">
            <summary>
            Gets the text value of the current node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.XmlLang">
            <summary>
            Gets the xml:lang scope for the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNodeType">
            <summary>
            Represents the type of a node.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Document">
            <summary>
            The root of a document.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Element">
            <summary>
            An HTML element.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Comment">
            <summary>
            An HTML comment.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Text">
            <summary>
            A text node is always the child of an element or a document node.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlParseError">
            <summary>
            Represents a parsing error found during document parsing.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.Code">
            <summary>
            Gets the type of error.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.Line">
            <summary>
            Gets the line number of this error in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.LinePosition">
            <summary>
            Gets the column number of this error in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.Reason">
            <summary>
            Gets a description for the error.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.SourceText">
            <summary>
            Gets the the full text of the line containing the error.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.StreamPosition">
            <summary>
            Gets the absolute stream position of this error in the document, relative to the start of the document.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlParseErrorCode">
            <summary>
            Represents the type of parsing error.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.TagNotClosed">
            <summary>
            A tag was not closed.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.TagNotOpened">
            <summary>
            A tag was not opened.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.CharsetMismatch">
            <summary>
            There is a charset mismatch between stream and declared (META) encoding.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.EndTagNotRequired">
            <summary>
            An end tag was not required.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.EndTagInvalidHere">
            <summary>
            An end tag is invalid at this position.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlTextNode">
            <summary>
            Represents an HTML text node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlTextNode.InnerHtml">
            <summary>
            Gets or Sets the HTML between the start and end tags of the object. In the case of a text node, it is equals to OuterHtml.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlTextNode.OuterHtml">
            <summary>
            Gets or Sets the object and its content in HTML.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlTextNode.Text">
            <summary>
            Gets or Sets the text of the node.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.XmlDomLibraryDescriptor">
            <summary>
            Describes the class library assembly content and configuration.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XmlDomLibraryDescriptor.Loaded(PHP.Core.PhpLibraryAttribute,PHP.Core.LibraryConfigStore)">
            <summary>
            Called by the Core after the library is loaded.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XmlDomLibraryDescriptor.ParseConfig(PHP.Core.ConfigContextBase,PHP.Core.PhpConfigurationContext,System.Xml.XmlNode)">
            <summary>
            Parses a configuration section belonging to the XmlDom library. 
            </summary>
            <param name="result">A configuration context.</param>
            <param name="context">The context of the configuration created by Phalanger Core.</param>
            <param name="section">A XML node containing the configuration or its part.</param>
            <returns>Updated configuration context.</returns>
        </member>
        <member name="M:PHP.Library.Xml.XmlDomLibraryDescriptor.CreateConfigContext">
            <summary>
            Creates empty library configuration context.
            </summary>
            <returns>An initialized configuration context. Should not be a <B>null</B> reference.</returns>
        </member>
        <member name="P:PHP.Library.Xml.XmlDomLibraryDescriptor.Singleton">
            <summary>
            Stores one and only instance of the class that is created when the assembly is loaded.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.LibXMLError">
            <summary>
            Contains various information about errors thrown by libxml.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.LibXMLError.#ctor(PHP.Core.ScriptContext,System.Boolean)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.LibXMLError.#ctor(PHP.Core.ScriptContext,PHP.Core.Reflection.DTypeDesc)">
            <summary>
            For internal purposes only.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_COMPACT">
            <summary>
            Activate small nodes allocation optimization. This may speed up your application without needing to change the code.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_DTDATTR">
            <summary>
            Default DTD attributes.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_DTDLOAD">
            <summary>
            Load the external subset
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_DTDVALID">
            <summary>
            Validate with the DTD.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_NOBLANKS">
            <summary>
            Remove blank nodes.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_NOCDATA">
            <summary>
            Merge CDATA as text nodes.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_NOEMPTYTAG">
            <summary>
            Expand empty tags (e.g. &lt;br/&gt; to &lt;br&gt;&lt;/br&gt;).
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_NOENT">
            <summary>
            Substitute entities.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_NOERROR">
            <summary>
            Suppress error reports.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_NONET">
            <summary>
            Disable network access when loading documents.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_NOWARNING">
            <summary>
            Suppress warning reports.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_NOXMLDECL">
            <summary>
            Drop the XML declaration when saving a document.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_NSCLEAN">
            <summary>
            Remove redundant namespaces declarations.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_PARSEHUGE">
            <summary>
            Sets XML_PARSE_HUGE flag, which relaxes any hardcoded limit from the parser.
            This affects limits like maximum depth of a document or the entity recursion, as well as limits of the size of text nodes.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_XINCLUDE">
            <summary>
            Implement XInclude substitution.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_ERR_ERROR">
            <summary>
            A recoverable error.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_ERR_FATAL">
            <summary>
            A fatal error.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_ERR_NONE">
            <summary>
            No errors.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_ERR_WARNING">
            <summary>
            A simple warning.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_VERSION">
            <summary>
            libxml version.
            </summary>
        </member>
        <member name="F:PHP.Library.Xml.PhpLibXml.LIBXML_DOTTED_VERSION">
            <summary>
            libxml version like 2.6.5 or 2.6.17.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.PhpLibXml.IssueXmlError(PHP.Library.Xml.PhpLibXml.XmlError)">
            <summary>
            Reports given <see cref="T:PHP.Library.Xml.PhpLibXml.XmlError"/> using internal error handler or forwards the error to common error handler.
            </summary>
            <param name="err">Error to report;</param>
        </member>
        <member name="M:PHP.Library.Xml.PhpLibXml.UseInternalErrors">
            <summary>
            Disable libxml errors and allow user to fetch error information as needed.
            </summary>
            <returns>This function returns the previous value of use_errors.</returns>
        </member>
        <member name="M:PHP.Library.Xml.PhpLibXml.UseInternalErrors(System.Boolean)">
            <summary>
            Disable libxml errors and allow user to fetch error information as needed.
            </summary>
            <param name="use_errors">Enable (TRUE) user error handling or disable (FALSE) user error handling. Disabling will also clear any existing libxml errors.</param>
            <returns>This function returns the previous value of <paramref name="use_errors"/>.</returns>
        </member>
        <member name="T:PHP.Library.Xml.PhpLibXml.XmlError">
            <summary>
            Represents internal XML error.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.PhpLibXml.XmlError.ToString">
            <summary>
            Returns string representation of the error.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.PhpLibXml.XmlError.GetPhpErrorObject(PHP.Core.ScriptContext)">
            <summary>
            Creates PHP <see cref="T:PHP.Library.stdClass"/> with properties from current <see cref="T:PHP.Library.Xml.PhpLibXml.XmlError"/> instance.
            </summary>
            <param name="context">Current <see cref="T:PHP.Core.ScriptContext"/>.</param>
            <returns>An instance of <see cref="T:PHP.Library.stdClass"/> with properties level, code, column, message, file, line.</returns>
        </member>
        <member name="T:PHP.Library.Xml.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.DocumentFragmentEmpty">
            <summary>
              Looks up a localized string similar to Document fragment is empty.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorAttributeInUse">
            <summary>
              Looks up a localized string similar to Inuse Attribute Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorBadHierarchy">
            <summary>
              Looks up a localized string similar to Hierarchy Request Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorDataNotAllowed">
            <summary>
              Looks up a localized string similar to No Data Allowed Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorDomModificationNotAllowed">
            <summary>
              Looks up a localized string similar to No Modification Allowed Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorIndexOutOfBounds">
            <summary>
              Looks up a localized string similar to Index Size Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorInvalidAccess">
            <summary>
              Looks up a localized string similar to Invalid Access Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorInvalidCharacter">
            <summary>
              Looks up a localized string similar to Invalid Character Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorInvalidState">
            <summary>
              Looks up a localized string similar to Invalid State Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorModificationNotAllowed">
            <summary>
              Looks up a localized string similar to Invalid Modification Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorNamespaceError">
            <summary>
              Looks up a localized string similar to Namespace Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorNotFound">
            <summary>
              Looks up a localized string similar to Not Found Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorNotSupported">
            <summary>
              Looks up a localized string similar to Not Supported Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorStringTooLong">
            <summary>
              Looks up a localized string similar to DOM String Size Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorSyntaxError">
            <summary>
              Looks up a localized string similar to Syntax Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorValidationError">
            <summary>
              Looks up a localized string similar to Validation Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ErrorWrongDocument">
            <summary>
              Looks up a localized string similar to Wrong Document Error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.ExsltSupportMissing">
            <summary>
              Looks up a localized string similar to EXSLT support requires the Mvp.Xml library version 2.0 (assembly version 2.0.2158.1055) available at http://www.xmlmvp.org/. Insert Mvp.Xml.dll to GAC in order to enable EXSLT support..
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.HandlerNotAllowed">
            <summary>
              Looks up a localized string similar to Not allowed to call handler &apos;{0}()&apos;.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.InvalidNodeType">
            <summary>
              Looks up a localized string similar to Invalid node type.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.InvalidParameterKey">
            <summary>
              Looks up a localized string similar to Invalid array key (must be string).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.InvalidStateError">
            <summary>
              Looks up a localized string similar to Invalid state error.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.NotYetImplemented">
            <summary>
              Looks up a localized string similar to Not yet implemented.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.PostLoadDtdUnsupported">
            <summary>
              Looks up a localized string similar to Post-load DTD schema validation is not supported.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.RelaxNGUnsupported">
            <summary>
              Looks up a localized string similar to RELAX NG schema validation is not supported.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.SimpleXmlAssignmentToDuplicateNodes">
            <summary>
              Looks up a localized string similar to Cannot assign to an array of nodes (duplicate subnodes of name &apos;{0}&apos; detected).
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.SimpleXmlImportNotAssociated">
            <summary>
              Looks up a localized string similar to The imported node must be associated with an XML document.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.SimpleXmlInvalidClassName">
            <summary>
              Looks up a localized string similar to Class &apos;{0}&apos; is not derived from SimpleXMLElement..
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.SimpleXmlInvalidNodeToImport">
            <summary>
              Looks up a localized string similar to Invalid node type. Only instances of DOMElement and DOMDocument (contaning the root element) can be imported.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.SimpleXmlNotImplemented">
            <summary>
              Looks up a localized string similar to Cooperation with the SimpleXML extension is not implemented.
            </summary>
        </member>
        <member name="P:PHP.Library.Xml.Resources.SimpleXmlUnsupportedWriteConversion">
            <summary>
              Looks up a localized string similar to It is not possible to assign complex types to nodes.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.SimpleXml">
            <summary>
            Contains implementation of SimpleXML functions.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXml.LoadFile(System.String,System.String,System.Int32)">
            <summary>
            Loads an XML file into an object.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="className">The name of the class whose instance should be returned (must extend
            <see cref="T:PHP.Library.Xml.SimpleXMLElement"/>).</param>
            <param name="options">Additional parameters (unsupported).</param>
            <returns>An instance of <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or of the class specified by
            <paramref name="className"/>, or <B>false</B> on error.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXml.LoadString(System.String,System.String,System.Int32)">
            <summary>
            Loads a string of XML into an object.
            </summary>
            <param name="data">The XML string.</param>
            <param name="className">The name of the class whose instance should be returned (must extend
            <see cref="T:PHP.Library.Xml.SimpleXMLElement"/>).</param>
            <param name="options">Additional parameters (unsupported).</param>
            <returns>An instance of <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or of the class specified by
            <paramref name="className"/>, or <B>false</B> on error.</returns>
        </member>
        <member name="M:PHP.Library.Xml.SimpleXml.ImportDom(PHP.Core.Reflection.DObject,System.String)">
            <summary>
            Converts a <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> object to a <see cref="T:PHP.Library.Xml.DOMElement"/>.
            </summary>
            <param name="domNode">A <see cref="T:PHP.Library.Xml.DOMNode"/>.</param>
            <param name="className">The name of the class whose instance should be returned (must extend
            <see cref="T:PHP.Library.Xml.SimpleXMLElement"/>).</param>
            <returns>An instance of <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> or of the class specified by
            <paramref name="className"/>, or <B>false</B> on error.</returns>
        </member>
        <member name="T:PHP.Library.Xml.NodeType">
            <summary>
            Enumerates possible DOM node types.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.AttributeType">
            <summary>
            Enumerates who-knows-what. (TODO)
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.XmlDom">
            <summary>
            Implements constants and functions.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XmlDom.ImportSimpleXml(PHP.Core.Reflection.DObject)">
            <summary>
            Converts a <see cref="T:PHP.Library.Xml.SimpleXMLElement"/> object to a <see cref="T:PHP.Library.Xml.DOMElement"/>.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.CloneType">
            <summary>
            Enumerates the clone behavior. (Where is this supposed to be used?)
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.XsltConvertor">
            <summary>
            Provides conversion routines between .NET and PHP representation of W3C data types.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XsltConvertor.DotNetToPhp(System.Object)">
            <summary>
            Converts a W3C .NET object to the corresponding W3C PHP object.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XsltConvertor.PhpToDotNet(System.Object)">
            <summary>
            Converts a W3C PHP object to the corresponding W3C .NET object.
            </summary>
        </member>
        <member name="M:PHP.Library.Xml.XsltConvertor.PhpToString(System.Object)">
            <summary>
            Converts a W3C PHP object to a corresponding string.
            </summary>
        </member>
        <member name="T:PHP.Library.Xml.XsltUserFunctionHandler">
            <summary>
            Handles PHP function invocations via <code>php:function</code> and <code>php:functionString</code>.
            </summary>
        </member>
    </members>
</doc>
