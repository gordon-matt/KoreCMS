@using Kore.Plugins.Widgets.View360
@model View360Block

<div id="block-content" class="row">
    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="form-group">
            @Html.LabelFor(m => m.Mode, new { @class = "control-label" })
            @Html.EnumDropDownListFor(m => m.Mode, new { @class = "form-control", data_bind = "value: mode" })
        </div>
    </div>
    <div class="col-xs-8 col-sm-8 col-md-8 col-lg-8">
        <div class="form-group">
            @Html.LabelFor(m => m.ImagesPattern, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.ImagesPattern, new { @class = "form-control", data_bind = "value: imagesPattern" })
        </div>
    </div>

    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.ImagesDirectory, new { @class = "control-label" })
            <div class="input-group">
                @Html.TextBoxFor(m => m.ImagesDirectory, new { @class = "form-control", data_bind = "value: imagesDirectory" })
                <span class="input-group-addon">
                    <a data-toggle="modal" href="javascript:void(0);" data-target="#imagesDirectoryModal">
                        <i class="kore-icon kore-icon-search"></i>
                    </a>
                </span>
            </div>
        </div>
    </div>
    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.FullSizeImagesDirectory, new { @class = "control-label" })
            <div class="input-group">
                @Html.TextBoxFor(m => m.FullSizeImagesDirectory, new { @class = "form-control", data_bind = "value: fullSizeImagesDirectory" })
                <span class="input-group-addon">
                    <a data-toggle="modal" href="javascript:void(0);" data-target="#fullSizeImagesDirectoryModal">
                        <i class="kore-icon kore-icon-search"></i>
                    </a>
                </span>
            </div>
        </div>
    </div>

    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("AutoRotate", new { data_bind = "checked: autoRotate" }) @T(LocalizableStrings.AutoRotate)
            </label>
        </div>
    </div>
    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="form-group">
            @Html.LabelFor(m => m.AutoRotateDirection, new { @class = "control-label" })
            @Html.EnumDropDownListFor(m => m.AutoRotateDirection, new { @class = "form-control", data_bind = "value: autoRotateDirection" })
        </div>
    </div>
    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="form-group">
            @Html.LabelFor(m => m.AutoRotateSpeed, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.AutoRotateSpeed, new { @class = "form-control", data_bind = "value: autoRotateSpeed" })
        </div>
    </div>

    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("AutoRotateStopOnMove", new { data_bind = "checked: autoRotateStopOnMove" }) @T(LocalizableStrings.AutoRotateStopOnMove)
            </label>
        </div>
    </div>
    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("LoadFullSizeImagesOnZoom", new { data_bind = "checked: loadFullSizeImagesOnZoom" }) @T(LocalizableStrings.LoadFullSizeImagesOnZoom)
            </label>
        </div>
    </div>
    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("LoadFullSizeImagesOnFullscreen", new { data_bind = "checked: loadFullSizeImagesOnFullscreen" }) @T(LocalizableStrings.LoadFullSizeImagesOnFullscreen)
            </label>
        </div>
    </div>

    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <div class="form-group">
            @Html.LabelFor(m => m.Width, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Width, new { @class = "form-control", data_bind = "value: width" })
        </div>
    </div>
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <div class="form-group">
            @Html.LabelFor(m => m.Height, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Height, new { @class = "form-control", data_bind = "value: height" })
        </div>
    </div>
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <div class="form-group">
            @Html.LabelFor(m => m.Rows, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Rows, new { @class = "form-control", data_bind = "value: rows" })
        </div>
    </div>
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <div class="form-group">
            @Html.LabelFor(m => m.Columns, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Columns, new { @class = "form-control", data_bind = "value: columns" })
        </div>
    </div>

    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="form-group">
            @Html.LabelFor(m => m.XAxisSensitivity, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.XAxisSensitivity, new { @class = "form-control", data_bind = "value: xAxisSensitivity" })
        </div>
    </div>
    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="form-group">
            @Html.LabelFor(m => m.YAxisSensitivity, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.YAxisSensitivity, new { @class = "form-control", data_bind = "value: yAxisSensitivity" })
        </div>
    </div>
    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="form-group">
            @Html.LabelFor(m => m.InertiaConstant, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.InertiaConstant, new { @class = "form-control", data_bind = "value: inertiaConstant" })
        </div>
    </div>



    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="form-group">
            @Html.LabelFor(m => m.ButtonWidth, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.ButtonWidth, new { @class = "form-control", data_bind = "value: buttonWidth" })
        </div>
    </div>
    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="form-group">
            @Html.LabelFor(m => m.ButtonHeight, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.ButtonHeight, new { @class = "form-control", data_bind = "value: buttonHeight" })
        </div>
    </div>
    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="form-group">
            @Html.LabelFor(m => m.ButtonMargin, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.ButtonMargin, new { @class = "form-control", data_bind = "value: buttonMargin" })
        </div>
    </div>

    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="form-group">
            @Html.LabelFor(m => m.TurnSpeed, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.TurnSpeed, new { @class = "form-control", data_bind = "value: turnSpeed" })
        </div>
    </div>
    <div class="col-xs-8 col-sm-8 col-md-8 col-lg-8">
        <div class="checkbox">
            <label>
                @Html.CheckBox("ShowButtons", new { data_bind = "checked: showButtons" }) @T(LocalizableStrings.ShowButtons)
            </label>
        </div>
    </div>

    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("ShowTool", new { data_bind = "checked: showTool" }) @T(LocalizableStrings.ShowTool)
            </label>
        </div>
    </div>
    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("ShowPlay", new { data_bind = "checked: showPlay" }) @T(LocalizableStrings.ShowPlay)
            </label>
        </div>
    </div>
    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("ShowPause", new { data_bind = "checked: showPause" }) @T(LocalizableStrings.ShowPause)
            </label>
        </div>
    </div>

    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("ShowZoom", new { data_bind = "checked: showZoom" }) @T(LocalizableStrings.ShowZoom)
            </label>
        </div>
    </div>
    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("ShowTurn", new { data_bind = "checked: showTurn" }) @T(LocalizableStrings.ShowTurn)
            </label>
        </div>
    </div>
    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("ShowFullscreen", new { data_bind = "checked: showFullscreen" }) @T(LocalizableStrings.ShowFullscreen)
            </label>
        </div>
    </div>

    <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
        <div class="checkbox">
            <label>
                @Html.CheckBox("DisplayLoader", new { data_bind = "checked: displayLoader" }) @T(LocalizableStrings.DisplayLoader)
            </label>
        </div>
    </div>
    <div class="col-xs-8 col-sm-8 col-md-8 col-lg-8">
        <div class="form-group">
            @Html.LabelFor(m => m.LoaderHolderClassName, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.LoaderHolderClassName, new { @class = "form-control", data_bind = "value: loaderHolderClassName" })
        </div>
    </div>

    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.LoadingTitle, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.LoadingTitle, new { @class = "form-control", data_bind = "value: loadingTitle" })
        </div>
    </div>
    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.LoadingSubtitle, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.LoadingSubtitle, new { @class = "form-control", data_bind = "value: loadingSubtitle" })
        </div>
    </div>

    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="form-group">
            @Html.LabelFor(m => m.LoadingMessage, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.LoadingMessage, new { @class = "form-control", data_bind = "value: loadingMessage" })
        </div>
    </div>

    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.LoaderModalBackground, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.LoaderModalBackground, new { @class = "form-control", data_bind = "value: loaderModalBackground" })
        </div>
    </div>
    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        <div class="form-group">
            @Html.LabelFor(m => m.LoaderModalOpacity, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.LoaderModalOpacity, new { @class = "form-control", data_bind = "value: loaderModalOpacity" })
        </div>
    </div>

    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <div class="form-group">
            @Html.LabelFor(m => m.LoaderCircleWidth, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.LoaderCircleWidth, new { @class = "form-control", data_bind = "value: loaderCircleWidth" })
        </div>
    </div>
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <div class="form-group">
            @Html.LabelFor(m => m.LoaderCircleLineWidth, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.LoaderCircleLineWidth, new { @class = "form-control", data_bind = "value: loaderCircleLineWidth" })
        </div>
    </div>
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <div class="form-group">
            @Html.LabelFor(m => m.LoaderCircleLineColor, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.LoaderCircleLineColor, new { @class = "form-control", data_bind = "value: loaderCircleLineColor" })
        </div>
    </div>
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <div class="form-group">
            @Html.LabelFor(m => m.LoaderCircleBackgroundColor, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.LoaderCircleBackgroundColor, new { @class = "form-control", data_bind = "value: loaderCircleBackgroundColor" })
        </div>
    </div>

    <style type="text/css">
        .modal-dialog {
            width: 80% !important;
        }
    </style>

    <div class="modal fade" id="imagesDirectoryModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Select Image</h4>
                </div>
                <div class="modal-body">
                    <iframe src="/filemanager/dialog.php?type=1&relative_url=1&fldr=&field_id=ImagesDirectory&ignore_last_position=1" frameborder="0" style="overflow:hidden;min-height:600px; height:100%;width:100%" height="100%" width="100%"></iframe>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="fullSizeImagesDirectoryModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">Select Image</h4>
                </div>
                <div class="modal-body">
                    <iframe src="/filemanager/dialog.php?type=1&relative_url=1&fldr=&field_id=FullSizeImagesDirectory&ignore_last_position=1" frameborder="0" style="overflow:hidden;min-height:600px; height:100%;width:100%" height="100%" width="100%"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $('#imagesDirectoryModal').on('hidden.bs.modal', function () {
            var url = $('#ImagesDirectory').val();
            var idx = url.indexOf("/Media");
            url = url.substring(idx);
            viewModel.imagesDirectory(url);
        })
        $('#fullSizeImagesDirectoryModal').on('hidden.bs.modal', function () {
            var url = $('#FullSizeImagesDirectory').val();
            var idx = url.indexOf("/Media");
            url = url.substring(idx);
            viewModel.fullSizeImagesDirectory(url);
        })
    });

    var contentBlockModel = (function () {
        var f = {};
        f.updateModel = function () {
            viewModel.mode = ko.observable(0);
            viewModel.imagesPattern = ko.observable("image-%COL-%ROW.jpg");
            viewModel.imagesDirectory = ko.observable("");
            viewModel.fullSizeImagesDirectory = ko.observable("");
            viewModel.autoRotate = ko.observable(false);
            viewModel.autoRotateDirection = ko.observable(1);
            viewModel.autoRotateSpeed = ko.observable(50);
            viewModel.autoRotateStopOnMove = ko.observable(true);
            viewModel.loadFullSizeImagesOnZoom = ko.observable(true);
            viewModel.loadFullSizeImagesOnFullscreen = ko.observable(true);
            viewModel.width = ko.observable(620);
            viewModel.height = ko.observable(350);
            viewModel.rows = ko.observable(1);
            viewModel.columns = ko.observable(36);
            viewModel.xAxisSensitivity = ko.observable(10);
            viewModel.yAxisSensitivity = ko.observable(40);
            viewModel.inertiaConstant = ko.observable(10);
            viewModel.buttonWidth = ko.observable(40);
            viewModel.buttonHeight = ko.observable(40);
            viewModel.buttonMargin = ko.observable(5);
            viewModel.turnSpeed = ko.observable(40);
            viewModel.showButtons = ko.observable(true);
            viewModel.showTool = ko.observable(true);
            viewModel.showPlay = ko.observable(true);
            viewModel.showPause = ko.observable(true);
            viewModel.showZoom = ko.observable(true);
            viewModel.showTurn = ko.observable(true);
            viewModel.showFullscreen = ko.observable(true);
            viewModel.displayLoader = ko.observable(true);
            viewModel.loaderHolderClassName = ko.observable("");
            viewModel.loadingTitle = ko.observable("");
            viewModel.loadingSubtitle = ko.observable("");
            viewModel.loadingMessage = ko.observable("");
            viewModel.loaderModalBackground = ko.observable("#FFF");
            viewModel.loaderModalOpacity = ko.observable(0.5);
            viewModel.loaderCircleWidth = ko.observable(70);
            viewModel.loaderCircleLineWidth = ko.observable(10);
            viewModel.loaderCircleLineColor = ko.observable("#555");
            viewModel.loaderCircleBackgroundColor = ko.observable("#FFF");

            var data = ko.mapping.fromJSON(viewModel.blockValues());

            if ((isFunction(data) && data()) || data) {
                if (data.Mode == undefined) {
                    // If this is not set, it means the contentBlock is new and we have nothing in blockValues
                    return;
                }
                viewModel.mode(data.Mode());
                viewModel.imagesPattern(data.ImagesPattern());
                viewModel.imagesDirectory(data.ImagesDirectory());
                viewModel.fullSizeImagesDirectory(data.FullSizeImagesDirectory());
                viewModel.autoRotate(data.AutoRotate());
                viewModel.autoRotateDirection(data.AutoRotateDirection());
                viewModel.autoRotateSpeed(data.AutoRotateSpeed());
                viewModel.autoRotateStopOnMove(data.AutoRotateStopOnMove());
                viewModel.loadFullSizeImagesOnZoom(data.LoadFullSizeImagesOnZoom());
                viewModel.loadFullSizeImagesOnFullscreen(data.LoadFullSizeImagesOnFullscreen());
                viewModel.width(data.Width());
                viewModel.height(data.Height());
                viewModel.rows(data.Rows());
                viewModel.columns(data.Columns());
                viewModel.xAxisSensitivity(data.XAxisSensitivity());
                viewModel.yAxisSensitivity(data.YAxisSensitivity());
                viewModel.inertiaConstant(data.InertiaConstant());
                viewModel.buttonWidth(data.ButtonWidth());
                viewModel.buttonHeight(data.ButtonHeight());
                viewModel.buttonMargin(data.ButtonMargin());
                viewModel.turnSpeed(data.TurnSpeed());
                viewModel.showButtons(data.ShowButtons());
                viewModel.showTool(data.ShowTool());
                viewModel.showPlay(data.ShowPlay());
                viewModel.showPause(data.ShowPause());
                viewModel.showZoom(data.ShowZoom());
                viewModel.showTurn(data.ShowTurn());
                viewModel.showFullscreen(data.ShowFullscreen());
                viewModel.displayLoader(data.DisplayLoader());
                viewModel.loaderHolderClassName(data.LoaderHolderClassName());
                viewModel.loadingTitle(data.LoadingTitle());
                viewModel.loadingSubtitle(data.LoadingSubtitle());
                viewModel.loadingMessage(data.LoadingMessage());
                viewModel.loaderModalBackground(data.LoaderModalBackground());
                viewModel.loaderModalOpacity(data.LoaderModalOpacity());
                viewModel.loaderCircleWidth(data.LoaderCircleWidth());
                viewModel.loaderCircleLineWidth(data.LoaderCircleLineWidth());
                viewModel.loaderCircleLineColor(data.LoaderCircleLineColor());
                viewModel.loaderCircleBackgroundColor(data.LoaderCircleBackgroundColor());
            }
        };
        f.cleanUp = function () {
            delete viewModel.mode;
            delete viewModel.imagesPattern;
            delete viewModel.imagesDirectory;
            delete viewModel.fullSizeImagesDirectory;
            delete viewModel.autoRotate;
            delete viewModel.autoRotateDirection;
            delete viewModel.autoRotateSpeed;
            delete viewModel.autoRotateStopOnMove;
            delete viewModel.loadFullSizeImagesOnZoom;
            delete viewModel.loadFullSizeImagesOnFullscreen;
            delete viewModel.width;
            delete viewModel.height;
            delete viewModel.rows;
            delete viewModel.columns;
            delete viewModel.xAxisSensitivity;
            delete viewModel.yAxisSensitivity;
            delete viewModel.inertiaConstant;
            delete viewModel.buttonWidth;
            delete viewModel.buttonHeight;
            delete viewModel.buttonMargin;
            delete viewModel.turnSpeed;
            delete viewModel.showButtons;
            delete viewModel.showTool;
            delete viewModel.showPlay;
            delete viewModel.showPause;
            delete viewModel.showZoom;
            delete viewModel.showTurn;
            delete viewModel.showFullscreen;
            delete viewModel.displayLoader;
            delete viewModel.loaderHolderClassName;
            delete viewModel.loadingTitle;
            delete viewModel.loadingSubtitle;
            delete viewModel.loadingMessage;
            delete viewModel.loaderModalBackground;
            delete viewModel.loaderModalOpacity;
            delete viewModel.loaderCircleWidth;
            delete viewModel.loaderCircleLineWidth;
            delete viewModel.loaderCircleLineColor;
            delete viewModel.loaderCircleBackgroundColor;
        };
        f.onBeforeSave = function () {
            var data = {
                Mode: viewModel.mode(),
                ImagesPattern: viewModel.imagesPattern(),
                ImagesDirectory: viewModel.imagesDirectory(),
                FullSizeImagesDirectory: viewModel.fullSizeImagesDirectory(),
                AutoRotate: viewModel.autoRotate(),
                AutoRotateDirection: viewModel.autoRotateDirection(),
                AutoRotateSpeed: viewModel.autoRotateSpeed(),
                AutoRotateStopOnMove: viewModel.autoRotateStopOnMove(),
                LoadFullSizeImagesOnZoom: viewModel.loadFullSizeImagesOnZoom(),
                LoadFullSizeImagesOnFullscreen: viewModel.loadFullSizeImagesOnFullscreen(),
                Width: viewModel.width(),
                Height: viewModel.height(),
                Rows: viewModel.rows(),
                Columns: viewModel.columns(),
                XAxisSensitivity: viewModel.xAxisSensitivity(),
                YAxisSensitivity: viewModel.yAxisSensitivity(),
                InertiaConstant: viewModel.inertiaConstant(),
                ButtonWidth: viewModel.buttonWidth(),
                ButtonHeight: viewModel.buttonHeight(),
                ButtonMargin: viewModel.buttonMargin(),
                TurnSpeed: viewModel.turnSpeed(),
                ShowButtons: viewModel.showButtons(),
                ShowTool: viewModel.showTool(),
                ShowPlay: viewModel.showPlay(),
                ShowPause: viewModel.showPause(),
                ShowZoom: viewModel.showZoom(),
                ShowTurn: viewModel.showTurn(),
                ShowFullscreen: viewModel.showFullscreen(),
                DisplayLoader: viewModel.displayLoader(),
                LoaderHolderClassName: viewModel.loaderHolderClassName(),
                LoadingTitle: viewModel.loadingTitle(),
                LoadingSubtitle: viewModel.loadingSubtitle(),
                LoadingMessage: viewModel.loadingMessage(),
                LoaderModalBackground: viewModel.loaderModalBackground(),
                LoaderModalOpacity: viewModel.loaderModalOpacity(),
                LoaderCircleWidth: viewModel.loaderCircleWidth(),
                LoaderCircleLineWidth: viewModel.loaderCircleLineWidth(),
                LoaderCircleLineColor: viewModel.loaderCircleLineColor(),
                LoaderCircleBackgroundColor: viewModel.loaderCircleBackgroundColor()
            };

            viewModel.blockValues(ko.mapping.toJSON(data));
        };
        return f;
    })();
</script>