@using Kore.Web

@{
    Layout = KoreWebConstants.DefaultAdminLayoutPath;
    
    Style.IncludeBundle("kendo-ui");

    Script.IncludeBundle("kendo-ui");
    Script.IncludeBundle("knockout");
    Script.IncludeBundle("knockout-mapping");
    Script.IncludeBundle("notify");

    string rtlClass = IsRightToLeft ? "k-rtl" : string.Empty;
}

<div id="grid-section" class="row">
    <div class="col-md-12 @rtlClass">
        <div id="Grid"></div>
    </div>
</div>

<div id="form-section" class="row" style="display:none">
    <article class="col-sm-12 col-md-12">
        @*HTML injected here*@
        <div id="settings-details"></div>
        <div class="col-sm-12 col-md-12">
            <div class="form-group pull-right">
                <button type="button" class="btn btn-default" data-bind="click: cancel">@T(KoreWebLocalizableStrings.General.Cancel)</button>
                <button type="button" class="btn btn-primary" data-bind="click: save"><i class="kore-icon kore-icon-save"></i> @T(KoreWebLocalizableStrings.General.Save)</button>
            </div>
        </div>
    </article>
</div>

@section scripts {
    <script type="text/javascript">
        'use strict'

        var gridPageSize = @SiteSettings.DefaultGridPageSize;
        var translations = {
            Edit: '@T(KoreWebLocalizableStrings.General.Edit).Text',
            GetRecordError: '@T(KoreWebLocalizableStrings.General.GetRecordError).Text',
            UpdateRecordError: '@T(KoreWebLocalizableStrings.General.UpdateRecordError).Text',
            UpdateRecordSuccess: '@T(KoreWebLocalizableStrings.General.UpdateRecordSuccess).Text',

            Columns: {
                Name: '@T(KoreWebLocalizableStrings.Settings.Model.Name).Text'
            }
        }

        var emptyGuid = '00000000-0000-0000-0000-000000000000';

        var currentSection = $("#grid-section");

        function switchSection(section) {
            currentSection.hide("fast");
            section.show("fast");
            currentSection = section;
        };

        function escapeRegExp(string) {
            return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
        }

        function replaceAll(string, find, replace) {
            return string.replace(new RegExp(escapeRegExp(find), 'g'), replace);
        }

        $(document).ready(function () {
            jQuery.validator.setDefaults({
                highlight: function (element) {
                    $(element).closest('.form-group').addClass('has-error');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-group').removeClass('has-error');
                },
                errorElement: 'span',
                errorClass: 'help-block',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.insertAfter(element.parent());
                    } else {
                        error.insertAfter(element);
                    }
                }
            });
        });

        var ViewModel = function () {
            var self = this;

            self.id = ko.observable(emptyGuid);
            self.name = ko.observable("");
            self.type = ko.observable("");
            self.value = ko.observable(null);

            self.edit = function (id) {
                $.ajax({
                    url: "/odata/kore/web/SettingsApi(guid'" + id + "')",
                    type: "GET",
                    dataType: "json",
                    async: false
                })
                .done(function (json) {
                    self.id(json.Id);
                    self.name(json.Name);
                    self.type(json.Type);
                    self.value(json.Value);

                    $.ajax({
                        url: "/admin/configuration/settings/get-editor-ui/" + replaceAll(self.type(), ".", "-"),
                        type: "GET",
                        dataType: "json",
                        async: false
                    })
                    .done(function (json) {

                        // Clean up from previously injected html/scripts
                        if (typeof cleanUp == 'function') {
                            cleanUp();
                        }

                        // Remove Old Scripts
                        var oldScripts = $('script[data-settings-script="true"]');

                        if (oldScripts.length > 0) {
                            $.each(oldScripts, function () {
                                $(this).remove();
                            });
                        }

                        var elementToBind = $("#form-section")[0];
                        ko.cleanNode(elementToBind);

                        var result = $(json.Content);

                        // Add new HTML
                        var content = $(result.filter('#settings-content')[0]);
                        var details = $('<div>').append(content.clone()).html();
                        $("#settings-details").html(details);

                        // Add new Scripts
                        var scripts = result.filter('script');

                        $.each(scripts, function () {
                            var script = $(this);
                            script.attr("data-settings-script", "true");//for some reason, .data("block-script", "true") doesn't work here
                            script.appendTo('body');
                        });

                        // Update Bindings
                        // Ensure the function exists before calling it...
                        if (typeof updateModel == 'function') {
                            var data = ko.toJS(ko.mapping.fromJSON(self.value()));
                            updateModel(data);
                            ko.applyBindings(viewModel, elementToBind);
                        }

                        //self.validator.resetForm();
                        switchSection($("#form-section"));
                    })
                    .fail(function (jqXHR, textStatus, errorThrown) {
                        $.notify(translations.GetRecordError, "error");
                        console.log(textStatus + ': ' + errorThrown);
                    });
                })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    $.notify(translations.GetRecordError, "error");
                    console.log(textStatus + ': ' + errorThrown);
                });
            };

            self.save = function () {
                // ensure the function exists before calling it...
                if (typeof onBeforeSave == 'function') {
                    onBeforeSave();
                }

                var record = {
                    Id: self.id(),
                    Name: self.name(),
                    Type: self.type(),
                    Value: self.value()
                };

                $.ajax({
                    url: "/odata/kore/web/SettingsApi(guid'" + self.id() + "')",
                    type: "PUT",
                    crossDomain: true,
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(record),
                    dataType: "json",
                    async: false,
                    //xhrFields: {
                    //    withCredentials: true
                    //}
                })
                .done(function (json) {
                    switchSection($("#grid-section"));

                    $.notify(translations.UpdateRecordSuccess, "success");
                })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    $.notify(translations.UpdateRecordError + ": " + jqXHR.responseText || textStatus, "error");
                    console.log(textStatus + ': ' + errorThrown);
                });
            };

            self.cancel = function () {
                switchSection($("#grid-section"));
            };
        };

        var viewModel;
        $(document).ready(function () {
            viewModel = new ViewModel();
            ko.applyBindings(viewModel);

            $("#Grid").kendoGrid({
                data: null,
                dataSource: {
                    type: "odata",
                    transport: {
                        read: {
                            url: "/odata/kore/web/SettingsApi",
                            dataType: "json"
                        }
                    },
                    schema: {
                        data: function (data) {
                            return data.value;
                        },
                        total: function (data) {
                            return data["odata.count"];
                        },
                        model: {
                            fields: {
                                Name: { type: "string" }
                            }
                        }
                    },
                    pageSize: gridPageSize,
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true,
                    sort: { field: "Name", dir: "asc" }
                },
                filterable: true,
                sortable: {
                    allowUnsort: false
                },
                pageable: {
                    refresh: true
                },
                scrollable: false,
                columns: [{
                    field: "Name",
                    title: translations.Columns.Name,
                    filterable: true
                }, {
                    field: "Id",
                    title: " ",
                    template: '<div class="btn-group"><a onclick="viewModel.edit(\'#=Id#\')" class="btn btn-default btn-xs">' + translations.Edit + '</a></div>',
                    attributes: { "class": "text-center" },
                    filterable: false,
                    width: 120
                }]
            });
        });
</script>
}